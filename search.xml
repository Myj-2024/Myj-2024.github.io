<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>cmd备忘清单</title>
      <link href="/2024/11/24/Cmd%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/Cmd%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="cmd-备忘清单"><a href="#cmd-备忘清单" class="headerlink" title="cmd 备忘清单"></a>cmd 备忘清单</h1><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="磁盘操作"><a href="#磁盘操作" class="headerlink" title="磁盘操作"></a>磁盘操作</h3><h4 id="format-参数"><a href="#format-参数" class="headerlink" title="format 参数"></a>format 参数</h4><div class="table-container"><table><thead><tr><th><code>/q</code></th><th>快速格式化</th></tr></thead><tbody><tr><td><code>/u</code></td><td>不可恢复</td></tr><tr><td><code>/autotest</code></td><td>不提示</td></tr><tr><td><code>/s</code></td><td>创建 MS-DOS 引导盘</td></tr></tbody></table></div><h4 id="format-示例"><a href="#format-示例" class="headerlink" title="format 示例"></a>format 示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">format c: /q /u /autotest</span><br></pre></td></tr></table></figure><h3 id="目录操作-一"><a href="#目录操作-一" class="headerlink" title="目录操作(一)"></a>目录操作(一)</h3><h4 id="dir-参数"><a href="#dir-参数" class="headerlink" title="dir 参数"></a>dir 参数</h4><div class="table-container"><table><thead><tr><th><code>/s</code></th><th>查找子目录</th></tr></thead><tbody><tr><td><code>/w</code></td><td>只显示文件名</td></tr><tr><td><code>/p</code></td><td>分页</td></tr><tr><td><code>/a</code></td><td>显示隐藏文件</td></tr></tbody></table></div><h4 id="dir-示例"><a href="#dir-示例" class="headerlink" title="dir 示例"></a>dir 示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir format.exe /s</span><br></pre></td></tr></table></figure><p>查找该盘的 <code>format.exe</code> 文件并报告位置</p><h3 id="目录操作-二"><a href="#目录操作-二" class="headerlink" title="目录操作(二)"></a>目录操作(二)</h3><h4 id="cd-参数"><a href="#cd-参数" class="headerlink" title="cd 参数"></a>cd 参数</h4><p>可以使用相对目录或绝对目录</p><div class="table-container"><table><thead><tr><th><code>cd …</code></th><th>进入上一个文件夹</th></tr></thead><tbody><tr><td><code>cd \</code></td><td>返回根目录</td></tr><tr><td><code>cd c:\windows</code></td><td>进入 <code>c:\windows</code> 文件夹</td></tr></tbody></table></div><h4 id="md-MKDIR-参数"><a href="#md-MKDIR-参数" class="headerlink" title="md(MKDIR) 参数"></a>md(MKDIR) 参数</h4><div class="table-container"><table><thead><tr><th><code>md HELLOWORLD</code></th><th>创建 <code>HELLOWORLD</code> 目录</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="rd-RMDIR-参数"><a href="#rd-RMDIR-参数" class="headerlink" title="rd (RMDIR) 参数"></a>rd (RMDIR) 参数</h4><div class="table-container"><table><thead><tr><th><code>rd HELLOWORLD</code></th><th>删除 <code>HELLOWORLD</code> 目录</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="rmdir-参数"><a href="#rmdir-参数" class="headerlink" title="rmdir 参数"></a>rmdir 参数</h4><div class="table-container"><table><thead><tr><th><code>rmdir c:\qqdownload/s</code></th><th>删除 <code>C</code> 盘的 <code>qqdownload</code> 目录</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="del-参数"><a href="#del-参数" class="headerlink" title="del 参数"></a>del 参数</h4><div class="table-container"><table><thead><tr><th><code>/f</code></th><th>删除只读文件</th></tr></thead><tbody><tr><td><code>/s</code></td><td>删除该目录及其下的所有内容</td></tr><tr><td><code>/q</code></td><td>删除前不确认</td></tr></tbody></table></div><h4 id="del-示例"><a href="#del-示例" class="headerlink" title="del 示例"></a>del 示例</h4><div class="table-container"><table><thead><tr><th><code>del c:\del /s /q</code></th><th>自动删除 c 盘的 del 目录</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="copy-参数"><a href="#copy-参数" class="headerlink" title="copy 参数"></a>copy 参数</h4><div class="table-container"><table><thead><tr><th><code>copy d:\pwin98*.* c:\presetup</code></th><th>将d盘的pwin98的所有文件复制到 c 盘的 presetup 下</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="attrib-参数"><a href="#attrib-参数" class="headerlink" title="attrib 参数"></a>attrib 参数</h4><p>attrib命令可以列出或修改磁盘上文件的属性， 文件属性包括文档（A）、只读、隐藏(H)、系统(S)</p><h4 id="attrib-示例"><a href="#attrib-示例" class="headerlink" title="attrib 示例"></a>attrib 示例</h4><div class="table-container"><table><thead><tr><th><code>attrib -h -r -s io.sys</code></th><th>io.sys文件的只读、隐藏、系统属性去掉</th></tr></thead><tbody><tr><td><code>attrib +h +r +s autoexec.bat</code></td><td>为自动批处理文件增加以上属性</td></tr></tbody></table></div><h3 id="net-命令-一"><a href="#net-命令-一" class="headerlink" title="net 命令(一)"></a>net 命令(一)</h3><div class="table-container"><table><thead><tr><th><code>net use ipipc$ &quot; &quot; /user:&quot; &quot;</code></th><th>建立IPC空链接</th></tr></thead><tbody><tr><td><code>net use ipipc$ &quot; &quot; /user:&quot; &quot;</code></td><td>建立IPC空链接</td></tr><tr><td><code>net use ipipc$ “密码” /user:&quot;</code></td><td>用户名” 建立IPC非空链接</td></tr><tr><td><code>net use h: ipc$ “密码” /user:“用户名”</code></td><td>直接登陆后映射对方C：到本地为H:</td></tr><tr><td><code>net use h: ipc$</code></td><td>登陆后映射对方C：到本地为H:</td></tr><tr><td><code>net use ipipc$ /del</code></td><td>删除IPC链接</td></tr><tr><td><code>net use h: /del</code></td><td>删除映射对方到本地的为H:的映射</td></tr><tr><td><code>net user 用户名　密码　/add</code></td><td>建立用户</td></tr><tr><td><code>net user guest /active:yes</code></td><td>激活guest用户</td></tr><tr><td><code>net user</code></td><td>查看有哪些用户</td></tr><tr><td><code>net user 帐户名</code></td><td>查看帐户的属性</td></tr><tr><td><code>net localgroup administrators 用户名 /add</code></td><td>把“用户”添加到管理员中使其具有管理员权限</td></tr></tbody></table></div><h3 id="net-命令-二"><a href="#net-命令-二" class="headerlink" title="net 命令(二)"></a>net 命令(二)</h3><div class="table-container"><table><thead><tr><th><code>net start</code></th><th>查看开启了哪些服务</th></tr></thead><tbody><tr><td><code>net start 服务名</code></td><td>开启服务；(如:net start telnet， net start schedule)</td></tr><tr><td><code>net stop 服务名</code></td><td>停止某服务</td></tr><tr><td><code>net time 目标ip</code></td><td>查看对方时间</td></tr><tr><td><code>net view</code></td><td>查看本地局域网内开启了哪些共享</td></tr><tr><td><code>net view ip</code></td><td>查看对方局域网内开启了哪些共享</td></tr><tr><td><code>net config</code></td><td>显示系统网络设置</td></tr><tr><td><code>net pause 服务名</code></td><td>暂停某服务</td></tr><tr><td><code>net send ip “文本信息”</code></td><td>向对方发信息</td></tr><tr><td><code>net ver</code></td><td>局域网内正在使用的网络连接类型和信息</td></tr><tr><td><code>net share</code></td><td>查看本地开启的共享</td></tr><tr><td><code>net share ipc$ /del</code></td><td>删除ipc$共享</td></tr><tr><td><code>net share c$ /del</code></td><td>删除C：共享</td></tr><tr><td><code>net user guest 12345</code></td><td>用guest用户登陆后用将密码改为12345</td></tr><tr><td><code>net password 密码</code></td><td>更改系统登陆密码</td></tr></tbody></table></div><h3 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h3><div class="table-container"><table><thead><tr><th><code>-d</code></th><th>使用 Socket 的 SO_DEBUG 功能</th></tr></thead><tbody><tr><td><code>-c&lt;完成次数&gt;</code></td><td>设置完成要求回应的次数</td></tr><tr><td><code>-f</code></td><td>极限检测</td></tr><tr><td><code>-i&lt;间隔秒数&gt;</code></td><td>指定收发信息的间隔时间</td></tr><tr><td><code>-I&lt;网络界面&gt;</code></td><td>使用指定的网络界面送出数据包</td></tr><tr><td><code>-l&lt;前置载入&gt;</code></td><td>设置在送出要求信息之前，先行发出的数据包</td></tr><tr><td><code>-n</code></td><td>只输出数值</td></tr><tr><td><code>-p&lt;范本样式&gt;</code></td><td>设置填满数据包的范本样式</td></tr><tr><td><code>-q</code></td><td>不显示指令执行过程，开头和结尾的相关信息除外</td></tr><tr><td><code>-r</code></td><td>忽略普通的Routing Table，直接将数据包送到远端主机上</td></tr><tr><td><code>-R</code></td><td>记录路由过程</td></tr><tr><td><code>-s&lt;数据包大小&gt;</code></td><td>设置数据包的大小</td></tr><tr><td><code>-t&lt;存活数值&gt;</code></td><td>设置存活数值TTL的大小</td></tr><tr><td><code>-v</code></td><td>详细显示指令的执行过程</td></tr></tbody></table></div><h3 id="tracert-命令"><a href="#tracert-命令" class="headerlink" title="tracert 命令"></a>tracert 命令</h3><div class="table-container"><table><thead><tr><th><code>-d</code></th><th>不将地址解析成主机名</th></tr></thead><tbody><tr><td><code>-h maximum_hops</code></td><td>搜索目标的最大跃点数，默认30</td></tr><tr><td><code>-w timeout</code></td><td>等待每个回复的超时时间(以毫秒为单位)</td></tr><tr><td><code>-R</code></td><td>跟踪往返行程路径(仅适用于 IPv6)</td></tr><tr><td><code>-S srcaddr</code></td><td>要使用的源地址(仅适用于 IPv6)</td></tr><tr><td><code>-4</code></td><td>强制使用 IPv4</td></tr><tr><td><code>-6</code></td><td>强制使用 IPv6</td></tr></tbody></table></div><h3 id="netstat-命令"><a href="#netstat-命令" class="headerlink" title="netstat 命令"></a>netstat 命令</h3><div class="table-container"><table><thead><tr><th><code>netstat -a</code></th><th>查看开启了哪些端口,常用netstat -an</th></tr></thead><tbody><tr><td><code>netstat -n</code></td><td>查看端口的网络连接情况，常用netstat -an</td></tr><tr><td><code>netstat -v</code></td><td>查看正在进行的工作</td></tr><tr><td><code>netstat -p 协议名</code></td><td>例：netstat -p tcq/ip 查看某协议使用情况</td></tr><tr><td><code>netstat -s</code></td><td>查看正在使用的所有协议使用情况</td></tr><tr><td><code>nbtstat -A ip</code></td><td>对方136到139其中一个端口开了的话，就可查看对方最近登陆的用户名</td></tr></tbody></table></div><h2 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h2><h3 id="启动程序-一"><a href="#启动程序-一" class="headerlink" title="启动程序(一)"></a>启动程序(一)</h3><div class="table-container"><table><thead><tr><th><code>appwiz.cpl</code></th><th>程序和功能</th></tr></thead><tbody><tr><td><code>calc</code></td><td>启动计算器</td></tr><tr><td><code>certmgr.msc</code></td><td>证书管理实用程序</td></tr><tr><td><code>charmap</code></td><td>启动字符映射表</td></tr><tr><td><code>chkdsk.exe</code></td><td>Chkdsk磁盘检查（管理员身份运行命令提示符）</td></tr><tr><td><code>cleanmgr</code></td><td>打开磁盘清理工具</td></tr><tr><td><code>cliconfg</code></td><td>SQL SERVER 客户端网络实用工具</td></tr><tr><td><code>cmstp</code></td><td>连接管理器配置文件安装程序</td></tr><tr><td><code>compmgmt.msc</code></td><td>计算机管理</td></tr><tr><td><code>omexp.msc</code></td><td>打开系统组件服务</td></tr><tr><td><code>control</code></td><td>控制面版</td></tr></tbody></table></div><h3 id="启动程序-二"><a href="#启动程序-二" class="headerlink" title="启动程序(二)"></a>启动程序(二)</h3><div class="table-container"><table><thead><tr><th><code>dcomcnfg</code></th><th>打开系统组件服务</th></tr></thead><tbody><tr><td><code>devmgmt.msc</code></td><td>设备管理器</td></tr><tr><td><code>diskmgmt.msc</code></td><td>磁盘管理</td></tr><tr><td><code>eventvwr</code></td><td>事件查看器</td></tr><tr><td><code>explorer</code></td><td>打开资源管理器</td></tr><tr><td><code>Firewall.cpl</code></td><td>Windows防火墙</td></tr><tr><td><code>fsmgmt.msc</code></td><td>共享文件夹管理器</td></tr><tr><td><code>hdwwiz.cpl</code></td><td>设备管理器</td></tr><tr><td><code>lusrmgr.msc</code></td><td>本地用户和组</td></tr><tr><td><code>Msra</code></td><td>远程协助</td></tr><tr><td><code>mstsc</code></td><td>远程桌面连接</td></tr><tr><td><code>notepad</code></td><td>打开记事本</td></tr><tr><td><code>shrpubw</code></td><td>创建共享文件夹</td></tr></tbody></table></div><h3 id="自动关机"><a href="#自动关机" class="headerlink" title="自动关机"></a>自动关机</h3><div class="table-container"><table><thead><tr><th><code>shutdown -s -t 600</code></th><th>表示600秒后自动关机</th></tr></thead><tbody><tr><td><code>shutdown -a</code></td><td>可取消定时关机</td></tr><tr><td><code>shutdown -r -t 600</code></td><td>表示600秒后自动重启</td></tr><tr><td><code>rundll32 user32.dll, LockWorkStation</code></td><td>表示锁定计算机</td></tr></tbody></table></div><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="一"><a href="#一" class="headerlink" title="(一)"></a>(一)</h3><div class="table-container"><table><thead><tr><th><code>ipconfig (winipcfg)</code></th><th>查看本地ip，可加/all</th></tr></thead><tbody><tr><td><code>kill -F 进程名</code></td><td>加-F参数后强制结束某进程</td></tr><tr><td><code>del -F 文件名</code></td><td>加-F参数可删除只读文件</td></tr><tr><td><code>move 源路径文件　目的路径</code></td><td>移动文件，可修改文件名</td></tr><tr><td><code>fc one.txt two.txt &gt; 3st.txt</code></td><td>对比文件并输出到3st.txt</td></tr><tr><td><code>finger username @host</code></td><td>查看最近用户登陆</td></tr><tr><td><code>telnet</code></td><td>进入本机的telnet</td></tr><tr><td><code>telnet ip 端口</code></td><td>远程登陆服务器,默认端口为23</td></tr></tbody></table></div><h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><div class="table-container"><table><thead><tr><th><code>copy c:srv.exe ipadmin$</code></th><th>复制本地c:srv.exe到对方的admin下</th></tr></thead><tbody><tr><td><code>set</code></td><td>显示当前所有的环境变量</td></tr><tr><td><code>set 环境变量名称=变量的字符</code></td><td>添加环境变量</td></tr><tr><td><code>set p(或其它字符)</code></td><td>显示出当前以字符p(或其它字符)开头的所有环境变量</td></tr><tr><td><code>pause</code></td><td>暂停批处理程序，并显示出：请按任意键继续…</td></tr><tr><td><code>echo on/off</code></td><td>打开或关闭echo，仅用echo不加参数则显示当前echo设置</td></tr><tr><td><code>echo 信息</code></td><td>在屏幕上显示出信息</td></tr></tbody></table></div><h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><div class="table-container"><table><thead><tr><th><code>echo 信息 &gt;&gt; pass.txt</code></th><th>将”信息”保存到pass.txt文件中</th></tr></thead><tbody><tr><td><code>findstr “Hello” aa.txt</code></td><td>在aa.txt文件中寻找字符串hello</td></tr><tr><td><code>find 文件名</code></td><td>查找某文件</td></tr><tr><td><code>regedit /s</code></td><td>注册表文件名 导入注册表；参数/S指安静模式导入，无任何提示</td></tr><tr><td><code>regedit /e</code></td><td>注册表文件名 导出注册表</td></tr><tr><td><code>cacls 文件名</code></td><td>查看文件的访问用户权限列表</td></tr><tr><td><code>REM 文本内容</code></td><td>在批处理文件中添加注解</td></tr><tr><td><code>netsh</code></td><td>查看或更改本地网络配置情况</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> cmd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言经典100例</title>
      <link href="/2024/11/24/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B/"/>
      <url>/2024/11/24/C%E8%AF%AD%E8%A8%80%E7%BB%8F%E5%85%B8100%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言经典100例"><a href="#C语言经典100例" class="headerlink" title="C语言经典100例"></a>C语言经典100例</h1><p><strong>1. 组无重复数字的数</strong></p><p><strong>题目：</strong> 有 1、2、3、4 四个数字，能组成多少个互不相同且无重复数字的三位数？</p><p><strong>问题分析：</strong> 先在百位数选择一个数字，接着在十位上选择一个数字，最后在个位上选择一个数字，但要保证每次选择的三个数字都互不相同，使用三个<a href="https://so.csdn.net/so/search?q=for循环&amp;spm=1001.2101.3001.7020">for循环</a>即可找出这样的数字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> <span class="comment">// 标准的输入输出头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123; <span class="comment">// 先选择百位上的数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++) &#123;<span class="comment">// 接着选择十位上的数字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; <span class="number">5</span>; k++) &#123; <span class="comment">// 最后选择个位上的数字</span></span><br><span class="line">                <span class="comment">// 选择的三个数字必须都互不相同</span></span><br><span class="line">                <span class="keyword">if</span> (i != j &amp;&amp; i != k &amp;&amp; j != k) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d%d%d\n&quot;</span>, i, j, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化：上面代码中也可以在for循环的时候判断是否有重复的数字，如果有，则直接跳过。</strong></p><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">124</span></span><br><span class="line"><span class="number">132</span></span><br><span class="line"><span class="number">134</span></span><br><span class="line"><span class="number">142</span></span><br><span class="line"><span class="number">143</span></span><br><span class="line"><span class="number">213</span></span><br><span class="line"><span class="number">214</span></span><br><span class="line"><span class="number">231</span></span><br><span class="line"><span class="number">234</span></span><br><span class="line"><span class="number">241</span></span><br><span class="line"><span class="number">243</span></span><br><span class="line"><span class="number">312</span></span><br><span class="line"><span class="number">314</span></span><br><span class="line"><span class="number">321</span></span><br><span class="line"><span class="number">324</span></span><br><span class="line"><span class="number">341</span>                                                                   </span><br><span class="line"><span class="number">342</span></span><br><span class="line"><span class="number">412</span></span><br><span class="line"><span class="number">413</span></span><br><span class="line"><span class="number">421</span></span><br><span class="line"><span class="number">423</span></span><br><span class="line"><span class="number">431</span></span><br><span class="line"><span class="number">432</span></span><br></pre></td></tr></table></figure><p><strong>2.企业发放的奖金根据利润提成</strong></p><ul><li>利润 i 低于或等于10万元时，奖金可提10%；</li><li>利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</li><li>20万到40万之间时，高于20万元的部分，可提成5%；</li><li>40万到60万之间时高于40万元的部分，可提成3%；</li><li>60万到100万之间时，高于60万元的部分，可提成1.5%；</li><li>高于100万元时，超过100万元的部分按1%提成。</li></ul><p><a href="https://so.csdn.net/so/search?q=从键盘输入&amp;spm=1001.2101.3001.7020">从键盘输入</a>当月利润 i ，求应发放奖金总数？</p><p><strong>问题分析：</strong> 根据利润的区间，让数字在不同的区间分别单独计算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">double</span> i;<span class="comment">// 利润</span></span><br><span class="line">    <span class="type">double</span> bonus = <span class="number">0</span>;<span class="comment">// 奖金</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;当月利润是：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;i);<span class="comment">// 输入当月利润</span></span><br><span class="line">    <span class="type">double</span> bonus1 = <span class="number">100000</span> * <span class="number">0.1</span>;<span class="comment">// 十万的奖金</span></span><br><span class="line">    <span class="type">double</span> bonus2 = bonus1 + <span class="number">100000</span> * <span class="number">0.075</span>;<span class="comment">// 二十万的奖金</span></span><br><span class="line">    <span class="type">double</span> bonus4 = bonus2 + <span class="number">200000</span> * <span class="number">0.05</span>;<span class="comment">// 四十万的奖金</span></span><br><span class="line">    <span class="type">double</span> bonus6 = bonus4 + <span class="number">200000</span> * <span class="number">0.03</span>;<span class="comment">// 六十万的奖金</span></span><br><span class="line">    <span class="type">double</span> bonus10 = bonus6 + <span class="number">400000</span> * <span class="number">0.015</span>;<span class="comment">// 一百万的奖金</span></span><br><span class="line">    <span class="keyword">if</span> (i &lt;= <span class="number">100000</span>) &#123;</span><br><span class="line">        <span class="comment">// 利润 i 低于或等于10万元时，奖金可提10%；</span></span><br><span class="line">        bonus = i * <span class="number">0.1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">200000</span>) &#123;</span><br><span class="line">        <span class="comment">// 低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；</span></span><br><span class="line">        bonus = bonus1 + (i - <span class="number">100000</span>) * <span class="number">0.075</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">400000</span>) &#123;</span><br><span class="line">        <span class="comment">// 20万到40万之间时，高于20万元的部分，可提成5%；</span></span><br><span class="line">        bonus = bonus2 + (i - <span class="number">200000</span>) * <span class="number">0.05</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">600000</span>) &#123;</span><br><span class="line">        <span class="comment">// 40万到60万之间时高于40万元的部分，可提成3%；</span></span><br><span class="line">        bonus = bonus4 + (i - <span class="number">400000</span>) * <span class="number">0.03</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">1000000</span>) &#123;</span><br><span class="line">        <span class="comment">// 60万到100万之间时，高于60万元的部分，可提成1.5%；</span></span><br><span class="line">        bonus = bonus6 + (i - <span class="number">600000</span>) * <span class="number">0.015</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; <span class="number">1000000</span>) &#123;</span><br><span class="line">        <span class="comment">// 高于100万元时，超过100万元的部分按1%提成。</span></span><br><span class="line">        bonus = bonus10 + (i - <span class="number">1000000</span>) * <span class="number">0.01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;应发奖金为：bonus=%lf&quot;</span>, bonus);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当月利润是：<span class="number">350000</span></span><br><span class="line">应发奖金为：bonus=<span class="number">25000.000000</span></span><br></pre></td></tr></table></figure><p><strong>3.完全平方数</strong></p><p><strong>题目：</strong> 一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？</p><p><strong>问题分析：</strong></p><p>假设该数为 x。</p><p>1、则 x + 100 = m，x + 100 + 168 = n，其中 m 和 n 都是完全平方数。</p><p>2、设 n = a2，m = b2，则 n - m = (a + b)(a - b) = 168，因为a+b和a-b具有相同的奇偶性，又因为168是偶数，所以a+b和a-b都是偶数。</p><p>3、设 a+b=2<em>i，a-b=2</em>j；可得 i * j = 168/4=42。</p><p>4、接下来只需要枚举 i 从 1 到 42 即可，根据上面的公式我们也可以得出 a = i + j，b = i - j，进一步又可以得出 m ，n 以及 x 的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 枚举 i 从 1 到 42 。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">42</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">42</span> % i == <span class="number">0</span>) &#123; <span class="comment">// 要满足i*j=42</span></span><br><span class="line">            <span class="type">int</span> j = <span class="number">42</span> / i; <span class="comment">// 计算 j 的值。</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; j) &#123;</span><br><span class="line">                <span class="comment">// 根据 i 和 j 可以计算 a ，b 以及 x 的值。</span></span><br><span class="line">                <span class="type">int</span> a = i + j;</span><br><span class="line">                <span class="type">int</span> b = i - j;</span><br><span class="line">                <span class="type">int</span> x = b * b - <span class="number">100</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d + 100 = %d * %d\n&quot;</span>, x, b, b);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d + 268 = %d * %d\n&quot;</span>, x, a, a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-99</span> + <span class="number">100</span> = <span class="number">1</span> * <span class="number">1</span></span><br><span class="line"><span class="number">-99</span> + <span class="number">268</span> = <span class="number">13</span> * <span class="number">13</span></span><br><span class="line"><span class="number">21</span> + <span class="number">100</span> = <span class="number">11</span> * <span class="number">11</span></span><br><span class="line"><span class="number">21</span> + <span class="number">268</span> = <span class="number">17</span> * <span class="number">17</span></span><br><span class="line"><span class="number">261</span> + <span class="number">100</span> = <span class="number">19</span> * <span class="number">19</span></span><br><span class="line"><span class="number">261</span> + <span class="number">268</span> = <span class="number">23</span> * <span class="number">23</span></span><br><span class="line"><span class="number">1581</span> + <span class="number">100</span> = <span class="number">41</span> * <span class="number">41</span></span><br><span class="line"><span class="number">1581</span> + <span class="number">268</span> = <span class="number">43</span> * <span class="number">43</span></span><br></pre></td></tr></table></figure><p><strong>4.判断当天是这一年的第几天</strong></p><p><strong>题目：</strong> 输入某年某月某日，判断这一天是这一年的第几天？</p><p><strong>问题分析：</strong> 先计算当月之前的总天数，然后再加上当月的天数。比如10月16号，先计算9月(包含9月)之前的总天数，然后加上10月的16天，最后在判断是否是闰年，如果是闰年并且输入的月份大于 2 ，要多加一天。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 每月的天数，其中2月先暂定为28天。</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> daysInMonth[] = &#123;<span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, </span><br><span class="line">                               <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> day, month, year, total;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入年月日，格式为：年,月,日（2024,10,16）\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>, &amp;year, &amp;month, &amp;day);  <span class="comment">// 格式为：2024,10,16</span></span><br><span class="line">    total = <span class="number">0</span>; <span class="comment">// 计算输入月份之前的总天数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; month - <span class="number">1</span>; i++)</span><br><span class="line">        total += daysInMonth[i];</span><br><span class="line"></span><br><span class="line">    total += day;<span class="comment">// 加上当月的天数</span></span><br><span class="line">    <span class="comment">// 判断是否为闰年</span></span><br><span class="line">    <span class="type">int</span> leap = (year % <span class="number">400</span> == <span class="number">0</span>) || </span><br><span class="line">   (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 如果是闰年且月份大于2, 总天数加一天</span></span><br><span class="line">    <span class="keyword">if</span> (leap &amp;&amp; month &gt; <span class="number">2</span>)</span><br><span class="line">        total++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这是这一年的第 %d 天。&quot;</span>, total);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入年月日，格式为：年,月,日（<span class="number">2024</span>,<span class="number">10</span>,<span class="number">16</span>）</span><br><span class="line"><span class="number">2024</span>,<span class="number">10</span>,<span class="number">16</span></span><br><span class="line">这是这一年的第 <span class="number">290</span> 天。</span><br></pre></td></tr></table></figure><p><strong>5.三个数由小到大输出</strong></p><p><strong>题目：</strong> 输入三个整数 x、y、z，请把这三个数由小到大输出。</p><p><strong>问题分析：</strong> 先用 x 和 y ，z 比较，只要比它俩小就交换，这样就可以保证 x 是这三个数中最小的。然后用 y 和 z 比较，把最大值保存在 z 中，这样 x、y、z 就是从小到大的了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个变量的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="type">int</span> tmp = *a;<span class="comment">// 需要临时变量</span></span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入三个数字:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d,%d,%d&quot;</span>, &amp;x, &amp;y, &amp;z);<span class="comment">// 注意输入的时候用逗号隔开</span></span><br><span class="line">    <span class="comment">// 两两比较，前两个if可以保证 x 最小，最后一个if可以保证 z 最大。</span></span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        swap(&amp;x, &amp;y);</span><br><span class="line">    <span class="keyword">if</span> (x &gt; z)</span><br><span class="line">        swap(&amp;x, &amp;z);</span><br><span class="line">    <span class="keyword">if</span> (y &gt; z)</span><br><span class="line">        swap(&amp;y, &amp;z);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;从小到大排序: %d %d %d\n&quot;</span>, x, y, z);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入三个数字:</span><br><span class="line"><span class="number">3</span>,<span class="number">7</span>,<span class="number">6</span></span><br><span class="line">从小到大排序: <span class="number">3</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><p><strong>6.输出字母C图案</strong></p><p><strong>题目：</strong> 用 * 号输出字母C的图案。</p><p><strong>问题分析：</strong> 按照字母C的形状直接输出即可。</p><p><strong>题目：</strong> 用 * 号输出字母C的图案。</p><p><strong>问题分析：</strong> 按照字母C的形状直接输出即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;用 * 号输出字母 C!\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;****\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;* \n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;****\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用 * 号输出字母 C!</span><br><span class="line">****</span><br><span class="line">*</span><br><span class="line">*</span><br><span class="line">****</span><br></pre></td></tr></table></figure><p><strong>7.特殊图案</strong></p><p><strong>题目：</strong> 输出特殊图案。</p><p><strong>问题分析：</strong> 不同字符，图形不一样。需要把编码格式改成437 OEM-美国，否则会出现乱码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span> <span class="comment">// 引用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SetConsoleOutputCP(<span class="number">437</span>);<span class="comment">// 设置编码为437 OEM-美国</span></span><br><span class="line">    <span class="type">char</span> a = <span class="number">177</span>, b = <span class="number">223</span>;<span class="comment">// 随便两个数字</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, b, a, a, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, a, b, a, b, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, a, a, b, a, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, a, b, a, b, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c%c\n&quot;</span>, b, a, a, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/c311064a1dfd4992a4a7620e83e0555c.png#pic_center" alt="在这里插入图片描述"></p><p><strong>8.9*9 乘法表</strong></p><p><strong>题目：</strong> 输出 <strong>9*9</strong> 口诀。</p><p><strong>问题分析：</strong> 使用两个for循环即可完成。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;<span class="comment">// 行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123; <span class="comment">// 列</span></span><br><span class="line">            <span class="comment">// %-3d表示左对齐，占3位</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%-3d&quot;</span>, j, i, i * j); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>); <span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>*<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="number">1</span>*<span class="number">2</span>=<span class="number">2</span>  <span class="number">2</span>*<span class="number">2</span>=<span class="number">4</span></span><br><span class="line"><span class="number">1</span>*<span class="number">3</span>=<span class="number">3</span>  <span class="number">2</span>*<span class="number">3</span>=<span class="number">6</span>  <span class="number">3</span>*<span class="number">3</span>=<span class="number">9</span></span><br><span class="line"><span class="number">1</span>*<span class="number">4</span>=<span class="number">4</span>  <span class="number">2</span>*<span class="number">4</span>=<span class="number">8</span>  <span class="number">3</span>*<span class="number">4</span>=<span class="number">12</span> <span class="number">4</span>*<span class="number">4</span>=<span class="number">16</span></span><br><span class="line"><span class="number">1</span>*<span class="number">5</span>=<span class="number">5</span>  <span class="number">2</span>*<span class="number">5</span>=<span class="number">10</span> <span class="number">3</span>*<span class="number">5</span>=<span class="number">15</span> <span class="number">4</span>*<span class="number">5</span>=<span class="number">20</span> <span class="number">5</span>*<span class="number">5</span>=<span class="number">25</span></span><br><span class="line"><span class="number">1</span>*<span class="number">6</span>=<span class="number">6</span>  <span class="number">2</span>*<span class="number">6</span>=<span class="number">12</span> <span class="number">3</span>*<span class="number">6</span>=<span class="number">18</span> <span class="number">4</span>*<span class="number">6</span>=<span class="number">24</span> <span class="number">5</span>*<span class="number">6</span>=<span class="number">30</span> <span class="number">6</span>*<span class="number">6</span>=<span class="number">36</span></span><br><span class="line"><span class="number">1</span>*<span class="number">7</span>=<span class="number">7</span>  <span class="number">2</span>*<span class="number">7</span>=<span class="number">14</span> <span class="number">3</span>*<span class="number">7</span>=<span class="number">21</span> <span class="number">4</span>*<span class="number">7</span>=<span class="number">28</span> <span class="number">5</span>*<span class="number">7</span>=<span class="number">35</span> <span class="number">6</span>*<span class="number">7</span>=<span class="number">42</span> <span class="number">7</span>*<span class="number">7</span>=<span class="number">49</span></span><br><span class="line"><span class="number">1</span>*<span class="number">8</span>=<span class="number">8</span>  <span class="number">2</span>*<span class="number">8</span>=<span class="number">16</span> <span class="number">3</span>*<span class="number">8</span>=<span class="number">24</span> <span class="number">4</span>*<span class="number">8</span>=<span class="number">32</span> <span class="number">5</span>*<span class="number">8</span>=<span class="number">40</span> <span class="number">6</span>*<span class="number">8</span>=<span class="number">48</span> <span class="number">7</span>*<span class="number">8</span>=<span class="number">56</span> <span class="number">8</span>*<span class="number">8</span>=<span class="number">64</span></span><br><span class="line"><span class="number">1</span>*<span class="number">9</span>=<span class="number">9</span>  <span class="number">2</span>*<span class="number">9</span>=<span class="number">18</span> <span class="number">3</span>*<span class="number">9</span>=<span class="number">27</span> <span class="number">4</span>*<span class="number">9</span>=<span class="number">36</span> <span class="number">5</span>*<span class="number">9</span>=<span class="number">45</span> <span class="number">6</span>*<span class="number">9</span>=<span class="number">54</span> <span class="number">7</span>*<span class="number">9</span>=<span class="number">63</span> <span class="number">8</span>*<span class="number">9</span>=<span class="number">72</span> <span class="number">9</span>*<span class="number">9</span>=<span class="number">81</span></span><br></pre></td></tr></table></figure><p><strong>9.国际象棋棋盘</strong></p><p><strong>题目：</strong> 要求输出国际象棋棋盘。</p><p><strong>问题分析：</strong> 国际象棋棋盘由64个黑白相间的格子组成，分为8行*8列。用 i 控制行， j 来控制列，根据 i+j 的和来控制输出黑方格，还是白方格。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span> <span class="comment">// 引用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SetConsoleOutputCP(<span class="number">437</span>);<span class="comment">// 设置编码为437 OEM-美国</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">8</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> ((i + j) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, <span class="number">219</span>, <span class="number">219</span>);<span class="comment">// 白色</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;  &quot;</span>);<span class="comment">// 黑色</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/ab404975d6e3497f9a3d8f895dd98648.png#pic_center" alt="在这里插入图片描述"></p><p><strong>10.打印笑脸</strong></p><p><strong>题目：</strong> 打印楼梯，同时在楼梯上方打印两个笑脸。</p><p><strong>问题分析：</strong> 用 ASCII 1 输出笑脸；用 i 和 j 来控制行和列，然后输出白色当做楼梯，要注意需要修改编码格式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span> <span class="comment">// 引用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    SetConsoleOutputCP(<span class="number">437</span>);<span class="comment">// 设置编码为437 OEM-美国</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\1\1\n&quot;</span>); <span class="comment">// 打印两个笑脸</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c%c&quot;</span>, <span class="number">219</span>, <span class="number">219</span>);<span class="comment">// 打印白色楼梯</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="https://i-blog.csdnimg.cn/direct/6396809fcbe44210b82afd1dc7eefae5.png#pic_center" alt="在这里插入图片描述"></p><p><strong>11.兔子生崽</strong></p><p><strong>题目：</strong> 古典问题（兔子生崽）：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？（输出前40个月即可）</p><p><strong>问题分析：</strong> 兔子的规律为1,1,2,3,5,8,13,21…，即下个月是上两个月之和，这是一个典型的斐波那契数列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>;<span class="comment">// 前两项</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%12d%12d&quot;</span>, a, b); <span class="comment">// 输出前两项，%12d表示占12行，右对齐。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">40</span>; i++) &#123;<span class="comment">// 从第3项开始计算</span></span><br><span class="line">        <span class="type">int</span> cur = a + b;<span class="comment">// 当前月是上两个月之和</span></span><br><span class="line">        a = b;</span><br><span class="line">        b = cur;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%12d&quot;</span>, cur);<span class="comment">// 打印当前月的值</span></span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span>)<span class="comment">// 输入4个换行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">       <span class="number">1</span>           <span class="number">1</span>           <span class="number">2</span>           <span class="number">3</span></span><br><span class="line">       <span class="number">5</span>           <span class="number">8</span>          <span class="number">13</span>          <span class="number">21</span></span><br><span class="line">      <span class="number">34</span>          <span class="number">55</span>          <span class="number">89</span>         <span class="number">144</span></span><br><span class="line">     <span class="number">233</span>         <span class="number">377</span>         <span class="number">610</span>         <span class="number">987</span></span><br><span class="line">    <span class="number">1597</span>        <span class="number">2584</span>        <span class="number">4181</span>        <span class="number">6765</span></span><br><span class="line">   <span class="number">10946</span>       <span class="number">17711</span>       <span class="number">28657</span>       <span class="number">46368</span></span><br><span class="line">   <span class="number">75025</span>      <span class="number">121393</span>      <span class="number">196418</span>      <span class="number">317811</span></span><br><span class="line">  <span class="number">514229</span>      <span class="number">832040</span>     <span class="number">1346269</span>     <span class="number">2178309</span></span><br><span class="line"> <span class="number">3524578</span>     <span class="number">5702887</span>     <span class="number">9227465</span>    <span class="number">14930352</span></span><br><span class="line"><span class="number">24157817</span>    <span class="number">39088169</span>    <span class="number">63245986</span>   <span class="number">102334155</span></span><br></pre></td></tr></table></figure><p><strong>12.101到200的素数</strong></p><p><strong>题目：</strong> 判断 101 到 200 之间的素数。</p><p><strong>问题分析：</strong> 101 到 200之间的偶数不可能是素数，所以我们只需要判断奇数即可。对于每一个奇数，判断能不能被 2 到 sqrt(包含这个数)之间的数整除，如果能被整除，则表明此数不是素数，否则是素数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断101 到 200之间的奇数是否是素数。</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">    <span class="type">int</span> sq = (<span class="type">int</span>) <span class="built_in">sqrt</span>(num);<span class="comment">// 计算平方根</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span>; j &lt;= sq; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % j == <span class="number">0</span>)<span class="comment">// 如果能被 j 整除，则不是素数。</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;<span class="comment">// 统计素数的个数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;素数在 101 到 200 之间的列表：\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 101 到 200之间的偶数不可能是素数，所以我们只需要判断奇数即可。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">101</span>; i &lt;= <span class="number">200</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isPrime(i)) &#123; <span class="comment">// 如果是素数，则打印</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i);</span><br><span class="line">            <span class="keyword">if</span> (++count % <span class="number">5</span> == <span class="number">0</span>)<span class="comment">// 每 5 个换行</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">素数在 <span class="number">101</span> 到 <span class="number">200</span> 之间的列表：</span><br><span class="line"><span class="number">101</span> <span class="number">103</span> <span class="number">107</span> <span class="number">109</span> <span class="number">113</span></span><br><span class="line"><span class="number">127</span> <span class="number">131</span> <span class="number">137</span> <span class="number">139</span> <span class="number">149</span></span><br><span class="line"><span class="number">151</span> <span class="number">157</span> <span class="number">163</span> <span class="number">167</span> <span class="number">173</span></span><br><span class="line"><span class="number">179</span> <span class="number">181</span> <span class="number">191</span> <span class="number">193</span> <span class="number">197</span></span><br><span class="line"><span class="number">199</span></span><br></pre></td></tr></table></figure><p><strong>13</strong>.<strong>水仙花数</strong></p><p><strong>题目：</strong> 打印出所有的”水仙花数”，所谓”水仙花数”是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个”水仙花数”，因为153=1^3＋5^3＋3^3=1+125+27。</p><p><strong>问题分析：</strong> 对于100-999之间的每一个数，分别求出个位，十位，百位，然后计算它们的立方之和是否等于该数本身，如果等于，则是水仙花数，否则不是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, x, y, z;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        x = i % <span class="number">10</span>;<span class="comment">// 个位</span></span><br><span class="line">        y = i / <span class="number">10</span> % <span class="number">10</span>;<span class="comment">// 十位</span></span><br><span class="line">        z = i / <span class="number">100</span>;<span class="comment">// 百位</span></span><br><span class="line">        <span class="keyword">if</span> (i == x * x * x + y * y * y + z * z * z)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">153</span></span><br><span class="line"><span class="number">370</span></span><br><span class="line"><span class="number">371</span></span><br><span class="line"><span class="number">407</span></span><br></pre></td></tr></table></figure><p><strong>14.分解质因数</strong></p><p><strong>题目：</strong> 将一个正整数分解质因数。例如：输入 90,打印出 <strong>90=2*3*3*5</strong>。</p><p><strong>问题分析：</strong> 对于输入的整数n ，判断 2 到 n 之间哪些数能被它整除，如果能被正常，则一直除。比如 120 能被 2 整除，结果是 60 ，60 还能被 2 整除，结果是 30 ，30 还能被 2 整除，结果是 15，15不能被 2 整除，但 15 能被 3 正常，结果是 5 ，5 不能被 3 整除，但 5 能被 5 整除，结果是 1 ，退出循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);<span class="comment">// 输入需要分解的整数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d=&quot;</span>, n);</span><br><span class="line">    <span class="comment">// 遍历2到n之间的整数是否是n的质因数，注意这里个n是变动的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);<span class="comment">// 打印质因数</span></span><br><span class="line">            n /= i;<span class="comment">// 改变n的值。</span></span><br><span class="line">            <span class="keyword">if</span> (n != <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入整数：<span class="number">120</span></span><br><span class="line"><span class="number">120</span>=<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>*<span class="number">3</span>*<span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>15.(a&gt;b)?a:b</strong></p><p><strong>题目：</strong> 利用条件运算符的嵌套来完成此题：学习成绩&gt;=90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</p><p><strong>问题分析：</strong> 在三目运算符中 c ? a : b ，如果 c 为true，则返回 a ，否则返回 b 。这里我们可以使用三目运算符嵌套来完成此题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s;<span class="comment">// 学生成绩</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入分数： &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);<span class="comment">// 输入成绩</span></span><br><span class="line">    <span class="type">char</span> g = (<span class="type">char</span>) (s &gt;= <span class="number">90</span> ? <span class="string">&#x27;A&#x27;</span> : (s &gt;= <span class="number">60</span> ? <span class="string">&#x27;B&#x27;</span> : <span class="string">&#x27;C&#x27;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, g);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入分数：<span class="number">96</span></span><br><span class="line"> A</span><br></pre></td></tr></table></figure><p><strong>16.最大公约数和最小公倍数</strong></p><p><strong>题目：</strong> 输入两个正整数 a 和 b ，求其最大公约数和最小公倍数。</p><p><strong>问题分析：</strong> 最大公约数可以使用辗转相除法和更相减损术两种方式求，这里我们使用辗转相除法来计算最大公约数。最小公倍数可以用输入的两个数之积除于它们的最大公约数求。比如计算 33 和 12 的最大公约数，(33,12)→(12，9)→(9，3)，因为 9 能被 3 整除，所以33和12的最大公约数是 3 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 辗转相除法求最大公约数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)<span class="comment">// 要保证 a 比 b 大</span></span><br><span class="line">        <span class="keyword">return</span> gcd(b, a);</span><br><span class="line">    <span class="keyword">if</span> (a % b == <span class="number">0</span>)<span class="comment">// 如果 a 能被 b 整除，直接返回 b 的值。</span></span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    <span class="keyword">return</span> gcd(b, a % b);<span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个数字：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<span class="comment">// 不能有 0 。</span></span><br><span class="line">    <span class="type">int</span> t = gcd(a, b);<span class="comment">// 计算最大公约数</span></span><br><span class="line">    <span class="type">int</span> y = a * b / t;<span class="comment">// 根据最大公约数计算最小公倍数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;这两个数的最大公约数是%d，最小公倍数是%d\n&quot;</span>, t, y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入两个数字：</span><br><span class="line"><span class="number">12</span> <span class="number">28</span></span><br><span class="line">这两个数的最大公约数是<span class="number">4</span>，最小公倍数是<span class="number">84</span></span><br></pre></td></tr></table></figure><p><strong>17.统计字母、数字等</strong></p><p><strong>题目：</strong> 输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</p><p><strong>问题分析：</strong> 对于输入字符进行统计，直到遇到换行符为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> c;<span class="comment">// 输入的字符</span></span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, s = <span class="number">0</span>, d = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一些字符：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;<span class="comment">// 直到遇到换行符为止</span></span><br><span class="line">        <span class="keyword">if</span> ((c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) || (c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">            l++;<span class="comment">// 英文字母</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            d++;<span class="comment">// 数字</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            s++;<span class="comment">// 空格</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t++;<span class="comment">// 其他字符</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字母=%d, 数字=%d, 空格 =%d, 其他=%d&quot;</span>, l, d, s, t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入一些字符：</span><br><span class="line">wansuanfa.com <span class="number">666</span>&amp;*()</span><br><span class="line">字母 = <span class="number">12</span>, 数字 = <span class="number">3</span>, 空格 = <span class="number">1</span>, 其他 = <span class="number">5</span></span><br></pre></td></tr></table></figure><p><strong>18.s=a+aa+aaa…</strong></p><p><strong>题目：</strong> 求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。</p><p><strong>问题分析：</strong> 输入的 n 是数字的个数，把所有数字相加即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> s = <span class="number">0</span>, a, n, t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 a 和 n：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;a, &amp;n);</span><br><span class="line">    t = a;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s += t;</span><br><span class="line">        a = a * <span class="number">10</span>;</span><br><span class="line">        t += a;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a+aa+...=%d\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入 a 和 n：</span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line">a+aa+...=<span class="number">24690</span></span><br></pre></td></tr></table></figure><p><strong>19.完数</strong></p><p><strong>题目：</strong> 一个数如果恰好等于它的因子之和，这个数就称为”完数”，例如 <strong>6=1＋2＋3</strong> ，请编程找出 1000 以内的所有完数。</p><p><strong>问题分析：</strong> 计算1000以内每个数的因数，判断因数之和是否等于该数，如果等于，则是完数，否则不是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> k, a[<span class="number">256</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;<span class="comment">// 累加因子之和</span></span><br><span class="line">        k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++)</span><br><span class="line">            <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += j;</span><br><span class="line">                a[k++] = j;<span class="comment">// 记录因子</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == sum) &#123;<span class="comment">// 是否是完数</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d=%d&quot;</span>, i, a[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; k; ++j)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;+%d&quot;</span>, a[j]);<span class="comment">// 打印因子</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">// 换行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>=<span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span></span><br><span class="line"><span class="number">28</span>=<span class="number">1</span>+<span class="number">2</span>+<span class="number">4</span>+<span class="number">7</span>+<span class="number">14</span></span><br><span class="line"><span class="number">496</span>=<span class="number">1</span>+<span class="number">2</span>+<span class="number">4</span>+<span class="number">8</span>+<span class="number">16</span>+<span class="number">31</span>+<span class="number">62</span>+<span class="number">124</span>+<span class="number">248</span></span><br></pre></td></tr></table></figure><p><strong>20.小球自由下落</strong></p><p><strong>题目：</strong> 一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？</p><p><strong>问题分析：</strong> 反弹的高度是原来的一半，路径是反弹高度的两倍，因为反弹需要上和下两个方向。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> h = <span class="number">100</span>;<span class="comment">// 初始高度</span></span><br><span class="line">    <span class="type">float</span> s = <span class="number">100</span>;<span class="comment">// 经过的长度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        h = h / <span class="number">2</span>;<span class="comment">// 每次反弹的高度是原来的一半</span></span><br><span class="line">        s += <span class="number">2</span> * h;<span class="comment">// 经过长度需要累加反弹高度的2倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第10次落地时，共经过%f米，第10次反弹高%f米\n&quot;</span>, s, h);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第<span class="number">10</span>次落地时，共经过<span class="number">299.804688</span>米，第<span class="number">10</span>次反弹高<span class="number">0.097656</span>米</span><br></pre></td></tr></table></figure><p><strong>21.猴子吃桃问题</strong></p><p><strong>题目：</strong> 猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个<br>第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下<br>的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</p><p><strong>问题分析：</strong> 采取逆向思维的方法，从后往前推断。第 10 天 1 个桃子，第 9 天是2<em>(1+1)=4个桃子，第 8天是2</em>(4+1)=10个桃子，以此类推，如果当天吃了 x 个桃子，那么前一天就是2*(x+1)个桃子。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">        n = (n + <span class="number">1</span>) * <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;总数为：%d&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总数为：<span class="number">1534</span></span><br></pre></td></tr></table></figure><p><strong>22.乒乓球推理</strong></p><p><strong>题目：</strong> 两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</p><p><strong>问题分析：</strong> c 不和 x，z 比，所以 c 只能和 y 比，a 不和 x 比，所以 a 只能和 z 比，那么 b 只能和 x 比，直接能推算出来，但这里要写出程序，我们来看下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> a = <span class="string">&#x27;y&#x27;</span>; a &lt;= <span class="string">&#x27;z&#x27;</span>; a++) &#123;<span class="comment">// a 不能和 x 比，跳过 x</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> b = <span class="string">&#x27;x&#x27;</span>; b &lt;= <span class="string">&#x27;z&#x27;</span>; b++) &#123;<span class="comment">// b</span></span><br><span class="line">            <span class="keyword">if</span> (a == b)<span class="comment">// a与b不能和同一个人比较</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> c = <span class="string">&#x27;y&#x27;</span>; c &lt;= <span class="string">&#x27;y&#x27;</span>; c++) &#123;<span class="comment">// c不和x,z比</span></span><br><span class="line">                <span class="keyword">if</span> (a != c &amp;&amp; b != c)<span class="comment">// c与a，c不能和同一个人比较，</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;笔试名单为：a--%c\tb--%c\tc--%c\n&quot;</span>,</span><br><span class="line">                           a, b, c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">顺序为：a--z    b--x    c--y</span><br></pre></td></tr></table></figure><p><strong>23.打印菱形</strong></p><p><strong>题目：</strong> 打印出如下图案（菱形）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   *</span><br><span class="line">  ***</span><br><span class="line"> *****</span><br><span class="line">*******</span><br><span class="line"> *****</span><br><span class="line">  ***</span><br><span class="line">   *</span><br></pre></td></tr></table></figure><p><strong>问题分析：</strong> 先把菱形分成两部分来看待，先打印前 4 行，在打印后 3 行。每行只打印左边的空格，右边的空格不需要打印。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++) &#123;<span class="comment">// 包括之间一行，总共4行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">2</span> - i; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);<span class="comment">// 左边的空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">2</span> * i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);<span class="comment">// 换行</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++) &#123;<span class="comment">// 下面打印3行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);<span class="comment">// 左边的空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">4</span> - <span class="number">2</span> * i; k++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   *</span><br><span class="line">  ***</span><br><span class="line"> *****</span><br><span class="line">*******</span><br><span class="line"> *****</span><br><span class="line">  ***</span><br><span class="line">   *</span><br></pre></td></tr></table></figure><p><strong>24.2/1+3/2+5/3…</strong></p><p><strong>题目：</strong> 有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。</p><p><strong>问题分析：</strong> 如果把分子和分母单独拿出来，它们都是斐波那契数列，可以参考 <strong>011，兔子生崽</strong>，直接累加分数即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0</span>;<span class="comment">// 记录分数之和</span></span><br><span class="line">    <span class="type">float</span> t, a = <span class="number">2</span>, b = <span class="number">1</span>;<span class="comment">// a 是分子，b是分母</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        sum += a / b;<span class="comment">// 累加分数</span></span><br><span class="line">        <span class="comment">// 更新 a ，b 的值</span></span><br><span class="line">        t = a + b;</span><br><span class="line">        b = a;</span><br><span class="line">        a = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%9.6f\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">32.660263</span></span><br></pre></td></tr></table></figure><p><strong>25.求阶乘的和</strong></p><p><strong>题目：</strong> 求 <strong>1 + 2! + 3! + … + 20!</strong> 的和。</p><p><strong>问题分析：</strong> 计算阶乘的值然后累加即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">double</span> sum = <span class="number">0</span>, m = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">        m *= i;<span class="comment">// 计算阶乘</span></span><br><span class="line">        sum += m;<span class="comment">// 累加阶乘值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%Lf\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2561327494111820313.000000</span></span><br></pre></td></tr></table></figure><p><strong>26.递归求阶乘</strong></p><p><strong>题目：</strong> 利用递归方法求5!。</p><p><strong>问题分析：</strong> 递归公式fun(n)=fun(n-1)*n，当 n 等于 1 的时候，直接返回 1 即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> fun(n - <span class="number">1</span>) * n;<span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d!=%d\n&quot;</span>, i, fun(i));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>!=<span class="number">1</span></span><br><span class="line"><span class="number">2</span>!=<span class="number">2</span></span><br><span class="line"><span class="number">3</span>!=<span class="number">6</span></span><br><span class="line"><span class="number">4</span>!=<span class="number">24</span></span><br><span class="line"><span class="number">5</span>!=<span class="number">120</span></span><br></pre></td></tr></table></figure><p><strong>27.逆序打印字符</strong></p><p><strong>题目：</strong> 利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。</p><p><strong>问题分析：</strong> 当输入的字符个数不够 5 个的时候，一直递归输入，当输入 5 个字符的时候开始输出。递归类似于栈，先压栈，后出栈，所以出栈的顺序和输入的顺序是相反的。</p><p><strong>题目：</strong> 利用递归函数调用方式，将所输入的5个字符，以相反顺序打印出来。</p><p><strong>问题分析：</strong> 当输入的字符个数不够 5 个的时候，一直递归输入，当输入 5 个字符的时候开始输出。递归类似于栈，先压栈，后出栈，所以出栈的顺序和输入的顺序是相反的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">char</span> ch = getchar();<span class="comment">// 输入字符</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;<span class="comment">// n 等于 1 的时候开始输出</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;相反顺序输出结果:&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        print(n - <span class="number">1</span>);<span class="comment">// 递归</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(ch);<span class="comment">// 输出字符。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个字符:&quot;</span>, i);</span><br><span class="line">    print(i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入<span class="number">5</span>个字符:qwert</span><br><span class="line">相反顺序输出结果:trewq</span><br></pre></td></tr></table></figure><p><strong>28.岁数推理</strong></p><p><strong>题目：</strong> 有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？</p><p><strong>问题分析：</strong> 使用递归的方式，第一个人是 10 岁，第 n 个人的年龄是第 n-1 个人的年龄加 2 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">age</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)<span class="comment">// 第一个人是 10 岁</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> age(n - <span class="number">1</span>) + <span class="number">2</span>;<span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;第五个人的岁数是：%d\n&quot;</span>, age(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第五个人的岁数是：<span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>29.逆序打印各位数字</strong></p><p><strong>题目：</strong> 给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</p><p><strong>问题分析：</strong> 最多5位数，可以获取数字的每一位，如果万位不等于 0 ，肯定是 5 位数，如果万位是 0 ，千位不等于 0 ，则是 4 位数……，根据这样判断，然后逆序输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 5 位数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="type">int</span> a = x / <span class="number">10000</span>;        <span class="comment">// 万位数</span></span><br><span class="line">    <span class="type">int</span> b = x % <span class="number">10000</span> / <span class="number">1000</span>; <span class="comment">// 千位数</span></span><br><span class="line">    <span class="type">int</span> c = x % <span class="number">1000</span> / <span class="number">100</span>;   <span class="comment">// 百位数</span></span><br><span class="line">    <span class="type">int</span> d = x % <span class="number">100</span> / <span class="number">10</span>;     <span class="comment">// 十位数</span></span><br><span class="line">    <span class="type">int</span> e = x % <span class="number">10</span>;           <span class="comment">// 个位数</span></span><br><span class="line">    <span class="keyword">if</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是5位数,逆序为：%d %d %d %d %d&quot;</span>, e, d, c, b, a);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是4位数,逆序为：%d %d %d %d&quot;</span>, e, d, c, b);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是3位数,逆序为：%d %d %d&quot;</span>, e, d, c);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是2位数,逆序为：%d %d&quot;</span>, e, d);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是1位数,逆序为：%d&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入 <span class="number">5</span> 位数字：<span class="number">12345</span></span><br><span class="line">是<span class="number">5</span>位数,逆序为：<span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>30.判断是否回文数</strong></p><p><strong>题目：</strong> 一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。</p><p><strong>问题分析：</strong> 一个5位数，只需要提取它的个位，十位，千万，万位数字即可，如果个位和万位数字相等，并且十位和千位数字相等，则是回文数，否则不是。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 5 位数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    <span class="type">int</span> wan = x / <span class="number">10000</span>;       <span class="comment">// 万位数</span></span><br><span class="line">    <span class="type">int</span> qian = x % <span class="number">10000</span> / <span class="number">1000</span>;  <span class="comment">// 千位数</span></span><br><span class="line">    <span class="type">int</span> shi = x % <span class="number">100</span> / <span class="number">10</span>;       <span class="comment">// 十位数</span></span><br><span class="line">    <span class="type">int</span> ge = x % <span class="number">10</span>;          <span class="comment">// 个位数</span></span><br><span class="line">    <span class="keyword">if</span> (ge == wan &amp;&amp; shi == qian) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这是回文数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;这不是回文数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入 <span class="number">5</span> 位数字：<span class="number">12321</span></span><br><span class="line">这是回文数</span><br></pre></td></tr></table></figure><p><strong>31.判断星期几</strong></p><p><strong>题目：</strong> 请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。</p><p><strong>问题分析：</strong> 使用Switch语句，如果第一个字母一样，则输入第二个怎么继续判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> i, j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入第一个字母:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;i);<span class="comment">// 输入字符</span></span><br><span class="line">    getchar();<span class="comment">// 获取换行符。</span></span><br><span class="line">    <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;monday&quot;</span>);<span class="comment">// 周一</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;w&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;wednesday&quot;</span>);<span class="comment">// 周三</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;friday&quot;</span>);<span class="comment">// 周五</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入下一个字母:&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;j);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;u&#x27;</span>) &#123;<span class="comment">// 周二</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;tuesday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;h&#x27;</span>) &#123;<span class="comment">// 周四</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;thursday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请输入下一个字母&quot;</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;j);</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;a&#x27;</span>) &#123;<span class="comment">// 周六</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;saturday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="string">&#x27;u&#x27;</span>) &#123;<span class="comment">// 周日</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;sunday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入第一个字母:t</span><br><span class="line">请输入下一个字母:u</span><br><span class="line">tuesday</span><br></pre></td></tr></table></figure><p><strong>32.删字符串中的指定字母</strong></p><p><strong>题目：</strong> 删除一个字符串中的指定字母，如：字符串 “aca”，删除其中的 a 字母。</p><p><strong>问题分析：</strong> 逐个判断原字符串中的字符是否是需要删除的，如果不是删除的则保留。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除字符串中指定字母</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">deleteCharacters</span><span class="params">(<span class="type">char</span> *str, <span class="type">char</span> *del)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果要删除的字符集为空，则直接返回原字符串</span></span><br><span class="line">    <span class="keyword">if</span> (del == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    <span class="comment">// 用于存储要删除的字符的哈希表</span></span><br><span class="line">    <span class="type">int</span> hash[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// 标记哪些字符需要删除</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(del); i++)</span><br><span class="line">        hash[del[i]] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> curIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 通过遍历字符串来删除指定的字符</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前字符不在要删除的字符集中，则保留该字符</span></span><br><span class="line">        <span class="keyword">if</span> (!hash[str[i]])</span><br><span class="line">            str[curIndex++] = str[i];</span><br><span class="line">    &#125;</span><br><span class="line">    str[curIndex] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 字符串结束的标志</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s1[] = <span class="string">&quot;acasftd&quot;</span>;   <span class="comment">// 原字符串</span></span><br><span class="line">    <span class="type">char</span> s2[] = <span class="string">&quot;as&quot;</span>;   <span class="comment">// 要删除的字母</span></span><br><span class="line">    <span class="comment">// 打印删除指定字符后的字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;删除之后的字符串是：%s&quot;</span>, deleteCharacters(s1, s2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">删除之后的字符串是：cftd</span><br></pre></td></tr></table></figure><p><strong>33.判断是否质数</strong></p><p><strong>题目：</strong> 判断一个数字是否为质数。</p><p><strong>问题分析：</strong> 质数（prime number）又称素数。一个大于1的自然数，除了 1 和它本身外，不能被其他自然数整除。如果一个数不是素数，则肯定有一个因数 x，且 2&lt;=x&lt;=sqrt(x) 。</p><p><strong>题目：</strong> 判断一个数字是否为质数。</p><p><strong>问题分析：</strong> 质数（prime number）又称素数。一个大于1的自然数，除了 1 和它本身外，不能被其他自然数整除。如果一个数不是素数，则肯定有一个因数 x，且 2&lt;=x&lt;=sqrt(x) 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> n)</span> &#123;<span class="comment">// 判断 n 是否是素数</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)<span class="comment">// 最小的素数是 2 。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">int</span> sq = (<span class="type">int</span>) <span class="built_in">sqrt</span>(n);<span class="comment">// 先计算n的平方根</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= sq; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">// 不是素数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// 是素数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个自然数:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="type">int</span> ans = isPrime(n);</span><br><span class="line">    <span class="keyword">if</span> (ans) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是素数&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;不是素数&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一个自然数:<span class="number">18</span></span><br><span class="line">不是素数</span><br></pre></td></tr></table></figure><p><strong>34.练习函数调用</strong></p><p><strong>题目：</strong> 练习函数调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">say</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;公众号：数据结构和算法，\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;一个专门讲算法的公众号！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">three_say</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> counter = <span class="number">1</span>; counter &lt;= <span class="number">3</span>; counter++)</span><br><span class="line">        say();<span class="comment">// 调用上面函数3次</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    three_say();<span class="comment">// 函数调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">公众号：数据结构和算法，</span><br><span class="line">一个专门讲算法的公众号！</span><br><span class="line">公众号：数据结构和算法，</span><br><span class="line">一个专门讲算法的公众号！</span><br><span class="line">公众号：数据结构和算法，</span><br><span class="line">一个专门讲算法的公众号！</span><br></pre></td></tr></table></figure><p><strong>35.字符串反转</strong></p><p><strong>题目：</strong> 字符串反转，如将字符串 “<a href="https://blog.csdn.net/abcdef314159/article/details/www.wansuanfa.com">www.wansuanfa.com</a>” 反转为 “moc.afnausnaw.www”。</p><p><strong>问题分析：</strong> 使用两个指针left和right，刚开始的时候分别指向字符串的两端，然后交换这两个指针指向的字符，交换完之后两个指针分别往中间移，继续交换，直到两个指针相遇或者left&gt;right为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span> *s)</span> &#123;<span class="comment">// 反转字符串</span></span><br><span class="line">    <span class="comment">// 获取字符串长度</span></span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="comment">// 使用双指针</span></span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 交换两个指针指向的字符</span></span><br><span class="line">        <span class="type">char</span> ch = *(s + left);</span><br><span class="line">        *(s + left) = *(s + right);</span><br><span class="line">        *(s + right) = ch;</span><br><span class="line">        <span class="comment">// 两个指针往中间移</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> s[] = <span class="string">&quot;www.wansuanfa.com&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原字符串是：&#x27;%s&#x27;\n&quot;</span>, s);</span><br><span class="line">    reverse(s); <span class="comment">// 反转字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反转之后的字符串是：&#x27;%s&#x27;\n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原字符串是：<span class="string">&#x27;www.wansuanfa.com&#x27;</span></span><br><span class="line">反转之后的字符串是：<span class="string">&#x27;moc.afnausnaw.www&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>36.100内的素数</strong></p><p><strong>题目：</strong> 求100之内的素数。</p><p><strong>问题分析：</strong> 计算素数的方式比较多，可以直接筛选，也可以使用埃氏筛选法，还可以使用欧拉筛，详细内容可以关注公众号”<a href="https://wansuanfa.com/wp-content/uploads/2023/08/微信截图_20230820120518.png">数据结构和算法</a>“进行获取。我们这里使用埃氏筛选法的方式来计算100以内的素数，对于一个素数，它的倍数(大于等于2)肯定不是素数，我们把素数的倍数都标记一下，代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 埃氏筛选法求素数</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> N = <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> prime[N + <span class="number">1</span>];<span class="comment">// 记录素数</span></span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;<span class="comment">// 素数的个数</span></span><br><span class="line">    <span class="type">bool</span> vis[N + <span class="number">1</span>];<span class="comment">// 记录数字，false表示素数，true表示不是素数。</span></span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);<span class="comment">// 默认都是素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;<span class="comment">// 如果是素数</span></span><br><span class="line">            prime[count++] = i;<span class="comment">// 记录素数</span></span><br><span class="line">            <span class="comment">// 素数的倍数不是素数。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= N; j += i)</span><br><span class="line">                vis[j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印100以内的素数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, prime[i]);</span><br><span class="line">        <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>)<span class="comment">// 5个一换行</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">11</span> </span><br><span class="line"><span class="number">13</span> <span class="number">17</span> <span class="number">19</span> <span class="number">23</span> <span class="number">29</span> </span><br><span class="line"><span class="number">31</span> <span class="number">37</span> <span class="number">41</span> <span class="number">43</span> <span class="number">47</span> </span><br><span class="line"><span class="number">53</span> <span class="number">59</span> <span class="number">61</span> <span class="number">67</span> <span class="number">71</span> </span><br><span class="line"><span class="number">73</span> <span class="number">79</span> <span class="number">83</span> <span class="number">89</span> <span class="number">97</span> </span><br></pre></td></tr></table></figure><p><strong>37.排序</strong></p><p><strong>题目：</strong> 对10个数进行排序。</p><p><strong>问题分析：</strong>关于排序算法比较多，这里我们使用冒泡排序来解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换数组中两个元素的值。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    <span class="type">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冒泡排序。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;<span class="comment">// 只需要比较 n-1 轮即可。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果当前元素大于它的下一个元素，则交换他俩的值。</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">                swap(arr, j, j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[N];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 %d 个数字：\n&quot;</span>, N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);<span class="comment">// 输入10个数字</span></span><br><span class="line">    sort(arr, N);<span class="comment">// 排序</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序结果是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);<span class="comment">// 打印排序结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入 <span class="number">10</span> 个数字：</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">56</span> <span class="number">34</span> <span class="number">8</span> <span class="number">12</span> <span class="number">13</span></span><br><span class="line">排序结果是:</span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">8</span> <span class="number">12</span> <span class="number">13</span> <span class="number">34</span> <span class="number">56</span></span><br></pre></td></tr></table></figure><p><strong>38.矩阵对角元素和</strong></p><p><strong>题目：</strong> 求一个3*3矩阵对角线元素之和</p><p><strong>问题分析：</strong> 输入二维矩阵，累加a[i][i]即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[N][N], sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入矩阵(3*3)：\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        sum += a[i][i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;对角线之和为：%d\n&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请输入矩阵(<span class="number">3</span>*<span class="number">3</span>)：</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">对角线之和为：<span class="number">15</span></span><br></pre></td></tr></table></figure><p><strong>39.一个数插入数组</strong></p><p><strong>题目：</strong> 有一个已经排好序的数组。现输入一个数 x ，要求按原来的规律将它插入数组中。</p><p><strong>问题分析：</strong> 从后往前把大于 x 的值全部往后挪，找到插入的位置之后，再把数字插入对应的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">11</span>] = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">26</span>, <span class="number">37</span>, <span class="number">42</span>, <span class="number">58</span>, <span class="number">60</span>, <span class="number">82</span>&#125;;</span><br><span class="line">    <span class="type">int</span> num;<span class="comment">// 需要插入的数字</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)<span class="comment">// 打印原始数组</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n插入一个新的数字: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);<span class="comment">// 输入要插入的数字</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &gt;= <span class="number">0</span>) &#123;<span class="comment">// 查找插入位置</span></span><br><span class="line">        <span class="keyword">if</span> (a[i] &gt; num) &#123;</span><br><span class="line">            a[i + <span class="number">1</span>] = a[i];<span class="comment">// 往后挪</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 找到插入的位置，停止查找</span></span><br><span class="line">        &#125;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    a[i + <span class="number">1</span>] = num;<span class="comment">// 插入需要插入的位置</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)<span class="comment">// 打印插入之后的数组</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%-4d&quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line"><span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span>   <span class="number">9</span>   <span class="number">26</span>  <span class="number">37</span>  <span class="number">42</span>  <span class="number">58</span>  <span class="number">60</span>  <span class="number">82</span></span><br><span class="line">插入一个新的数字:<span class="number">16</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">4</span>   <span class="number">6</span>   <span class="number">9</span>   <span class="number">16</span>  <span class="number">26</span>  <span class="number">37</span>  <span class="number">42</span>  <span class="number">58</span>  <span class="number">60</span>  <span class="number">82</span></span><br></pre></td></tr></table></figure><p><strong>40.数组逆序输出</strong></p><p><strong>题目：</strong> 将一个数组逆序输出。</p><p><strong>问题分析：</strong> 从后往前输出即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[N] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;原始数组是:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n逆序之后的数组:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原始数组是:</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line">逆序之后的数组:</span><br><span class="line"><span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">6</span> <span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>41.static用法1</strong></p><p><strong>题目：</strong> 学习 static 定义静态变量的用法。</p><p>在 C 语言中，static 关键字用于声明静态变量，和静态函数。静态变量在声明时被初始化，只被初始化一次，而且在整个程序的生命周期内都保持存在。在函数内声明的静态变量只能在该函数内访问，而在函数外声明的静态变量则只能在该文件内访问。而静态函数可以参考 <strong>043，static用法2</strong>。</p><p><strong>问题分析：</strong> 以下函数中 fun() 声明了一个静态变量 x，并将其初始化为 0。每次调用 fun() 函数时，x 的值都会加 1，并打印出新的值。由于 x 是静态变量，它在程序的整个生命周期中都存在。因此，每次调用 fun() 时，它都可以记住 x 的值，并在此基础上递增。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> x = <span class="number">0</span>;<span class="comment">// 定义静态变量</span></span><br><span class="line">    x++;<span class="comment">// 加 1 。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    fun();  <span class="comment">// 输出 1</span></span><br><span class="line">    fun();  <span class="comment">// 输出 2</span></span><br><span class="line">    fun();  <span class="comment">// 输出 3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>42.auto用法</strong></p><p><strong>题目：</strong> 学习使用auto定义变量的用法。</p><p><strong>问题分析：</strong> 在C语言中，auto 关键字用于声明变量时指定变量的存储类别。auto 关键字告诉编译器该变量的生命周期仅限于定义它的代码块（通常是函数）之内，即该变量是自动存储的。这意味着变量的存储是在栈上分配的，而不是在静态存储区域（如全局变量或静态局部变量）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="type">int</span> x = <span class="number">10</span>; <span class="comment">// x 是自动存储的局部变量</span></span><br><span class="line">    x++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;x 变量为 %d \n&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    fun();</span><br><span class="line">    fun();</span><br><span class="line">    fun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x 变量为 <span class="number">11</span></span><br><span class="line">x 变量为 <span class="number">11</span></span><br><span class="line">x 变量为 <span class="number">11</span></span><br></pre></td></tr></table></figure><p><strong>43.static用法2</strong></p><p><strong>题目：</strong> 学习使用static的另一用法。</p><p><strong>问题分析：</strong> static声明的函数和变量只能在该文件中使用，这和面向对象语言中的private关键字声明的函数和变量类似。比如在file1.c文件中定义了一个static函数，在file2.c文件中调用这个函数就会出现错误。如果把file1.c文件中的static关键字去掉，在file2.c文件中就可以调用这个函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">printStatic</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;static void&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">printStatic</span><span class="params">()</span>;<span class="comment">// 不能调用</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    printStatic();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>44.extern的使用</strong></p><p><strong>题目：</strong> 学习使用如何调用外部函数。</p><p><strong>问题分析：</strong> 比如在file1.c文件中定义了一个变量name和一个函数printVal，但在file2.c文件中调用这个变量和函数，需要添加extern关键字。如果不要extern关键字，可以参考 <strong>050，#include练习</strong> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// file1.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> name = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printVal</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;printVal is：%d&quot;</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file2.c</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> name;<span class="comment">// 引用外部变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">printVal</span><span class="params">(<span class="type">int</span> val)</span>;<span class="comment">// 引用外部函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    printVal(name + <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printVal is：<span class="number">20</span></span><br></pre></td></tr></table></figure><p><strong>45.register用法</strong></p><p><strong>题目：</strong> 学习使用register定义变量的方法。</p><p><strong>问题分析：</strong> 在 C 语言中，register 关键字用于向编译器建议将某个变量存储在寄存器中，以提高对该变量的访问速度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        sum += i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1到100所有数字的和为：%d&quot;</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>到<span class="number">100</span>所有数字的和为：<span class="number">5050</span></span><br></pre></td></tr></table></figure><p><strong>46.宏#define练习1</strong></p><p><strong>题目：</strong> 宏#define命令练习。</p><p><strong>问题分析：</strong> 宏的功能比较强大，主要有：1，定义常量，2. 创建类型别名，3. 定义简单的函数替代，4. 定义复杂的代码片段，5. 条件编译，6. 宏参数的字符串化，7. 宏参数的连接。</p><p>我们先来看前两个，定义常量和创建类型别名。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.14159 <span class="comment">// 定义PI的值为3.14159</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INT32 int <span class="comment">// 定义INT32表示int类型</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 下面定义了两个int类型的变量</span></span><br><span class="line">    INT32 a = <span class="number">1314</span>;</span><br><span class="line">    INT32 r = <span class="number">520</span>;</span><br><span class="line">    <span class="comment">// 计算圆的面积</span></span><br><span class="line">    <span class="type">double</span> s = PI * r * r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;变量 a 的值是：%d \n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆的半径 r 是：%d \n&quot;</span>, r);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;圆的面积 s 是：%lf \n&quot;</span>, s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量 a 的值是：<span class="number">1314</span></span><br><span class="line">圆的半径 r 是：<span class="number">520</span></span><br><span class="line">圆的面积 s 是：<span class="number">849485.936000</span></span><br></pre></td></tr></table></figure><p><strong>47.宏#define练习2</strong></p><p><strong>题目：</strong> 宏#define命令练习2。</p><p><strong>问题分析：</strong> 下面再来看下使用宏定义简单的函数替代和定义复杂的代码片段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x) * (x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> exchange(a, b) &#123; int t;t=a;a=b;b=t;&#125;<span class="comment">// 放在一行里</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> sq = SQUARE(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换之前 a=%d; b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换之前 a 的平方是：%d\n&quot;</span>, sq);</span><br><span class="line">    exchange(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;交换之后 a=%d; b=%d\n&quot;</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">交换之前 a=<span class="number">10</span>; b=<span class="number">20</span></span><br><span class="line">交换之前 a 的平方是：<span class="number">100</span></span><br><span class="line">交换之后 a=<span class="number">20</span>; b=<span class="number">10</span></span><br></pre></td></tr></table></figure><p><strong>48.宏#define练习3</strong></p><p><strong>题目：</strong> 宏#define命令练习3。</p><p><strong>问题分析：</strong> 除此之外，宏还有其他一些定义和操作。比如 #define 可以使用 # 操作符将宏参数转换为字符串，#define 可以使用 ## 操作符将两个宏参数连接成一个标识符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STR(x) #x <span class="comment">// 将参数x转换为字符串</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONCAT(x, y) x##y <span class="comment">// 将两个宏参数连接成一个标识符</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">CONCAT</span><span class="params">(my, age)</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将参数a转换为字符串：%s\n&quot;</span>, STR(name));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;将两个宏参数连接成一个标识符：%d&quot;</span>, myage);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将参数a转换为字符串：name</span><br><span class="line">将两个宏参数连接成一个标识符：<span class="number">18</span></span><br></pre></td></tr></table></figure><p><strong>49.#if,#ifdef,#ifndef</strong></p><p><strong>题目：</strong> #if #ifdef和#ifndef的综合应用。</p><p><strong>问题分析：</strong> 常见的条件编译指令</p><ol><li><strong><code>#ifdef</code></strong>：如果宏已定义，则编译以下代码。</li><li><strong><code>#ifndef</code></strong>：如果宏未定义，则编译以下代码。</li><li><strong><code>#if</code></strong>：根据条件表达式的值编译代码。</li><li><strong><code>#else</code></strong>：如果前面的条件不满足，则编译以下代码。</li><li><strong><code>#elif</code></strong>：在 <code>#if</code> 或 <code>#else</code> 后，提供另一个条件。</li><li><strong><code>#endif</code></strong>：结束条件编译块。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="comment">// 定义名字name</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NAME</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NAME 被定义了。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NAME 没有被定义。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AGE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AGE 没有被定义。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AGE 被定义了。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> NAME</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> NAME</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NAME 取消定义失败。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NAME 取消定义成功。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AGE</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> AGE</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AGE 定义失败。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;AGE 定义成功。。。\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAME 被定义了。。。</span><br><span class="line">AGE 没有被定义。。。</span><br><span class="line">NAME 取消定义成功。。。</span><br><span class="line">AGE 定义成功。。。</span><br></pre></td></tr></table></figure><p><strong>50.#include练习</strong></p><p><strong>题目：</strong> #include 的应用练习。</p><p><strong>问题分析：</strong> 在C语言中，#include 预处理指令用于包含头文件，这是C语言程序中非常常见的操作。头文件通常包含函数声明、宏定义、类型定义、模板声明等，它们可以被多个源文件共享。</p><p>#include 指令通常有两种格式：</p><p>1，<strong>尖括号</strong> <code>&lt; &gt;</code>：用于标准库头文件。编译器会在预定义的目录中搜索这些头文件。</p><p>2，<strong>双引号</strong> <code>&quot; &quot;</code>：用于用户自定义的头文件或第三方库头文件。编译器首先在包含当前文件的同一目录中搜索，如果找不到，再在标准库目录中搜索。</p><p>假如我们创建两个文件，一个是头文件 test.h ，还一个是主文件，头文件test.h中的代码如下，可以看到和 <strong>044，extern的使用</strong> 的区别就是这里不需要再使用extern关键字导入了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在头文件中定义的常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NAME <span class="string">&quot;公众号：数据结构和算法&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>主文件中的代码如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;test.h&quot;</span><span class="comment">// 引用头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 打印头文件中定义的常量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, NAME);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公众号：数据结构和算法</span><br></pre></td></tr></table></figure><p><strong>51.按位与 &amp;</strong></p><p><strong>题目：</strong> 学习使用按位与 &amp;。</p><p><strong>问题分析：</strong> 按位与有 4 种情况，只要有一个是 0 ，结果就是 0 。</p><ul><li>0 &amp; 0=0;</li><li>0 &amp; 1=0;</li><li>1 &amp; 0=0;</li><li>1 &amp; 1=1;</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinary</span><span class="params">(<span class="type">int</span> num)</span> &#123;<span class="comment">// 打印二进制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> bit = (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bit);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)<span class="comment">// 每8个加一个空格</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">23</span>, b = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数 a 的值是：%d，二进制表示如下：\n&quot;</span>, a);</span><br><span class="line">    printBinary(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数 b 的值是：%d，二进制表示如下：\n&quot;</span>, b);</span><br><span class="line">    printBinary(b);</span><br><span class="line">    <span class="type">int</span> and = a &amp; b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a 和 b 按位 &amp; 的值是：%d，二进制表示如下：\n&quot;</span>, and);</span><br><span class="line">    printBinary(and);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">整数 a 的值是：<span class="number">23</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010111</span></span><br><span class="line">整数 b 的值是：<span class="number">13</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span></span><br><span class="line">a 和 b 按位 &amp; 的值是：<span class="number">5</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000101</span></span><br></pre></td></tr></table></figure><p><strong>52.按位或 |</strong></p><p><strong>题目：</strong> 学习使用按位或 |。</p><p><strong>问题分析：</strong> 按位或有 4 种情况，只要有一个是 1 ，结果就是 1 。</p><ul><li>0 | 0=0;</li><li>0 | 1=1;</li><li>1 | 0=1;</li><li>1 | 1=1;</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printBinary</span><span class="params">(<span class="type">int</span> num)</span> &#123;<span class="comment">// 打印二进制</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> bit = (num &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, bit);</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">8</span> == <span class="number">0</span>)<span class="comment">// 每8个加一个空格</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">18</span>, b = <span class="number">13</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数 a 的值是：%d，二进制表示如下：\n&quot;</span>, a);</span><br><span class="line">    printBinary(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;整数 b 的值是：%d，二进制表示如下：\n&quot;</span>, b);</span><br><span class="line">    printBinary(b);</span><br><span class="line">    <span class="type">int</span> or = a | b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a 和 b 按位 | 的值是：%d，二进制表示如下：\n&quot;</span>, or);</span><br><span class="line">    printBinary(or);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">整数 a 的值是：<span class="number">18</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00010010</span></span><br><span class="line">整数 b 的值是：<span class="number">13</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span></span><br><span class="line">a 和 b 按位 | 的值是：<span class="number">31</span>，二进制表示如下：</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00011111</span></span><br></pre></td></tr></table></figure><p><strong>53.</strong></p><p><strong>题目：</strong>学习使用按位异或 ^。</p><p><strong>程序分析：</strong>0^0=0; 0^1=1; 1^0=1; 1^1=0 。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    a=<span class="number">077</span>;</span><br><span class="line">    b=a^<span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b 的值为 %d \n&quot;</span>,b);</span><br><span class="line">    b^=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;b 的值为 %d \n&quot;</span>,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b 的值为 <span class="number">60</span> </span><br><span class="line">b 的值为 <span class="number">59</span> </span><br></pre></td></tr></table></figure><p><strong>54.</strong></p><p><strong>题目：</strong>取一个整数 a 从右端开始的 4～7 位。</p><p><strong>程序分析：</strong>可以这样考虑：</p><p>(1)先使 a 右移 4 位。</p><p>(2)设置一个低 4 位全为 1，其余全为 0 的数，可用~(~0&lt;&lt;4)</p><p>(3)将上面二者进行 &amp; 运算。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> a,b,c,d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%o&quot;</span>,&amp;a);</span><br><span class="line">    b=a&gt;&gt;<span class="number">4</span>;</span><br><span class="line">    c=~(~<span class="number">0</span>&lt;&lt;<span class="number">4</span>);</span><br><span class="line">    d=b&amp;c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%o\n%o\n&quot;</span>,a,d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入整数：</span><br><span class="line">36</span><br><span class="line">36</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>55.</strong></p><p><strong>题目：</strong>学习使用按位取反~。</p><p><strong>程序分析：</strong>~0=-1; ~1=-2;</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    a=<span class="number">234</span>;</span><br><span class="line">    b=~a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a 的按位取反值为（十进制） %d \n&quot;</span>,b);</span><br><span class="line">    a=~a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a 的按位取反值为（十六进制） %x \n&quot;</span>,a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入整数：</span><br><span class="line">a 的按位取反值为（十进制） -235 </span><br><span class="line">a 的按位取反值为（十六进制） ffffff15 </span><br></pre></td></tr></table></figure><p><strong>56.</strong></p><p><strong>题目：</strong>画图，学用circle画圆形。</p><p><strong>程序分析：</strong>无</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;graphics.h&gt;</span> <span class="comment">//VC6.0中是不能运行的，要在Turbo2.0/3.0中  </span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>   </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="type">int</span> driver,mode,i;   </span><br><span class="line">    <span class="type">float</span> j=<span class="number">1</span>,k=<span class="number">1</span>;   </span><br><span class="line">    driver=VGA;  </span><br><span class="line">    mode=VGAHI;   </span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);   </span><br><span class="line">    setbkcolor(YELLOW);   </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">25</span>;i++)   </span><br><span class="line">    &#123;   </span><br><span class="line">        setcolor(<span class="number">8</span>);   </span><br><span class="line">        circle(<span class="number">310</span>,<span class="number">250</span>,k);   </span><br><span class="line">        k=k+j;   </span><br><span class="line">    j=j+<span class="number">0.3</span>;   </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>57.</strong></p><p><strong>题目：</strong>画图，学用line画直线（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> driver,mode,i;</span><br><span class="line">    <span class="type">float</span> x0,y0,y1,x1;</span><br><span class="line">    <span class="type">float</span> j=<span class="number">12</span>,k;</span><br><span class="line">    driver=VGA;mode=VGAHI;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    setbkcolor(GREEN);</span><br><span class="line">    x0=<span class="number">263</span>;y0=<span class="number">263</span>;y1=<span class="number">275</span>;x1=<span class="number">275</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        setcolor(<span class="number">5</span>);</span><br><span class="line">        line(x0,y0,x0,y1);</span><br><span class="line">        x0=x0<span class="number">-5</span>;</span><br><span class="line">        y0=y0<span class="number">-5</span>;   </span><br><span class="line">        x1=x1+<span class="number">5</span>;   </span><br><span class="line">        y1=y1+<span class="number">5</span>;   </span><br><span class="line">        j=j+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>58.</strong></p><p><strong>题目：</strong>学用rectangle画方形。（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x0,y0,y1,x1,driver,mode,i;</span><br><span class="line">    driver=VGA;mode=VGAHI;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    setbkcolor(YELLOW);</span><br><span class="line">    x0=<span class="number">263</span>;y0=<span class="number">263</span>;y1=<span class="number">275</span>;x1=<span class="number">275</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">18</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        setcolor(<span class="number">1</span>);</span><br><span class="line">        rectangle(x0,y0,x1,y1);</span><br><span class="line">        x0=x0<span class="number">-5</span>;</span><br><span class="line">        y0=y0<span class="number">-5</span>;</span><br><span class="line">        x1=x1+<span class="number">5</span>;</span><br><span class="line">        y1=y1+<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    settextstyle(DEFAULT_FONT,HORIZ_DIR,<span class="number">2</span>);</span><br><span class="line">    outtextxy(<span class="number">150</span>,<span class="number">40</span>,<span class="string">&quot;How beautiful it is!&quot;</span>);</span><br><span class="line">    line(<span class="number">130</span>,<span class="number">60</span>,<span class="number">480</span>,<span class="number">60</span>);</span><br><span class="line">    setcolor(<span class="number">2</span>);</span><br><span class="line">    circle(<span class="number">269</span>,<span class="number">269</span>,<span class="number">137</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>59.</strong></p><p><strong>题目：</strong>画图，综合例子。（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> PAI 3.1415926</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> B 0.809</span></span><br><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,x0,y0,x,y,driver,mode;</span><br><span class="line">    <span class="type">float</span> a;</span><br><span class="line">    driver=CGA;mode=CGAC0;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    setcolor(<span class="number">3</span>);</span><br><span class="line">    setbkcolor(GREEN);</span><br><span class="line">    x0=<span class="number">150</span>;y0=<span class="number">100</span>;</span><br><span class="line">    circle(x0,y0,<span class="number">10</span>);</span><br><span class="line">    circle(x0,y0,<span class="number">20</span>);</span><br><span class="line">    circle(x0,y0,<span class="number">50</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a=(<span class="number">2</span>*PAI/<span class="number">16</span>)*i;</span><br><span class="line">        x=<span class="built_in">ceil</span>(x0+<span class="number">48</span>*<span class="built_in">cos</span>(a));</span><br><span class="line">        y=<span class="built_in">ceil</span>(y0+<span class="number">48</span>*<span class="built_in">sin</span>(a)*B);</span><br><span class="line">        setcolor(<span class="number">2</span>); line(x0,y0,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    setcolor(<span class="number">3</span>);circle(x0,y0,<span class="number">60</span>);</span><br><span class="line">    <span class="comment">/* Make 0 time normal size letters */</span></span><br><span class="line">    settextstyle(DEFAULT_FONT,HORIZ_DIR,<span class="number">0</span>);</span><br><span class="line">    outtextxy(<span class="number">10</span>,<span class="number">170</span>,<span class="string">&quot;press a key&quot;</span>);</span><br><span class="line">    getch();</span><br><span class="line">    setfillstyle(HATCH_FILL,YELLOW);</span><br><span class="line">    floodfill(<span class="number">202</span>,<span class="number">100</span>,WHITE);</span><br><span class="line">    getch();</span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;=<span class="number">500</span>;k++)</span><br><span class="line">    &#123;</span><br><span class="line">        setcolor(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">16</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            a=(<span class="number">2</span>*PAI/<span class="number">16</span>)*i+(<span class="number">2</span>*PAI/<span class="number">180</span>)*k;</span><br><span class="line">            x=<span class="built_in">ceil</span>(x0+<span class="number">48</span>*<span class="built_in">cos</span>(a));</span><br><span class="line">            y=<span class="built_in">ceil</span>(y0+<span class="number">48</span>+<span class="built_in">sin</span>(a)*B);</span><br><span class="line">            setcolor(<span class="number">2</span>); line(x0,y0,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">50</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a=(<span class="number">2</span>*PAI/<span class="number">16</span>)*i+(<span class="number">2</span>*PAI/<span class="number">180</span>)*k<span class="number">-1</span>;</span><br><span class="line">            x=<span class="built_in">ceil</span>(x0+<span class="number">48</span>*<span class="built_in">cos</span>(a));</span><br><span class="line">            y=<span class="built_in">ceil</span>(y0+<span class="number">48</span>*<span class="built_in">sin</span>(a)*B);</span><br><span class="line">            line(x0,y0,x,y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    restorecrtmode();</span><br></pre></td></tr></table></figure><p><strong>60.</strong></p><p><strong>题目：</strong>画图，综合例子2。（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LEFT 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TOP 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RIGHT 639</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOTTOM 479</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINES 400</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXCOLOR 15</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> driver,mode,error;</span><br><span class="line">    <span class="type">int</span> x1,y1;</span><br><span class="line">    <span class="type">int</span> x2,y2;</span><br><span class="line">    <span class="type">int</span> dx1,dy1,dx2,dy2,i=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> color=<span class="number">0</span>;</span><br><span class="line">    driver=VGA;</span><br><span class="line">    mode=VGAHI;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    x1=x2=y1=y2=<span class="number">10</span>;</span><br><span class="line">    dx1=dy1=<span class="number">2</span>;</span><br><span class="line">    dx2=dy2=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span>(!kbhit())</span><br><span class="line">    &#123;</span><br><span class="line">        line(x1,y1,x2,y2);</span><br><span class="line">        x1+=dx1;y1+=dy1;</span><br><span class="line">        x2+=dx2;y2+dy2;</span><br><span class="line">        <span class="keyword">if</span>(x1&lt;=LEFT||x1&gt;=RIGHT)</span><br><span class="line">            dx1=-dx1;</span><br><span class="line">        <span class="keyword">if</span>(y1&lt;=TOP||y1&gt;=BOTTOM)</span><br><span class="line">            dy1=-dy1;</span><br><span class="line">        <span class="keyword">if</span>(x2&lt;=LEFT||x2&gt;=RIGHT)</span><br><span class="line">            dx2=-dx2;</span><br><span class="line">        <span class="keyword">if</span>(y2&lt;=TOP||y2&gt;=BOTTOM)</span><br><span class="line">                dy2=-dy2;</span><br><span class="line">        <span class="keyword">if</span>(++count&gt;LINES)</span><br><span class="line">        &#123;</span><br><span class="line">            setcolor(color);</span><br><span class="line">            color=(color&gt;=MAXCOLOR)?<span class="number">0</span>:++color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closegraph();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>61.</strong></p><p><strong>题目：</strong>打印出杨辉三角形（要求打印出10行）。</p><p><strong>程序分析：</strong></p><p>结构如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1    1</span><br><span class="line">1    2    1</span><br><span class="line">1    3    3    1</span><br><span class="line">1    4    6    4    1</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        a[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        a[i][i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;i;j++)</span><br><span class="line">            a[i][j]=a[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i<span class="number">-1</span>][j];</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%5d&quot;</span>,a[i][j]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码执行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">3</span>    <span class="number">3</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span>    <span class="number">6</span>    <span class="number">4</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">5</span>   <span class="number">10</span>   <span class="number">10</span>    <span class="number">5</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">6</span>   <span class="number">15</span>   <span class="number">20</span>   <span class="number">15</span>    <span class="number">6</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">7</span>   <span class="number">21</span>   <span class="number">35</span>   <span class="number">35</span>   <span class="number">21</span>    <span class="number">7</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">8</span>   <span class="number">28</span>   <span class="number">56</span>   <span class="number">70</span>   <span class="number">56</span>   <span class="number">28</span>    <span class="number">8</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">9</span>   <span class="number">36</span>   <span class="number">84</span>  <span class="number">126</span>  <span class="number">126</span>   <span class="number">84</span>   <span class="number">36</span>    <span class="number">9</span>    <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>62.</strong></p><p><strong>题目：</strong>学习putpixel画点，（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,driver=VGA,mode=VGAHI;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    setbkcolor(YELLOW);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">50</span>;i&lt;=<span class="number">230</span>;i+=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">50</span>;j&lt;=<span class="number">230</span>;j++)</span><br><span class="line">            putpixel(i,j,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">50</span>;j&lt;=<span class="number">230</span>;j+=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">50</span>;i&lt;=<span class="number">230</span>;i++)</span><br><span class="line">            putpixel(i,j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>63.</strong></p><p><strong>题目：</strong>画椭圆ellipse（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;conio.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">360</span>,y=<span class="number">160</span>,driver=VGA,mode=VGAHI;</span><br><span class="line">    <span class="type">int</span> num=<span class="number">20</span>,i;</span><br><span class="line">    <span class="type">int</span> top,bottom;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    top=y<span class="number">-30</span>;</span><br><span class="line">    bottom=y<span class="number">-30</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ellipse(<span class="number">250</span>,<span class="number">250</span>,<span class="number">0</span>,<span class="number">360</span>,top,bottom);</span><br><span class="line">        top-=<span class="number">5</span>;</span><br><span class="line">        bottom+=<span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>64.</strong></p><p><strong>题目：</strong>利用ellipse and rectangle 画图（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;conio.h&quot;</span></span></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> driver=VGA,mode=VGAHI;</span><br><span class="line">    <span class="type">int</span> i,num=<span class="number">15</span>,top=<span class="number">50</span>;</span><br><span class="line">    <span class="type">int</span> left=<span class="number">20</span>,right=<span class="number">50</span>;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ellipse(<span class="number">250</span>,<span class="number">250</span>,<span class="number">0</span>,<span class="number">360</span>,right,left);</span><br><span class="line">        ellipse(<span class="number">250</span>,<span class="number">250</span>,<span class="number">0</span>,<span class="number">360</span>,<span class="number">20</span>,top);</span><br><span class="line">        rectangle(<span class="number">20</span><span class="number">-2</span>*i,<span class="number">20</span><span class="number">-2</span>*i,<span class="number">10</span>*(i+<span class="number">2</span>),<span class="number">10</span>*(i+<span class="number">2</span>));</span><br><span class="line">        right+=<span class="number">5</span>;</span><br><span class="line">        left+=<span class="number">5</span>;</span><br><span class="line">        top+=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>65.</strong></p><p><strong>题目：</strong>一个最优美的图案（在TC中实现）。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;graphics.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dos.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;conio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdarg.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXPTS 15</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI 3.1415926</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PTS</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> x,y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">double</span> AspectRatio=<span class="number">0.85</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">LineToDemo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">viewporttype</span> <span class="title">vp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">PTS</span> <span class="title">points</span>[<span class="title">MAXPTS</span>];</span></span><br><span class="line">    <span class="type">int</span> i, j, h, w, xcenter, ycenter;</span><br><span class="line">    <span class="type">int</span> radius, angle, step;</span><br><span class="line">    <span class="type">double</span> rads;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; MoveTo / LineTo Demonstration&quot;</span> );</span><br><span class="line">    getviewsettings( &amp;vp );</span><br><span class="line">    h = vp.bottom - vp.top;</span><br><span class="line">    w = vp.right - vp.left;</span><br><span class="line">    xcenter = w / <span class="number">2</span>; <span class="comment">/* Determine the center of circle */</span></span><br><span class="line">    ycenter = h / <span class="number">2</span>;</span><br><span class="line">    radius = (h - <span class="number">30</span>) / (AspectRatio * <span class="number">2</span>);</span><br><span class="line">    step = <span class="number">360</span> / MAXPTS; <span class="comment">/* Determine # of increments */</span></span><br><span class="line">    angle = <span class="number">0</span>; <span class="comment">/* Begin at zero degrees */</span></span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span> ; i&lt;MAXPTS ; ++i )&#123; <span class="comment">/* Determine circle intercepts */</span></span><br><span class="line">        rads = (<span class="type">double</span>)angle * PI / <span class="number">180.0</span>; <span class="comment">/* Convert angle to radians */</span></span><br><span class="line">        points[i].x = xcenter + (<span class="type">int</span>)( <span class="built_in">cos</span>(rads) * radius );</span><br><span class="line">        points[i].y = ycenter - (<span class="type">int</span>)( <span class="built_in">sin</span>(rads) * radius * AspectRatio );</span><br><span class="line">        angle += step; <span class="comment">/* Move to next increment */</span></span><br><span class="line">    &#125;</span><br><span class="line">    circle( xcenter, ycenter, radius ); <span class="comment">/* Draw bounding circle */</span></span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span> ; i&lt;MAXPTS ; ++i )&#123; <span class="comment">/* Draw the cords to the circle */</span></span><br><span class="line">        <span class="keyword">for</span>( j=i ; j&lt;MAXPTS ; ++j )&#123; <span class="comment">/* For each remaining intersect */</span></span><br><span class="line">            moveto(points[i].x, points[i].y); <span class="comment">/* Move to beginning of cord */</span></span><br><span class="line">            lineto(points[j].x, points[j].y); <span class="comment">/* Draw the cord */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> driver,mode;</span><br><span class="line">    driver=CGA;mode=CGAC0;</span><br><span class="line">    initgraph(&amp;driver,&amp;mode,<span class="string">&quot;&quot;</span>);</span><br><span class="line">    setcolor(<span class="number">3</span>);</span><br><span class="line">    setbkcolor(GREEN);</span><br><span class="line">    LineToDemo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>66.</strong></p><p><strong>题目：</strong>输入3个数a,b,c，按大小顺序输出。</p><p><strong>程序分析：</strong>利用指针方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># <span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *, <span class="type">int</span> *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    <span class="type">int</span> *p1, *p2, *p3;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入 a, b ,c:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    p1 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    p3 = &amp;c;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">        swap(p1, p2);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;c)</span><br><span class="line">        swap(p1, p3);</span><br><span class="line">    <span class="keyword">if</span>(b&gt;c)</span><br><span class="line">        swap(p2, p3);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d %d\n&quot;</span>, a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *s1, <span class="type">int</span> *s2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    t = *s1; *s1 = *s2; *s2 = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序执行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入 a, b ,c:</span><br><span class="line">1 3 2</span><br><span class="line">1 2 3</span><br></pre></td></tr></table></figure><p><strong>67.</strong></p><p><strong>题目：</strong>输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">int</span> *s,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> max=s[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i]&gt;max)</span><br><span class="line">        &#123;</span><br><span class="line">            max=s[i];</span><br><span class="line">            a=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[a]=s[<span class="number">0</span>];</span><br><span class="line">    s[<span class="number">0</span>]=max;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="type">int</span> min=s[n<span class="number">-1</span>];</span><br><span class="line">    <span class="type">int</span> b=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j]&lt;min)</span><br><span class="line">        &#123;</span><br><span class="line">            min=s[j];</span><br><span class="line">            b=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    s[b]=s[n<span class="number">-1</span>];</span><br><span class="line">    s[n<span class="number">-1</span>]=min;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">printf_s</span><span class="params">(<span class="type">int</span> *s,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,s[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> i,n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;设置数组长度(&lt;20):&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入 %d 个元素:\n&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s[i]);</span><br><span class="line">    fun(s,n);</span><br><span class="line">    printf_s(s,n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果未：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">设置数组长度(&lt;<span class="number">20</span>):<span class="number">5</span> </span><br><span class="line">输入 <span class="number">5</span> 个元素:</span><br><span class="line"><span class="number">12</span> <span class="number">123</span> <span class="number">4</span> <span class="number">65</span> <span class="number">21</span></span><br><span class="line"><span class="number">123</span> <span class="number">12</span> <span class="number">21</span> <span class="number">65</span> <span class="number">4</span> </span><br></pre></td></tr></table></figure><p><strong>68.</strong></p><p><strong>题目：</strong>有 n 个整数，使其前面各数顺序向后移 m 个位置，最后m个数变成最前面的 m 个数。</p><p><strong>程序分析：</strong>可以使用一个辅助数组来保存需要移动的元素，然后再将元素按照要求移动到正确的位置。</p><p><strong>实例1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">// 通过 shiftArray 函数来实现数组元素的移动。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">shiftArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp[m];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存最后 m 个数到临时数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - m, j = <span class="number">0</span>; i &lt; n; i++, j++) &#123;</span><br><span class="line">        temp[j] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将前面的 n-m 个数向后移动 m 个位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        arr[i + m] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将临时数组中的数放到最前面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 main 函数中获取用户输入的数组和要移动的位置，调用s hiftArray 函数，最后输出移动后的数组</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整数个数 n：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入向后移动的位置 m：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> arr[n];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入 %d 个整数：&quot;</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shiftArray(arr, n, m);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;移动后的数组：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实例2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> i,n,offset;</span><br><span class="line">    <span class="comment">//输入数组大小和数组内容</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Total numbers?\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Input %d numbers.\n&quot;</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    <span class="comment">//输入滚动偏移量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Set your offset.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;offset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Offset is %d.\n&quot;</span>,offset);</span><br><span class="line">    <span class="comment">//打印滚动前数组</span></span><br><span class="line">    print_arr(arr,n);</span><br><span class="line">    <span class="comment">//滚动数组并打印</span></span><br><span class="line">    move(arr,n,offset);</span><br><span class="line">    print_arr(arr,n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>,<span class="built_in">array</span>[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//滚动数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">move</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[],<span class="type">int</span> n,<span class="type">int</span> offset)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> *p,*arr_end;</span><br><span class="line">    arr_end=<span class="built_in">array</span>+n;      <span class="comment">//数组最后一个元素的下一个位置</span></span><br><span class="line">    <span class="type">int</span> last;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//滚动直到偏移量为0</span></span><br><span class="line">    <span class="keyword">while</span>(offset)</span><br><span class="line">    &#123;</span><br><span class="line">        last=*(arr_end<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(p=arr_end<span class="number">-1</span>;p!=<span class="built_in">array</span>;--p)   <span class="comment">//向右滚动一位</span></span><br><span class="line">            *p=*(p<span class="number">-1</span>);</span><br><span class="line">        *<span class="built_in">array</span>=last;</span><br><span class="line">        --offset;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>69.</strong></p><p><strong>题目：</strong>有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">50</span>],n,*p,j,loop,i,m,k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入这一圈人的数量:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    p=num;</span><br><span class="line">    <span class="comment">//开始给这些人编号</span></span><br><span class="line">    <span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(p+j)=j+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">0</span>;<span class="comment">//i用于计数,即让指针后移</span></span><br><span class="line">    m=<span class="number">0</span>;<span class="comment">//m记录退出圈子的人数</span></span><br><span class="line">    k=<span class="number">0</span>;<span class="comment">//k报数1,2,3</span></span><br><span class="line">    <span class="keyword">while</span>(m&lt;n<span class="number">-1</span>)<span class="comment">//当退出的人数不大于总人数时，即留下的人数至少是一个人</span></span><br><span class="line">        <span class="comment">//这句不能写成m&lt;n,因为假设有8人，当退出了6人时，此时还是进行人数退出，即m++，</span></span><br><span class="line">        <span class="comment">//这时是7&lt;8，剩下的一个人自己喊1，2,3那么他也就退出了，将不会有输出</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(p+i)!=<span class="number">0</span>)<span class="comment">//如果这个人的头上编号不是0就开始报数加1，这里采用的方法是报数为3的人头上编号重置为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (k==<span class="number">3</span>)</span><br><span class="line">        &#123;    k=<span class="number">0</span>;    <span class="comment">//报数清零，即下一个人从1开始报数</span></span><br><span class="line">            *(p+i)=<span class="number">0</span>;<span class="comment">//将报数为3的人编号重置为0</span></span><br><span class="line">            m++;    <span class="comment">//退出人数加1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i++;      <span class="comment">//指针后移</span></span><br><span class="line">        <span class="keyword">if</span> (i==n)<span class="comment">//这句很关键，如果到了队尾，就要使指针重新指向对头</span></span><br><span class="line">            <span class="comment">//并且它只能放在i++后面，因为只有i++了才有可能i==n</span></span><br><span class="line">        &#123;</span><br><span class="line">            i=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在剩下的人是:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (loop=<span class="number">0</span>;loop&lt;n;loop++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[loop]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%2d号\n&quot;</span>,num[loop]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序执行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入这一圈人的数量:</span><br><span class="line">8</span><br><span class="line">现在剩下的人是: 7号</span><br></pre></td></tr></table></figure><p><strong>70.</strong></p><p><strong>题目：</strong>写一个函数，求一个字符串的长度，在 main 函数中输入字符串，并输出其长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">char</span> *s)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>]; <span class="comment">// 可以根据实际情况增大数组长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入字符串:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> len = length(str); <span class="comment">// 调用 length 函数计算字符串长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;字符串有 %d 个字符。\n&quot;</span>, len);</span><br><span class="line">    <span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//求字符串长度  </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(<span class="type">char</span> *s)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*s != <span class="string">&#x27;\0&#x27;</span>) &#123;  </span><br><span class="line">        i++;   </span><br><span class="line">        s++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> i;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上程序执行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入字符串:</span><br><span class="line">www.runoob.com</span><br><span class="line">字符串有 14 个字符。</span><br></pre></td></tr></table></figure><p><strong>71.</strong></p><p><strong>题目：</strong>编写input()和output()函数输入，输出5个学生的数据记录。</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span>  age;</span><br><span class="line">&#125;Stu;</span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(Stu*stu)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(Stu*stu)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Stu stu[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入5个学生的信息：姓名 性别 年龄:\n&quot;</span>);</span><br><span class="line">    input(stu);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5个学生的信息如下：\n姓名  性别  年龄\n&quot;</span>);</span><br><span class="line">    output(stu);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">input</span><span class="params">(Stu*stu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>,stu[i].name,stu[i].sex,&amp;(stu[i].age));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(Stu*stu)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %s %d\n&quot;</span>,stu[i].name,stu[i].sex,stu[i].age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上程序执行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">请输入<span class="number">5</span>个学生的信息：姓名 性别 年龄:</span><br><span class="line">aaa m <span class="number">15</span></span><br><span class="line">bbb m <span class="number">16</span></span><br><span class="line">ccc m <span class="number">15</span></span><br><span class="line">ddd m <span class="number">17</span></span><br><span class="line">eee m <span class="number">16</span></span><br><span class="line"><span class="number">5</span>个学生的信息如下：</span><br><span class="line">姓名  性别  年龄</span><br><span class="line">aaa m <span class="number">15</span></span><br><span class="line">bbb m <span class="number">16</span></span><br><span class="line">ccc m <span class="number">15</span></span><br><span class="line">ddd m <span class="number">17</span></span><br><span class="line">eee m <span class="number">16</span></span><br></pre></td></tr></table></figure><p><strong>72.</strong></p><p><strong>题目：</strong>创建一个链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span>          data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"> </span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(LinkList h)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList Head=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Head=CreateList(n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;刚刚建立的各个链表元素的值为：\n&quot;</span>);</span><br><span class="line">    print(Head);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList L,p,q;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(!L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    q=L;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个元素的值:&quot;</span>,i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;(p-&gt;data));</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">        q=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(LinkList h)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList p=h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>73.</strong></p><p><strong>题目：</strong>反向输出一个链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    <span class="type">int</span>          data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"> </span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(LinkList h)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList Head=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    Head=CreateList(n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;刚刚建立的各个链表元素的值为：\n&quot;</span>);</span><br><span class="line">    print(Head);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">LinkList <span class="title function_">CreateList</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList L,p,q;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    L=(LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(!L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    q=L;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p=(LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入第%d个元素的值:&quot;</span>,i);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;(p-&gt;data));</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">        q=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(LinkList h)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList p=h-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p-&gt;data);</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>74.</strong></p><p><strong>目：</strong>连接两个链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> <span class="title">node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> node *link;</span><br><span class="line">link <span class="title function_">delete_node</span><span class="params">(link pointer,link tmp)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (tmp==<span class="literal">NULL</span>) <span class="comment">/*delete first node*/</span></span><br><span class="line">        <span class="keyword">return</span> pointer-&gt;next;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp-&gt;next-&gt;next==<span class="literal">NULL</span>)<span class="comment">/*delete last node*/</span></span><br><span class="line">            tmp-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">/*delete the other node*/</span></span><br><span class="line">            tmp-&gt;next=tmp-&gt;next-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> pointer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">selection_sort</span><span class="params">(link pointer,<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    link tmp,btmp;</span><br><span class="line">    <span class="type">int</span> i,min;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=pointer;</span><br><span class="line">        min=tmp-&gt;data;</span><br><span class="line">        btmp=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp-&gt;next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;tmp-&gt;next-&gt;data)</span><br><span class="line">            &#123;</span><br><span class="line">                min=tmp-&gt;next-&gt;data;</span><br><span class="line">                btmp=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp=tmp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\40: %d\n&quot;</span>,min);</span><br><span class="line">        pointer=delete_node(pointer,btmp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">link <span class="title function_">create_list</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[],<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    link tmp1,tmp2,pointer;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    pointer=(link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    pointer-&gt;data=<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">    tmp1=pointer;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp2=(link)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">        tmp2-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        tmp2-&gt;data=<span class="built_in">array</span>[i];</span><br><span class="line">        tmp1-&gt;next=tmp2;</span><br><span class="line">        tmp1=tmp1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line">link <span class="title function_">concatenate</span><span class="params">(link pointer1,link pointer2)</span></span><br><span class="line">&#123;</span><br><span class="line">    link tmp;</span><br><span class="line">    tmp=pointer1;</span><br><span class="line">    <span class="keyword">while</span>(tmp-&gt;next)</span><br><span class="line">        tmp=tmp-&gt;next;</span><br><span class="line">    tmp-&gt;next=pointer2;</span><br><span class="line">    <span class="keyword">return</span> pointer1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[]=&#123;<span class="number">3</span>,<span class="number">12</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>&#125;;</span><br><span class="line">    link ptr;</span><br><span class="line">    ptr=create_list(arr1,<span class="number">5</span>);</span><br><span class="line">    selection_sort(ptr,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>75.</strong></p><p><strong>题目：</strong>输入一个整数，并将其反转后输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n, reversedNumber = <span class="number">0</span>, remainder;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个整数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        remainder = n%<span class="number">10</span>;</span><br><span class="line">        reversedNumber = reversedNumber*<span class="number">10</span> + remainder;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;反转后的整数: %d&quot;</span>, reversedNumber);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个整数: 12345</span><br><span class="line">反转后的整数: 54321</span><br></pre></td></tr></table></figure><p><strong>76.</strong></p><p><strong>题目：</strong>编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n(利用指针函数)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">double</span>  <span class="title function_">evenumber</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">double</span>  <span class="title function_">oddnumber</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">    <span class="type">double</span> (*pfunc)(<span class="type">int</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) pfunc=evenumber;</span><br><span class="line">    <span class="keyword">else</span> pfunc=oddnumber;</span><br><span class="line">    </span><br><span class="line">    r=(*pfunc)(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,r);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span>  <span class="title function_">evenumber</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> s=<span class="number">0</span>,a=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a=(<span class="type">double</span>)<span class="number">1</span>/i;</span><br><span class="line">        s+=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span>  <span class="title function_">oddnumber</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> s=<span class="number">0</span>,a=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        a=(<span class="type">double</span>)<span class="number">1</span>/i;</span><br><span class="line">        s+=a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一个数字：2</span><br><span class="line">0.500000</span><br></pre></td></tr></table></figure><p><strong>77.</strong></p><p><strong>题目：</strong>练习指向指针的指针（使用多级指针遍历字符串数组）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个字符指针数组，存储字符串常量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *s[] = &#123;<span class="string">&quot;man&quot;</span>, <span class="string">&quot;woman&quot;</span>, <span class="string">&quot;girl&quot;</span>, <span class="string">&quot;boy&quot;</span>, <span class="string">&quot;sister&quot;</span>&#125;;</span><br><span class="line">    <span class="comment">// 定义一个指向字符指针的指针变量</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **q;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 遍历数组，并通过指向指针的指针输出每个字符串</span></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">5</span>; k++) &#123;</span><br><span class="line">        q = &amp;s[k]; <span class="comment">// 让指针 q 指向字符指针数组中第 k 个元素的地址</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *q); <span class="comment">// 解引用 q，输出对应的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><p><strong>指向指针的指针练习</strong>：<code>q</code> 被定义为 <code>const char **</code> 类型，它是一个指向 <code>const char *</code> 的指针。通过将 <code>q</code> 赋值为 <code>&amp;s[k]</code>，<code>q</code> 指向了字符指针数组 <code>s</code> 中第 <code>k</code> 个元素的地址。</p><p><strong><code>q = &amp;s[k]</code> 的作用</strong>：<code>s[k]</code> 是字符指针数组中的第 <code>k</code> 个元素，<code>&amp;s[k]</code> 表示第 <code>k</code> 个元素的地址。因此，<code>q</code> 最终指向了字符指针数组中的一个元素。</p><p><strong><code>printf(&quot;%s\n&quot;, \*q)</code> 的作用</strong>：<code>*q</code> 解引用 <code>q</code>，即获取 <code>s[k]</code> 指向的字符串内容，然后打印出来。</p><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">man</span><br><span class="line">woman</span><br><span class="line">girl</span><br><span class="line">boy</span><br><span class="line">sister</span><br></pre></td></tr></table></figure><p><strong>78.</strong></p><p><strong>题目：</strong>找到年龄最大的人，并输出。请找出程序中有什么问题</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义结构体类型，用于存储人员的姓名和年龄</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">man</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125; person[<span class="number">3</span>] = &#123;&#123;<span class="string">&quot;li&quot;</span>, <span class="number">18</span>&#125;, &#123;<span class="string">&quot;wang&quot;</span>, <span class="number">25</span>&#125;, &#123;<span class="string">&quot;sun&quot;</span>, <span class="number">22</span>&#125;&#125;; <span class="comment">// 初始化数组</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">man</span> *<span class="title">q</span> =</span> <span class="literal">NULL</span>; <span class="comment">// 用于指向年龄最大的人员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">man</span> *<span class="title">p</span> =</span> person; <span class="comment">// 指向数组的起始地址</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> max_age = <span class="number">0</span>; <span class="comment">// 存储最大年龄</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 遍历数组，找到年龄最大的人员</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (p-&gt;age &gt; max_age) &#123; <span class="comment">// 如果当前年龄大于 max_age</span></span><br><span class="line">            max_age = p-&gt;age; <span class="comment">// 更新 max_age</span></span><br><span class="line">            q = p; <span class="comment">// 将 q 指向当前人员</span></span><br><span class="line">        &#125;</span><br><span class="line">        p++; <span class="comment">// 移动到下一个人员</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出年龄最大的人员的姓名和年龄</span></span><br><span class="line">    <span class="keyword">if</span> (q != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s %d\n&quot;</span>, q-&gt;name, q-&gt;age);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到人员信息。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wang 25</span><br></pre></td></tr></table></figure><p><strong>79.</strong></p><p><strong>题目：</strong>字符串排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LEN 20 <span class="comment">// 定义常量表示字符串的最大长度</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 函数声明：用于交换两个字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span> *str1, <span class="type">char</span> *str2)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> str1[MAX_LEN], str2[MAX_LEN], str3[MAX_LEN];</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 提示用户输入字符串</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入3个字符串，每个字符串以回车结束:\n&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 使用 fgets 读取输入并去除换行符</span></span><br><span class="line">    fgets(str1, <span class="keyword">sizeof</span>(str1), <span class="built_in">stdin</span>);</span><br><span class="line">    str1[<span class="built_in">strcspn</span>(str1, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 去除换行符</span></span><br><span class="line"> </span><br><span class="line">    fgets(str2, <span class="keyword">sizeof</span>(str2), <span class="built_in">stdin</span>);</span><br><span class="line">    str2[<span class="built_in">strcspn</span>(str2, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 去除换行符</span></span><br><span class="line"> </span><br><span class="line">    fgets(str3, <span class="keyword">sizeof</span>(str3), <span class="built_in">stdin</span>);</span><br><span class="line">    str3[<span class="built_in">strcspn</span>(str3, <span class="string">&quot;\n&quot;</span>)] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">// 去除换行符</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 对字符串进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) &gt; <span class="number">0</span>) swap(str1, str2);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str2, str3) &gt; <span class="number">0</span>) swap(str2, str3);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(str1, str2) &gt; <span class="number">0</span>) swap(str1, str2);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 输出排序后的结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后的结果为：\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n%s\n%s\n&quot;</span>, str1, str2, str3);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 交换两个字符串的内容</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span> *str1, <span class="type">char</span> *str2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> temp[MAX_LEN];</span><br><span class="line">    <span class="built_in">strcpy</span>(temp, str1); <span class="comment">// 将 str1 复制到临时字符串 temp</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str1, str2); <span class="comment">// 将 str2 复制到 str1</span></span><br><span class="line">    <span class="built_in">strcpy</span>(str2, temp); <span class="comment">// 将 temp 复制到 str2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">请输入3个字符串,每个字符串以回车结束!:</span><br><span class="line">b</span><br><span class="line">a</span><br><span class="line">t</span><br><span class="line">排序后的结果为：</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">t</span><br></pre></td></tr></table></figure><p><strong>80.</strong></p><p><strong>题目：</strong>海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子平均分为五份，多了一个，这只 猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了 一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的， 问海滩上原来最少有多少个桃子？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;  <span class="comment">// n 表示初始桃子数</span></span><br><span class="line">    <span class="type">int</span> i, count;</span><br><span class="line">    <span class="type">int</span> found = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> (!found) &#123;</span><br><span class="line">        n += <span class="number">1</span>;  <span class="comment">// 假设初始桃子数</span></span><br><span class="line">        count = n;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((count - <span class="number">1</span>) % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                count = (count - <span class="number">1</span>) / <span class="number">5</span> * <span class="number">4</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">            found = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;最少有 %d 个桃子。\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3121</span><br></pre></td></tr></table></figure><p><strong>81.</strong></p><p><strong>题目：</strong>809<em>??=800</em>??+9<em>?? 其中??代表的两位数, 809</em>??为四位数，8<em>??的结果为两位数，9</em>??的结果为3位数。求??代表的两位数，及809*??后的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">long</span> <span class="type">int</span> b, <span class="type">long</span> <span class="type">int</span> i)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n%ld = 800 * %ld + 9 * %ld\n&quot;</span>, b,i,i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">void</span> <span class="title function_">output</span><span class="params">(<span class="type">long</span> <span class="type">int</span> b, <span class="type">long</span> <span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> a,b,i;</span><br><span class="line">    a = <span class="number">809</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">10</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">        b = i * a;</span><br><span class="line">        <span class="keyword">if</span> (b &gt;= <span class="number">1000</span> &amp;&amp; b &lt;= <span class="number">10000</span> &amp;&amp; <span class="number">8</span> * i &lt; <span class="number">100</span> &amp;&amp; <span class="number">9</span> * i &gt;= <span class="number">100</span>)&#123;</span><br><span class="line">            output(b, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9708 = 800 * 12 + 9 * 12</span><br></pre></td></tr></table></figure><p><strong>82.</strong></p><p><strong>题目：</strong>八进制转换为十进制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">octalToDecimal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *octalNumber)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> octalNumber[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输入八进制数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个八进制数: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, octalNumber);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 转换为十进制</span></span><br><span class="line">    <span class="type">int</span> decimalNumber = octalToDecimal(octalNumber);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;八进制数 %s 转换为十进制数是: %d\n&quot;</span>, octalNumber, decimalNumber);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 八进制转换为十进制的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">octalToDecimal</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *octalNumber)</span> &#123;</span><br><span class="line">    <span class="type">int</span> decimalNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> length = <span class="built_in">strlen</span>(octalNumber);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> digit = octalNumber[i] - <span class="string">&#x27;0&#x27;</span>; <span class="comment">// 将字符转换为数字</span></span><br><span class="line">        decimalNumber += digit * <span class="built_in">pow</span>(<span class="number">8</span>, length - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> decimalNumber;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入一个八进制数: 16</span><br><span class="line">八进制数 16 转换为十进制数是: 14</span><br></pre></td></tr></table></figure><blockquote><p>代码解析：</p><p><strong>头文件</strong>: 包含必要的头文件 <code>stdio.h</code>（用于输入输出）、<code>math.h</code>（用于数学计算）和 <code>string.h</code>（用于字符串操作）。</p><p><strong>函数声明</strong>: <code>int octalToDecimal(const char *octalNumber);</code> 声明了一个将八进制数转换为十进制数的函数。</p><p>主函数:</p><ol><li><p>定义一个字符数组 <code>octalNumber</code> 来存储用户输入的八进制数。</p></li><li><p>使用 <code>scanf</code> 函数获取用户输入的八进制数。</p></li><li><p>调用 <code>octalToDecimal</code> 函数将八进制数转换为十进制数。</p></li><li><p>使用 <code>printf</code> 函数输出转换后的十进制数。</p></li><li><p>八进制转换为十进制的函数</p></li></ol><p>:</p><p><code>octalToDecimal</code> 函数接收一个八进制数的字符串表示形式，并将其转换为十进制数。</p><p>使用 <code>strlen</code> 获取八进制字符串的长度。</p><p>遍历八进制字符串，每一位字符转换为对应的数字，并计算其对应的十进制值累加到 <code>decimalNumber</code>。</p></blockquote><p><strong>83.</strong></p><p><strong>题目：</strong>求0—7所能组成的奇数个数。</p><p><strong>程序分析：</strong></p><p>这个问题其实是一个排列组合的问题，设这个数为 <strong>sun=a1a2a3a4a5a6a7a8,a1-a8</strong> 表示这个数的某位的数值，当一个数的最后一位为奇数时，那么这个数一定为奇数，不管前面几位是什么数字。如果最后一位数为偶数，则这个数一定为偶数。</p><p>a1-a8可以取 0-7 这个八个数字，首位数字不为 0。</p><p>从该数为一位数到该数为8位数开始统计奇数的个数：</p><p>1.当只有一位数时也就是该数的最后一位，奇数个数为4</p><p>2.当该数为两位数时，奇数个数为4*7=28</p><p>3.当该数为三位数时，奇数个数为：4<em>8</em>7=224</p><p>…</p><p>8.当该数为八位数时，奇数个数为：4<em>8</em>8<em>8</em>8<em>8</em>8*7(依次为最后一位到第一位)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> agrc, <span class="type">char</span>*agrv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> sum = <span class="number">4</span>, s = <span class="number">4</span>;<span class="comment">//sum的初始值为4表示，只有一位数字组成的奇数个数为4个</span></span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">2</span>; j &lt;= <span class="number">8</span>; j++)</span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d位数为奇数的个数%ld\n&quot;</span>, j<span class="number">-1</span>, s);</span><br><span class="line">        <span class="keyword">if</span> (j &lt;= <span class="number">2</span>)</span><br><span class="line">            s *= <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            s *= <span class="number">8</span>;</span><br><span class="line">        sum += s;    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d位数为奇数的个数%ld\n&quot;</span>, j<span class="number">-1</span>, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;奇数的总个数为：%ld\n&quot;</span>, sum);</span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1位数为奇数的个数4</span><br><span class="line">2位数为奇数的个数28</span><br><span class="line">3位数为奇数的个数224</span><br><span class="line">4位数为奇数的个数1792</span><br><span class="line">5位数为奇数的个数14336</span><br><span class="line">6位数为奇数的个数114688</span><br><span class="line">7位数为奇数的个数917504</span><br><span class="line">8位数为奇数的个数7340032</span><br><span class="line">奇数的总个数为：8388608</span><br></pre></td></tr></table></figure><p><strong>84.</strong></p><p><strong>题目：</strong>一个偶数总能表示为两个素数之和。</p><p><strong>程序分析：</strong>我去，这是什么题目，要我证明这个问题吗？真不知道怎么证明。那就把一个偶数分解成两个素数吧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Isprimer</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> n,i;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;请输入一个偶数:\n&quot;</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    &#125;<span class="keyword">while</span>(n%<span class="number">2</span>!=<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(Isprimer(i)&amp;&amp;Isprimer(n-i))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;偶数%d可以分解成%d和%d两个素数的和\n&quot;</span>,n,i,n-i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Isprimer</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">4</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">3</span>;i&lt;<span class="built_in">sqrt</span>(n)+<span class="number">1</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(n%i==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入一个偶数:</span><br><span class="line">4</span><br><span class="line">偶数4可以分解成1和3两个素数的和</span><br></pre></td></tr></table></figure><p><strong>85.</strong></p><p><strong>目：</strong>判断一个素数能被几个9整除。</p><p><strong>程序分析：</strong>丫的！这题目的意思是判断一个素数能整除几个9组成的数吧？我就这么理解吧。素数是不 能被除1和自身之外的数整除的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p,i;</span><br><span class="line">    <span class="type">long</span> <span class="type">int</span> sum=<span class="number">9</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入一个素数:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;p);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;;i++)</span><br><span class="line">        <span class="keyword">if</span>(sum%p==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> sum=sum*<span class="number">10</span>+<span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;素数%d能整除%d个9组成的数%ld\n&quot;</span>,p,i,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入一个素数:</span><br><span class="line">13</span><br><span class="line">素数13能整除6个9组成的数999999</span><br></pre></td></tr></table></figure><p><strong>86.</strong></p><p><strong>题目：</strong>两个字符串连接程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span>* <span class="title function_">strconnect</span><span class="params">(<span class="type">char</span> *str1,<span class="type">char</span> *str2)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str1[<span class="number">20</span>],str2[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;请输入两个字符串，用回车分开:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, str1, str2);</span><br><span class="line">    str=strconnect(str1,str2);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;连接后的字符串为:&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span>* <span class="title function_">strconnect</span><span class="params">(<span class="type">char</span> *str1,<span class="type">char</span> *str2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>*str;</span><br><span class="line">    str=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">strlen</span>(str1)+<span class="built_in">strlen</span>(str2)+<span class="number">1</span>);</span><br><span class="line">    str[<span class="number">0</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(str,str1);</span><br><span class="line">    <span class="built_in">strcat</span>(str,str2);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>87.</strong></p><p><strong>题目：</strong>回答结果（结构体变量传递）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; a;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    a.x=<span class="number">3</span>;</span><br><span class="line">    a.c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    f(a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>,a.x,a.c);</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="keyword">struct</span> student b)</span><br><span class="line">&#123;</span><br><span class="line">    b.x=<span class="number">20</span>;</span><br><span class="line">    b.c=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,a</span><br></pre></td></tr></table></figure><p><strong>附：</strong></p><ol><li>结果为：<strong>3,a</strong>, 这是默认函数参数是按值传递（返回值不会改变）</li><li>要想改变，必须改变参数的传递方式为按址传递；</li><li>具体代码为:</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">&#125; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 函数声明 */</span></span><br><span class="line"><span class="keyword">struct</span> student <span class="title function_">f</span><span class="params">(<span class="keyword">struct</span> student *b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    a.x=<span class="number">3</span>;</span><br><span class="line">    a.c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    f(&amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d,%c&quot;</span>,a.x,a.c);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span>  student <span class="title function_">f</span><span class="params">(<span class="keyword">struct</span> student *b)</span></span><br><span class="line">&#123;</span><br><span class="line">    b -&gt;x = <span class="number">20</span>;</span><br><span class="line">    b-&gt;c =<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<a href="https://www.runoob.com/w3cnote/c-the-structure-of-the-parameter.html">C 语言关于结构体做参数传递</a></p></blockquote><p><strong>88.</strong></p><p><strong>题目：</strong>读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的 ＊</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入数字:\n&quot;</span>);i--;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(n&gt;<span class="number">50</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;请重新输入:\n&quot;</span>);i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请输入数字:</span><br><span class="line">5</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p><strong>89.</strong></p><p><strong>题目：</strong>某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下： 每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a,i,aa[<span class="number">4</span>],t;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入四位数字：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">    aa[<span class="number">0</span>]=a%<span class="number">10</span>;</span><br><span class="line">    aa[<span class="number">1</span>]=a%<span class="number">100</span>/<span class="number">10</span>;</span><br><span class="line">    aa[<span class="number">2</span>]=a%<span class="number">1000</span>/<span class="number">100</span>;</span><br><span class="line">    aa[<span class="number">3</span>]=a/<span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        aa[i]+=<span class="number">5</span>;</span><br><span class="line">        aa[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">3</span>/<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t=aa[i];</span><br><span class="line">        aa[i]=aa[<span class="number">3</span>-i];</span><br><span class="line">        aa[<span class="number">3</span>-i]=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数字：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">3</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,aa[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入四位数字：1234</span><br><span class="line">加密后的数字：9876</span><br></pre></td></tr></table></figure><p><strong>90.</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 5</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[M]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i,j,t;</span><br><span class="line">    i=<span class="number">0</span>;j=M<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        t=*(a+i);</span><br><span class="line">        *(a+i)=*(a+j);</span><br><span class="line">        *(a+j)=t;</span><br><span class="line">        i++;j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(a+i));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>91.</strong></p><p><strong>题目：</strong>时间函数举例1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span> * <span class="title">timeinfo</span>;</span></span><br><span class="line">    </span><br><span class="line">    time ( &amp;rawtime );</span><br><span class="line">    timeinfo = localtime ( &amp;rawtime );</span><br><span class="line">    <span class="built_in">printf</span> ( <span class="string">&quot;当前本地时间为: %s&quot;</span>, asctime (timeinfo) );</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前本地时间为: Tue Nov <span class="number">10</span> <span class="number">16</span>:<span class="number">28</span>:<span class="number">49</span> <span class="number">2015</span></span><br></pre></td></tr></table></figure><p><strong>92.</strong></p><p><strong>题目：</strong>时间函数举例2</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">time_t</span> start,end;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    start=time(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">300000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);  <span class="comment">// 返回两个time_t型变量之间的时间间隔</span></span><br><span class="line">    &#125;</span><br><span class="line">    end=time(<span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出执行时间</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;时间间隔为 %6.3f\n&quot;</span>,difftime(end,start));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">时间间隔为  <span class="number">1.000</span></span><br></pre></td></tr></table></figure><p><strong>93.</strong></p><p><strong>目：</strong>时间函数举例2</p><p><strong>程序分析：</strong>无。</p><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> i=<span class="number">10000000L</span>;</span><br><span class="line">    <span class="type">clock_t</span> start,finish;</span><br><span class="line">    <span class="type">double</span> TheTimes;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;做%ld次空循环需要的时间为&quot;</span>,i);</span><br><span class="line">    start=clock();</span><br><span class="line">    <span class="keyword">while</span>(i--);</span><br><span class="line">    finish=clock();</span><br><span class="line">    TheTimes=(<span class="type">double</span>)(finish-start)/CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f秒。\n&quot;</span>,TheTimes);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">做<span class="number">10000000</span>次空循环需要的时间为<span class="number">0.025367</span>秒。</span><br></pre></td></tr></table></figure><p><strong>94.</strong></p><p><strong>题目：</strong>猜谜游戏。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">caizi</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">char</span> begin;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">    srand((<span class="type">int</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> m = (rand() % <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;游戏开始，请输入数字:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">        <span class="keyword">if</span> (n == m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;猜中了，使用了 %d 次！\n&quot;</span>, count);</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你是神级人物了！膜拜\n&quot;</span>);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你已经达到最高级别，还需要玩吗？Y/N \n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;begin);</span><br><span class="line">                <span class="keyword">if</span> (begin == <span class="string">&#x27;Y&#x27;</span> || begin == <span class="string">&#x27;y&#x27;</span>)      <span class="comment">//重复玩的一个嵌套循环</span></span><br><span class="line">                &#123;</span><br><span class="line">                    caizi();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;谢谢，再见!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你是王级人物了！非常赞\n&quot;</span>);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;需要挑战最高级别不？Y/N \n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;begin);</span><br><span class="line">                <span class="keyword">if</span> (begin == <span class="string">&#x27;Y&#x27;</span> || begin == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    caizi();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;谢谢，再见!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">10</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你是大师级人物了！狂赞\n&quot;</span>);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;需要挑战最高级别不？Y/N \n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;begin);</span><br><span class="line">                <span class="keyword">if</span> (begin == <span class="string">&#x27;Y&#x27;</span> || begin == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    caizi();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;谢谢，再见!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">15</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你是钻石级人物了！怒赞\n&quot;</span>);</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;需要挑战最高级别不？Y/N \n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;begin);</span><br><span class="line">                <span class="keyword">if</span> (begin == <span class="string">&#x27;Y&#x27;</span> || begin == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    caizi();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;谢谢，再见!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                getchar();</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;你的技术还有待提高哦！重玩？ Y/N\n&quot;</span>);</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;begin);</span><br><span class="line">                <span class="keyword">if</span> (begin == <span class="string">&#x27;Y&#x27;</span> || begin == <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    caizi();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;谢谢，再见!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;太小了!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;重新输入:&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;太大了!&quot;</span>);</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;重新输入:&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;<span class="comment">//计数器</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    caizi();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">游戏开始，请输入数字:</span><br><span class="line"><span class="number">50</span></span><br><span class="line">太大了!</span><br><span class="line">重新输入:</span><br><span class="line"><span class="number">25</span></span><br><span class="line">太小了!</span><br><span class="line">重新输入:</span><br><span class="line"><span class="number">40</span></span><br><span class="line">太大了!</span><br><span class="line">重新输入:</span><br><span class="line"><span class="number">30</span></span><br><span class="line">太大了!</span><br><span class="line">重新输入:</span><br><span class="line"><span class="number">27</span></span><br><span class="line">太小了!</span><br><span class="line">重新输入:</span><br><span class="line"><span class="number">28</span></span><br><span class="line">猜中了，使用了 <span class="number">6</span> 次！</span><br><span class="line">你是大师级人物了！狂赞</span><br><span class="line">需要挑战最高级别不？Y/N </span><br><span class="line">N</span><br><span class="line">谢谢，再见!</span><br></pre></td></tr></table></figure><p><strong>95.</strong></p><p><strong>题目：</strong>简单的结构体应用实例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">programming</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">float</span> constant;</span><br><span class="line">    <span class="type">char</span> *pointer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">programming</span> <span class="title">variable</span>;</span></span><br><span class="line">    <span class="type">char</span> <span class="built_in">string</span>[] = <span class="string">&quot;菜鸟教程：https://www.runoob.com&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    variable.constant = <span class="number">1.23</span>;</span><br><span class="line">    variable.pointer = <span class="built_in">string</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>, variable.constant);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, variable.pointer);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.230000</span></span><br><span class="line">菜鸟教程：https:<span class="comment">//www.runoob.com</span></span><br></pre></td></tr></table></figure><p><strong>96.</strong></p><p><strong>题目：</strong>计算字符串中子串出现的次数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k,TLen,PLen,count=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> T[<span class="number">50</span>],P[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入两个字符串，以回车隔开，母串在前，子串在后：\n&quot;</span>);</span><br><span class="line">    gets(T);</span><br><span class="line">    gets(P);</span><br><span class="line">    TLen=<span class="built_in">strlen</span>(T);</span><br><span class="line">    PLen=<span class="built_in">strlen</span>(P);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=TLen-PLen;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>,k=i;j&lt;PLen&amp;&amp;P[j]==T[k];j++,k++)</span><br><span class="line">            ;</span><br><span class="line">        <span class="keyword">if</span>(j==PLen)count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,count);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入两个字符串，以回车隔开，母串在前，子串在后：</span><br><span class="line">abca</span><br><span class="line">a</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>97.</strong></p><p><strong>题目：</strong>从键盘输入一些字符，逐个把它们送到磁盘上去，直到输入一个#为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE*fp=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">25</span>];</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入你要保存到的文件的名称：\n&quot;</span>);</span><br><span class="line">    gets(filename);</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(filename,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error: cannot open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;现在你可以输入你要保存的一些字符，以#结束：\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span>((ch=getchar())!=<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">        fputc(ch,fp);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入你要保存到的文件的名称：</span><br><span class="line">test.txt</span><br><span class="line">现在你可以输入你要保存的一些字符，以#结束：</span><br><span class="line">www.runoob.com</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><strong>98.</strong></p><p><strong>题目：</strong>从键盘输入一个字符串，将小写字母全部转换成大写字母，然后输出到一个磁盘文件”test”中保存。 输入的字符串以！结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE*fp=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">50</span>];</span><br><span class="line">    <span class="type">int</span> i,len;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入一个字符串：\n&quot;</span>);</span><br><span class="line">    gets(str);</span><br><span class="line">    len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]&lt;=<span class="string">&#x27;z&#x27;</span>&amp;&amp;str[i]&gt;=<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">            str[i]-=<span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">&quot;test&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error: cannot open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个字符串：</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><p><strong>99.</strong></p><p><strong>题目：</strong>有两个磁盘文件A和B,各存放一行字母，要求把这两个文件中的信息合并（按字母顺序排列），输出到一个新文件C中。</p><p><strong>程序分析：</strong>你需要先创建 A.txt 与 B.txt。</p><p>A.txt文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure><p>B.txt文件内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE*fa,*fb,*fc;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">100</span>],str1[<span class="number">100</span>];</span><br><span class="line">    <span class="type">char</span> tem;</span><br><span class="line">    <span class="keyword">if</span>((fa=fopen(<span class="string">&quot;A.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>) <span class="comment">// A.txt 文件需要存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error: cannot open A file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(str,<span class="number">99</span>,fa);</span><br><span class="line">    fclose(fa);</span><br><span class="line">    <span class="keyword">if</span>((fb=fopen(<span class="string">&quot;B.txt&quot;</span>,<span class="string">&quot;r&quot;</span>))==<span class="literal">NULL</span>)  <span class="comment">// B.txt 文件需要存在</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error: cannot open B file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fgets(str1,<span class="number">100</span>,fb);</span><br><span class="line">    fclose(fb);</span><br><span class="line">    <span class="built_in">strcat</span>(str,str1);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="built_in">strlen</span>(str)<span class="number">-1</span>;i&gt;<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">            <span class="keyword">if</span>(str[j]&gt;str[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                tem=str[j];</span><br><span class="line">                str[j]=str[j+<span class="number">1</span>];</span><br><span class="line">                str[j+<span class="number">1</span>]=tem;</span><br><span class="line">            &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((fc=fopen(<span class="string">&quot;C.txt&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)  <span class="comment">// 合并为 C.txt</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error: cannot open C file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fputs</span>(str,fc);</span><br><span class="line">    fclose(fc);</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果后，打开 C.txt 内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p><strong>100.</strong></p><p><strong>题目：</strong>有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，况原有的数据和计算出的平均分数存放在磁盘文件”stud”中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> ID;</span><br><span class="line">    <span class="type">int</span> math;</span><br><span class="line">    <span class="type">int</span> English;</span><br><span class="line">    <span class="type">int</span> C;</span><br><span class="line">    <span class="type">int</span> avargrade;</span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;Stu;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    FILE*fp;</span><br><span class="line">    Stu stu[<span class="number">5</span>];</span><br><span class="line">    <span class="type">int</span> i,avargrade=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入5个同学的信息：学生号，姓名，3门成绩:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %s %d %d %d&quot;</span>,&amp;(stu[i].ID),stu[i].name,&amp;(stu[i].math),&amp;(stu[i].English),&amp;(stu[i].C));</span><br><span class="line">        stu[i].avargrade=(stu[i].math+stu[i].English+stu[i].C)/<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((fp=fopen(<span class="string">&quot;stud&quot;</span>,<span class="string">&quot;w&quot;</span>))==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;error :cannot open file!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        <span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d %s %d %d %d %d\n&quot;</span>,stu[i].ID,stu[i].name,stu[i].math,stu[i].English,</span><br><span class="line">                stu[i].C,stu[i].avargrade);</span><br><span class="line">    </span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">请输入<span class="number">5</span>个同学的信息：学生号，姓名，<span class="number">3</span>门成绩:</span><br><span class="line"><span class="number">1</span> a <span class="number">60</span> <span class="number">70</span> <span class="number">80</span></span><br><span class="line"><span class="number">2</span> b <span class="number">60</span> <span class="number">80</span> <span class="number">90</span></span><br><span class="line"><span class="number">3</span> c <span class="number">59</span> <span class="number">39</span> <span class="number">89</span></span><br><span class="line"><span class="number">4</span> e <span class="number">56</span> <span class="number">88</span> <span class="number">98</span></span><br><span class="line"><span class="number">5</span> d <span class="number">43</span> <span class="number">88</span> <span class="number">78</span></span><br></pre></td></tr></table></figure><p>打开 stud文件，内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> a <span class="number">60</span> <span class="number">70</span> <span class="number">80</span> <span class="number">70</span></span><br><span class="line"><span class="number">2</span> b <span class="number">60</span> <span class="number">80</span> <span class="number">90</span> <span class="number">76</span></span><br><span class="line"><span class="number">3</span> c <span class="number">59</span> <span class="number">39</span> <span class="number">89</span> <span class="number">62</span></span><br><span class="line"><span class="number">4</span> e <span class="number">56</span> <span class="number">88</span> <span class="number">98</span> <span class="number">80</span></span><br><span class="line"><span class="number">5</span> d <span class="number">43</span> <span class="number">88</span> <span class="number">78</span> <span class="number">69</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker备忘清单</title>
      <link href="/2024/11/24/Docker%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/Docker%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker备忘清单"><a href="#Docker备忘清单" class="headerlink" title="Docker备忘清单"></a>Docker备忘清单</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//在后台创建和运行容器</span><br><span class="line"></span><br><span class="line">$ docker run -d -p 80:80 docker/getting-started</span><br><span class="line"></span><br><span class="line">-d -咦分离（后台）模式运行容器</span><br><span class="line">-p 80:80 -将端口80映射到容器中的端口80， 格式：宿主机端口：容器端口</span><br><span class="line">docker/getting-started - 要使用的镜像</span><br><span class="line"></span><br><span class="line">在前台创建并运行容器（之后如果要退出容器但是不关闭容器，按Ctrl+P+Q即可）</span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> -p  8001:8080 --name my-nginx nginx</span><br><span class="line">-it - 交互式 bash 模式</span><br><span class="line">--<span class="built_in">rm</span> - 容器终止运行后自动删除容器文件</span><br><span class="line">-p 8001:8080 - 将 8001 端口映射到容器中的 8080 端口</span><br><span class="line">--name my-nginx - 指定名称</span><br><span class="line">nginx - 要使用的镜像</span><br></pre></td></tr></table></figure><h2 id="一般命令"><a href="#一般命令" class="headerlink" title="一般命令"></a>一般命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker ps列出正在运行的容器</span><br><span class="line">docker ps -a列出所有容器</span><br><span class="line">docker ps -s列出正在运行的容器 (带 CPU / 内存)</span><br><span class="line">docker images列出所有镜像</span><br><span class="line">docker <span class="built_in">exec</span> -it &lt;container&gt;  bash连接到容器</span><br><span class="line">docker logs &lt;container&gt;显示容器的控制台日志</span><br><span class="line">docker stop &lt;container&gt;停止容器</span><br><span class="line">docker restart &lt;container&gt;重启一个容器</span><br><span class="line">docker <span class="built_in">rm</span> &lt;container&gt;移除一个容器</span><br><span class="line">docker port &lt;container&gt;显示容器的端口映射</span><br><span class="line">docker top &lt;container&gt;列出进程</span><br><span class="line">docker <span class="built_in">kill</span> &lt;container&gt;杀死一个容器</span><br><span class="line">参数 &lt;container&gt; 可以是容器 <span class="built_in">id</span> 或名称</span><br></pre></td></tr></table></figure><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker start nginx-server开始</span><br><span class="line">docker stop nginx-server停止</span><br><span class="line">docker restart nginx-server重启</span><br><span class="line">docker pause nginx-server暂停</span><br><span class="line">docker unpause nginx-server取消暂停</span><br><span class="line">docker <span class="built_in">wait</span> nginx-server阻塞容器</span><br><span class="line">docker <span class="built_in">kill</span> nginx-server发送 SIGKILL</span><br><span class="line">docker attach nginx-server连接到现有容器</span><br></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker ps列出正在运行的容器</span><br><span class="line">docker ps -a列出所有容器</span><br><span class="line">docker logs nginx-server容器日志</span><br><span class="line">docker inspect nginx-server检查容器</span><br><span class="line">docker events nginx-server容器事件</span><br><span class="line">docker port nginx-server公共端口</span><br><span class="line">docker top nginx-server运行进程</span><br><span class="line">docker stats nginx-server容器资源使用</span><br><span class="line">docker diff nginx-server列出对容器所做的更改</span><br></pre></td></tr></table></figure><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker create [options] IMAGE</span><br><span class="line">  -a, --attach               <span class="comment"># 附加标准输出/错误</span></span><br><span class="line">  -i, --interactive          <span class="comment"># 附加标准输入（交互式）</span></span><br><span class="line">  -t, --<span class="built_in">tty</span>                  <span class="comment"># 伪终端 pseudo-tty</span></span><br><span class="line">      --name NAME            <span class="comment"># 命名你的镜像</span></span><br><span class="line">  -p, --publish 5000:5000    <span class="comment"># 端口映射（主机:容器）</span></span><br><span class="line">      --expose 5432          <span class="comment"># 向容器公开端口 </span></span><br><span class="line">  -P, --publish-all          <span class="comment"># 发布所有端口</span></span><br><span class="line">      --<span class="built_in">link</span> container:<span class="built_in">alias</span> <span class="comment"># 链接 linking</span></span><br><span class="line">  -v, --volume `<span class="built_in">pwd</span>`:/app    <span class="comment"># mount（需要绝对路径）</span></span><br><span class="line">  -e, --<span class="built_in">env</span> NAME=hello       <span class="comment"># 环境变量 env vars</span></span><br><span class="line">实例</span><br><span class="line">$ docker create --name my_redis --expose 6379 redis:3.0.2</span><br></pre></td></tr></table></figure><h3 id="操控"><a href="#操控" class="headerlink" title="操控"></a>操控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">重命名容器</span><br><span class="line">docker rename my-nginx nginx-server</span><br><span class="line"></span><br><span class="line">移除容器</span><br><span class="line">docker <span class="built_in">rm</span> nginx-server</span><br><span class="line"></span><br><span class="line">更新容器</span><br><span class="line">docker update --cpu-shares 512 -m 300M nginx-serve</span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="操控-1"><a href="#操控-1" class="headerlink" title="操控"></a>操控</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker images列出镜像</span><br><span class="line">docker rmi nginx删除镜像</span><br><span class="line">docker load &lt; ubuntu.tar.gz加载一个 tarred 存储库</span><br><span class="line">docker load --input ubuntu.tar加载一个 tarred 存储库</span><br><span class="line">docker save busybox &gt; ubuntu.tar将镜像保存到 tar 存档</span><br><span class="line">docker <span class="built_in">history</span>显示镜像的历史</span><br><span class="line">docker commit nginx my_nginx将容器另存为镜像</span><br><span class="line">docker tag nginx eon01/nginx标记镜像</span><br><span class="line">docker push eon01/nginx推送镜像</span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">注意有的最后面是英文 .</span><br><span class="line">$ docker build .</span><br><span class="line">$ docker build github.com/creack/docker-firefox</span><br><span class="line">$ docker build - &lt; Dockerfile</span><br><span class="line">$ docker build - &lt; context.tar.gz</span><br><span class="line">$ docker build -t eon/nginx-server .</span><br><span class="line">$ docker build -f myOtherDockerfile .</span><br><span class="line">$ curl example.com/remote/Dockerfile | docker build -f - .</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除<none>镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker rmi -f $(docker images | grep <span class="string">&quot;none&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">删除网络</span><br><span class="line">docker network <span class="built_in">rm</span> MyOverlayNetwork</span><br><span class="line"></span><br><span class="line">列出网络</span><br><span class="line">docker network <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">获取有关网络的信息</span><br><span class="line">docker network inspect MyOverlayNetwork</span><br><span class="line"></span><br><span class="line">将正在运行的容器连接到网络</span><br><span class="line">docker network connect MyOverlayNetwork nginx</span><br><span class="line"></span><br><span class="line">启动时将容器连接到网络</span><br><span class="line">docker run -it -d --network=MyOverlayNetwork nginx</span><br><span class="line"></span><br><span class="line">断开容器与网络的连接</span><br><span class="line">docker network disconnect MyOverlayNetwork nginx</span><br></pre></td></tr></table></figure><h3 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay MyOverlayNetwork</span><br><span class="line">docker network create -d bridge MyBridgeNetwork</span><br><span class="line">docker network create -d overlay \</span><br><span class="line">  --subnet=192.168.0.0/16 \</span><br><span class="line">  --subnet=192.170.0.0/16 \</span><br><span class="line">  --gateway=192.168.0.100 \</span><br><span class="line">  --gateway=192.170.0.100 \</span><br><span class="line">  --ip-range=192.168.1.0/24 \</span><br><span class="line">  --aux-address=<span class="string">&quot;my-router=192.168.1.5&quot;</span> \</span><br><span class="line">  --aux-address=<span class="string">&quot;my-switch=192.168.1.6&quot;</span> \</span><br><span class="line">  --aux-address=<span class="string">&quot;my-printer=192.170.1.5&quot;</span> \</span><br><span class="line">  --aux-address=<span class="string">&quot;my-nas=192.170.1.6&quot;</span> \</span><br><span class="line">  MyOverlayNetwork</span><br></pre></td></tr></table></figure><h2 id="各种各样的"><a href="#各种各样的" class="headerlink" title="各种各样的"></a>各种各样的</h2><h3 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker search search_word在 docker hub 中搜索镜像</span><br><span class="line">docker pull user/image从 docker hub 下载镜像</span><br><span class="line">docker login向 docker hub 进行身份验证</span><br><span class="line">docker push user/image将镜像上传到 docker hub</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="镜像仓库命令"><a href="#镜像仓库命令" class="headerlink" title="镜像仓库命令"></a>镜像仓库命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">登录到镜像仓库</span><br><span class="line">$ docker login</span><br><span class="line">$ docker login localhost:8080</span><br><span class="line"></span><br><span class="line">从镜像仓库注销</span><br><span class="line">$ docker <span class="built_in">logout</span></span><br><span class="line">$ docker <span class="built_in">logout</span> localhost:8080</span><br><span class="line"></span><br><span class="line">搜索镜像</span><br><span class="line">$ docker search nginx</span><br><span class="line">$ docker search nginx --stars=3 --no-trunc busybox</span><br><span class="line"></span><br><span class="line">拉取镜像</span><br><span class="line">$ docker pull nginx</span><br><span class="line">$ docker pull eon01/nginx localhost:5000/myadmin/nginx</span><br><span class="line"></span><br><span class="line">推送镜像</span><br><span class="line">$ docker push eon01/nginx</span><br><span class="line">$ docker push eon01/nginx localhost:5000/myadmin/nginx</span><br></pre></td></tr></table></figure><h3 id="批量清除"><a href="#批量清除" class="headerlink" title="批量清除"></a>批量清除</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop -f $(docker ps -a -q)停止所有容器</span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)删除所有容器</span><br><span class="line">docker rmi -f $(docker images -q)删除所有镜像</span><br></pre></td></tr></table></figure><h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">检查卷</span><br><span class="line">$ docker volume <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line">清理未使用的卷</span><br><span class="line">$ docker volume prune</span><br></pre></td></tr></table></figure><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ocker-compose up创建和启动容器</span><br><span class="line">docker-compose up -d以分离模式创建和启动容器</span><br><span class="line">docker-compose down停止和删除容器、网络、映像和卷</span><br><span class="line">docker-compose logs查看容器的输出</span><br><span class="line">docker-compose restart重启所有服务</span><br><span class="line">docker-compose pull拉取所有服务的镜像</span><br><span class="line">docker-compose build构建所有服务的镜像</span><br><span class="line">docker-compose config验证并查看 Compose 文件</span><br><span class="line">docker-compose scale &lt;service_name&gt;=&lt;replica&gt;为服务指定容器个数</span><br><span class="line">docker-compose top显示正在运行的进程</span><br><span class="line">docker-compose run -<span class="built_in">rm</span> -p 2022:22 web bash启动 Web 服务并运行 bash 作为其命令，删除旧容器</span><br></pre></td></tr></table></figure><h3 id="Docker-Services"><a href="#Docker-Services" class="headerlink" title="Docker Services"></a>Docker Services</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker service create &lt;options&gt; &lt;image&gt; &lt;<span class="built_in">command</span>&gt;创建新服务</span><br><span class="line">docker service inspect --pretty &lt;service_name&gt;显示详细信息服务</span><br><span class="line">docker service <span class="built_in">ls</span>列出服务</span><br><span class="line">docker service ps列出服务的任务</span><br><span class="line">docker service scale &lt;service_name&gt;=&lt;replica&gt;规模特殊服务</span><br><span class="line">docker service update &lt;options&gt; &lt;service_name&gt;更新服务选项</span><br></pre></td></tr></table></figure><h3 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stack <span class="built_in">ls</span>列出此 Docker 主机上所有正在运行的应用程序</span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;运行指定的 Compose 文件</span><br><span class="line">docker stack services &lt;appname&gt;列出与应用关联的服务</span><br><span class="line">docker stack ps &lt;appname&gt;列出与应用关联的正在运行的容器</span><br><span class="line">docker stack <span class="built_in">rm</span> &lt;appname&gt;拆掉一个应用程序</span><br></pre></td></tr></table></figure><h3 id="Docker-Machine"><a href="#Docker-Machine" class="headerlink" title="Docker Machine"></a>Docker Machine</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ocker-machine create --driver virtualbox myvm1创建虚拟机（Mac、Win7、Linux）</span><br><span class="line">docker-machine create -d hyperv --hyperv-virtual-switch <span class="string">&quot;myswitch&quot;</span> myvm1Win10</span><br><span class="line">docker-machine <span class="built_in">env</span> myvm1查看有关您的节点的基本信息</span><br><span class="line">docker-machine ssh myvm1 <span class="string">&quot;docker node ls&quot;</span>列出集群中的节点</span><br><span class="line">docker-machine ssh myvm1 <span class="string">&quot;docker node inspect &lt;node ID&gt;&quot;</span>检查节点</span><br><span class="line">docker-machine ssh myvm1 <span class="string">&quot;docker swarm join-token -q worker&quot;</span>查看加入令牌</span><br><span class="line">docker-machine ssh myvm1打开与 VM 的 SSH 会话； 输入“<span class="built_in">exit</span>”结束</span><br><span class="line">docker-machine ssh myvm2 <span class="string">&quot;docker swarm leave&quot;</span>让工人离开群体</span><br><span class="line">docker-machine ssh myvm1 <span class="string">&quot;docker swarm leave -f&quot;</span>让主人离开，杀群</span><br><span class="line">docker-machine start myvm1启动当前未运行的 VM</span><br><span class="line">docker-machine stop $(docker-machine <span class="built_in">ls</span> -q)停止所有正在运行的虚拟机</span><br><span class="line">docker-machine <span class="built_in">rm</span> $(docker-machine <span class="built_in">ls</span> -q)删除所有虚拟机及其磁盘映像</span><br><span class="line">docker-machine scp docker-compose.yml myvm1:~将文件复制到节点的主目录</span><br><span class="line">docker-machine ssh myvm1 <span class="string">&quot;docker stack deploy -c &lt;file&gt; &lt;app&gt;&quot;</span>部署应用</span><br></pre></td></tr></table></figure><h3 id="Docker-主要命令"><a href="#Docker-主要命令" class="headerlink" title="Docker 主要命令"></a>Docker 主要命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach将本地标准输入、输出和错误流附加到正在运行的容器</span><br><span class="line">build从 Dockerfile 构建镜像</span><br><span class="line">commit从容器的更改创建新镜像</span><br><span class="line"><span class="built_in">cp</span>在容器和本地文件系统之间复制文件/文件夹</span><br><span class="line">create创建一个新容器</span><br><span class="line">diff检查容器文件系统上文件或目录的更改</span><br><span class="line">events从服务器获取实时事件</span><br><span class="line"><span class="built_in">exec</span>在正在运行的容器中运行命令</span><br><span class="line"><span class="built_in">export</span>将容器的文件系统导出为 tar 存档</span><br><span class="line"><span class="built_in">history</span>显示镜像的历史</span><br><span class="line">images列出镜像</span><br><span class="line">import从 tarball 导入内容以创建文件系统映像</span><br><span class="line">info显示系统范围的信息</span><br><span class="line">inspect返回有关 Docker 对象的低级信息</span><br><span class="line"><span class="built_in">kill</span>杀死一个或多个正在运行的容器</span><br><span class="line">load从 tar 存档或 STDIN 加载镜像</span><br><span class="line">login登录到 Docker 注册表</span><br><span class="line"><span class="built_in">logout</span>从 Docker 注册表中注销</span><br><span class="line">logs获取容器的日志</span><br><span class="line">pause暂停一个或多个容器内的所有进程</span><br><span class="line">port列出容器的端口映射或特定映射</span><br><span class="line">ps列出容器</span><br><span class="line">pull从注册表中提取镜像或存储库</span><br><span class="line">push将镜像或存储库推送到注册表</span><br><span class="line">rename重命名容器</span><br><span class="line">restart重启一个或多个容器</span><br><span class="line"><span class="built_in">rm</span>移除一个或多个容器</span><br><span class="line">rmi移除一张或多张镜像</span><br><span class="line">run在新容器中运行命令</span><br><span class="line">save将一个或多个镜像保存到 tar 存档（默认流式传输到 STDOUT）</span><br><span class="line">search在 Docker Hub 中搜索镜像</span><br><span class="line">start启动一个或多个停止的容器</span><br><span class="line">stats显示容器资源使用统计的实时流</span><br><span class="line">stop停止一个或多个正在运行的容器</span><br><span class="line">tag创建一个引用 SOURCE_IMAGE 的标记 TARGET_IMAGE</span><br><span class="line">top显示容器的运行进程</span><br><span class="line">unpause取消暂停一个或多个容器中的所有进程</span><br><span class="line">update更新一个或多个容器的配置</span><br><span class="line">version显示 Docker 版本信息</span><br><span class="line"><span class="built_in">wait</span>阻塞直到一个或多个容器停止，然后打印它们的退出代码</span><br></pre></td></tr></table></figure><h3 id="docker-run-create"><a href="#docker-run-create" class="headerlink" title="docker run/create"></a>docker run/create</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">--add-host list            <span class="comment"># 添加自定义主机到 IP 映射 (host:ip)</span></span><br><span class="line">-a, --attach list              <span class="comment"># 连接到 STDIN、STDOUT 或 STDERR</span></span><br><span class="line">    --blkio-weight uint16      <span class="comment"># 块 IO（相对权重），介于 10 和 1000 之间，或 0 禁用（默认 0）</span></span><br><span class="line">    --blkio-weight-device list <span class="comment"># 块 IO 权重（相对设备权重）（默认 []）</span></span><br><span class="line">    --cap-add list             <span class="comment"># 添加 Linux 功能</span></span><br><span class="line">    --cap-drop list            <span class="comment"># 放弃 Linux 功能</span></span><br><span class="line">    --cgroup-parent string     <span class="comment"># 容器的可选父 cgroup</span></span><br><span class="line">    --cgroupns string   <span class="comment"># 要使用的 Cgroup 命名空间（主机|私有）</span></span><br><span class="line">                        <span class="comment">#  &#x27;host&#x27;:    在 Docker 主机的 cgroup 命名空间中运行容器</span></span><br><span class="line">                        <span class="comment">#  &#x27;private&#x27;: 在自己的私有 cgroup 命名空间中运行容器</span></span><br><span class="line">                        <span class="comment">#  &#x27;&#x27;:        使用由守护进程上的 </span></span><br><span class="line">                        <span class="comment">#        default-cgroupns-mode 选项配置的 cgroup 命名空间（默认）</span></span><br><span class="line">    --cidfile string           <span class="comment"># 将容器 ID 写入文件</span></span><br><span class="line">    --cpu-period int           <span class="comment"># 限制 CPU CFS（完全公平调度器）周期</span></span><br><span class="line">    --cpu-quota int            <span class="comment"># 限制 CPU CFS（完全公平调度器）配额</span></span><br><span class="line">    --cpu-rt-period int        <span class="comment"># 以微秒为单位限制 CPU 实时周期</span></span><br><span class="line">    --cpu-rt-runtime int       <span class="comment"># 以微秒为单位限制 CPU 实时运行时间</span></span><br><span class="line">-c, --cpu-shares int           <span class="comment"># CPU 份额（相对权重）</span></span><br><span class="line">    --cpus decimal             <span class="comment"># CPU 数量</span></span><br><span class="line">    --cpuset-cpus string       <span class="comment"># 允许执行的 CPU (0-3, 0,1)</span></span><br><span class="line">    --cpuset-mems string       <span class="comment"># 允许执行的 MEM (0-3, 0,1)</span></span><br><span class="line">    --device list              <span class="comment"># 将主机设备添加到容器</span></span><br><span class="line">    --device-cgroup-rule list  <span class="comment"># 将规则添加到 cgroup 允许的设备列表</span></span><br><span class="line">    --device-read-bps list     <span class="comment"># 限制设备的读取速率（每秒字节数）（默认 []）</span></span><br><span class="line">    --device-read-iops list    <span class="comment"># 限制设备的读取速率（每秒 IO）（默认 []）</span></span><br><span class="line">    --device-write-bps list    <span class="comment"># 限制设备的写入速率（每秒字节数）（默认 []）</span></span><br><span class="line">    --device-write-iops list   <span class="comment"># 限制设备的写入速率（每秒 IO）（默认 []）</span></span><br><span class="line">    --disable-content-trust    <span class="comment"># 跳过镜像验证（默认为 true）</span></span><br><span class="line">    --dns list                 <span class="comment"># 设置自定义 DNS 服务器</span></span><br><span class="line">    --dns-option list          <span class="comment"># 设置 DNS 选项</span></span><br><span class="line">    --dns-search list          <span class="comment"># 设置自定义 DNS 搜索域</span></span><br><span class="line">    --domainname string        <span class="comment"># 容器 NIS 域名</span></span><br><span class="line">    --entrypoint string        <span class="comment"># 覆盖镜像的默认入口点</span></span><br><span class="line">-e, --<span class="built_in">env</span> list                 <span class="comment"># 设置环境变量</span></span><br><span class="line">    --env-file list            <span class="comment"># 读入环境变量文件</span></span><br><span class="line">    --expose list              <span class="comment"># 公开一个端口或一系列端口</span></span><br><span class="line">    --gpus gpu-request         <span class="comment"># 要添加到容器中的 GPU 设备（“全部”以传递所有 GPU）</span></span><br><span class="line">    --group-add list           <span class="comment"># 添加其他组以加入</span></span><br><span class="line">    --health-cmd string        <span class="comment"># 运行以检查运行状况的命令</span></span><br><span class="line">    --health-interval duration <span class="comment"># 运行检查之间的时间 (ms|s|m|h) (默认 0s)</span></span><br><span class="line">    --health-retries int           <span class="comment"># 需要报告不健康的连续失败</span></span><br><span class="line">    --health-start-period duration <span class="comment"># 开始健康重试倒计时之前容器初始化的开始时间（ms|s|m|h）（默认 0s）</span></span><br><span class="line">    --health-timeout duration      <span class="comment"># 允许运行一项检查的最长时间 (ms|s|m|h) (默认 0s)</span></span><br><span class="line">    --<span class="built_in">help</span>                     <span class="comment"># 打印使用</span></span><br><span class="line">-h, --hostname string          <span class="comment"># 容器主机名</span></span><br><span class="line">    --init                     <span class="comment"># 在容器内运行一个 init 来转发信号并收获进程</span></span><br><span class="line">-i, --interactive              <span class="comment"># 即使没有连接，也保持 STDIN 打开</span></span><br><span class="line">    --ip string                <span class="comment"># IPv4 地址（例如 172.30.100.104）</span></span><br><span class="line">    --ip6 string               <span class="comment"># IPv6 地址（例如，2001:db8::33）</span></span><br><span class="line">    --ipc string               <span class="comment"># 要使用的 IPC 模式</span></span><br><span class="line">    --isolation string         <span class="comment"># 容器隔离技术</span></span><br><span class="line">    --kernel-memory bytes      <span class="comment"># 内核内存限制</span></span><br><span class="line">-l, --label list               <span class="comment"># 在容器上设置元数据</span></span><br><span class="line">    --label-file list          <span class="comment"># 读入以行分隔的标签文件</span></span><br><span class="line">    --<span class="built_in">link</span> list                <span class="comment"># 添加到另一个容器的链接</span></span><br><span class="line">    --link-local-ip list       <span class="comment"># 容器 IPv4/IPv6 链路本地地址</span></span><br><span class="line">    --log-driver string        <span class="comment"># 容器的日志记录驱动程序</span></span><br><span class="line">    --log-opt list             <span class="comment"># 日志驱动程序选项</span></span><br><span class="line">    --mac-address string       <span class="comment"># 容器 MAC 地址（例如 92:d0:c6:0a:29:33）</span></span><br><span class="line">-m, --memory bytes             <span class="comment"># 内存限制</span></span><br><span class="line">    --memory-reservation bytes <span class="comment"># 内存软限制</span></span><br><span class="line">    --memory-swap bytes        <span class="comment"># 交换限制等于内存加上交换：&#x27;-1&#x27; 启用无限交换</span></span><br><span class="line">    --memory-swappiness int    <span class="comment"># 调整容器内存交换（0 到 100）（默认 -1）</span></span><br><span class="line">    --mount mount              <span class="comment"># 将文件系统挂载附加到容器</span></span><br><span class="line">    --name string              <span class="comment"># 为容器分配名称</span></span><br><span class="line">    --network network          <span class="comment"># 将容器连接到网络</span></span><br><span class="line">    --network-alias list       <span class="comment"># 为容器添加网络范围的别名</span></span><br><span class="line">    --no-healthcheck           <span class="comment"># 禁用任何容器指定的 HEALTHCHECK</span></span><br><span class="line">    --oom-kill-disable         <span class="comment"># 禁用 OOM 杀手</span></span><br><span class="line">    --oom-score-adj int        <span class="comment"># 调整主机的 OOM 首选项（-1000 到 1000）</span></span><br><span class="line">    --pid string               <span class="comment"># 要使用的 PID 命名空间</span></span><br><span class="line">    --pids-limit int           <span class="comment"># 调整容器 pids 限制（设置 -1 表示无限制）</span></span><br><span class="line">    --platform string          <span class="comment"># 如果服务器支持多平台，则设置平台</span></span><br><span class="line">    --privileged               <span class="comment"># 授予此容器扩展权限</span></span><br><span class="line">-p, --publish list             <span class="comment"># 将容器的端口发布到主机</span></span><br><span class="line">-P, --publish-all              <span class="comment"># 将所有暴露的端口发布到随机端口</span></span><br><span class="line">    --pull string              <span class="comment"># 创建前拉取镜像(&quot;always&quot;|&quot;missing&quot;|&quot;never&quot;)(默认&quot;missing&quot;)</span></span><br><span class="line">    --read-only                <span class="comment"># 将容器的根文件系统挂载为只读</span></span><br><span class="line">    --restart string           <span class="comment"># 容器退出时应用的重启策略（默认“否”）</span></span><br><span class="line">    --<span class="built_in">rm</span>                       <span class="comment"># 容器退出时自动移除</span></span><br><span class="line">    --runtime string           <span class="comment"># 用于此容器的运行时</span></span><br><span class="line">    --security-opt list        <span class="comment"># 安全选项</span></span><br><span class="line">    --shm-size bytes           <span class="comment"># /dev/shm 的大小</span></span><br><span class="line">    --stop-signal string       <span class="comment"># 停止容器的信号（默认“SIGTERM”）</span></span><br><span class="line">    --stop-timeout int         <span class="comment"># 停止容器的超时（以秒为单位）</span></span><br><span class="line">    --storage-opt list         <span class="comment"># 容器的存储驱动程序选项</span></span><br><span class="line">    --sysctl map               <span class="comment"># Sysctl 选项（默认 map[]）</span></span><br><span class="line">    --tmpfs list               <span class="comment"># 挂载 tmpfs 目录</span></span><br><span class="line">-t, --<span class="built_in">tty</span>                      <span class="comment"># 分配一个伪 TTY</span></span><br><span class="line">    --<span class="built_in">ulimit</span> <span class="built_in">ulimit</span>            <span class="comment"># ulimit 选项（默认 []）</span></span><br><span class="line">-u, --user string              <span class="comment"># 用户名或 UID（格式：&lt;name|uid&gt;[:&lt;group|gid&gt;]）</span></span><br><span class="line">    --userns string            <span class="comment"># 要使用的用户命名空间</span></span><br><span class="line">    --uts string               <span class="comment"># 要使用的 UTS 命名空间</span></span><br><span class="line">-v, --volume list              <span class="comment"># 绑定挂载卷</span></span><br><span class="line">    --volume-driver string     <span class="comment"># 容器的可选卷驱动程序</span></span><br><span class="line">    --volumes-from list        <span class="comment"># 从指定容器挂载卷</span></span><br><span class="line">-w, --workdir string           <span class="comment"># 容器内的工作目录</span></span><br></pre></td></tr></table></figure><h3 id="docker-全局参数"><a href="#docker-全局参数" class="headerlink" title="docker 全局参数"></a>docker 全局参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--config string     <span class="comment"># 客户端配置文件的位置（默认“~/.docker”）</span></span><br><span class="line">-c, --context string    <span class="comment"># 用于连接到守护程序的上下文的名称（</span></span><br><span class="line">                        <span class="comment"># 覆盖 DOCKER_HOST 环境变量和使用“docker context use”设置的默认上下文）</span></span><br><span class="line">-D, --debug             <span class="comment"># 启用调试模式</span></span><br><span class="line">-H, --host list         <span class="comment"># 要连接的守护进程套接字</span></span><br><span class="line">-l, --log-level string  <span class="comment"># 设置日志级别(&quot;debug&quot;\|&quot;info&quot;\|&quot;warn&quot;\|&quot;error&quot;\|&quot;fatal&quot;) （默认“info”）</span></span><br><span class="line">    --tls               <span class="comment"># 使用 TLS； 由 --tlsverify 暗示</span></span><br><span class="line">    --tlscacert string  <span class="comment"># 仅由该 CA 签署的信任证书（默认为“~/.docker/ca.pem”）</span></span><br><span class="line">    --tlscert string    <span class="comment"># TLS证书文件路径（默认“~/.docker/cert.pem”）</span></span><br><span class="line">    --tlskey string     <span class="comment"># TLS 密钥文件的路径（默认为“~/.docker/key.pem”）</span></span><br><span class="line">    --tlsverify         <span class="comment"># 使用 TLS 并验证远程</span></span><br><span class="line">-v, --version           <span class="comment"># 打印版本信息并退出</span></span><br></pre></td></tr></table></figure><h3 id="docker-管理命令"><a href="#docker-管理命令" class="headerlink" title="docker 管理命令"></a>docker 管理命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">docker builder管理构建</span><br><span class="line">docker buildx*Docker Buildx（Docker Inc.，v0.7.1）</span><br><span class="line">docker compose*Docker Compose（Docker Inc.，v2.2.3）</span><br><span class="line">docker config管理 Docker 配置</span><br><span class="line">docker container管理容器</span><br><span class="line">docker context管理上下文</span><br><span class="line">docker image管理镜像</span><br><span class="line">docker manifest管理 Docker 镜像清单和清单列表</span><br><span class="line">docker network管理网络</span><br><span class="line">docker node管理 Swarm 节点</span><br><span class="line">docker plugin管理插件</span><br><span class="line">docker scan*Docker 扫描（Docker Inc.，v0.16.0）</span><br><span class="line">docker secret管理 Docker 机密</span><br><span class="line">docker service管理服务</span><br><span class="line">docker stack管理 Docker 堆栈</span><br><span class="line">docker swarm管理群</span><br><span class="line">docker system管理 Docker</span><br><span class="line">docker trust管理对 Docker 映像的信任</span><br><span class="line">docker volume管理卷</span><br></pre></td></tr></table></figure><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-a, --all             显示所有镜像（默认隐藏中间镜像）</span><br><span class="line">    --digests         显示摘要</span><br><span class="line">-f, --filter filter   根据提供的条件过滤输出</span><br><span class="line">    --format string   使用 Go 模板打印漂亮的镜像</span><br><span class="line">    --no-trunc        不要截断输出</span><br><span class="line">-q, --quiet           仅显示镜像 ID</span><br></pre></td></tr></table></figure><h2 id="Docker-示例"><a href="#Docker-示例" class="headerlink" title="Docker 示例"></a>Docker 示例</h2><h3 id="Docker-Web-管理工具-portainer"><a href="#Docker-Web-管理工具-portainer" class="headerlink" title="Docker Web 管理工具 portainer"></a>Docker Web 管理工具 portainer</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name portainer \</span><br><span class="line">  -p 8000:8000 \</span><br><span class="line">  -p 9443:9443 \</span><br><span class="line">  --restart=always \</span><br><span class="line">  -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">  -v <span class="variable">$HOME</span>/portainer:/data \</span><br><span class="line">    portainer/portainer-ee:latest</span><br></pre></td></tr></table></figure><h3 id="在线代码编辑器-Code-Server"><a href="#在线代码编辑器-Code-Server" class="headerlink" title="在线代码编辑器 Code Server"></a>在线代码编辑器 Code Server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p ~/.config</span><br><span class="line">$ docker run -it --name code-server  \</span><br><span class="line">  -p 127.0.0.1:8080:8080 \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>/.config/code-server:/home/coder/.config&quot;</span> \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$PWD</span>:/home/coder/project&quot;</span> \</span><br><span class="line">  -u <span class="string">&quot;<span class="subst">$(id -u)</span>:<span class="subst">$(id -g)</span>&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;DOCKER_USER=<span class="variable">$USER</span>&quot;</span> \</span><br><span class="line">    codercom/code-server:latest</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  -v <span class="variable">$HOME</span>/mysql/conf.d:/etc/mysql/conf.d \</span><br><span class="line">  -v <span class="variable">$HOME</span>/mysql/data:/var/lib/mysql \</span><br><span class="line">  -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">  -d mysql:5.7.23</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name myredis \</span><br><span class="line">  -v <span class="variable">$HOME</span>/redis/conf:/usr/local/etc/redis \</span><br><span class="line">  -v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">    redis redis-server /usr/local/etc/redis/redis.conf</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name my-nginx \ </span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>/nginx/nginx.conf:/etc/nginx/nginx.conf:ro&quot;</span> \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>/nginx/html:/usr/share/nginx/html:ro&quot;</span> \</span><br><span class="line">  -p 8080:80 \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure><h3 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name my-postgres \</span><br><span class="line">  -e POSTGRES_PASSWORD=mysecretpassword \</span><br><span class="line">  -e PGDATA=/var/lib/postgresql/data/pgdata \</span><br><span class="line">  -v <span class="variable">$HOME</span>/nginx/mount:/var/lib/postgresql/data \</span><br><span class="line">  -d postgres</span><br></pre></td></tr></table></figure><h3 id="媒体管理工具-Dim"><a href="#媒体管理工具-Dim" class="headerlink" title="媒体管理工具 Dim"></a>媒体管理工具 Dim</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name my-dim \</span><br><span class="line">   -p 8000:8000/tcp \</span><br><span class="line">   -v <span class="variable">$HOME</span>/.config/dim:/opt/dim/config \</span><br><span class="line">   -v <span class="variable">$HOME</span>/dim/media:/media:ro \</span><br><span class="line">   -d ghcr.io/dusk-labs/dim:dev</span><br></pre></td></tr></table></figure><h3 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --name gitlab \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 8443:443 --publish 8081:80 -p 2222:22 \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/logs:/var/log/gitlab \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  -v /etc/localtime:/etc/localtime \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES2015+ 备忘清单</title>
      <link href="/2024/11/24/ES2015+%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/ES2015+%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ES2015-备忘清单"><a href="#ES2015-备忘清单" class="headerlink" title="ES2015+ 备忘清单"></a>ES2015+ 备忘清单</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><h3 id="块范围"><a href="#块范围" class="headerlink" title="块范围"></a>块范围</h3><h4 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span> <span class="comment">// 只在这个`if`里面</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>let</code> 是新的 <code>var</code>。 常量(<code>const</code>) 就像 <code>let</code> 一样工作，但不能重新分配。 请参阅：<a href="https://babeljs.io/learn-es2015/#let--const">Let 和 const</a></p><h3 id="反引号字符串"><a href="#反引号字符串" class="headerlink" title="反引号字符串"></a>反引号字符串</h3><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure><h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>模板和多行字符串。 请参阅：<a href="https://babeljs.io/learn-es2015/#template-strings">模板字符串</a></p><h3 id="二进制和八进制文字"><a href="#二进制和八进制文字" class="headerlink" title="二进制和八进制文字"></a>二进制和八进制文字</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bin = <span class="number">0b1010010</span></span><br><span class="line"><span class="keyword">let</span> oct = <span class="number">0o755</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://babeljs.io/learn-es2015/#binary-and-octal-literals">二进制和八进制文字</a></p><h3 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> byte = <span class="number">2</span> ** <span class="number">8</span></span><br><span class="line"><span class="comment">// 同: Math.pow(2, 8)</span></span><br></pre></td></tr></table></figure><h3 id="新方法"><a href="#新方法" class="headerlink" title="新方法"></a>新方法</h3><h4 id="新的字符串方法"><a href="#新的字符串方法" class="headerlink" title="新的字符串方法"></a>新的字符串方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)</span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">includes</span>(<span class="string">&quot;ll&quot;</span>)</span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;he&quot;</span>)</span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">padStart</span>(<span class="number">8</span>) <span class="comment">// &quot;   hello&quot;</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">8</span>) <span class="comment">// &quot;hello   &quot; </span></span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">8</span>, <span class="string">&#x27;!&#x27;</span>) <span class="comment">// hello!!!</span></span><br><span class="line"><span class="string">&quot;\u1E9B\u0323&quot;</span>.<span class="title function_">normalize</span>(<span class="string">&quot;NFC&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="新的数字方法"><a href="#新的数字方法" class="headerlink" title="新的数字方法"></a>新的数字方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property">EPSILON</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="title class_">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;NaN&quot;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="新的-Math-方法"><a href="#新的-Math-方法" class="headerlink" title="新的 Math 方法"></a>新的 Math 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">acosh</span>(<span class="number">3</span>) <span class="comment">// 1.762747174039086</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">hypot</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">imul</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">1</span>, <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">2</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="新的-Array-方法"><a href="#新的-Array-方法" class="headerlink" title="新的 Array 方法"></a>新的 Array 方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个真实的数组</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;*&quot;</span>))</span><br><span class="line"><span class="comment">// 类似于 new Array(...)，但没有特殊的单参数行为</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>请参阅: <a href="https://babeljs.io/learn-es2015/#math--number--string--object-apis">新方法</a></p><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span> (<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">radius</span> = radius</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getArea</span> () &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span> * <span class="variable language_">this</span>.<span class="property">radius</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用超类方法"><a href="#调用超类方法" class="headerlink" title="调用超类方法"></a>调用超类方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">expand</span> (n) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">expand</span>(n) * <span class="title class_">Math</span>.<span class="property">PI</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="title function_">createFromDiameter</span>(<span class="params">diameter</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circle</span>(diameter / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型的语法糖。 请参阅: <a href="https://babeljs.io/learn-es2015/#classes">类</a></p><h3 id="私有类"><a href="#私有类" class="headerlink" title="私有类"></a>私有类</h3><p>javascript 默认字段是公共的（<code>public</code>）,如果需要注明私有，可以使用（<code>#</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  #name;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">printName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//只能在类内部调用私有字段</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`你的名字是<span class="subst">$&#123;<span class="variable language_">this</span>.#name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;putty&quot;</span>)</span><br><span class="line"><span class="comment">//console.log(this.#name) </span></span><br><span class="line"><span class="comment">//Private identifiers are not allowed outside class bodies.</span></span><br><span class="line">dog.<span class="title function_">printName</span>()</span><br></pre></td></tr></table></figure><h4 id="静态私有类"><a href="#静态私有类" class="headerlink" title="静态私有类"></a>静态私有类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassWithPrivate</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> #privateStaticField;</span><br><span class="line">  <span class="keyword">static</span> #privateStaticFieldWithInitializer = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> #<span class="title function_">privateStaticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// …</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h2><h3 id="做出承诺"><a href="#做出承诺" class="headerlink" title="做出承诺"></a>做出承诺</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (ok) &#123; <span class="title function_">resolve</span>(result) &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="title function_">reject</span>(error) &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>用于异步编程。 请参阅：<a href="https://babeljs.io/learn-es2015/#promises">Promises</a></p><h3 id="使用-Promises"><a href="#使用-Promises" class="headerlink" title="使用 Promises"></a>使用 Promises</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; ··· &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; ··· &#125;)</span><br></pre></td></tr></table></figure><h3 id="在-finally-中使用-Promise"><a href="#在-finally-中使用-Promise" class="headerlink" title="在 finally 中使用 Promise"></a>在 finally 中使用 Promise</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; ··· &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123; ··· &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* 独立于成功/错误的逻辑 */</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>当承诺被履行或被拒绝时，处理程序被调用</p><h3 id="Promise-函数"><a href="#Promise-函数" class="headerlink" title="Promise 函数"></a>Promise 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">reject</span>(···)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(···)</span><br></pre></td></tr></table></figure><h3 id="Async-await"><a href="#Async-await" class="headerlink" title="Async-await"></a>Async-await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">run</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">getUser</span>()</span><br><span class="line">  <span class="keyword">const</span> tweets = <span class="keyword">await</span> <span class="title function_">getTweets</span>(user)</span><br><span class="line">  <span class="keyword">return</span> [user, tweets]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>async</code> 函数是使用函数的另一种方式。 请参阅：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">异步函数</a></p><h2 id="解构-Destructuring"><a href="#解构-Destructuring" class="headerlink" title="解构 Destructuring"></a>解构 Destructuring</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><h4 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, last] = [<span class="string">&#x27;Nikola&#x27;</span>, <span class="string">&#x27;Tesla&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;title, author&#125; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;The Silkworm&#x27;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&#x27;R. Galbraith&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持匹配数组和对象。 请参阅：<a href="https://babeljs.io/learn-es2015/#destructuring">解构</a></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scores = [<span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line"><span class="keyword">const</span> [math = <span class="number">50</span>, sci = <span class="number">50</span>, arts = <span class="number">50</span>] = scores</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// math === 22, sci === 33, arts === 50</span></span><br></pre></td></tr></table></figure><p>可以在解构数组或对象时分配默认值</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">&#123; name, greeting &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, <span class="subst">$&#123;name&#125;</span>!`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">greet</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Larry&#x27;</span>, <span class="attr">greeting</span>: <span class="string">&#x27;Ahoy&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><p>对象和数组的解构也可以在函数参数中完成</p><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">&#123; name = <span class="string">&#x27;Rauno&#x27;</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi <span class="subst">$&#123;name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">greet</span>() <span class="comment">// Hi Rauno!</span></span><br><span class="line"><span class="title function_">greet</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Larry&#x27;</span> &#125;) <span class="comment">// Hi Larry!</span></span><br></pre></td></tr></table></figure><h3 id="重新分配键"><a href="#重新分配键" class="headerlink" title="重新分配键"></a>重新分配键</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printCoordinates</span>(<span class="params">&#123; left: x, top: y &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`x: <span class="subst">$&#123;x&#125;</span>, y: <span class="subst">$&#123;y&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">printCoordinates</span>(&#123; <span class="attr">left</span>: <span class="number">25</span>, <span class="attr">top</span>: <span class="number">90</span> &#125;)</span><br></pre></td></tr></table></figure><p>此示例将 <code>x</code> 分配给 <code>left</code> 键的值</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123;title, artist&#125; <span class="keyword">of</span> songs) &#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赋值表达式也在循环中工作</p><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; id, ...detail &#125; = song;</span><br></pre></td></tr></table></figure><p>使用 <code>rest(...)</code> 运算符单独提取一些键和对象中的剩余键</p><h2 id="扩展运算符-Spread"><a href="#扩展运算符-Spread" class="headerlink" title="扩展运算符 Spread"></a>扩展运算符 Spread</h2><h3 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h3><h4 id="与对象扩展"><a href="#与对象扩展" class="headerlink" title="与对象扩展"></a>与对象扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  ...defaults,</span><br><span class="line">  <span class="attr">visible</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="没有对象扩展"><a href="#没有对象扩展" class="headerlink" title="没有对象扩展"></a>没有对象扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">  &#123;&#125;, defaults,</span><br><span class="line">  &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p>对象扩展运算符允许您从其他对象构建新对象。 请参阅：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">对象传播</a></p><h3 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h3><h4 id="具有数组扩展"><a href="#具有数组扩展" class="headerlink" title="具有数组扩展"></a>具有数组扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  ...admins,</span><br><span class="line">  ...editors,</span><br><span class="line">  <span class="string">&#x27;rstacruz&#x27;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="没有数组扩展"><a href="#没有数组扩展" class="headerlink" title="没有数组扩展"></a>没有数组扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = admins</span><br><span class="line">  .<span class="title function_">concat</span>(editors)</span><br><span class="line">  .<span class="title function_">concat</span>([ <span class="string">&#x27;rstacruz&#x27;</span> ])</span><br></pre></td></tr></table></figure><p>扩展运算符允许您以相同的方式构建新数组。 请参阅：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator">扩展运算符</a></p><h2 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数 Functions"></a>函数 Functions</h2><h3 id="函数参数-1"><a href="#函数参数-1" class="headerlink" title="函数参数"></a>函数参数</h3><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span> (<span class="params">name = <span class="string">&#x27;Jerry&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Rest-参数"><a href="#Rest-参数" class="headerlink" title="Rest 参数"></a>Rest 参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">x, ...y</span>) &#123;</span><br><span class="line">  <span class="comment">// y 是一个数组</span></span><br><span class="line">  <span class="keyword">return</span> x * y.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fn</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="comment">// 与 fn(1, 2, 3) 相同</span></span><br></pre></td></tr></table></figure><p>Default(默认), rest, spread(扩展)。 请参阅：<a href="https://babeljs.io/learn-es2015/#default--rest--spread">函数参数</a></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><h4 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ···</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="带参数"><a href="#带参数" class="headerlink" title="带参数"></a>带参数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;text.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="隐式返回"><a href="#隐式返回" class="headerlink" title="隐式返回"></a>隐式返回</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> n*<span class="number">2</span>)</span><br><span class="line"><span class="comment">// 没有花括号 = 隐式返回</span></span><br><span class="line"><span class="comment">// 同: arr.map(function (n) &#123; return n*2 &#125;)</span></span><br><span class="line">arr.<span class="title function_">map</span>(<span class="function"><span class="params">n</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">result</span>: n*<span class="number">2</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 隐式返回对象需要在对象周围加上括号</span></span><br></pre></td></tr></table></figure><p>类似函数，但保留了 <code>this</code>。 请参阅：<a href="https://babeljs.io/learn-es2015/#arrows-and-lexical-this">箭头函数</a></p><h3 id="参数设置默认值"><a href="#参数设置默认值" class="headerlink" title="参数设置默认值"></a>参数设置默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&#x27;World&#x27;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)          <span class="comment">// Hello World</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;China&#x27;</span>) <span class="comment">// Hello China</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;&#x27;</span>)      <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><h3 id="与解构赋值默认值结合使用"><a href="#与解构赋值默认值结合使用" class="headerlink" title="与解构赋值默认值结合使用"></a>与解构赋值默认值结合使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123;x, y = <span class="number">5</span>&#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// undefined 5</span></span><br></pre></td></tr></table></figure><h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">foo.<span class="property">name</span> <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="length-属性"><a href="#length-属性" class="headerlink" title="length 属性"></a>length 属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a, b</span>)&#123;&#125;</span><br><span class="line">foo.<span class="property">length</span> <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="Objects-1"><a href="#Objects-1" class="headerlink" title="Objects"></a>Objects</h2><h3 id="速记语法"><a href="#速记语法" class="headerlink" title="速记语法"></a>速记语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123; hello, bye &#125;</span><br></pre></td></tr></table></figure><p>同下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">hello</span>: hello, <span class="attr">bye</span>: bye</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://babeljs.io/learn-es2015/#enhanced-object-literals">对象字面量增强</a></p><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  <span class="title function_">start</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;running&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同: App = &#123; start: function () &#123;···&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://babeljs.io/learn-es2015/#enhanced-object-literals">对象文字增强</a></p><h3 id="Getters-and-setters"><a href="#Getters-and-setters" class="headerlink" title="Getters and setters"></a>Getters and setters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = &#123;</span><br><span class="line">  get <span class="title function_">closed</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">status</span> === <span class="string">&#x27;closed&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  set <span class="title function_">closed</span> (value) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = value ? <span class="string">&#x27;closed&#x27;</span> : <span class="string">&#x27;open&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://babeljs.io/learn-es2015/#enhanced-object-literals">对象字面量增强</a></p><h3 id="计算属性名称"><a href="#计算属性名称" class="headerlink" title="计算属性名称"></a>计算属性名称</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> event = <span class="string">&#x27;click&#x27;</span></span><br><span class="line"><span class="keyword">let</span> handlers = &#123;</span><br><span class="line">  [<span class="string">`on<span class="subst">$&#123;event&#125;</span>`</span>]: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 同: handlers = &#123; &#x27;onclick&#x27;: true &#125;</span></span><br></pre></td></tr></table></figure><p>请参阅：<a href="https://babeljs.io/learn-es2015/#enhanced-object-literals">对象字面量增强</a></p><h3 id="提取值"><a href="#提取值" class="headerlink" title="提取值"></a>提取值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fatherJS = &#123; <span class="attr">age</span>: <span class="number">57</span>, <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(fatherJS)</span><br><span class="line"><span class="comment">// [57, &quot;张三&quot;]</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(fatherJS)</span><br><span class="line"><span class="comment">// [[&quot;age&quot;, 57], [&quot;name&quot;, &quot;张三&quot;]]</span></span><br></pre></td></tr></table></figure><h2 id="Modules-模块"><a href="#Modules-模块" class="headerlink" title="Modules 模块"></a>Modules 模块</h2><h3 id="Imports-导入"><a href="#Imports-导入" class="headerlink" title="Imports 导入"></a>Imports 导入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;helpers&#x27;</span></span><br><span class="line"><span class="comment">// 又名: require(&#x27;···&#x27;)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Express</span> <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span></span><br><span class="line"><span class="comment">// 又名: const Express = require(&#x27;···&#x27;).default || require(&#x27;···&#x27;)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; indent &#125; <span class="keyword">from</span> <span class="string">&#x27;helpers&#x27;</span></span><br><span class="line"><span class="comment">// 又名: const indent = require(&#x27;···&#x27;).indent</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Helpers</span> <span class="keyword">from</span> <span class="string">&#x27;helpers&#x27;</span></span><br><span class="line"><span class="comment">// 又名: const Helpers = require(&#x27;···&#x27;)</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; indentSpaces <span class="keyword">as</span> indent &#125; <span class="keyword">from</span> <span class="string">&#x27;helpers&#x27;</span></span><br><span class="line"><span class="comment">// 又名: const indent = require(&#x27;···&#x27;).indentSpaces</span></span><br></pre></td></tr></table></figure><p><code>import</code> 是新的 <code>require()</code>。 请参阅：<a href="https://babeljs.io/learn-es2015/#modules">Module imports</a></p><h3 id="Exports-导出"><a href="#Exports-导出" class="headerlink" title="Exports 导出"></a>Exports 导出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123; ··· &#125;</span><br><span class="line"><span class="comment">// 又名: module.exports.default = ···</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">mymethod</span> (<span class="params"></span>) &#123; ··· &#125;</span><br><span class="line"><span class="comment">// 又名: module.exports.mymethod = ···</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pi = <span class="number">3.14159</span></span><br><span class="line"><span class="comment">// 又名: module.exports.pi = ···</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> year = <span class="number">1958</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>export</code> 是新的<code>module.exports</code>。 请参阅：<a href="https://babeljs.io/learn-es2015/#modules">Module exports</a></p><h3 id="as-关键字重命名"><a href="#as-关键字重命名" class="headerlink" title="as 关键字重命名"></a><code>as</code> 关键字重命名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  lastName <span class="keyword">as</span> surname <span class="comment">// 导入重命名</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v1</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">v2</span>(<span class="params"></span>) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; v1 <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br><span class="line"><span class="comment">// 等同于 export default v1;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  v1 <span class="keyword">as</span> streamV1,           <span class="comment">// 导出重命名</span></span><br><span class="line">  v2 <span class="keyword">as</span> streamV2,           <span class="comment">// 导出重命名</span></span><br><span class="line">  v2 <span class="keyword">as</span> streamLatestVersion <span class="comment">// 导出重命名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="动态加载模块"><a href="#动态加载模块" class="headerlink" title="动态加载模块"></a>动态加载模块</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./dialogBox.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">dialogBox</span> =&gt;</span> &#123;</span><br><span class="line">      dialogBox.<span class="title function_">open</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* Error handling */</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="https://github.com/tc39/proposal-dynamic-import">ES2020提案</a> 引入 <code>import()</code> 函数</p><h3 id="import-允许模块路径动态生成"><a href="#import-允许模块路径动态生成" class="headerlink" title="import() 允许模块路径动态生成"></a>import() 允许模块路径动态生成</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;main&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">`./modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">loadPageInto</span>(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    main.<span class="property">textContent</span> = err.<span class="property">message</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="import-meta"><a href="#import-meta" class="headerlink" title="import.meta"></a>import.meta</h3><p><a href="https://github.com/tc39/proposal-import-meta">ES2020</a> 为 <code>import</code> 命令添加了一个元属性 <code>import.meta</code>，返回当前模块的元信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;data.txt&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>)</span><br></pre></td></tr></table></figure><p>Node.js 环境中，<code>import.meta.url</code>返回的总是本地路径，即 <code>file:URL</code> 协议的字符串，比如 <code>file:///home/user/foo.js</code></p><h3 id="导入断言（Import-Assertions）"><a href="#导入断言（Import-Assertions）" class="headerlink" title="导入断言（Import Assertions）"></a>导入断言（Import Assertions）</h3><h4 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json <span class="keyword">from</span> <span class="string">&quot;./package.json&quot;</span> assert &#123;<span class="attr">type</span>: <span class="string">&quot;json&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 导入 json 文件中的所有对象</span></span><br></pre></td></tr></table></figure><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> json = </span><br><span class="line">     <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./package.json&quot;</span>, &#123; <span class="attr">assert</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;json&quot;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure><h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><h3 id="Generator-函数"><a href="#Generator-函数" class="headerlink" title="Generator 函数"></a>Generator 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">idMaker</span> () &#123;</span><br><span class="line">  <span class="keyword">let</span> id = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123; <span class="keyword">yield</span> id++ &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> gen = <span class="title function_">idMaker</span>()</span><br><span class="line">gen.<span class="title function_">next</span>().<span class="property">value</span>  <span class="comment">// → 0</span></span><br><span class="line">gen.<span class="title function_">next</span>().<span class="property">value</span>  <span class="comment">// → 1</span></span><br><span class="line">gen.<span class="title function_">next</span>().<span class="property">value</span>  <span class="comment">// → 2</span></span><br></pre></td></tr></table></figure><p>情况很复杂。 请参阅：<a href="https://babeljs.io/learn-es2015/#generators">Generators</a></p><h3 id="For-of-迭代器-iterator"><a href="#For-of-迭代器-iterator" class="headerlink" title="For..of + 迭代器(iterator)"></a>For..of + 迭代器(iterator)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        [pre, cur] = [cur, pre + cur];</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// 在 1000 处截断序列</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用于迭代生成器和数组。 请参阅：<a href="https://babeljs.io/learn-es2015/#iterators--forof">For..of iteration</a></p><h3 id="与-Iterator-接口的关系"><a href="#与-Iterator-接口的关系" class="headerlink" title="与 Iterator 接口的关系"></a>与 Iterator 接口的关系</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = &#123;&#125;;</span><br><span class="line">gen[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...gen] <span class="comment">// =&gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><code>Generator</code> 函数赋值给 <code>Symbol.iterator</code> 属性，从而使得 <code>gen</code> 对象具有了 <code>Iterator</code> 接口，可以被 <code>...</code> 运算符遍历了</p><h3 id="Symbol-iterator-属性"><a href="#Symbol-iterator-属性" class="headerlink" title="Symbol.iterator 属性"></a>Symbol.iterator 属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123; <span class="comment">/* some code */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() === g <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>gen</code> 是一个 <code>Generator</code> 函数，调用它会生成一个遍历器对象<code>g</code>。它的 <code>Symbol.iterator</code> 属性，也是一个遍历器对象生成函数，执行后返回它自己</p>]]></content>
      
      
      <categories>
          
          <category> ES2015 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES2015 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github 备忘清单</title>
      <link href="/2024/11/24/Github%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/Github%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-备忘清单"><a href="#Github-备忘清单" class="headerlink" title="Github 备忘清单"></a>Github 备忘清单</h1><h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><h3 id="站点范围的快捷方式"><a href="#站点范围的快捷方式" class="headerlink" title="站点范围的快捷方式"></a>站点范围的快捷方式</h3><div class="table-container"><table><thead><tr><th><code>S</code></th><th>聚焦搜索栏</th></tr></thead><tbody><tr><td><code>G</code> <code>N</code></td><td>转到您的通知</td></tr><tr><td><code>H</code></td><td>打开并关注用户、问题或拉取请求悬浮卡</td></tr><tr><td><code>Esc</code></td><td>当专注于上面时，关闭 hovercard</td></tr></tbody></table></div><h3 id="资料库"><a href="#资料库" class="headerlink" title="资料库"></a>资料库</h3><div class="table-container"><table><thead><tr><th><code>G</code> <code>C</code></th><th>转到 <code>Code</code> 选项卡</th></tr></thead><tbody><tr><td><code>G</code> <code>I</code></td><td>转到 <code>Issues</code> 选项卡</td></tr><tr><td><code>G</code> <code>P</code></td><td>转到拉取请求选项卡</td></tr><tr><td><code>G</code> <code>B</code></td><td>转到 <code>Projects</code> 选项卡</td></tr><tr><td><code>G</code> <code>W</code></td><td>转到 <code>Wiki</code> 选项卡</td></tr></tbody></table></div><h3 id="源代码编辑"><a href="#源代码编辑" class="headerlink" title="源代码编辑"></a>源代码编辑</h3><div class="table-container"><table><thead><tr><th><code>Ctrl</code> <code>F</code></th><th>开始在文件编辑器中搜索</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>G</code></td><td>找下一个</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>G</code></td><td>查找上一个</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>F</code></td><td>代替</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>R</code></td><td>全部替换</td></tr><tr><td><code>Alt</code> <code>G</code></td><td>跳转到行</td></tr><tr><td><code>Ctrl</code> <code>Z</code></td><td>撤消</td></tr><tr><td><code>Ctrl</code> <code>Y</code></td><td>重做</td></tr></tbody></table></div><h3 id="源码浏览"><a href="#源码浏览" class="headerlink" title="源码浏览"></a>源码浏览</h3><div class="table-container"><table><thead><tr><th><code>T</code></th><th>激活文件查找器</th></tr></thead><tbody><tr><td><code>L</code></td><td>跳转到代码中的一行</td></tr><tr><td><code>W</code></td><td>切换到新的分支或标签</td></tr><tr><td><code>Y</code></td><td>将 URL 扩展为其规范形式</td></tr><tr><td><code>I</code></td><td>显示或隐藏对差异的评论</td></tr><tr><td><code>B</code></td><td>打开责备视图</td></tr></tbody></table></div><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="table-container"><table><thead><tr><th><code>Ctrl</code> <code>B</code></th><th>为粗体文本插入 Markdown 格式</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>I</code></td><td>插入斜体文本的 Markdown 格式</td></tr><tr><td><code>Ctrl</code> <code>K</code></td><td>插入 Markdown 格式以创建链接</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>P</code></td><td>在编写和预览评论选项卡之间切换</td></tr><tr><td><code>Ctrl</code> <code>Enter</code></td><td>提交评论</td></tr><tr><td><code>Ctrl</code> <code>.</code></td><td>打开已保存的回复菜单，然后使用已保存的回复自动填充评论字段</td></tr><tr><td><code>Ctrl</code> <code>G</code></td><td>插入一个建议</td></tr><tr><td><code>R</code></td><td>在回复中引用所选文字</td></tr></tbody></table></div><h3 id="问题和拉取请求列表"><a href="#问题和拉取请求列表" class="headerlink" title="问题和拉取请求列表"></a>问题和拉取请求列表</h3><div class="table-container"><table><thead><tr><th><code>C</code></th><th>创建问题</th></tr></thead><tbody><tr><td><code>Ctrl</code> <code>/</code></td><td>将光标聚焦在问题或拉取请求搜索栏上</td></tr><tr><td><code>U</code></td><td>按作者过滤</td></tr><tr><td><code>L</code></td><td>按标签过滤或编辑标签</td></tr><tr><td><code>M</code></td><td>按里程碑过滤或编辑里程碑</td></tr><tr><td><code>A</code></td><td>按受让人过滤或编辑受让人</td></tr><tr><td><code>O</code></td><td>打开问题</td></tr></tbody></table></div><h3 id="问题和拉取请求"><a href="#问题和拉取请求" class="headerlink" title="问题和拉取请求"></a>问题和拉取请求</h3><div class="table-container"><table><thead><tr><th><code>Q</code></th><th>请求审稿人</th></tr></thead><tbody><tr><td><code>M</code></td><td>设定一个里程碑</td></tr><tr><td><code>L</code></td><td>应用标签</td></tr><tr><td><code>A</code></td><td>设置受让人</td></tr></tbody></table></div><h3 id="拉取请求的变化"><a href="#拉取请求的变化" class="headerlink" title="拉取请求的变化"></a>拉取请求的变化</h3><div class="table-container"><table><thead><tr><th><code>C</code></th><th>打开拉取请求中的提交列表</th></tr></thead><tbody><tr><td><code>T</code></td><td>打开拉取请求中已更改文件的列表</td></tr><tr><td><code>J</code></td><td>在列表中向下移动选择</td></tr><tr><td><code>K</code></td><td>在列表中向上移动选择</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>Enter</code></td><td>在拉取请求差异上添加单个评论</td></tr><tr><td><code>Alt</code> <code>(click)</code></td><td>在拉取请求中折叠和展开所有过时的审阅评论之间切换</td></tr></tbody></table></div><h3 id="项目板"><a href="#项目板" class="headerlink" title="项目板"></a>项目板</h3><div class="table-container"><table><thead><tr><th><code>Enter/Space</code></th><th>开始移动焦点列</th></tr></thead><tbody><tr><td><code>Esc</code></td><td>取消正在进行的移动</td></tr><tr><td><code>Enter</code></td><td>完成正在进行的移动</td></tr><tr><td><code>Left/H</code></td><td>向左移动列</td></tr><tr><td><code>Ctrl</code> <code>Left/H</code></td><td>将列移动到最左边的位置</td></tr><tr><td><code>Right/L</code></td><td>向右移动列</td></tr><tr><td><code>Ctrl</code> <code>Right/L</code></td><td>将列移动到最右边的位置</td></tr><tr><td><code>Enter/Space</code></td><td>开始移动聚焦卡</td></tr><tr><td><code>Esc</code></td><td>取消正在进行的移动</td></tr><tr><td><code>Enter</code></td><td>完成正在进行的移动</td></tr><tr><td><code>Down/J</code></td><td>向下移动卡片</td></tr><tr><td><code>Ctrl</code> <code>Down/J</code></td><td>将卡片移动到列的底部</td></tr><tr><td><code>Up/K</code></td><td>向上移动卡片</td></tr><tr><td><code>Ctrl</code> <code>Up/K</code></td><td>将卡片移动到列的顶部</td></tr><tr><td><code>Left/H</code></td><td>将卡片移动到左侧列的底部</td></tr><tr><td><code>Shift</code> <code>Left/H</code></td><td>将卡片移动到左侧列的顶部</td></tr><tr><td><code>Ctrl</code> <code>Left/H</code></td><td>将卡片移动到最左边一列的底部</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>Left/H</code></td><td>将卡片移至最左侧列的顶部</td></tr><tr><td><code>Right</code></td><td>将卡片移动到右侧列的底部</td></tr><tr><td><code>Shift</code> <code>Right/L</code></td><td>将卡片移动到右侧列的顶部</td></tr><tr><td><code>Ctrl</code> <code>Right/L</code></td><td>将卡片移动到最右侧列的底部</td></tr><tr><td><code>Ctrl</code> <code>Shift</code> <code>Right/L</code></td><td>将卡片移至最右侧列的顶部</td></tr></tbody></table></div><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><div class="table-container"><table><thead><tr><th><code>E/L/Y</code></th><th>标记为已读</th></tr></thead><tbody><tr><td><code>Shift</code> <code>M</code></td><td>静音线程</td></tr></tbody></table></div><h3 id="网络图"><a href="#网络图" class="headerlink" title="网络图"></a>网络图</h3><div class="table-container"><table><thead><tr><th><code>Left/H</code></th><th>向左滚动</th></tr></thead><tbody><tr><td><code>Right/L</code></td><td>向右滚动</td></tr><tr><td><code>Up/K</code></td><td>向上滑动</td></tr><tr><td><code>Down/J</code></td><td>向下滚动</td></tr><tr><td><code>Shift</code> <code>Left/H</code></td><td>一直向左滚动</td></tr><tr><td><code>Shift</code> <code>Right/L</code></td><td>一直向右滚动</td></tr><tr><td><code>Shift</code> <code>Up/K</code></td><td>一直向上滚动</td></tr><tr><td><code>Shift</code> <code>Down/J</code></td><td>一直向下滚动</td></tr></tbody></table></div><h2 id="搜索技巧"><a href="#搜索技巧" class="headerlink" title="搜索技巧"></a>搜索技巧</h2><h3 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h3><div class="table-container"><table><thead><tr><th><code>org:rails language:ruby</code></th><th>指定组织 <code>rails</code> 和编程语言 <code>ruby</code></th></tr></thead><tbody><tr><td><code>repo:torvalds/linux io_uring</code></td><td>指定仓库 <code>torvalds/linux</code> 搜索 <code>io_uring</code></td></tr><tr><td><code>owner:tpope path:*.vim</code></td><td>指定拥有者 <code>tpope</code> 和文件后缀为 <code>*.vim</code></td></tr><tr><td><code>created:&quot;&gt; 2022-10-22&quot; language:C#</code></td><td>创建于 <code>2022-10-22</code> 以后，语言为 <code>C#</code> 的条件</td></tr></tbody></table></div><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><div class="table-container"><table><thead><tr><th><code>path:__init__.py</code></th><th>文件为 <code>__init__.py</code> 里面的内容搜索</th></tr></thead><tbody><tr><td><code>path:/.*shrc$/</code></td><td>文件路径包含 <code>.*shrc</code> 结尾的文件中搜索内容</td></tr><tr><td><code>path:/src/*.js</code></td><td><code>src</code> 目录中的 <code>.js</code> 后缀的文件中搜索内容</td></tr></tbody></table></div><h3 id="完全符合"><a href="#完全符合" class="headerlink" title="完全符合"></a>完全符合</h3><div class="table-container"><table><thead><tr><th><code>out of memory</code></th><th>文本匹配 <code>out of memory</code></th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><div class="table-container"><table><thead><tr><th><code>io_uring (language:c OR language:cpp)</code></th><th>语言为 <code>c</code> 或者 <code>cpp</code> 的文件中搜索 <code>io_uring</code></th></tr></thead><tbody><tr><td><code>org:kubernetes NOT repo:kubernetes/api</code></td><td>组织为 <code>kubernetes</code> 排除里面的 <code>api</code> 仓库进行搜索</td></tr></tbody></table></div><h3 id="基于仓库的条件"><a href="#基于仓库的条件" class="headerlink" title="基于仓库的条件"></a>基于仓库的条件</h3><div class="table-container"><table><thead><tr><th><code>stars:100..8000 stars:&gt;10000</code></th><th>星星为 100 ~ 8000 或 10000 以上的</th></tr></thead><tbody><tr><td><code>forks:50..100 forks:200 forks:&lt;5</code></td><td>fork 为 50 ~ 100 或者 200 或者小于 5</td></tr><tr><td><code>size:35</code></td><td>大小为 <code>35kb</code></td></tr><tr><td><code>pushed:&lt;2022-11-23</code></td><td>推送代码时间 2022-11-23 之前</td></tr><tr><td><code>fork:true</code>, <code>fork:only</code></td><td></td></tr><tr><td><code>license:mit</code></td><td>基于协议 <code>mit</code> 条件</td></tr></tbody></table></div><h3 id="基于-issue-的条件"><a href="#基于-issue-的条件" class="headerlink" title="基于 issue 的条件"></a>基于 issue 的条件</h3><div class="table-container"><table><thead><tr><th><code>state:open</code>, <code>state:closed</code></th><th><code>关闭</code> / <code>打开</code> 的 <code>issue</code></th></tr></thead><tbody><tr><td><code>reason:completed</code></td><td><code>&quot;not planned&quot;</code>, <code>reopened</code>, <code>completed</code></td></tr><tr><td><code>label:bug</code></td><td>标签为 <code>bug</code> 的条件</td></tr><tr><td><code>author:jaywcjlove</code></td><td>作者 <code>jaywcjlove</code> 打开</td></tr><tr><td><code>mentions:jaywcjlove</code></td><td>提及 <code>jaywcjlove</code> 用户</td></tr><tr><td><code>assignee:jaywcjlove</code></td><td>分配给 <code>jaywcjlove</code> 用户</td></tr><tr><td><code>updated:&lt;2022-11-23</code></td><td>更新日期之前</td></tr></tbody></table></div><h3 id="基于用户的条件"><a href="#基于用户的条件" class="headerlink" title="基于用户的条件"></a>基于用户的条件</h3><div class="table-container"><table><thead><tr><th><code>fullname:jaywcjlove</code></th><th>全名 jaywcjlove</th></tr></thead><tbody><tr><td><code>location:China</code></td><td>位置 China</td></tr><tr><td><code>followers:20..50 followers:&gt;200 followers:&lt;2</code></td><td>追随者</td></tr><tr><td><code>repos:0 repos:&lt;40 repos:</code></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java经典算法50题</title>
      <link href="/2024/11/24/Java%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%9550%E9%A2%98/"/>
      <url>/2024/11/24/Java%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%9550%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>【程序1】<br>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个菲波拉契数列问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> f1=<span class="number">1</span>,f2=<span class="number">1</span>,f;</span><br><span class="line">        <span class="type">int</span> M=<span class="number">30</span>;</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(f2);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;M;i++) &#123;</span><br><span class="line">            f=f2;</span><br><span class="line">            f2=f1+f2;</span><br><span class="line">            f1=f;</span><br><span class="line">            System.out.println(f2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序2】<br>题目：判断101-200之间有多少个素数，并输出所有素数。<br>程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除， 则表明此数不是素数，反之是素数。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">101</span>;i&lt;<span class="number">200</span>;i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=Math.sqrt(i);j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="literal">true</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序3】<br>题目：打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">101</span>;i&lt;<span class="number">1000</span>;i++) &#123;</span><br><span class="line">            a=i%<span class="number">10</span>;</span><br><span class="line">            b=i/<span class="number">10</span>%<span class="number">10</span>;</span><br><span class="line">            c=i/<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span>(a*a*a+b*b*b+c*c*c==i)</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>【程序4】<br>题目：将一个正整数分解质因数。例如：输入90,打印出90=2<em>3</em>3*5。<br>程序分析：对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成：<br>(1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。<br>(2)如果n &gt; k，但n能被k整除，则应打印出k的值，并用n除以k的商,作为新的正整数你n,重复执行第一步。<br>(3)如果n不能被k整除，则用k+1作为k的值,重复执行第一步。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=input.nextInt();</span><br><span class="line">        <span class="type">int</span> k=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;=k) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n==k) &#123;</span><br><span class="line">                System.out.println(k);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (n%k==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(k);</span><br><span class="line">                n=n/k;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序5】<br>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt; =90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> score=input.nextInt();</span><br><span class="line">        <span class="type">char</span> grade=score&gt;=<span class="number">90</span>?<span class="string">&#x27;A&#x27;</span>:score&gt;=<span class="number">60</span>?<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">        System.out.println(grade);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序6】<br>题目：输入两个正整数m和n，求其最大公约数和最小公倍数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**在循环中，只要除数不等于0，用较大数除以较小的数，将小的一个数作为下一轮循环的大数，取得的余数作为下一轮循环的较小的数，如此循环直到较小的数的值为0，返回较大的数，此数即为最大公约数，最小公倍数为两数之积除以最大公约数。**/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> a=input.nextInt();</span><br><span class="line">        <span class="type">int</span> b=input.nextInt();</span><br><span class="line">        test06 test=<span class="keyword">new</span> <span class="title class_">test06</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> test.gongyinshu(a, b);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小公因数&quot;</span>+i);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大公倍数&quot;</span>+a*b/i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">gongyinshu</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;b) &#123;</span><br><span class="line">            <span class="type">int</span> t=b;</span><br><span class="line">            b=a;</span><br><span class="line">            a=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b!=<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a==b) </span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            <span class="type">int</span> x=b;</span><br><span class="line">            b=a%b;</span><br><span class="line">            a=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序7】<br>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> abccount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> spacecount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> numcount=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> othercount=<span class="number">0</span>;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String toString=input.nextLine();</span><br><span class="line">        <span class="type">char</span> [] ch=toString.toCharArray();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ch.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isLetter(ch[i])) &#123;</span><br><span class="line">                abccount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isDigit(ch[i])) &#123;</span><br><span class="line">                numcount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Character.isSpaceChar(ch[i]))&#123;</span><br><span class="line">                spacecount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                othercount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(abccount);</span><br><span class="line">        System.out.println(spacecount);</span><br><span class="line">        System.out.println(numcount);</span><br><span class="line">        System.out.println(othercount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序8】<br>题目：求s=a+aa+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> a=input.nextInt();</span><br><span class="line">        <span class="type">int</span> n=input.nextInt();</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            b+=a;</span><br><span class="line">            sum+=b;</span><br><span class="line">            a=a*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序9】<br>题目：一个数如果恰好等于它的因子之和，这个数就称为 “完数 “。例如6=1＋2＋3.编程   找出1000以内的所有完数。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i/<span class="number">2</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">                    t+=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t==i) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序10】<br>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span> h=<span class="number">100</span>;</span><br><span class="line">        <span class="type">double</span> s=<span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</span><br><span class="line">            h=h/<span class="number">2</span>;</span><br><span class="line">            s=s+<span class="number">2</span>*h;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序11】<br>题目：有1、2、3、4四个数字，能组成多少个互不相同且一个数字中无重复数字的三位数？并把他们都输入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;<span class="number">5</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;<span class="number">5</span>;k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i!=j&amp;&amp;j!=k&amp;&amp;i!=k) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        System.out.println(i*<span class="number">100</span>+j*<span class="number">10</span>+k);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序12】<br>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润，求应发放奖金总数？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">double</span> x=input.nextDouble();</span><br><span class="line">        <span class="type">double</span> y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">0</span>&amp;&amp;x&lt;=<span class="number">10</span>) &#123;</span><br><span class="line">            y=x*<span class="number">0.1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">10</span>&amp;&amp;x&lt;=<span class="number">20</span>) &#123;</span><br><span class="line">            y=<span class="number">10</span>*<span class="number">0.1</span>+(x-<span class="number">10</span>)*<span class="number">0.075</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">20</span>&amp;&amp;x&lt;=<span class="number">40</span>) &#123;</span><br><span class="line">            y=<span class="number">10</span>*<span class="number">0.1</span>+<span class="number">10</span>*<span class="number">0.075</span>+(x-<span class="number">20</span>)*<span class="number">0.05</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">40</span>&amp;&amp;x&lt;=<span class="number">60</span>) &#123;</span><br><span class="line">            y=<span class="number">10</span>*<span class="number">0.1</span>+<span class="number">10</span>*<span class="number">0.075</span>+<span class="number">20</span>*<span class="number">0.05</span>+(x-<span class="number">40</span>)*<span class="number">0.03</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">60</span>&amp;&amp;x&lt;=<span class="number">100</span>) &#123;</span><br><span class="line">            y=<span class="number">10</span>*<span class="number">0.1</span>+<span class="number">10</span>*<span class="number">0.075</span>+<span class="number">20</span>*<span class="number">0.05</span>+<span class="number">20</span>*<span class="number">0.03</span>+(x-<span class="number">60</span>)*<span class="number">0.015</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (x&gt;<span class="number">100</span>) &#123;</span><br><span class="line">            y=<span class="number">10</span>*<span class="number">0.1</span>+<span class="number">10</span>*<span class="number">0.075</span>+<span class="number">20</span>*<span class="number">0.05</span>+<span class="number">20</span>*<span class="number">0.03</span>+<span class="number">40</span>*<span class="number">0.015</span>+(x-<span class="number">100</span>)*<span class="number">0.01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序13】<br>题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？ </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=-<span class="number">100</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Math.sqrt(i+<span class="number">100</span>)%<span class="number">1</span>==<span class="number">0</span>&amp;&amp;Math.sqrt(i+<span class="number">268</span>)%<span class="number">1</span>==<span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序14】<br>题目：输入某年某月某日，判断这一天是这一年的第几天？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi14</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> year, month, day;</span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> e;</span><br><span class="line">        <span class="type">input</span> <span class="variable">fymd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">input</span>();</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            e = <span class="number">0</span>;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入年：&quot;</span>);</span><br><span class="line">            year =fymd.input();</span><br><span class="line">            System.out.print(<span class="string">&quot;输入月：&quot;</span>);</span><br><span class="line">            month = fymd.input();</span><br><span class="line">            System.out.print(<span class="string">&quot;输入天：&quot;</span>);</span><br><span class="line">            day = fymd.input();</span><br><span class="line">            <span class="keyword">if</span> (year &lt; <span class="number">0</span> || month &lt; <span class="number">0</span> || month &gt; <span class="number">12</span> ||day &lt; <span class="number">0</span> || day &gt; <span class="number">31</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入错误，请重新输入！&quot;</span>);</span><br><span class="line">                e=<span class="number">1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>( e==<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i &lt;month; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (i) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">                    days = <span class="number">31</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">                    days = <span class="number">30</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">if</span> ((year % <span class="number">400</span> == <span class="number">0</span>) || (year % <span class="number">4</span> == <span class="number">0</span>&amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>)) &#123;</span><br><span class="line">                        days = <span class="number">29</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        days = <span class="number">28</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            d += days;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(year + <span class="string">&quot;-&quot;</span> + month +<span class="string">&quot;-&quot;</span> + day + <span class="string">&quot;是这年的第&quot;</span> +(d+day) + <span class="string">&quot;天。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">input</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">input</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        value = s.nextInt();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序15】<br>题目：输入三个整数x,y,z，请把这三个数由小到大输出。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> x=input.nextInt();</span><br><span class="line">        <span class="type">int</span> y=input.nextInt();</span><br><span class="line">        <span class="type">int</span> z=input.nextInt();</span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) &#123;</span><br><span class="line">            t=x;</span><br><span class="line">            x=y;</span><br><span class="line">            y=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(y&gt;z) &#123;</span><br><span class="line">            t=z;</span><br><span class="line">            z=y;</span><br><span class="line">            y=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y) &#123;</span><br><span class="line">            t=x;</span><br><span class="line">            x=y;</span><br><span class="line">            y=t;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x+<span class="string">&quot;&quot;</span>+y+<span class="string">&quot;&quot;</span>+z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序16】<br>题目：输出9*9口诀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;*&quot;</span>+j+<span class="string">&quot;=&quot;</span>+i*j);</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序17】<br>题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个   第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下   的一半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test17</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> x=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">10</span>;i&gt;<span class="number">1</span>;i--) &#123;</span><br><span class="line">            x=(x+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序18】<br>题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> i=<span class="string">&#x27;x&#x27;</span>;i&lt;=<span class="string">&#x27;z&#x27;</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> j=<span class="string">&#x27;x&#x27;</span>;j&lt;=<span class="string">&#x27;z&#x27;</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i!=j) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">char</span> k=<span class="string">&#x27;x&#x27;</span>;k&lt;=<span class="string">&#x27;z&#x27;</span>;k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(i!=k&amp;&amp;j!=k) &#123;</span><br><span class="line">                            <span class="keyword">if</span>(i!=<span class="string">&#x27;x&#x27;</span>&amp;&amp;j!=<span class="string">&#x27;x&#x27;</span>&amp;&amp;j!=<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                                System.out.println(<span class="string">&quot;a:&quot;</span>+i+<span class="string">&quot;\nb:&quot;</span>+j+<span class="string">&quot;\nc:&quot;</span>+k);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序19】<br>题目：打印出如下图案（菱形）</p><p>  <img src="Java经典算法50题/image-20241025121517261.png" alt="image-20241025121517261"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">H</span> <span class="operator">=</span> <span class="number">7</span>, W = <span class="number">7</span>;<span class="comment">//高和宽必须是相等的奇数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;(H+<span class="number">1</span>) / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;W/<span class="number">2</span>-i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;(i+<span class="number">1</span>)*<span class="number">2</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=H/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;=i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>; k&lt;=W-<span class="number">2</span>*i; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序20】<br>题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13…求出这个数列的前20项之和。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test20</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>,ver=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) &#123;</span><br><span class="line">            sum+=ver/i;</span><br><span class="line">            ver+=i;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序21】<br>题目：求1+2!+3!+…+20!的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> sum=<span class="number">0</span>,ver=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++) &#123;</span><br><span class="line">            ver=ver*i;</span><br><span class="line">            sum+=ver;</span><br><span class="line">        &#125;</span><br><span class="line">    System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序22】<br>题目：利用递归方法求5!。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fac(<span class="number">5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fac</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i*fac(i-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序23】<br>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> age=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">5</span>;i++) &#123;</span><br><span class="line">            age+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println( age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序24】<br>题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用了长整型最多输入18位</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String toString=input.nextLine();</span><br><span class="line">        <span class="type">char</span>[] num=toString.toCharArray();</span><br><span class="line">        System.out.println(num.length);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=num.length;i&gt;<span class="number">0</span>;i--) &#123;</span><br><span class="line">            System.out.print(num[i-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序25】<br>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> numtest=input.nextInt();</span><br><span class="line">        System.out.println(ver(numtest));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">ver</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(num&lt;<span class="number">0</span>||(num!=<span class="number">0</span>&amp;&amp;num%<span class="number">10</span>==<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> ver=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(num&gt;ver) &#123;</span><br><span class="line">            ver=ver*<span class="number">10</span>+num%<span class="number">10</span>;</span><br><span class="line">            num=num/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>(num==ver||num==ver/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序26】<br>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续  判断第二个字母。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">getChar</span> <span class="variable">tw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">getChar</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入星期的第一个大写字母：&quot;</span>);</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> tw.getChar();</span><br><span class="line">        <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Monday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;W&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Wednesday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;Friday&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入星期的第二个字母：&quot;</span>);</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> tw.getChar();</span><br><span class="line">                <span class="keyword">if</span>(ch2 == <span class="string">&#x27;U&#x27;</span>)&#123;System.out.println(<span class="string">&quot;Tuesday&quot;</span>); &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch2 == <span class="string">&#x27;H&#x27;</span>) &#123;System.out.println(<span class="string">&quot;Thursday&quot;</span>);&#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;无此写法！&quot;</span>);&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>: &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入星期的第二个字母：&quot;</span>);</span><br><span class="line">                <span class="type">char</span> <span class="variable">ch2</span> <span class="operator">=</span> tw.getChar();</span><br><span class="line">                <span class="keyword">if</span>(ch2 == <span class="string">&#x27;U&#x27;</span>)&#123;System.out.println(<span class="string">&quot;Sunday&quot;</span>); &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(ch2 == <span class="string">&#x27;A&#x27;</span>)&#123;System.out.println(<span class="string">&quot;Saturday&quot;</span>); &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;无此写法！&quot;</span>);&#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:System.out.println(<span class="string">&quot;无此写法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">getChar</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getChar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> str.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(ch&lt;<span class="string">&#x27;A&#x27;</span> || ch&gt;<span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误，请重新输入&quot;</span>);</span><br><span class="line">            ch=getChar();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>【程序27】<br>题目：求100之内的素数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test27</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">2</span>);</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;<span class="number">100</span>;i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=Math.sqrt(i);j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i%j==<span class="number">0</span>) &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="literal">true</span>)</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序28】<br>题目：对10个数进行排序  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test28</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            a[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] b=paixu(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b.length;i++) &#123;</span><br><span class="line">            System.out.println(b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] paixu(<span class="type">int</span>[] a) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;a.length;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&gt;a[j]) &#123;</span><br><span class="line">                    <span class="type">int</span> t=a[j];</span><br><span class="line">                    a[j]=a[i];</span><br><span class="line">                    a[i]=t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序29】<br>题目：求一个3*3矩阵对角线元素之和 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[][] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) &#123;</span><br><span class="line">                a[i][j]=input.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) &#123;</span><br><span class="line">                System.out.print(a[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i==j) &#123;</span><br><span class="line">                    sum+=a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序30】<br>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            a[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> x=input.nextInt();</span><br><span class="line">        a=sort(a, x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] a,<span class="type">int</span> b) &#123;</span><br><span class="line">        <span class="type">int</span>[] c=<span class="keyword">new</span> <span class="title class_">int</span>[a.length+<span class="number">1</span>];</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i]&lt;b) &#123;</span><br><span class="line">                    c[i]=a[i];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    c[i]=b;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    System.arraycopy(a, i, c, i+<span class="number">1</span>, a.length-i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序31】<br>题目：将一个数组逆序输出。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            a[i]=input.nextInt();</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">while</span>(a[i-<span class="number">1</span>]!=-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;i-<span class="number">1</span>;j++) &#123;</span><br><span class="line">            System.out.println(a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=i-<span class="number">1</span>;k&gt;<span class="number">0</span>;k--) &#123;</span><br><span class="line">            System.out.println(a[k-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序32】<br>题目：取一个整数a从右端开始的4～7位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test32</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Scanner input=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String toString=input.nextLine();</span><br><span class="line">        <span class="type">char</span>[] a=toString.toCharArray();</span><br><span class="line">        <span class="type">int</span> j=a.length;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;<span class="number">7</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;error!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a[j-<span class="number">7</span>]+<span class="string">&quot;&quot;</span>+a[j-<span class="number">6</span>]+<span class="string">&quot;&quot;</span>+a[j-<span class="number">5</span>]+<span class="string">&quot;&quot;</span>+a[j-<span class="number">4</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序33】<br>题目：打印出杨辉三角形（要求打印出10行如下图）<br>      1<br>     1  1<br>    1  2  1<br>   1  3  3  1<br>  1  4  6  4  1<br>1  5  10  10  5  1<br>…………</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            a[i][i] = <span class="number">1</span>;</span><br><span class="line">            a[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;i; j++) &#123;</span><br><span class="line">                a[i][j] = a[i-<span class="number">1</span>][j-<span class="number">1</span>] + a[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;<span class="number">2</span>*(<span class="number">10</span>-i)-<span class="number">1</span>; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;=i; j++) &#123;</span><br><span class="line">                System.out.print(a[i][j] + <span class="string">&quot;   &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序34】<br>题目：输入3个数a,b,c，按大小顺序输出。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> a=input.nextInt();</span><br><span class="line">        <span class="type">int</span> b=input.nextInt();</span><br><span class="line">        <span class="type">int</span> c=input.nextInt();</span><br><span class="line">        System.out.println(a+<span class="string">&quot;&quot;</span>+b+<span class="string">&quot;&quot;</span>+c);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line">            <span class="type">int</span> t=a;</span><br><span class="line">            a=b;</span><br><span class="line">            b=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b&gt;c) &#123;</span><br><span class="line">            <span class="type">int</span> t=b;</span><br><span class="line">            b=c;</span><br><span class="line">            c=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b) &#123;</span><br><span class="line">            <span class="type">int</span> t=a;</span><br><span class="line">            a=b;</span><br><span class="line">            b=t;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(a+<span class="string">&quot;&quot;</span>+b+<span class="string">&quot;&quot;</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序35】  </p><p>题目：输入数组，最大的与第一个元素交换，最小的与最后一个元素交换，输出数组。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            a[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxi=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max=a[maxi];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max&lt;a[i]) &#123;</span><br><span class="line">                max=a[i];</span><br><span class="line">                maxi=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> t=a[<span class="number">0</span>];</span><br><span class="line">        a[<span class="number">0</span>]=a[maxi];</span><br><span class="line">        a[maxi]=t;</span><br><span class="line">        <span class="type">int</span> mini=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> min=a[mini];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(min&gt;a[i]) &#123;</span><br><span class="line">                min=a[i];</span><br><span class="line">                mini=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> k=a[a.length-<span class="number">1</span>];</span><br><span class="line">        a[a.length-<span class="number">1</span>]=a[mini];</span><br><span class="line">        a[mini]=k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序36】<br>题目：有n个整数，使其前面各数顺序向后移m个位置，最后m个数变成最前面的m个数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test36</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> N=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> M=<span class="number">3</span>;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] a=<span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">            a[i]=input.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] b=<span class="keyword">new</span> <span class="title class_">int</span>[M];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">            b[i]=a[N-M+i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=N-<span class="number">1</span>;i&gt;=M;i--) &#123;</span><br><span class="line">            a[i]=a[i-M];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;M;i++) &#123;</span><br><span class="line">            a[i]=b[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序37】<br>题目：有n个人围成一圈，顺序排号。从第一个人开始报数（从1到3报数），凡报到3的人退出圈子，问最后留下的是原来第几号的那位。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test37</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=input.nextInt();</span><br><span class="line">        <span class="type">boolean</span>[] arr=<span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++) &#123;</span><br><span class="line">            arr[i]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> leftCount=n;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> countNum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(leftCount&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[index]==<span class="literal">true</span>) &#123;</span><br><span class="line">                countNum++;</span><br><span class="line">                <span class="keyword">if</span>(countNum==<span class="number">3</span>) &#123;</span><br><span class="line">                    arr[index]=<span class="literal">false</span>;</span><br><span class="line">                    leftCount--;</span><br><span class="line">                    countNum=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span>(index==n) &#123;</span><br><span class="line">                index=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]==<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(i+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>【程序38】<br>题目：写一个函数，求一个字符串的长度，在main函数中输入字符串，并输出其长度。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String toString=input.nextLine();</span><br><span class="line">        System.out.println(toString.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序39】<br>题目：编写一个函数，输入n为偶数时，调用函数求1/2+1/4+…+1/n,当输入n为奇数时，调用函数1/1+1/3+…+1/n(利用指针函数)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test39</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=input.nextInt();</span><br><span class="line">        System.out.println(sum(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i+=<span class="number">2</span>) &#123;</span><br><span class="line">                sum+=(<span class="type">double</span>)<span class="number">1</span>/i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i+=<span class="number">2</span>) &#123;</span><br><span class="line">                sum+=(<span class="type">double</span>)<span class="number">1</span>/i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序40】<br>题目：字符串排序。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test40</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String[] toStrings=<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>];</span><br><span class="line">        String temp=<span class="literal">null</span>;</span><br><span class="line">        toStrings[<span class="number">0</span>]=<span class="string">&quot;afdfdcv&quot;</span>;</span><br><span class="line">        toStrings[<span class="number">1</span>]=<span class="string">&quot;ghaf&quot;</span>;</span><br><span class="line">        toStrings[<span class="number">2</span>]=<span class="string">&quot;fdasfas&quot;</span>;</span><br><span class="line">        toStrings[<span class="number">3</span>]=<span class="string">&quot;tyrdfas&quot;</span>;</span><br><span class="line">        toStrings[<span class="number">4</span>]=<span class="string">&quot;fadsfsd&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">5</span>;j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!compare(toStrings[i], toStrings[j])) &#123;</span><br><span class="line">                    temp=toStrings[i];</span><br><span class="line">                    toStrings[i]=toStrings[j];</span><br><span class="line">                    toStrings[j]=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++) &#123;</span><br><span class="line">            System.out.println(toStrings[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(String s1,String s2)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s1.length()&amp;&amp;i&lt;s2.length();i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(i)&gt;s2.charAt(i)) &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s1.charAt(i)&lt;s2.charAt(i)) &#123;</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(s1.length()&lt;s2.length()) &#123;</span><br><span class="line">                    flag=<span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    flag=<span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>\</em>【程序41\</strong>】<br>题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个，这只猴子把多的一个扔入海中，拿走了**一份。第二只猴子把剩下的桃子又平均分成五份，又多了一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的，问海滩上原来最少有多少个桃子？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi41</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i,m,j=<span class="number">0</span>,k,count;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">4</span>;i&lt;<span class="number">10000</span>;i+=<span class="number">4</span>) &#123; </span><br><span class="line">            count=<span class="number">0</span>;</span><br><span class="line">            m=i;</span><br><span class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;<span class="number">5</span>;k++)&#123;</span><br><span class="line">                j=i/<span class="number">4</span>*<span class="number">5</span>+<span class="number">1</span>;</span><br><span class="line">                i=j;</span><br><span class="line">                <span class="keyword">if</span>(j%<span class="number">4</span>==<span class="number">0</span>)</span><br><span class="line">                    count++;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           i=m;</span><br><span class="line">           <span class="keyword">if</span>(count==<span class="number">4</span>)</span><br><span class="line">               &#123;System.out.println(<span class="string">&quot;原有桃子 &quot;</span>+j+<span class="string">&quot; 个&quot;</span>);</span><br><span class="line">           <span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序42】<br>题目：809<em>??=800</em>??+9<em>??+1  其中??代表的两位数,8</em>??的结果为两位数，9<em>??的结果为3位数。求??代表的两位数，及809</em>??后的结果。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题目错了！809x=800x+9x+1 这样的方程无解。去掉那个1就有解了。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi42</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">809</span>,b,i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">10</span>;i&lt;<span class="number">13</span>;i++)</span><br><span class="line">            &#123;b=i*a ;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">8</span>*i&lt;<span class="number">100</span>&amp;&amp;<span class="number">9</span>*i&gt;=<span class="number">100</span>)</span><br><span class="line">                System.out.println(<span class="string">&quot;809*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+<span class="string">&quot;800*&quot;</span>+i+<span class="string">&quot;+&quot;</span>+<span class="string">&quot;9*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+b);&#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序43】<br>题目：求0—7所能组成的奇数个数。<br>//组成1位数是4个。<br>//组成2位数是7<em>4个。<br>//组成3位数是7</em>8<em>4个。<br>//组成4位数是7</em>8<em>8</em>4个。<br>//……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test43</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;<span class="number">76543210</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序44】<br>题目：一个偶数总能表示为两个素数之和。<br>//由于用除sqrt(n)的方法求出的素数不包括2和3，<br>//因此在判断是否是素数程序中人为添加了一个3。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi44</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n,i;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入一个大于等于6的偶数：&quot;</span>);</span><br><span class="line">            n = s.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span>(n&lt;<span class="number">6</span>||n%<span class="number">2</span>!=<span class="number">0</span>);   <span class="comment">//判断输入是否是&gt;=6偶数,不是,重新输入</span></span><br><span class="line">        <span class="type">fun</span> <span class="variable">fc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">fun</span>();</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((fc.fun(i))==<span class="number">1</span>&amp;&amp;(fc.fun(n-i)==<span class="number">1</span>))</span><br><span class="line">                &#123;<span class="type">int</span> j=n-i;</span><br><span class="line">                 System.out.println(n+<span class="string">&quot; = &quot;</span>+i+<span class="string">&quot; +&quot;</span>+j);</span><br><span class="line">             &#125; <span class="comment">//输出所有可能的素数对</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">fun</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> a)</span>    <span class="comment">//判断是否是素数的函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i,flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;flag=<span class="number">1</span>;<span class="keyword">return</span>(flag);&#125;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=Math.sqrt(a);i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a%i==<span class="number">0</span>) &#123;flag=<span class="number">0</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> flag=<span class="number">1</span>;&#125;</span><br><span class="line">                <span class="keyword">return</span> (flag) ;<span class="comment">//不是素数,返回0,是素数,返回1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//解法二</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi44</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入一个大于等于6的偶数：&quot;</span>);</span><br><span class="line">            n = s.nextInt();</span><br><span class="line">        &#125; <span class="keyword">while</span>(n&lt;<span class="number">6</span>||n%<span class="number">2</span>!=<span class="number">0</span>);   <span class="comment">//判断输入是否是&gt;=6偶数,不是,重新输入</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">3</span>;i&lt;=n/<span class="number">2</span>;i+=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fun(i)&amp;&amp;fun(n-i)) &#123;</span><br><span class="line">                System.out.println(n+<span class="string">&quot; = &quot;</span>+i+<span class="string">&quot; +&quot;</span>+(n-i));</span><br><span class="line">            &#125; <span class="comment">//输出所有可能的素数对</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">fun</span> <span class="params">(<span class="type">int</span> a)</span>&#123;    <span class="comment">//判断是否是素数的函数</span></span><br><span class="line">    <span class="type">boolean</span> flag=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">3</span>)&#123;flag=<span class="literal">true</span>;<span class="keyword">return</span>(flag);&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=Math.sqrt(a);i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(a%i==<span class="number">0</span>) &#123;flag=<span class="literal">false</span>;<span class="keyword">break</span>;&#125;</span><br><span class="line">           <span class="keyword">else</span> flag=<span class="literal">true</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> (flag) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序45】<br>题目：判断一个素数能被几个9整除<br>//题目错了吧？能被9整除的就不是素数了！所以改成整数了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个整数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> s.nextInt();</span><br><span class="line">        <span class="type">int</span>   <span class="variable">tmp</span> <span class="operator">=</span> num;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; tmp%<span class="number">9</span> == <span class="number">0</span> ;)&#123;</span><br><span class="line">            tmp = tmp/<span class="number">9</span>;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(num+<span class="string">&quot; 能够被 &quot;</span>+count+<span class="string">&quot; 个9整除。&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序46】<br>题目：两个字符串连接程序 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi46</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;请再输入一个字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> str1+str2;</span><br><span class="line">        System.out.println(<span class="string">&quot;连接后的字符串是：&quot;</span>+str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序47】<br>题目：读取7个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi47</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> n=<span class="number">1</span>,num;</span><br><span class="line">        <span class="keyword">while</span>(n&lt;=<span class="number">7</span>)&#123;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;请输入一个1--50之间的整数：&quot;</span>);</span><br><span class="line">                num=s.nextInt();</span><br><span class="line">            &#125;<span class="keyword">while</span>(num&lt;<span class="number">1</span>||num&gt;<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">               &#123;System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            n ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序48】<br>题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密规则如下：每位数字都加上5,然后用和除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi48</span>   &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> num=<span class="number">0</span>,temp;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入一个4位正整数：&quot;</span>);</span><br><span class="line">            num = s.nextInt();</span><br><span class="line">        &#125;<span class="keyword">while</span> (num&lt;<span class="number">1000</span>||num&gt;<span class="number">9999</span>);</span><br><span class="line">        <span class="type">int</span> a[]=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        a[<span class="number">0</span>] = num/<span class="number">1000</span>; <span class="comment">//取千位的数字</span></span><br><span class="line">        a[<span class="number">1</span>] = (num/<span class="number">100</span>)%<span class="number">10</span>; <span class="comment">//取百位的数字</span></span><br><span class="line">        a[<span class="number">2</span>] = (num/<span class="number">10</span>)%<span class="number">10</span>; <span class="comment">//取十位的数字</span></span><br><span class="line">        a[<span class="number">3</span>] = num%<span class="number">10</span>; <span class="comment">//取个位的数字</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            a[j]+=<span class="number">5</span>;</span><br><span class="line">            a[j]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)&#123;</span><br><span class="line">            temp = a[j];</span><br><span class="line">            a[j] = a[<span class="number">3</span>-j];</span><br><span class="line">            a[<span class="number">3</span>-j] =temp;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;加密后的数字为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            System.out.print(a[j]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序49】<br>题目：计算字符串中子串出现的次数 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi49</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入字符串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入子串：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> s.nextLine();</span><br><span class="line">        <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(str1.equals(<span class="string">&quot;&quot;</span>)||str2.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你没有输入字符串或子串,无法比较!&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=str1.length()-str2.length();i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(str2.equals(str1.substring(i, str2.length()+i)))<span class="comment">//这种比法有问题，会把&quot;aaa&quot;看成有2个&quot;aa&quot;子串。</span></span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子串在字符串中出现: &quot;</span>+count+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【程序50】<br>题目：有五个学生，每个学生有3门课的成绩，从键盘输入以上数据（包括学生号，姓名，三门课成绩），计算出平均成绩，把原有的数据和计算出的平均分数存放在磁盘文件 “stud “中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">lianxi50</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String [][] a = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">5</span>][<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;<span class="number">6</span>; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span>+i+<span class="string">&quot;个学生的学号：&quot;</span>);</span><br><span class="line">            a[i-<span class="number">1</span>][<span class="number">0</span>] = ss.nextLine();</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第&quot;</span>+i+<span class="string">&quot;个学生的姓名：&quot;</span>);</span><br><span class="line">            a[i-<span class="number">1</span>][<span class="number">1</span>] = ss.nextLine();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;<span class="number">4</span>; j++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入该学生的第&quot;</span>+j+<span class="string">&quot;个成绩：&quot;</span>);</span><br><span class="line">            a[i-<span class="number">1</span>][j+<span class="number">1</span>] = ss.nextLine();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以下计算平均分</span></span><br><span class="line">        <span class="type">float</span> avg;</span><br><span class="line">        <span class="type">int</span> sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>; j&lt;<span class="number">5</span>; j++) &#123;</span><br><span class="line">            sum=sum+ Integer.parseInt(a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        avg= (<span class="type">float</span>)sum/<span class="number">3</span>;</span><br><span class="line">        a[i][<span class="number">5</span>]=String.valueOf(avg);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//以下写磁盘文件</span></span><br><span class="line">        String s1;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\stud&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(f.exists())&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件不存在，正在创建文件&quot;</span>);</span><br><span class="line">                f.createNewFile();<span class="comment">//不存在则创建</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(f));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++) &#123;</span><br><span class="line">                s1=a[i][j]+<span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">                output.write(s1);   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        output.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据已写入c盘文件stud中！&quot;</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2024/11/24/MySQL/"/>
      <url>/2024/11/24/MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>[TOC]</p><h2 id="一、SQL简述"><a href="#一、SQL简述" class="headerlink" title="一、SQL简述"></a>一、SQL简述</h2><h3 id="1-SQL的概述"><a href="#1-SQL的概述" class="headerlink" title="1.SQL的概述"></a>1.SQL的概述</h3><p>Structure Query Language(结构化查询语言)简称SQL，它被美国国家标准局(ANSI)确定为关系型数据库语言的美国标准，后被国际化标准组织(ISO)采纳为关系数据库语言的国际标准。数据库管理系统可以通过SQL管理数据库；定义和操作数据，维护数据的完整性和安全性。</p><h3 id="2-SQL的优点"><a href="#2-SQL的优点" class="headerlink" title="2.SQL的优点"></a>2.SQL的优点</h3><p>1、简单易学，具有很强的操作性<br>2、绝大多数重要的数据库管理系统均支持SQL<br>3、高度非过程化；用<a href="https://so.csdn.net/so/search?q=SQL操作&amp;spm=1001.2101.3001.7020">SQL操作</a>数据库时大部分的工作由DBMS自动完成</p><h3 id="3-SQL的分类"><a href="#3-SQL的分类" class="headerlink" title="3.SQL的分类"></a>3.SQL的分类</h3><p>1、DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等； 常用语句：CREATE、 ALTER、DROP<br>2、DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据；常用语句：INSERT、 UPDATE、 DELETE<br>3、DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别； 常用语句：GRANT、DENY<br>4、DQL(Data Query Language) <a href="https://so.csdn.net/so/search?q=数据查询语言&amp;spm=1001.2101.3001.7020">数据查询语言</a>，用来查询数据 常用语句：SELECT</p><h2 id="二、数据库的三大范式"><a href="#二、数据库的三大范式" class="headerlink" title="二、数据库的三大范式"></a>二、数据库的三大范式</h2><p>1、第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割。<br>2、第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分。<br>3、第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖。</p><h2 id="三、数据库的数据类型"><a href="#三、数据库的数据类型" class="headerlink" title="三、数据库的数据类型"></a>三、数据库的数据类型</h2><p>使用MySQL数据库存储数据时，不同的数据类型决定了 MySQL存储数据方式的不同。为此，MySQL数据库提供了多种数据类型，其中包括整数类型、浮点数类型、定点 数类型、日期和时间类型、字符串类型、二进制…等等数据类型。</p><h3 id="1-整数类型"><a href="#1-整数类型" class="headerlink" title="1.整数类型"></a>1.整数类型</h3><p>根据数值取值范围的不同MySQL 中的整数类型可分为5种，分别是TINYINT、SMALUNT、MEDIUMINT、INT和 BIGINT。下图列举了 MySQL不同整数类型所对应的字节大小和取值范围而最常用的为INT类型的，</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>字节数</th><th>无符号数的取值范围</th><th>有符号数的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~255</td><td>-128~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0~65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>-8388608~8388608</td></tr><tr><td>INT</td><td>4</td><td>0~4294967295</td><td>-2147483648~ 2147483648</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td>-9223372036854775808~9223372036854775808</td></tr></tbody></table></div><h3 id="2-浮点数类型和定点数类型"><a href="#2-浮点数类型和定点数类型" class="headerlink" title="2.浮点数类型和定点数类型"></a>2.浮点数类型和定点数类型</h3><p>在MySQL数据库中使用浮点数和定点数来存储小数。浮点数的类型有两种：单精度浮点数类型（FLOAT)和双精度浮点数类型（DOUBLE)。而定点数类型只有一种即DECIMAL类型。下图列举了 MySQL中浮点数和定点数类型所对应的字节大小及其取值范围：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>字节数</th><th>有符号的取值范围</th><th>无符号的取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td><td>-3.402823466E+38~-1.175494351E-38</td><td>0和1.175494351E-38~3.402823466E+38</td></tr><tr><td>DOUBLE</td><td>8</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>DECIMAL（M,D）</td><td>M+2</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>从上图中可以看出：DECIMAL类型的取值范围与DOUBLE类型相同。但是，请注意：DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长 度，D表示的是小数点后的长度。比如，将数据类型为DECIMAL(6,2)的数据6.5243 插入数据库后显示的结果为6.52</td><td></td><td></td></tr></tbody></table></div><h3 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h3><p>在MySQL中常用CHAR 和 VARCHAR 表示字符串。两者不同的是：VARCHAR存储可变长度的字符串。<br><strong>当数据为CHAR(M)类型时，不管插入值的长度是实际是多少它所占用的存储空间都是M个字节；而VARCHAR(M)所对应的数据所占用的字节数为实际长度加1</strong></p><div class="table-container"><table><thead><tr><th>插入值</th><th>CHAR(3)</th><th>存储需求</th><th>VARCHAR(3)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>‘’</td><td>3个字节</td><td>‘’</td><td>1个字节</td></tr><tr><td>‘a’</td><td>‘a’</td><td>3个字节</td><td>‘a’</td><td>2个字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>3个字节</td><td>‘ab’</td><td>3个字节</td></tr><tr><td>‘abc’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4个字节</td></tr><tr><td>‘abcd’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4字节</td></tr></tbody></table></div><h3 id="4-字符串类型"><a href="#4-字符串类型" class="headerlink" title="4.字符串类型"></a>4.字符串类型</h3><p>文本类型用于表示大文本数据，例如，文章内容、评论、详情等，它的类型分为如下4种：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table></div><h3 id="5-日期与时间类型"><a href="#5-日期与时间类型" class="headerlink" title="5.日期与时间类型"></a>5.日期与时间类型</h3><p>MySQL提供的表示日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和 TIMESTAMP。下图列举了日期和时间数据类型所对应的字节数、取值范围、日期格式以及零值：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01~9999-12-31</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838：59：59~ 838：59：59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00~9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table></div><h4 id="5-1-YEAR类型"><a href="#5-1-YEAR类型" class="headerlink" title="5.1 YEAR类型"></a>5.1 YEAR类型</h4><p>YEAR类型用于表示年份，在MySQL中，可以使用以下三种格式指定YEAR类型 的值。<br>1、使用4位字符串或数字表示，范围为’1901’—‘2155’或1901—2155。例如，输入 ‘2019’或2019插入到数据库中的值均为2019。<br>2、使用两位字符串表示，范围为’00’—‘99’。其中，‘00’—‘69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—‘99’范围的值会被转换为1970—1999范围的YEAR 值。例如，输入’19’插入到数据库中的值为2019。<br>3、使用两位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值。例 如，输入19插入到数据库中的值为2019。<br><strong>请注意：当使用YEAR类型时，一定要区分’0’和0。因为字符串格式的’0’表示的YEAR值是2000而数字格式的0表示的YEAR值是0000。</strong></p><h4 id="5-2-TIME类型"><a href="#5-2-TIME类型" class="headerlink" title="5.2 TIME类型"></a>5.2 TIME类型</h4><p>TIME类型用于表示时间值，它的显示形式一般为HH:MM:SS，其中，HH表示小时， MM表示分,SS表示秒。在MySQL中，可以使用以下3种格式指定TIME类型的值。<br>1、以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值, 插入数据时，小时的值等于(DX24+HH)。例如，输入’2 11:30:50’插入数据库中的日期为59:30:50。<br>2、以’HHMMSS’字符串格式或者HHMMSS数字格式表示。 例如，输入’115454’或115454,插入数据库中的日期为11:54:54<br>3、使用CURRENT_TIME或NOW()输入当前系统时间。</p><h4 id="5-3-DATETIME类型"><a href="#5-3-DATETIME类型" class="headerlink" title="5.3 DATETIME类型"></a>5.3 DATETIME类型</h4><p>DATETIME类型用于表示日期和时间，它的显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒。在MySQL中，可以使用以下4种格式指定DATETIME类型的值。<br>以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’。例如，输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23。<br>1、以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— ‘69’范围的值会被转换为2000—2069范围的值，‘70’—‘99’范围的值会被转换为1970—1999范围的值。<br>2、以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期 和时间。例如，插入20190122090123或者190122090123,插入数据库中的DATETIME值都 为 2019-01-22 09:01:23。<br>3、使用NOW来输入当前系统的日期和时间。</p><h4 id="5-4-TIMESTAMP类型"><a href="#5-4-TIMESTAMP类型" class="headerlink" title="5.4 TIMESTAMP类型"></a>5.4 TIMESTAMP类型</h4><p>TIMESTAMP类型用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。在此，介绍几种TIMESTAMP类型与DATATIME类型不同的形式：<br>1、使用CURRENT_TIMESTAMP输入系统当前日期和时间。<br>2、输入NULL时系统会输入系统当前日期和时间。<br>3、无任何输入时系统会输入系统当前日期和时间。</p><h3 id="6-二进制类型"><a href="#6-二进制类型" class="headerlink" title="6.二进制类型"></a>6.二进制类型</h3><p>在MySQL中常用BLOB存储二进制类型的数据，例如：图片、PDF文档等。BLOB类型分为如下四种：</p><div class="table-container"><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0~65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0~4294967295字节</td></tr></tbody></table></div><h2 id="四、数据库、数据表的基本操作"><a href="#四、数据库、数据表的基本操作" class="headerlink" title="四、数据库、数据表的基本操作"></a>四、数据库、数据表的基本操作</h2><h3 id="1-数据库的基本操作"><a href="#1-数据库的基本操作" class="headerlink" title="1.数据库的基本操作"></a>1.数据库的基本操作</h3><p>MySQL安装完成后，要想将数据存储到数据库的表中，首先要创建一个数据库。创 建数据库就是在数据库系统中划分一块空间存储数据，语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database 数据库名称;</span><br></pre></td></tr></table></figure><p>创建一个叫db1的数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个叫db1的数据库</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/74ca292cdfe2d9552423ce733d2bb760.png" alt="在这里插入图片描述"><br>创建数据库后查看该数据库基本信息MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/cd3ad9ecaec8e4bb88d4df97f8450659.png" alt="在这里插入图片描述"><br>删除数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> database db1;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/328bb56dfc4b92d59516743a1499c545.png" alt="在这里插入图片描述"><br>查询出MySQL中所有的数据库MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/426e52a4b3d2b669942ab4bc7dd93c16.png" alt="在这里插入图片描述"><br>将数据库的字符集修改为gbk MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database db1 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0a831e0deff690dd10c4679d1210695f.png" alt="在这里插入图片描述"><br>切换数据库 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use db1;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/de3ce61b1d603804a6d3692155e76377.png" alt="在这里插入图片描述"><br>查看当前使用的数据库 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1465a2c6001bd8b915f384e3183fda3b.png" alt="在这里插入图片描述"></p><h3 id="2-数据表的基本操作"><a href="#2-数据表的基本操作" class="headerlink" title="2.数据表的基本操作"></a>2.数据表的基本操作</h3><p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据。请注意：在操作数据表之前应使用“USE 数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误。<br>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">         字段<span class="number">1</span> 字段类型,</span><br><span class="line">         字段<span class="number">2</span> 字段类型,</span><br><span class="line">         …</span><br><span class="line">         字段n 字段类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2-1-创建数据表"><a href="#2-1-创建数据表" class="headerlink" title="2.1 创建数据表"></a>2.1 创建数据表</h4><p>示例：创建学生表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">birthday <span class="type">date</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0f744f3ca11c4cd7ec3371491cef43ce.png" alt="在这里插入图片描述"></p><h4 id="2-2-查看数据表"><a href="#2-2-查看数据表" class="headerlink" title="2.2 查看数据表"></a>2.2 查看数据表</h4><p>示例：查看当前数据库中所有表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/cb9c5e4b27ad3d724da7b511596eae9d.png" alt="在这里插入图片描述"><br>示例：查表的基本信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/eb086239098e5d08ad1345f92fb65706.png" alt="在这里插入图片描述"><br>示例：查看表的字段信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">desc</span> student;</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/dff835f260b1939e71d25e77229b08cb.png" alt="在这里插入图片描述"></p><h4 id="2-3-修改数据表"><a href="#2-3-修改数据表" class="headerlink" title="2.3 修改数据表"></a>2.3 修改数据表</h4><p>有时，希望对表中的某些信息进行修改，例如：修改表名、修改字段名、修改字段 数据类型…等等。在MySQL中使用alter table修改数据表.<br>示例：修改表名 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/866b116cc5ed622315a991f65cdb4eb9.png" alt="在这里插入图片描述"><br>示例：修改字段名 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change name sname <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/4b10a674fb667bd63ebd821ca9ed2b6b.png" alt="在这里插入图片描述"><br>示例：修改字段数据类型 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify sname <span class="type">int</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/eb1830d7b98fff9a72a941482ce34fb2.png" alt="在这里插入图片描述"><br>示例：增加字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0b4db2d98f40df12394ab06df9d6aedd.png" alt="在这里插入图片描述"><br>示例：删除字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> address;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3bcd42d3ce0063b5eef081b01715c490.png" alt="在这里插入图片描述"></p><h4 id="2-4-删除数据表"><a href="#2-4-删除数据表" class="headerlink" title="2.4 删除数据表"></a>2.4 删除数据表</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例：删除数据表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> stu;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/63e1dc043bc1479faf1a94ba3e1c6188.png" alt="在这里插入图片描述"></p><h2 id="五、数据表的约束"><a href="#五、数据表的约束" class="headerlink" title="五、数据表的约束"></a>五、数据表的约束</h2><p>为防止错误的数据被插入到数据表，MySQL中定义了一些维护数据库完整性的规则；这些规则常称为表的约束。常见约束如下：</p><div class="table-container"><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr><tr><td>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性。换句话说，表的约束实际上就是表中数据的限制条件。</td></tr></tbody></table></div><h3 id="1-主键约束"><a href="#1-主键约束" class="headerlink" title="1.主键约束"></a>1.主键约束</h3><p>主键约束即primary key用于唯一的标识表中的每一行。被标识为主键的数据在表中是唯一的且其值不能为空。这点类似于我们每个人都有一个身份证号，并且这个身份证号是唯一的。<br>主键约束基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">primary</span> key;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>设置主键约束(primary key)的第一种方式</strong><br>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7a286321f9a4bf20af250695ac2493ee.png" alt="在这里插入图片描述"><br><strong>设置主键约束(primary key)的第二·种方式</strong><br>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student01(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/fa32511df33a2923cb22e460e13de4f5.png" alt="在这里插入图片描述"></p><h3 id="2-非空约束"><a href="#2-非空约束" class="headerlink" title="2.非空约束"></a>2.非空约束</h3><p>非空约束即 NOT NULL指的是字段的值不能为空，基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9b46312e38de474c388d3c02510db906.png" alt="在这里插入图片描述"></p><h3 id="3-默认值约束"><a href="#3-默认值约束" class="headerlink" title="3.默认值约束"></a>3.默认值约束</h3><p>默认值约束即DEFAULT用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插入默认值；其基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值；</span><br></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b96518713738c1e1f9c177dbe56d850b.png" alt="在这里插入图片描述"></p><h3 id="5-唯一性约束"><a href="#5-唯一性约束" class="headerlink" title="5.唯一性约束"></a>5.唯一性约束</h3><p>唯一性约束即UNIQUE用于保证数据表中字段的唯一性，即表中字段的值不能重复出现，其基本的语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br></pre></td></tr></table></figure><p>示例：MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bf704e9477a6c79ee90a20ca19dd1649.png" alt="在这里插入图片描述"></p><h3 id="6-外键约束"><a href="#6-外键约束" class="headerlink" title="6.外键约束"></a>6.外键约束</h3><p>外键约束即FOREIGN KEY常用于多张表之间的约束。基本语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在创建数据表时语法如下：</span></span><br><span class="line"><span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段)</span><br><span class="line"><span class="comment">-- 将创建数据表创号后语法如下：</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 从表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名 <span class="keyword">FOREIGN</span> KEY (从表外键字段) <span class="keyword">REFERENCES</span> 主表 (主键字段);</span><br></pre></td></tr></table></figure><p>示例：创建一个学生表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>示例：创建一个班级表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> class(</span><br><span class="line">classid <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">studentid <span class="type">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>示例：学生表作为主表，班级表作为副表设置外键， MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_studentid <span class="keyword">foreign</span> key(studentid) <span class="keyword">references</span> student05(id);</span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8a27285fe24b53caf5e5a528a8b3bbe3.png" alt="在这里插入图片描述"></p><h4 id="6-1-数据一致性概念"><a href="#6-1-数据一致性概念" class="headerlink" title="6.1 数据一致性概念"></a>6.1 数据一致性概念</h4><p>大家知道：建立外键是为了保证数据的完整和统一性。但是，如果主表中的数据被删除或修改从表中对应的数据该怎么办呢？很明显，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据。</p><h4 id="6-2-删除外键"><a href="#6-2-删除外键" class="headerlink" title="6.2 删除外键"></a>6.2 删除外键</h4><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名；</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例：删除外键 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_studentid;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/65c9f290a8ce4865264e0d47405efd4d.png" alt="在这里插入图片描述"><br>外键的那个字段不在了证明删除成功了</p><h4 id="6-3-关于外键约束需要注意的细节"><a href="#6-3-关于外键约束需要注意的细节" class="headerlink" title="6.3 关于外键约束需要注意的细节"></a>6.3 关于外键约束需要注意的细节</h4><p>1、从表里的外键通常为主表的主键<br>2、从表里外键的数据类型必须与主表中主键的数据类型一致<br>3、主表发生变化时应注意主表与从表的数据一致性问题</p><h2 id="六、数据表插入数据"><a href="#六、数据表插入数据" class="headerlink" title="六、数据表插入数据"></a>六、数据表插入数据</h2><p>在MySQL通过INSERT语句向数据表中插入数据。在此，我们先准备一张学生表，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"> age <span class="type">int</span>,</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"> );</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="1-为表中所有字段插入数据"><a href="#1-为表中所有字段插入数据" class="headerlink" title="1. 为表中所有字段插入数据"></a>1. 为表中所有字段插入数据</h3><p>每个字段与其值是严格一一对应的。也就是说：每个值、值的顺序、值的类型必须与对应的字段相匹配。但是，各字段也无须与其在表中定义的顺序一致，它们只要与 VALUES中值的顺序一致即可。<br>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名（字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>示例：向学生表中插入一条学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0fe30557fe3a4c8a8c3141995748928a.png" alt="在这里插入图片描述"></p><h3 id="2-为表中指定字段插入数据"><a href="#2-为表中指定字段插入数据" class="headerlink" title="2. 为表中指定字段插入数据"></a>2. 为表中指定字段插入数据</h3><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名（字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>插入数据的方法基本和为表中所有字段插入数据，一样，只是需要插入的字段由你自己指定</p><h3 id="3-同时插入多条记录"><a href="#3-同时插入多条记录" class="headerlink" title="3. 同时插入多条记录"></a>3. 同时插入多条记录</h3><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...)]<span class="keyword">VALUES</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,…),(值 <span class="number">1</span>,值 <span class="number">2</span>,…),...;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在该方式中：(字段名1,字段名2,…)是可选的，它用于指定插入的字段名；(值 1,值 2,…),(值 1,值 2,…)表示要插入的记录，该记录可有多条并且每条记录之间用逗号隔开。<br>示例：向学生表中插入多条学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/32da9ffdf851f2eb392ecc4fa2a027ed.png" alt="在这里插入图片描述"></p><h2 id="七、更新数据"><a href="#七、更新数据" class="headerlink" title="七、更新数据"></a>七、更新数据</h2><p>在MySQL通过UPDATE语句更新数据表中的数据。在此，我们将就用六中的student学生表</p><h3 id="1-UPDATE基本语法"><a href="#1-UPDATE基本语法" class="headerlink" title="1. UPDATE基本语法"></a>1. UPDATE基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>[,字段名<span class="number">2</span> <span class="operator">=</span>值<span class="number">2</span>,…] [<span class="keyword">WHERE</span> 条件表达式];</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在该语法中：字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据；WHERE 条件表达式 是可选的，它用于指定更新数据需要满足的条件</p><h3 id="2-UPDATE更新部分数据"><a href="#2-UPDATE更新部分数据" class="headerlink" title="2. UPDATE更新部分数据"></a>2. UPDATE更新部分数据</h3><p>示例：将name为tom的记录的age设置为20并将其gender设置为female MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">20</span>,gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/440bbbc94bb1601c058716a7e6d73102.png" alt="在这里插入图片描述"></p><h3 id="3-UPDATE更新全部数据"><a href="#3-UPDATE更新全部数据" class="headerlink" title="3. UPDATE更新全部数据"></a>3. UPDATE更新全部数据</h3><p>示例：将所有记录的age设置为18 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/79247bbec461e0627bbd7291d63fabf6.png" alt="在这里插入图片描述"></p><h2 id="八、删除数据"><a href="#八、删除数据" class="headerlink" title="八、删除数据"></a>八、删除数据</h2><p>在MySQL通过DELETE语句删除数据表中的数据。在此，我们先准备一张数据表，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"> id <span class="type">int</span>,</span><br><span class="line"> name <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line"> age <span class="type">int</span>,</span><br><span class="line"> gender <span class="type">varchar</span>(<span class="number">30</span>)</span><br><span class="line"> );</span><br><span class="line"> <span class="comment">-- 插入数据</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;sal&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;sun&#x27;</span>,<span class="number">20</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">,(<span class="number">7</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="number">13</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;sam&#x27;</span>,<span class="number">14</span>,<span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><h3 id="1-DELETE基本语法"><a href="#1-DELETE基本语法" class="headerlink" title="1. DELETE基本语法"></a>1. DELETE基本语法</h3><p>在该语法中：表名用于指定要执行删除操作的表；[WHERE 条件表达式]为可选参数用于指定删除的条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件表达式];</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-DELETE删除部分数据"><a href="#2-DELETE删除部分数据" class="headerlink" title="2. DELETE删除部分数据"></a>2. DELETE删除部分数据</h3><p>示例：删除age等于14的所有记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">=</span><span class="number">14</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/92b3e2f3a16f8d45d8e023a4e38c9bd0.png" alt="在这里插入图片描述"></p><h3 id="3-DELETE删除全部数据"><a href="#3-DELETE删除全部数据" class="headerlink" title="3. DELETE删除全部数据"></a>3. DELETE删除全部数据</h3><p>示例：删除student表中的所有记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1686dfe37a8d5503a1098db1bb939008.png" alt="在这里插入图片描述"></p><h3 id="4-TRUNCATE和DETELE的区别"><a href="#4-TRUNCATE和DETELE的区别" class="headerlink" title="4. TRUNCATE和DETELE的区别"></a>4. TRUNCATE和DETELE的区别</h3><p>TRUNCATE和DETELE都能实现删除表中的所有数据的功能，但两者也是有区别的：<br>1、DELETE语句后可跟WHERE子句，可通过指定WHERE子句中的条件表达式只删除满足条件的部分记录；但是，TRUNCATE语句只能用于删除表中的所有记录。<br>2、使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用DELETE语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1<br>3、DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句</p><h2 id="九、MySQL数据表简单查询"><a href="#九、MySQL数据表简单查询" class="headerlink" title="九、MySQL数据表简单查询"></a>九、MySQL数据表简单查询</h2><h3 id="1-简单查询概述"><a href="#1-简单查询概述" class="headerlink" title="1.简单查询概述"></a>1.简单查询概述</h3><p>简单查询即不含where的select语句。在此，我们讲解简单查询中最常用的两种查询：查询所有字段和查询指定字段。<br>在此，先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h3 id="2-查询所有字段（方法不唯一只是举例）"><a href="#2-查询所有字段（方法不唯一只是举例）" class="headerlink" title="2.查询所有字段（方法不唯一只是举例）"></a>2.查询所有字段（方法不唯一只是举例）</h3><p>查询所有字段 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/da06484a5c98cc82db06e59f17f92207.png" alt="在这里插入图片描述"></p><h3 id="3-查询指定字段（sid、sname）"><a href="#3-查询指定字段（sid、sname）" class="headerlink" title="3.查询指定字段（sid、sname）"></a>3.查询指定字段（sid、sname）</h3><p>查询指定字段（sid、sname） MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sid,sname <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b9336da752c6aea366aa34cc508bea4f.png" alt="在这里插入图片描述"></p><h3 id="4-常数的查询"><a href="#4-常数的查询" class="headerlink" title="4.常数的查询"></a>4.常数的查询</h3><p>在SELECT中除了书写列名，还可以书写常数。可以用于标记<br>常数的查询日期标记 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sid,sname,<span class="string">&#x27;2021-03-02&#x27;</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b6e7523eb44dc8848dbac580f6247385.png" alt="在这里插入图片描述"></p><h3 id="5-从查询结果中过滤重复数据"><a href="#5-从查询结果中过滤重复数据" class="headerlink" title="5.从查询结果中过滤重复数据"></a>5.从查询结果中过滤重复数据</h3><p>在使用DISTINCT 时需要注意：<br><strong>在SELECT查询语句中DISTINCT关键字只能用在第一个所查列名之前。</strong><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/039e67afa663c9e858038252a5ae590c.png" alt="在这里插入图片描述"></p><h3 id="6-算术运算符（举例加运算符）"><a href="#6-算术运算符（举例加运算符）" class="headerlink" title="6.算术运算符（举例加运算符）"></a>6.算术运算符（举例加运算符）</h3><p>在SELECT查询语句中还可以使用加减乘除运算符。<br>查询学生10年后的年龄 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">select</span> sname,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/17eb6e6aebae9e238763bbbaf00a5a0d.png" alt="在这里插入图片描述"></p><h2 id="十、函数"><a href="#十、函数" class="headerlink" title="十、函数"></a>十、<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">函数</a></h2><p>在此，先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h3 id="1-聚合函数"><a href="#1-聚合函数" class="headerlink" title="1.聚合函数"></a>1.聚合函数</h3><p>在开发中，我们常常有类似的需求：统计某个字段的最大值、最小值、 平均值等等。为此，MySQL中提供了聚合函数来实现这些功能。所谓聚合，就是将多行汇总成一行；其实，所有的聚合函数均如此——输入多行，输出一行。聚合函数具有自动滤空的功能，若某一个值为NULL，那么会自动将其过滤使其不参与运算。<br><strong>聚合函数使用规则：</strong><br>只有SELECT子句和HAVING子句、ORDER BY子句中能够使用聚合函数。例如，在WHERE子句中使用聚合函数是错误的。<br>接下来，我们学习常用聚合函数。</p><h4 id="1-1、count（）"><a href="#1-1、count（）" class="headerlink" title="1.1、count（）"></a>1.1、count（）</h4><p>统计表中数据的行数或者统计指定列其值不为NULL的数据个数<br><em>查询有多少该表中有多少人</em><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/e8562c79c7e936ffbb54e8ffd55b63b8.png" alt="在这里插入图片描述"></p><h4 id="1-2、max（）"><a href="#1-2、max（）" class="headerlink" title="1.2、max（）"></a>1.2、max（）</h4><p>计算指定列的最大值，如果指定列是字符串类型则使用字符串排序运算</p><p><em>查询该学生表中年纪最大的学生</em><br>MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bdd583b9c961a25aa25a70fd0913fcd1.png" alt="在这里插入图片描述"></p><h4 id="1-3、min（）"><a href="#1-3、min（）" class="headerlink" title="1.3、min（）"></a>1.3、min（）</h4><p>计算指定列的最小值，如果指定列是字符串类型则使用字符串排序运算</p><p>查询该学生表中年纪最小的学生 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,<span class="built_in">min</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f087fd252ca50931ce0583db2bf52287.png" alt="在这里插入图片描述"></p><h4 id="1-4、sum（）"><a href="#1-4、sum（）" class="headerlink" title="1.4、sum（）"></a>1.4、sum（）</h4><p>计算指定列的数值和，如果指定列类型不是数值类型则计算结果为0<br>查询该学生表中年纪的总和 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/ef2e6e90e4c82eaa8608fac166a56e2e.png" alt="在这里插入图片描述"></p><h4 id="1-5、avg（）"><a href="#1-5、avg（）" class="headerlink" title="1.5、avg（）"></a>1.5、avg（）</h4><p>计算指定列的平均值，如果指定列类型不是数值类型则计算结果为</p><p>查询该学生表中年纪的平均数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f7db669c17a9e8bc34478bd6586108fc.png" alt="在这里插入图片描述"></p><h3 id="2-其他常用函数"><a href="#2-其他常用函数" class="headerlink" title="2.其他常用函数"></a>2.其他常用函数</h3><p>这里我就不一一举例了，基本混个眼熟，以后用到再细说</p><h4 id="2-1、时间函数"><a href="#2-1、时间函数" class="headerlink" title="2.1、时间函数"></a>2.1、时间函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NOW();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">DATE</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">TIME</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span> (NOW());</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIME</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>();</span><br><span class="line"><span class="keyword">SELECT</span> ADDTIME(<span class="string">&#x27;14:23:12&#x27;</span>,<span class="string">&#x27;01:02:01&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">DAY</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATE_SUB(NOW(),<span class="type">INTERVAL</span> <span class="number">1</span> <span class="keyword">MONTH</span>);</span><br><span class="line"><span class="keyword">SELECT</span> DATEDIFF(<span class="string">&#x27;2019-07-22&#x27;</span>,<span class="string">&#x27;2019-05-05&#x27;</span>);</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h4 id="2-2、字符串函数"><a href="#2-2、字符串函数" class="headerlink" title="2.2、字符串函数"></a>2.2、字符串函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--连接函数</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT ()</span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR ();</span><br><span class="line"><span class="comment">--统计长度</span></span><br><span class="line"><span class="keyword">SELECT</span> LENGTH();</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="2-3、数学函数"><a href="#2-3、数学函数" class="headerlink" title="2.3、数学函数"></a>2.3、数学函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-136</span>);</span><br><span class="line"><span class="comment">-- 向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="comment">-- 向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">3.14</span>);</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h2 id="十一、条件查询"><a href="#十一、条件查询" class="headerlink" title="十一、条件查询"></a>十一、条件查询</h2><p>数据库中存有大量数据，我们可根据需求获取指定的数据。此时，我们可在查询语句中通过WHERE子句指定查询条件对查询结果进行过滤。<br>在开始学习条件查询之前，我们先准备测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建student表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">    sid <span class="type">CHAR</span>(<span class="number">6</span>),</span><br><span class="line">    sname <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    gender <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向student表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1001&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1002&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1003&#x27;</span>, <span class="string">&#x27;tywd&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1004&#x27;</span>, <span class="string">&#x27;hfgs&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1005&#x27;</span>, <span class="string">&#x27;qwer&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1006&#x27;</span>, <span class="string">&#x27;zxsd&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1007&#x27;</span>, <span class="string">&#x27;hjop&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1008&#x27;</span>, <span class="string">&#x27;tyop&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1009&#x27;</span>, <span class="string">&#x27;nhmk&#x27;</span>, <span class="number">13</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1010&#x27;</span>, <span class="string">&#x27;xdfv&#x27;</span>, <span class="number">17</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1012&#x27;</span>, <span class="string">&#x27;lili&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;male&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (sid,sname,age,gender) <span class="keyword">VALUES</span> (<span class="string">&#x27;S_1013&#x27;</span>, <span class="string">&#x27;wang&#x27;</span>, <span class="number">15</span>, <span class="string">&#x27;female&#x27;</span>);</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><h3 id="1-使用关系运算符查询"><a href="#1-使用关系运算符查询" class="headerlink" title="1.使用关系运算符查询"></a>1.使用关系运算符查询</h3><p>在WHERE中可使用关系运算符进行条件查询，常用的关系运算符如下所示：</p><div class="table-container"><table><thead><tr><th>关系运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr></tbody></table></div><p>查询年龄等于或大于17的学生的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">17</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/c6433fc411ed540ebeba61b71142ba9b.png" alt="在这里插入图片描述"></p><h3 id="2-使用IN关键字查询"><a href="#2-使用IN关键字查询" class="headerlink" title="2.使用IN关键字查询"></a>2.使用IN关键字查询</h3><p>IN关键字用于判断某个字段的值是否在指定集合中。如果字段的值恰好在指定的集合中，则将字段所在的记录将査询出来。</p><p>查询sid为S_1002和S_1003的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">in</span> (<span class="string">&#x27;S_1002&#x27;</span>,<span class="string">&#x27;S_1003&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0f4df021b98e2831047585aad2f5a656.png" alt="在这里插入图片描述"><br>查询sid为S_1001以外的学生的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;S_1001&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/37155848cebf9e7a2beb5bec53b209bc.png" alt="在这里插入图片描述"></p><h3 id="3-使用BETWEEN-AND关键字查询"><a href="#3-使用BETWEEN-AND关键字查询" class="headerlink" title="3.使用BETWEEN AND关键字查询"></a>3.使用BETWEEN AND关键字查询</h3><p>BETWEEN AND用于判断某个字段的值是否在指定的范围之内。如果字段的值在指定范围内，则将所在的记录将查询出来<br>查询15到18岁的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9778b7e6db51c6e3700bab249f0fe21b.png" alt="在这里插入图片描述"><br>查询不是15到18岁的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8fedd978fd2a0c1c1de0159fd75ed020.png" alt="在这里插入图片描述"></p><h3 id="4-使用空值查询"><a href="#4-使用空值查询" class="headerlink" title="4.使用空值查询"></a>4.使用空值查询</h3><p>在MySQL中，使用 IS NULL关键字判断字段的值是否为空值。请注意：空值NULL不同于0，也不同于空字符串<br><strong>由于student表没有空值就不演示查询空值的了</strong><br>查询sname不为空值的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/955203835bb647b14bb8e37e9006cc30.png" alt="在这里插入图片描述"></p><h3 id="5-使用AND关键字查询"><a href="#5-使用AND关键字查询" class="headerlink" title="5.使用AND关键字查询"></a>5.使用AND关键字查询</h3><p>在MySQL中可使用AND关键字可以连接两个或者多个查询条件。<br>查询年纪大于15且性别为male的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">and</span> gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7d92a168e477bcbef52a23011650a589.png" alt="在这里插入图片描述"></p><h3 id="6-使用OR关键字查询"><a href="#6-使用OR关键字查询" class="headerlink" title="6.使用OR关键字查询"></a>6.使用OR关键字查询</h3><p>在使用SELECT语句查询数据时可使用OR关键字连接多个査询条件。在使用OR关键字时，只要记录满足其中任意一个条件就会被查询出来<br>查询年纪大于15或者性别为male的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">or</span> gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/36893a4d17bd0e98e9d3443527d7759c.png" alt="在这里插入图片描述"></p><h3 id="7-使用LIKE关键字查询"><a href="#7-使用LIKE关键字查询" class="headerlink" title="7.使用LIKE关键字查询"></a>7.使用LIKE关键字查询</h3><p>MySQL中可使用LIKE关键字可以判断两个字符串是否相匹配</p><h4 id="7-1-普通字符串"><a href="#7-1-普通字符串" class="headerlink" title="7.1 普通字符串"></a>7.1 普通字符串</h4><p>查询sname中与wang匹配的学生信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;wang&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b9d9c98091581af916938edb136b6238.png" alt="在这里插入图片描述"></p><h4 id="7-2-含有-通配的字符串"><a href="#7-2-含有-通配的字符串" class="headerlink" title="7.2 含有%通配的字符串"></a>7.2 含有%通配的字符串</h4><p>%用于匹配任意长度的字符串。例如，字符串“a%”匹配以字符a开始任意长度的字符串<br>查询学生姓名以li开始的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;li%&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/6e1f54d0c26e8c3d0c75d4ca810d219e.png" alt="在这里插入图片描述"><br>查询学生姓名以g结尾的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%g&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示：<br><img src="https://i-blog.csdnimg.cn/blog_migrate/44b4403904f1db3900f6669d80fb8443.png" alt="在这里插入图片描述"><br>查询学生姓名包含s的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%s%&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/210573b339139b3b7b8cbe371a1092c5.png" alt="在这里插入图片描述"></p><h4 id="7-3-含有-通配的字符串"><a href="#7-3-含有-通配的字符串" class="headerlink" title="7.3 含有_通配的字符串"></a>7.3 含有_通配的字符串</h4><p>下划线通配符只匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。例如，字符串“ab_”匹配以字符串“ab”开始长度为3的字符串，如abc、abp等等；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串，如”abcd”、”atud”等等。<br>查询学生姓名以zx开头且长度为4的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;zx__&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/f1a0ad4add958fb900fe959c293b01d6.png" alt="在这里插入图片描述"></p><p>查询学生姓名以g结尾且长度为4的记录 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;___g&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/7d86eaffa793ae07ebdf17ea9e37449d.png" alt="在这里插入图片描述"></p><h3 id="8-使用LIMIT限制查询结果的数量"><a href="#8-使用LIMIT限制查询结果的数量" class="headerlink" title="8.使用LIMIT限制查询结果的数量"></a>8.使用LIMIT限制查询结果的数量</h3><p>当执行查询数据时可能会返回很多条记录，而用户需要的数据可能只是其中的一条或者几条<br>查询学生表中年纪最小的3位同学 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> limit <span class="number">3</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/0efb402a8ab5c83f0f7e1674e0d81dd8.png" alt="在这里插入图片描述"></p><h3 id="9-使用GROUP-BY进行分组查询"><a href="#9-使用GROUP-BY进行分组查询" class="headerlink" title="9.使用GROUP BY进行分组查询"></a>9.使用GROUP BY进行分组查询</h3><p>GROUP BY 子句可像切蛋糕一样将表中的数据进行分组，再进行查询等操作。换言之，可通俗地理解为：通过GROUP BY将原来的表拆分成了几张小表。<br>接下来，我们通过一个例子开始学习GROUP BY，代码如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建数据库</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">    salary <span class="type">int</span>,</span><br><span class="line">    departmentnumber <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向员工表中插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">2000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">9000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">&#x27;joke&#x27;</span>,<span class="number">5000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">&#x27;wang&#x27;</span>,<span class="number">3000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;chen&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">6</span>,<span class="string">&#x27;yukt&#x27;</span>,<span class="number">7000</span>,<span class="number">1002</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">7</span>,<span class="string">&#x27;rett&#x27;</span>,<span class="number">6000</span>,<span class="number">1003</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;mujk&#x27;</span>,<span class="number">4000</span>,<span class="number">1004</span>); </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">&#x27;poik&#x27;</span>,<span class="number">3000</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><h4 id="9-1-GROUP-BY和聚合函数一起使用"><a href="#9-1-GROUP-BY和聚合函数一起使用" class="headerlink" title="9.1 GROUP BY和聚合函数一起使用"></a>9.1 GROUP BY和聚合函数一起使用</h4><p>统计各部门员工个数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b36d44a5213bd3e99ed44018bff868c9.png" alt="在这里插入图片描述"><br>统计部门编号大于1001的各部门员工个数 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), departmentnumber <span class="keyword">from</span> employee <span class="keyword">where</span> departmentnumber<span class="operator">&gt;</span><span class="number">1001</span> <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1070919733fe5e6959dc3225bfbdc101.png" alt="在这里插入图片描述"></p><h4 id="9-2-GROUP-BY和聚合函数以及HAVING一起使用"><a href="#9-2-GROUP-BY和聚合函数以及HAVING一起使用" class="headerlink" title="9.2 GROUP BY和聚合函数以及HAVING一起使用"></a>9.2 GROUP BY和聚合函数以及HAVING一起使用</h4><p>统计工资总和大于8000的部门 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary),departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber <span class="keyword">having</span> <span class="built_in">sum</span>(salary)<span class="operator">&gt;</span><span class="number">8000</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/22220f790dc2d4cfc335734068ff708d.png" alt="在这里插入图片描述"></p><h3 id="10-使用ORDER-BY对查询结果排序"><a href="#10-使用ORDER-BY对查询结果排序" class="headerlink" title="10.使用ORDER BY对查询结果排序"></a>10.使用ORDER BY对查询结果排序</h3><p>从表中査询出来的数据可能是无序的或者其排列顺序不是我们期望的。为此，我们可以使用ORDER BY对查询结果进行排序<br>其语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,…</span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段名<span class="number">1</span> [<span class="keyword">ASC</span> 丨 <span class="keyword">DESC</span>],字段名<span class="number">2</span> [<span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span>];</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>在该语法中：字段名1、字段名2是查询结果排序的依据；参数 ASC表示按照升序排序，DESC表示按照降序排序；默认情况下，按照ASC方式排序。通常情况下，ORDER BY子句位于整个SELECT语句的末尾。<br>查询所有学生并按照年纪大小升序排列 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/718da4020ecaa8af2a8f45daf1d2fcd8.png" alt="在这里插入图片描述"><br>查询所有学生并按照年纪大小降序排列 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/823d18c46bda3635ff2435be70d6a4d7.png" alt="在这里插入图片描述"></p><h2 id="十二、别名设置"><a href="#十二、别名设置" class="headerlink" title="十二、别名设置"></a>十二、别名设置</h2><p>在査询数据时可为表和字段取別名，该别名代替表和字段的原名参与查询操作。<br><strong>操作的表事先已准备</strong></p><h3 id="1-为表取别名"><a href="#1-为表取别名" class="headerlink" title="1.为表取别名"></a>1.为表取别名</h3><p>在查询操作时，假若表名很长使用起来就不太方便，此时可为表取一个別名，用该别名来代替表的名称。语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">AS</span>] 表的别名 <span class="keyword">WHERE</span> .... ;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>将student改为stu查询整表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">as</span> stu;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b06f352aaf326bf43b7f42b1849c86c1.png" alt="在这里插入图片描述"></p><h3 id="2-为字段取别名"><a href="#2-为字段取别名" class="headerlink" title="2.为字段取别名"></a>2.为字段取别名</h3><p>在查询操作时，假若字段名很长使用起来就不太方便，此时可该字段取一个別名，用该别名来代替字段的名称。语法格式如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段名<span class="number">1</span> [<span class="keyword">AS</span>] 别名<span class="number">1</span> , 字段名<span class="number">2</span> [<span class="keyword">AS</span>] 别名<span class="number">2</span> , ... <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> ... ;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>将student中的name取别名为“姓名” 查询整表 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,id <span class="keyword">from</span> student;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/fa2674367d272109efb5e0290586c780.png" alt="在这里插入图片描述"></p><h2 id="十三、表的关联关系"><a href="#十三、表的关联关系" class="headerlink" title="十三、表的关联关系"></a>十三、表的关联关系</h2><p>在实际开发中数据表之间存在着各种关联关系。在此，介绍MySQL中数据表的三种关联关系。<br><strong>多对一</strong><br>多对一(亦称为一对多)是数据表中最常见的一种关系。例如：员工与部门之间的关系，一个部门可以有多个员工；而一个员工不能属于多个部门只属于某个部门。在多对一的表关系 中，应将外键建在多的一方否则会造成数据的冗余。<br><strong>多对多</strong><br>多对多是数据表中常见的一种关系。例如：学生与老师之间的关系，一个学生可以有多个老师而且一个老师有多个学生。通常情况下，为了实现这种关系需要定义一张中间表(亦称为连接表)该表会存在两个外键分别参照老师表和学生表。<br><strong>一对一</strong><br>在开发过程中，一对一的关联关系在数据库中并不常见；因为以这种方式存储的信息通常会放在同一张表中。<br>接下来，我们来学习在一对多的关联关系中如果添加和删除数据。先准备一些测试数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> class;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">    cid <span class="type">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    cname <span class="type">varchar</span>(<span class="number">30</span>) </span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    sid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    sname <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">    classid <span class="type">int</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为学生表添加外键约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_student_classid <span class="keyword">FOREIGN</span> KEY(classid) <span class="keyword">REFERENCES</span> class(cid);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(cid,cname)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class(cid,cname)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;tome&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;lili&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(sid,sname,classid)<span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;domi&#x27;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627</span></span><br></pre></td></tr></table></figure><h3 id="1-关联查询"><a href="#1-关联查询" class="headerlink" title="1.关联查询"></a>1.关联查询</h3><p>查询Java班的所有学生 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> classid<span class="operator">=</span>(<span class="keyword">select</span> cid <span class="keyword">from</span> class <span class="keyword">where</span> cname<span class="operator">=</span><span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/580ca7c49bde7a9376f5d7eed9caf8cd.png" alt="在这里插入图片描述"></p><h3 id="2-关于关联关系的删除数据"><a href="#2-关于关联关系的删除数据" class="headerlink" title="2.关于关联关系的删除数据"></a>2.关于关联关系的删除数据</h3><p>请从班级表中删除Java班级。在此，请注意：班级表和学生表之间存在关联关系；要删除Java班级，应该先删除学生表中与该班相关联的学生。否则，假若先删除Java班那么学生表中的cid就失去了关联<br>删除Java班 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> classid<span class="operator">=</span>(<span class="keyword">select</span> cid <span class="keyword">from</span> class <span class="keyword">where</span> cname<span class="operator">=</span><span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> class <span class="keyword">where</span> cname<span class="operator">=</span><span class="string">&#x27;Java&#x27;</span>;</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/9574d7e3ba2f82431368779a615d2b4a.png" alt="在这里插入图片描述"></p><h2 id="十四、多表连接查询"><a href="#十四、多表连接查询" class="headerlink" title="十四、多表连接查询"></a>十四、多表连接查询</h2><h3 id="1-交叉连接查询"><a href="#1-交叉连接查询" class="headerlink" title="1.交叉连接查询"></a>1.交叉连接查询</h3><p>交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积；比如：集合A={a,b}，集合B={0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}。所以，交叉连接也被称为笛卡尔连接，其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在该语法中：CROSS JOIN用于连接两个要查询的表，通过该语句可以查询两个表中所有的数据组合。<br><strong>由于这个交叉连接查询在实际运用中没有任何意义，所以只做为了解即可</strong></p><h3 id="2-内连接查询"><a href="#2-内连接查询" class="headerlink" title="2.内连接查询"></a>2.内连接查询</h3><p>内连接(Inner Join)又称简单连接或自然连接，是一种非常常见的连接查询。内连接使用比较运算符对两个表中的数据进行比较并列出与连接条件匹配的数据行，组合成新的 记录。也就是说在内连接查询中只有满足条件的记录才能出现在查询结果中。其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> [<span class="keyword">INNER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段<span class="operator">=</span>表<span class="number">2.</span>关系字段</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>在该语法中：INNER JOIN用于连接两个表，ON来指定连接条件；其中INNER可以省略。</p><p>准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建部门表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> department(</span><br><span class="line">  did <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  dname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建员工表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee (</span><br><span class="line">  eid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  ename <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  eage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  departmentid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向部门表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;财务部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;技术部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;行政部&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> department <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;生活部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 向员工表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">19</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">18</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">20</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728293031</span></span><br></pre></td></tr></table></figure><p>查询员工姓名及其所属部门名称 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee.ename,department.dname <span class="keyword">from</span> department <span class="keyword">inner</span> <span class="keyword">join</span> employee <span class="keyword">on</span> department.did<span class="operator">=</span>employee.departmentid;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/b9268839ee1fe1e4ec70a1c7260e88c7.png" alt="在这里插入图片描述"></p><h3 id="3-外连接查询"><a href="#3-外连接查询" class="headerlink" title="3.外连接查询"></a>3.外连接查询</h3><p>在使用内连接查询时我们发现：返回的结果只包含符合查询条件和连接条件的数据。但是，有时还需要在返回查询结果中不仅包含符合条件的数据，而且还包括左表、右表或两个表中的所有数据，此时我们就需要使用外连接查询。外连接又分为左(外)连接和右(外)连接。其语法格式如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询字段<span class="number">1</span>,查询字段<span class="number">2</span>, ... <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> <span class="operator">|</span> <span class="keyword">RIGHT</span> [<span class="keyword">OUTER</span>] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 表<span class="number">1.</span>关系字段<span class="operator">=</span>表<span class="number">2.</span>关系字段 <span class="keyword">WHERE</span> 条件</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>由此可见，外连接的语法格式和内连接非常相似，只不过使用的是LEFT [OUTER] JOIN、RIGHT [OUTER] JOIN关键字。其中，关键字左边的表被称为左表，关键字右边的表被称为右表；OUTER可以省略。<br>在使用左(外)连接和右(外)连接查询时，查询结果是不一致的，具体如下：<br><strong>1、LEFT [OUTER] JOIN 左(外)连接：返回包括左表中的所有记录和右表中符合连接条件的记录。<br>2、RIGHT [OUTER] JOIN 右(外)连接：返回包括右表中的所有记录和左表中符合连接条件的记录。</strong></p><p>先准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 若存在数据库mydb则删除</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mydb;</span><br><span class="line"><span class="comment">-- 创建数据库mydb</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mydb;</span><br><span class="line"><span class="comment">-- 选择数据库mydb</span></span><br><span class="line">USE mydb;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;Jack&#x27;</span>,<span class="number">22</span>,<span class="number">1009</span>);</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132</span></span><br></pre></td></tr></table></figure><p><em>准备这组数据有一定的特点，为的是让大家直观的看出左连接与右连接的不同之处<br>1、班级编号为1004的PHP班级没有学生<br>2、学号为5的学生Jack班级编号为1009，该班级编号并不在班级表中</em></p><h4 id="3-1-左（外）连接查询"><a href="#3-1-左（外）连接查询" class="headerlink" title="3.1 左（外）连接查询"></a>3.1 左（外）连接查询</h4><p>左(外)连接的结果包括LEFT JOIN子句中指定的左表的所有记录，以及所有满足连接条件的记录。如果左表的某条记录在右表中不存在则在右表中显示为空。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> class.cid,class.cname,student.sname <span class="keyword">from</span> class <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> student <span class="keyword">on</span> class.cid<span class="operator">=</span>student.classid;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1aa93ef85390eaa0e11bbb16fefeedb6.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、右表的Jack不满足查询条件故其没有出现在查询结果中<br>3、虽然左表的PHP班没有学生，但是任然显示了PHP的信息；但是，它对应的学生名字为NULL</p><h4 id="3-2-右（外）连接查询"><a href="#3-2-右（外）连接查询" class="headerlink" title="3.2 右（外）连接查询"></a>3.2 右（外）连接查询</h4><p>右(外)连接的结果包括RIGHT JOIN子句中指定的右表的所有记录，以及所有满足连接条件的记录。如果右表的某条记录在左表中没有匹配，则左表将返回空值。<br>查询每个班的班级ID、班级名称及该班的所有学生的名字 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> class.cid,class.cname,student.sname <span class="keyword">from</span> class <span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> student <span class="keyword">on</span> class.cid<span class="operator">=</span>student.classid;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/dd82b94cb3886aaa58c04a9cf89c38eb.png" alt="在这里插入图片描述"><br>展示结果分析：<br>1、分别找出Java班、C++班、Python班的学生<br>2、左表的PHP班不满足查询条件故其没有出现在查询结果中<br>3、虽然右表的jack没有对应班级，但是任然显示王跃跃的信息；但是，它对应的班级以及班级编号均为NULL</p><h2 id="十五、子查询"><a href="#十五、子查询" class="headerlink" title="十五、子查询"></a>十五、子查询</h2><p>子查询是指一个查询语句嵌套在另一个查询语句内部的查询；该查询语句可以嵌套在一个 SELECT、SELECT…INTO、INSERT…INTO等语句中。在执行查询时，首先会执行子查询中的语句，再将返回的结果作为外层查询的过滤条件。在子査询中通常可以使用比较运算符和IN、EXISTS、<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">ANY</a>、ALL等关键字。</p><p>准备数据，代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> student;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> class;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建班级表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">  cid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  cname <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student (</span><br><span class="line">  sid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">  sname <span class="type">varchar</span> (<span class="number">20</span>), </span><br><span class="line">  sage <span class="type">int</span> (<span class="number">2</span>), </span><br><span class="line">  classid <span class="type">int</span> (<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向班级表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1001</span>,<span class="string">&#x27;Java&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1002</span>,<span class="string">&#x27;C++&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1003</span>,<span class="string">&#x27;Python&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1004</span>,<span class="string">&#x27;PHP&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class <span class="keyword">VALUES</span>(<span class="number">1005</span>,<span class="string">&#x27;Android&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">20</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">21</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;王五&#x27;</span>,<span class="number">24</span>,<span class="number">1003</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;赵六&#x27;</span>,<span class="number">23</span>,<span class="number">1004</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;小明&#x27;</span>,<span class="number">21</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;小红&#x27;</span>,<span class="number">26</span>,<span class="number">1001</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;小亮&#x27;</span>,<span class="number">27</span>,<span class="number">1002</span>);</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132</span></span><br></pre></td></tr></table></figure><h3 id="1-带比较运算符的子查询"><a href="#1-带比较运算符的子查询" class="headerlink" title="1.带比较运算符的子查询"></a>1.带比较运算符的子查询</h3><p>比较运算符前面我们提到过得，就是&gt;、&lt;、=、&gt;=、&lt;=、!=等<br>查询张三同学所在班级的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid<span class="operator">=</span>(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/530fceb66a0d748b5e3d0ca014814b63.png" alt="在这里插入图片描述"><br>查询比张三同学所在班级编号还大的班级的信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid<span class="operator">&gt;</span>(<span class="keyword">select</span> classid <span class="keyword">from</span> student <span class="keyword">where</span> sname<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/1e86ebedb372666ce5f5ba3693b66f33.png" alt="在这里插入图片描述"></p><h3 id="2-带EXISTS关键字的子查询"><a href="#2-带EXISTS关键字的子查询" class="headerlink" title="2.带EXISTS关键字的子查询"></a>2.带EXISTS关键字的子查询</h3><p>EXISTS关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会 执行<br>假如王五同学在学生表中则从班级表查询所有班级信息 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname<span class="operator">=</span><span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/8d8d825bb79a61d763a0a05aa11090a9.png" alt="在这里插入图片描述"></p><h3 id="3-带ANY关键字的子查询"><a href="#3-带ANY关键字的子查询" class="headerlink" title="3.带ANY关键字的子查询"></a>3.带ANY关键字的子查询</h3><p>ANY关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件。</p><p>查询比任一学生所属班级号还大的班级编号 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> classid <span class="keyword">from</span> student);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/bda120f46cf10178c098a8c9b636435b.png" alt="在这里插入图片描述"></p><h3 id="4-带ALL关键字的子查询"><a href="#4-带ALL关键字的子查询" class="headerlink" title="4.带ALL关键字的子查询"></a>4.带ALL关键字的子查询</h3><p>ALL关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件。</p><p>查询比所有学生所属班级号还大的班级编号 MySQL命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid <span class="operator">&gt;</span> <span class="keyword">all</span> (<span class="keyword">select</span> classid <span class="keyword">from</span> student);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>运行效果展示<br><img src="https://i-blog.csdnimg.cn/blog_migrate/18f275e032225b0c000b2145b819bfd3.png" alt="在这里插入图片描述"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>重要</strong>（从关键字分析）：<br><strong>查询语句的书写顺序和执行顺序</strong><br>select ===&gt; from ===&gt; where ===&gt; group by ===&gt; having ===&gt; order by ===&gt; limit<br><strong>查询语句的执行顺序</strong><br>from ===&gt; where ===&gt; group by ===&gt; having ===&gt; select ===&gt; order by ===&gt; limi</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL常用语法</title>
      <link href="/2024/11/24/MySQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/11/24/MySQL%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL常用语法"><a href="#MySQL常用语法" class="headerlink" title="MySQL常用语法"></a>MySQL常用语法</h1><p>[TOC]</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="MYSQL注释方式"><a href="#MYSQL注释方式" class="headerlink" title="MYSQL注释方式"></a>MYSQL注释方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">哈哈哈哈哈</span></span><br><span class="line"><span class="comment">哈哈哈哈</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p12345678</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/acb6953c9039c0609b3004b578c4e33c.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-LCyXjZE5-1688559235379)(assets/1688556594985-16.png#pic_center)]"></p><h4 id="退出数据库连接"><a href="#退出数据库连接" class="headerlink" title="退出数据库连接"></a>退出数据库连接</h4><p>使用<code>exit;</code>命令可以退出连接</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bb9474449219bdb67a622fe3a93765f8.png#pic_center" alt="在这里插入图片描述"></p><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p><img src="https://i-blog.csdnimg.cn/blog_migrate/fa6b7b90fa829cd343a137b91f4f1e68.png#pic_center" alt="在这里插入图片描述"></p><h3 id="查询MYSQL版本"><a href="#查询MYSQL版本" class="headerlink" title="查询MYSQL版本"></a>查询MYSQL版本</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> version();</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> version() <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">8.0</span><span class="number">.27</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/58cee7bb43635c19224118b2a8ffcc3f.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-BrfI5JJ0-1688559235380)(assets/1688556594986-18.png#pic_center)]"></p><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><p>如果想要操作数据库，需要使用<code>use 数据库名;</code>来选择要操作的数据库</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3129c23c7de22cc188d6cd01a5aaf16a.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-c1Bc6SSg-1688559235381)(assets/1688556594986-19.png#pic_center)]"></p><h3 id="查看所选择数据库的所有表"><a href="#查看所选择数据库的所有表" class="headerlink" title="查看所选择数据库的所有表"></a>查看所选择数据库的所有表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ddf86119600e7c37a7ee38a7b9b5e048.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-YjMDbbYV-1688559235381)(assets/1688556594986-20.png#pic_center)]"></p><h3 id="查看表的具体信息"><a href="#查看表的具体信息" class="headerlink" title="查看表的具体信息"></a>查看表的具体信息</h3><p>使用<code>describe 表名;</code>可以查看表中的字段信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">describe</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Field        <span class="operator">|</span> Type          <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>           <span class="operator">|</span> Extra                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id           <span class="operator">|</span> <span class="type">bigint</span>        <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span> auto_increment                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> userName     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">256</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> userAccount  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">256</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> UNI <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> userAvatar   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">1024</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender       <span class="operator">|</span> tinyint       <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> userRole     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">256</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">user</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> userPassword <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">512</span>)  <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> accessKey    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">512</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> secretKey    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">512</span>)  <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> createTime   <span class="operator">|</span> datetime      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span> DEFAULT_GENERATED                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> updateTime   <span class="operator">|</span> datetime      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span> DEFAULT_GENERATED <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> isDelete     <span class="operator">|</span> tinyint       <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                 <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------+---------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">12</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database [if <span class="keyword">not</span> <span class="keyword">exists</span>] 数据库名称 <span class="type">character</span> <span class="keyword">set</span> 字符编码;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database practice <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 已存在的数据库不能重复创建，不然会报错</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database practice <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">ERROR <span class="number">1007</span> (HY000): Can<span class="string">&#x27;t create database &#x27;</span>practice<span class="string">&#x27;; database exists</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- 使用if not exists，可以判断数据库不存在的时候才创建数据库，这样就不会报错</span></span><br><span class="line"><span class="string">mysql&gt; create database if not exists practice character set utf8;</span></span><br><span class="line"><span class="string">Query OK, 1 row affected, 2 warnings (0.01 sec)</span></span><br><span class="line"><span class="string">1234567891011</span></span><br></pre></td></tr></table></figure><p>如果数据库名字有短横杆，用``包住，不然可能会报错</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database `<span class="keyword">second</span><span class="operator">-</span>hand<span class="operator">-</span>market` <span class="type">character</span> <span class="keyword">set</span> utf8mb4;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="查看创建数据库的语句"><a href="#查看创建数据库的语句" class="headerlink" title="查看创建数据库的语句"></a>查看创建数据库的语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> database practice;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Database <span class="operator">|</span> <span class="keyword">Create</span> Database                                                                                      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> practice <span class="operator">|</span> <span class="keyword">CREATE</span> DATABASE `practice` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8 */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+------------------------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h3 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h3><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] `表名`(</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释]，</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释]，</span><br><span class="line"><span class="string">&#x27;字段名&#x27;</span>列类型[属性][索引][注释]</span><br><span class="line">)[表类型][字符集设置][注释]</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` ( </span><br><span class="line">    `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment COMMENT <span class="string">&#x27;学号&#x27;</span> <span class="keyword">PRIMARY</span> KEY, </span><br><span class="line">    `name` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;学生表&#x27;</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h5 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h5><div class="table-container"><table><thead><tr><th>字段类型</th><th>描述</th><th>示例值</th><th>存储字节数</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>小整型，有符号或无符号，通常用于存储小范围的整数值。</td><td><code>-128</code> 到 <code>127</code> 或 <code>0</code> 到 <code>255</code></td><td>1</td></tr><tr><td><code>SMALLINT</code></td><td>中整型，有符号或无符号，适用于存储中等范围的整数值。</td><td><code>-32768</code> 到 <code>32767</code> 或 <code>0</code> 到 <code>65535</code></td><td>2</td></tr><tr><td><code>MEDIUMINT</code></td><td>中等大小的整型，有符号或无符号。</td><td><code>-8388608</code> 到 <code>8388607</code> 或 <code>0</code> 到 <code>16777215</code></td><td>3</td></tr><tr><td><code>INT</code> / <code>INTEGER</code></td><td>标准整型，有符号或无符号，适用于大多数整数场景。</td><td><code>-2147483648</code> 到 <code>2147483647</code> 或 <code>0</code> 到 <code>4294967295</code></td><td>4</td></tr><tr><td><code>BIGINT</code></td><td>大整型，有符号或无符号，适用于需要存储非常大数字的情况。</td><td><code>-9223372036854775808</code> 到 <code>9223372036854775807</code> 或 <code>0</code> 到 <code>18446744073709551615</code></td><td>8</td></tr><tr><td><code>FLOAT</code></td><td>单精度浮点数，用于存储实数。</td><td><code>3.14</code>, <code>-123.45</code></td><td>4</td></tr><tr><td><code>DOUBLE</code></td><td>双精度浮点数，提供比<code>FLOAT</code>更高的精度。</td><td><code>3.1415926535</code>, <code>-123456.789</code></td><td>8</td></tr><tr><td><code>DECIMAL</code></td><td>定点数，用于存储精确的数值，如货币金额。</td><td><code>1234.56</code>, <code>-789.01</code></td><td>可变（取决于精度和标度）</td></tr><tr><td><code>CHAR</code></td><td>固定长度的字符串类型。</td><td><code>&#39;hello&#39;</code></td><td>可变（取决于定义长度）</td></tr><tr><td><code>VARCHAR</code></td><td>可变长度的字符串类型。</td><td><code>&#39;hello world&#39;</code></td><td>可变（取决于实际存储的字符数量）</td></tr><tr><td><code>DATE</code></td><td>日期类型，格式为 YYYY-MM-DD。</td><td><code>&#39;2023-03-01&#39;</code></td><td>3</td></tr><tr><td><code>TIME</code></td><td>时间类型，格式为 HH:MM:SS。</td><td><code>&#39;12:34:56&#39;</code></td><td>3</td></tr><tr><td><code>DATETIME</code></td><td>日期和时间组合类型。</td><td><code>&#39;2023-03-01 12:34:56&#39;</code></td><td>8</td></tr><tr><td><code>TIMESTAMP</code></td><td>日期和时间类型，自动维护当前时间戳。</td><td><code>&#39;2023-03-01 12:34:56&#39;</code></td><td>4</td></tr><tr><td><code>TINYBLOB</code></td><td>用于存储较小的二进制数据，最大长度为 255 字节。</td><td>图片缩略图，短音频片段</td><td>数据长度 + 1</td></tr><tr><td><code>BLOB</code></td><td>用于存储中等大小的二进制数据，最大长度为 65,535 字节。</td><td>中等大小的图片，文档</td><td>数据长度 + 2</td></tr><tr><td><code>MEDIUMBLOB</code></td><td>用于存储较大的二进制数据，最大长度为 16MB。</td><td>较大的图片，较长的音频或视频剪辑</td><td>数据长度 + 3</td></tr><tr><td><code>LONGBLOB</code></td><td>用于存储非常大的二进制数据，最大长度为 4GB。</td><td>高清图片，完整的音频或视频文件</td><td>数据长度 + 4</td></tr><tr><td><code>TINYTEXT</code></td><td>用于存储较小的文本数据，最大长度为 255 字符。</td><td>短文本消息，注释或标签</td><td>数据长度 + 1</td></tr><tr><td><code>TEXT</code></td><td>用于存储中等大小的文本数据，最大长度为 65,535 字符。</td><td>长文本消息，文章摘要</td><td>数据长度 + 2</td></tr><tr><td><code>MEDIUMTEXT</code></td><td>用于存储较大的文本数据，最大长度为 16MB。</td><td>长篇文章，用户评论或论坛帖子</td><td>数据长度 + 3</td></tr><tr><td><code>LONGTEXT</code></td><td>用于存储非常大的文本数据，最大长度为 4GB。</td><td>长篇小说，大数据量的文本信息</td><td>数据长度 + 4</td></tr><tr><td><code>BOOLEAN</code> / <code>BOOL</code></td><td>布尔类型，表示真或假。</td><td><code>TRUE</code>, <code>FALSE</code></td><td>1</td></tr><tr><td><code>ENUM</code></td><td>枚举类型，允许在列表中选择一个值。</td><td><code>&#39;apple&#39;</code>, <code>&#39;orange&#39;</code></td><td>可变</td></tr><tr><td><code>SET</code></td><td>集合类型，允许在列表中选择多个值。</td><td><code>&#39;apple, orange&#39;</code></td><td>可变</td></tr></tbody></table></div><p>请注意，<code>BLOB</code>、<code>TEXT</code>、<code>CHAR</code> 和 <code>VARCHAR</code> 的实际存储大小会根据存储的数据量而变化，但它们的最大容量是固定的。例如，<code>VARCHAR</code> 的最大长度为 65,535 字符，而 <code>BLOB</code> 和 <code>TEXT</code> 类型的最大大小则更大。此外，<code>DECIMAL</code> 类型的存储大小取决于其定义的精度和标度。</p><h5 id="数据约束"><a href="#数据约束" class="headerlink" title="数据约束"></a><a href="https://so.csdn.net/so/search?q=数据约束&amp;spm=1001.2101.3001.7020">数据约束</a></h5><p>在MySQL中创建表或修改表时，可以应用多种数据约束以确保数据的完整性和一致性。以下是常见的数据约束类型：</p><ol><li><strong>主键约束（PRIMARY KEY）</strong>：<ul><li>指定一个或一组字段作为主键，用于唯一标识表中的每一行记录。</li><li>主键字段不允许有重复值，并且不能为NULL。</li></ul></li><li><strong>唯一约束（UNIQUE）</strong>：<ul><li>确保指定的字段或字段组合的值在表中是唯一的。</li><li>可以允许NULL值，但NULL值不会被视为重复。</li></ul></li><li><strong>非空约束（NOT NULL）</strong>：<ul><li>指定字段不能接受NULL值。</li><li>强制字段在插入新记录时必须提供值。</li></ul></li><li><strong>默认约束（DEFAULT）</strong>：<ul><li>为字段设定一个默认值，如果在插入新记录时未提供该字段的值，则自动使用默认值。</li></ul></li><li><strong>外键约束（FOREIGN KEY）</strong>：<ul><li>用于维护两个表之间的关系，确保外键字段的值与参照表的主键或唯一键相匹配。</li><li>外键可以防止删除或更改被其他表引用的记录。</li></ul></li><li><strong>检查约束（CHECK）</strong>：<ul><li>MySQL直到版本8.0.16才引入了对检查约束的支持，但其功能可能有限。</li><li>用于定义字段值必须满足的条件。</li></ul></li></ol><p>除了这些标准的SQL约束，MySQL还支持一些额外的功能，如自增（AUTO_INCREMENT）和生成表达式列（GENERATED COLUMNS），虽然它们不是传统意义上的约束，但它们可以帮助维护数据的完整性。一个使用上述约束的建表sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个包含各种约束的用户表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    user_id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY,       <span class="comment">-- 主键约束</span></span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,           <span class="comment">-- 唯一约束和非空约束</span></span><br><span class="line">    password <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,               <span class="comment">-- 非空约束</span></span><br><span class="line">    age TINYINT UNSIGNED <span class="keyword">CHECK</span> (age <span class="operator">&gt;=</span> <span class="number">18</span> <span class="keyword">AND</span> age <span class="operator">&lt;=</span> <span class="number">120</span>), <span class="comment">-- 检查约束，MySQL 8.0.16及以上支持</span></span><br><span class="line">    registration_date <span class="type">DATE</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_DATE</span>,  <span class="comment">-- 默认约束</span></span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    gender ENUM(<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;male&#x27;</span>, <span class="comment">-- 本质上也是一种默认约束</span></span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY (address) <span class="keyword">REFERENCES</span> addresses(address_id) <span class="comment">-- 外键约束</span></span><br><span class="line">);</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h4 id="查看创建数据表的语句"><a href="#查看创建数据表的语句" class="headerlink" title="查看创建数据表的语句"></a>查看创建数据表的语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use practice;</span><br><span class="line">Database changed</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table   | Create Table</span></span><br><span class="line">                                                                                                                       <span class="operator">|</span><span class="operator">+</span><span class="comment">---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+| student | CREATE TABLE `student` (</span></span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 COMMENT<span class="operator">=</span><span class="string">&#x27;学生表&#x27;</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)</span></span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure><h4 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><h5 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h5><p>alter table 旧表名 rename as 新表名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">as</span> teacher;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>在MySQL中，你可以使用<code>ALTER TABLE</code>语句来修改现有表的结构。这包括向表中添加字段、修改字段的类型以及删除字段。下面是这些操作的SQL语法以及一些示例：</p><h5 id="给指定表增加字段"><a href="#给指定表增加字段" class="headerlink" title="给指定表增加字段"></a>给指定表增加字段</h5><p>alter table 表名 add 字段名 列属性;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> gender <span class="type">bigint</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> age <span class="type">int</span>(<span class="number">11</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.02</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425262728</span></span><br></pre></td></tr></table></figure><h5 id="修改指定表的字段"><a href="#修改指定表的字段" class="headerlink" title="修改指定表的字段"></a>修改指定表的字段</h5><blockquote><p>修改列属性</p></blockquote><p>alter table 表名 modify 字段名 列属性;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher modify age <span class="type">varchar</span>(<span class="number">11</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><blockquote><p>同时修改字段名和字段属性</p></blockquote><p>alter table 表名 change 旧字段名 新字段名 列属性;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age    <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">11</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher change age age1 <span class="type">int</span>(<span class="number">2</span>);</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected, <span class="number">1</span> warning (<span class="number">0.07</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age1   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678910111213141516171819202122232425</span></span><br></pre></td></tr></table></figure><h5 id="删除指定表的字段"><a href="#删除指定表的字段" class="headerlink" title="删除指定表的字段"></a>删除指定表的字段</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field  <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id     <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name   <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> gender <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age1   <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">drop</span> gender;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.06</span> sec)</span><br><span class="line">Records: <span class="number">0</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> teacher;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> age1  <span class="operator">|</span> <span class="type">int</span>         <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><p>语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> [if <span class="keyword">exists</span>] 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>[测试]</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> Tables_in_practice <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="operator">|</span> teacher            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> teacher;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">Empty</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><h4 id="给表添加外键"><a href="#给表添加外键" class="headerlink" title="给表添加外键"></a>给表添加外键</h4><h5 id="创建表的时候增加外键"><a href="#创建表的时候增加外键" class="headerlink" title="创建表的时候增加外键"></a>创建表的时候增加外键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建专业表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `major` (</span><br><span class="line">    `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment COMMENT <span class="string">&#x27;专业id&#x27;</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;专业名称&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;专业表&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建学生表，并将学生表的major_id声明为外键，引用专业表的id字段</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `student` (</span><br><span class="line">    `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment COMMENT <span class="string">&#x27;学号&#x27;</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    `name` <span class="type">VARCHAR</span> ( <span class="number">30</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    `major_id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;专业id&#x27;</span>,</span><br><span class="line">    key `FK_majorId` (`major_id`),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> `FK_majorId` <span class="keyword">FOREIGN</span> KEY (`major_id`) <span class="keyword">REFERENCES</span> `major`(`id`)</span><br><span class="line">) COMMENT <span class="string">&#x27;学生表&#x27;</span></span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7ca706cd5f4271ea3303ea83bc188ca9.png#pic_center" alt="[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-gA063Sls-1688559235382)(assets/1688556594986-23.png#pic_center)]"></p><h5 id="给已有表添加外键"><a href="#给已有表添加外键" class="headerlink" title="给已有表添加外键"></a>给已有表添加外键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 约束名 <span class="keyword">FOREIGN</span> KEY(作为外键的列的字段名) <span class="keyword">REFERENCES</span> 引用哪个表(哪个字段)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>【案例】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student` <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_majorId` <span class="keyword">FOREIGN</span> KEY(`major_id`) <span class="keyword">REFERENCES</span> `major`(`id`);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="外键使用建议"><a href="#外键使用建议" class="headerlink" title="外键使用建议"></a>外键使用建议</h5><p>当使用了外键时，如果需要删除被引用表的记录，需要先删除引用表的记录。如上面的例子所示，如果需要删除一个专业，需要先删除这个专业所对应的学生。</p><blockquote><p>建议：使用外键约束会让开发者很痛苦，测试数据不方便，建议不使用外键</p></blockquote><h3 id="INSERT-数据插入语句"><a href="#INSERT-数据插入语句" class="headerlink" title="INSERT 数据插入语句"></a>INSERT 数据插入语句</h3><h4 id="数据插入"><a href="#数据插入" class="headerlink" title="数据插入"></a>数据插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `表名` (`字段名<span class="number">1</span>`,`字段名<span class="number">2</span>`) <span class="keyword">values</span>(<span class="string">&#x27;字段值1&#x27;</span>,<span class="string">&#x27;字段值2&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="一次性插入多条数据"><a href="#一次性插入多条数据" class="headerlink" title="一次性插入多条数据"></a>一次性插入多条数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `表名` (`字段名<span class="number">1</span>`,`字段名<span class="number">2</span>`) <span class="keyword">values</span>(<span class="string">&#x27;字段值11&#x27;</span>,<span class="string">&#x27;字段值12&#x27;</span>),(<span class="string">&#x27;字段值21&#x27;</span>,<span class="string">&#x27;字段值22&#x27;</span>),(<span class="string">&#x27;字段值31&#x27;</span>,<span class="string">&#x27;字段值32&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="把其他表查询到数据插入当前表"><a href="#把其他表查询到数据插入当前表" class="headerlink" title="把其他表查询到数据插入当前表"></a>把其他表查询到数据插入当前表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> `表名<span class="number">1</span>`(`字段名<span class="number">1</span>`,`字段名<span class="number">2</span>`,`字段名<span class="number">3</span>`) </span><br><span class="line"><span class="keyword">select</span> `字段名<span class="number">4</span>`,`字段名<span class="number">5</span>`,`字段名<span class="number">6</span>` <span class="keyword">from</span> `表名<span class="number">2</span>`</span><br><span class="line"><span class="keyword">where</span> [查询条件];</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field    <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id       <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name     <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> 匿名    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> major_id <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> MUL <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> Field <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span> <span class="operator">|</span> Extra          <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> auto_increment <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name  <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">30</span>) <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span>                <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+-------------+------+-----+---------+----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">--  insert into `表名` (`字段名`) values(&#x27;字段值&#x27;);</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `major` (`name`) <span class="keyword">values</span>(<span class="string">&#x27;计算机科学&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `major` (`name`) <span class="keyword">values</span>(<span class="string">&#x27;工业工程&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 计算机科学      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 工业工程        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入多条数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `major` (`name`) <span class="keyword">values</span>(<span class="string">&#x27;自动化&#x27;</span>),(<span class="string">&#x27;机械工程&#x27;</span>),(<span class="string">&#x27;工业设计&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 计算机科学      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 工业工程        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 自动化          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 机械工程        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 工业设计        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `student` (`name`,`major_id`) <span class="keyword">values</span>(<span class="string">&#x27;小明&#x27;</span>,<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> major_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小明   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据的时候，不一定要给表的所有字段赋值，只赋值部分字段也可以，前提是省略的字段可以为空</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> `student` (`major_id`) <span class="keyword">values</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="comment">-- 插入数据的时候，没有写入学生的名字，MYSQL会自动填入默认值“匿名”</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> major_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小明   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 匿名   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475</span></span><br></pre></td></tr></table></figure><h3 id="UPDATE-数据更新语句"><a href="#UPDATE-数据更新语句" class="headerlink" title="UPDATE 数据更新语句"></a>UPDATE 数据更新语句</h3><h4 id="没有指定匹配条件的话，会所有表的所有记录"><a href="#没有指定匹配条件的话，会所有表的所有记录" class="headerlink" title="没有指定匹配条件的话，会所有表的所有记录"></a>没有指定匹配条件的话，会所有表的所有记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 计算机科学      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 工业工程        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 自动化          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 机械工程        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 工业设计        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> major <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;智能制造&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">5</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">5</span>  Changed: <span class="number">5</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627</span></span><br></pre></td></tr></table></figure><h4 id="根据条件来修改记录"><a href="#根据条件来修改记录" class="headerlink" title="根据条件来修改记录"></a>根据条件来修改记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> major <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;智能科学与技术&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415</span></span><br></pre></td></tr></table></figure><h4 id="一次性修改多个字段的值"><a href="#一次性修改多个字段的值" class="headerlink" title="一次性修改多个字段的值"></a>一次性修改多个字段的值</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> major_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 小明   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 匿名   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> student <span class="keyword">set</span> name<span class="operator">=</span><span class="string">&#x27;李华&#x27;</span>,major_id<span class="operator">=</span><span class="number">2</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name   <span class="operator">|</span> major_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华   <span class="operator">|</span>        <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 匿名   <span class="operator">|</span>        <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure><h4 id="稍微高级一点的使用"><a href="#稍微高级一点的使用" class="headerlink" title="稍微高级一点的使用"></a>稍微高级一点的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">update</span> load_product,product <span class="keyword">set</span> load_product.product_id <span class="operator">=</span> product.id <span class="keyword">where</span> load_product.code<span class="operator">=</span>product.code</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="WHERE条件"><a href="#WHERE条件" class="headerlink" title="WHERE条件"></a>WHERE条件</h3><h4 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h4><p>where条件可以搭配<code>UPDATE</code>、<code>DELETE</code>、<code>SELECT</code>进行使用，可以使用的操作符如下</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d86651a7cab96fccb4353aa49b93ec52.png#pic_center" alt="在这里插入图片描述"></p><p>多个条件共同使用，使用and连接，如where id=1 and name=‘李华’</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;智能制造&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> name<span class="operator">!=</span><span class="string">&#x27;智能制造&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> <span class="keyword">not</span> name<span class="operator">=</span><span class="string">&#x27;智能制造&#x27;</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;智能制造&#x27;</span> <span class="keyword">and</span> id <span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> id <span class="operator">&lt;</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> id <span class="operator">&gt;=</span> <span class="number">2</span> <span class="keyword">and</span> id <span class="operator">&lt;=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+--------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384</span></span><br></pre></td></tr></table></figure><h4 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h4><p>当然，还可以用来判空或者非空，并不是直接<code>=null</code>，而是<code>is null</code>和<code>is not null</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sys_user </span><br><span class="line"><span class="keyword">SET</span> avatar <span class="operator">=</span> concat( &quot;https://hahaha/&quot;, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">29</span><span class="operator">+</span><span class="number">1</span>), &quot;.png&quot; ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">avatar <span class="keyword">IS</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">OR</span> avatar <span class="operator">=</span> &quot;&quot;;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="and和or的使用"><a href="#and和or的使用" class="headerlink" title="and和or的使用"></a>and和or的使用</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">chat </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">( from_who <span class="operator">=</span> &quot;admin&quot; <span class="keyword">AND</span> to_who <span class="operator">=</span> &quot;user1&quot; ) </span><br><span class="line"><span class="keyword">OR</span> ( to_who <span class="operator">=</span> &quot;admin&quot; <span class="keyword">AND</span> from_who <span class="operator">=</span> &quot;user1&quot; ) </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">create_time <span class="keyword">DESC</span>;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/76b9b1aa023c3bdbeda9efb6537062f3.png#pic_center" alt="在这里插入图片描述"></p><h3 id="DELETE-数据删除"><a href="#DELETE-数据删除" class="headerlink" title="DELETE 数据删除"></a>DELETE 数据删除</h3><blockquote><p>删除所有数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>使用delete删除所有数据，如果重启数据库，会出现如下现象</p><ul><li>InnoDB 自增列会从1开始（存在内存中，断电即失）</li><li>MyISAM 自增列继续从上一个自增量开始（存在文件中，不会丢失）</li></ul><blockquote><p>删除指定数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="TRUNCATE-数据表清空"><a href="#TRUNCATE-数据表清空" class="headerlink" title="TRUNCATE 数据表清空"></a>TRUNCATE 数据表清空</h3><blockquote><p>清空一个数据表的所有数据，自增id计数器重新恢复到1，表的结构和索引约束不会改变</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> 表名</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="SELECT-数据查询语句"><a href="#SELECT-数据查询语句" class="headerlink" title="SELECT 数据查询语句"></a>SELECT 数据查询语句</h3><h4 id="SELECT语法完整结构"><a href="#SELECT语法完整结构" class="headerlink" title="SELECT语法完整结构"></a>SELECT语法完整结构</h4><p>查询的所有操作可以总结为如下套路，如果看不懂，可以先去查看下面的案例，再回来领悟这段内容：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">[<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]<span class="comment">--联合查询</span></span><br><span class="line">[<span class="keyword">WHERE</span>·.]<span class="comment">--指定结果需满足的条件</span></span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...</span><br><span class="line"><span class="comment">--指定结果按照哪几个字段来分组</span></span><br><span class="line">[<span class="keyword">HAVING</span>]</span><br><span class="line"><span class="comment">--过滤分组的记录必须满足的次要条件</span></span><br><span class="line">[<span class="keyword">ORDER</span> BY...]<span class="comment">--指定查询记录按一个或多个条件排序</span></span><br><span class="line">[LIMIT &#123;[<span class="keyword">offset</span>,]row_count row_countoFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line"><span class="comment">--指定查询的记录从哪条至哪条</span></span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><p>通俗点来讲，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">顺序很重要：</span><br><span class="line"><span class="keyword">select</span> 要查询的字段 <span class="keyword">from</span> 表(注意：表和字段可以取别名】</span><br><span class="line">xxx <span class="keyword">join</span> 要连接的表 <span class="keyword">on</span> 等值判断</span><br><span class="line"><span class="keyword">where</span>(具体的值，子查间语句)</span><br><span class="line"><span class="keyword">Group</span> <span class="keyword">By</span>(通过哪个字段来分组)</span><br><span class="line"><span class="keyword">Having</span>(过滤分组后的信息，条件和 <span class="keyword">where</span> 是一样的，位置不同)</span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">By</span> .. (通过哪个字段排序)升序<span class="operator">/</span>降序</span><br><span class="line">Limit startIndex,pagesize</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><p>【注】<code>[]：代表可选</code>; <code>&#123;&#125;：代表必选</code></p><h4 id="查询一个表中的所有数据"><a href="#查询一个表中的所有数据" class="headerlink" title="查询一个表中的所有数据"></a>查询一个表中的所有数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="查询指定字段的数据"><a href="#查询指定字段的数据" class="headerlink" title="查询指定字段的数据"></a>查询指定字段的数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：能查询部分字段的，千万不要查询*，这样会增加查询时间</p><h4 id="给字段取别名"><a href="#给字段取别名" class="headerlink" title="给字段取别名"></a>给字段取别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> name                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure><h4 id="给表取别名"><a href="#给表取别名" class="headerlink" title="给表取别名"></a>给表取别名</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> student.id <span class="keyword">as</span> 学号,student.name <span class="keyword">as</span> 姓名,major.name <span class="keyword">as</span> 专业 <span class="keyword">from</span> student <span class="keyword">left</span> <span class="keyword">join</span> major <span class="keyword">on</span> student.major_id <span class="operator">=</span> major.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 学号   <span class="operator">|</span> 姓名   <span class="operator">|</span> 专业                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span> 李华   <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span> 匿名   <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> s.id <span class="keyword">as</span> 学号,s.name <span class="keyword">as</span> 姓名,m.name <span class="keyword">as</span> 专业 <span class="keyword">from</span> student <span class="keyword">as</span> s <span class="keyword">left</span> <span class="keyword">join</span> major <span class="keyword">as</span> m <span class="keyword">on</span> s.major_id <span class="operator">=</span> m.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 学号   <span class="operator">|</span> 姓名   <span class="operator">|</span> 专业                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span> 李华   <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>      <span class="number">2</span> <span class="operator">|</span> 匿名   <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+--------+-----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p>取别名可以更方便开发者编写sql语句</p><h4 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> concat(<span class="string">&#x27;专业名称：&#x27;</span>,name) <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> concat(<span class="string">&#x27;专业名称：&#x27;</span>,name)            <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> 专业名称：智能科学与技术             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 专业名称：智能制造                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 专业名称：智能制造                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 专业名称：智能制造                   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 专业名称：智能制造                   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------------------------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h4 id="查询结果数据去重"><a href="#查询结果数据去重" class="headerlink" title="查询结果数据去重"></a>查询结果数据去重</h4><p>重复的数据只显示一条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">distinct</span> name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011121314151617181920</span></span><br></pre></td></tr></table></figure><h4 id="查询时增加计算"><a href="#查询时增加计算" class="headerlink" title="查询时增加计算"></a>查询时增加计算</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将所有数据的 id 增加 1</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> id<span class="operator">+</span><span class="number">1</span>,name <span class="keyword">as</span> 专业名称 <span class="keyword">from</span> major;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> id<span class="operator">+</span><span class="number">1</span> <span class="operator">|</span> 专业名称              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span> 智能科学与技术        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">3</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">4</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">5</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>    <span class="number">6</span> <span class="operator">|</span> 智能制造              <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------------------+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a822d5db5f848d601d8eb384163e0b95.png#pic_center" alt="在这里插入图片描述"><br>字符模糊查询：<code>%（代表0到任意个字符）</code>、<code>_（一个字符）</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓刘的同学</span></span><br><span class="line"><span class="comment">-- like结合 </span></span><br><span class="line"><span class="keyword">SELECT</span> `studentNo`,`studentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有一个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentNo`,`studentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;刘_&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓刘的同学，名字后面只有两个字的</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentNo`,`studentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;刘__&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询名字中间有嘉字的同学 %嘉%</span></span><br><span class="line"><span class="keyword">SELECT</span> `studentNo`,`studentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> studentName <span class="keyword">LIKE</span> <span class="string">&#x27;%嘉%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 1001,1002,1003 号学员</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址为空的学生null &#x27;&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`,`StudentName` <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> address<span class="operator">=</span><span class="string">&#x27;&#x27;</span> <span class="keyword">OR</span> address <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询有出生日期的同学 不为空</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo,StudentName <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询没有有出生日期的同学 为空</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo,StudentName <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> BornDate <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="七种连接方式"><a href="#七种连接方式" class="headerlink" title="七种连接方式"></a>七种连接方式</h5><p><a href="https://blog.csdn.net/laodanqiu/article/details/131233741">https://blog.csdn.net/laodanqiu/article/details/131233741</a></p><h5 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h5><p>用途：一个表同时存储了父类数据和子类数据，如省市区表同时存储了中国的所有省、市、区的数据，希望查询出广东省下面的所有城市</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">desc</span> province_city_region;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> Field       <span class="operator">|</span> Type        <span class="operator">|</span> <span class="keyword">Null</span> <span class="operator">|</span> Key <span class="operator">|</span> <span class="keyword">Default</span>           <span class="operator">|</span> Extra                                         <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="operator">|</span> id          <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span> PRI <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span> auto_increment                                <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> create_time <span class="operator">|</span> datetime    <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span> DEFAULT_GENERATED                             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> update_time <span class="operator">|</span> datetime    <span class="operator">|</span> <span class="keyword">NO</span>   <span class="operator">|</span>     <span class="operator">|</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span> DEFAULT_GENERATED <span class="keyword">on</span> <span class="keyword">update</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> is_deleted  <span class="operator">|</span> tinyint     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="number">0</span>                 <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> name        <span class="operator">|</span> <span class="type">varchar</span>(<span class="number">50</span>) <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> type        <span class="operator">|</span> tinyint     <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> parent_id   <span class="operator">|</span> <span class="type">bigint</span>      <span class="operator">|</span> YES  <span class="operator">|</span>     <span class="operator">|</span> <span class="keyword">NULL</span>              <span class="operator">|</span>                                               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------------+-------------+------+-----+-------------------+-----------------------------------------------+</span></span><br><span class="line"><span class="number">7</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> a.id,a.name <span class="keyword">as</span> 市名称,b.name <span class="keyword">as</span> 省名称 <span class="keyword">from</span> province_city_region <span class="keyword">as</span> a,province_city_region <span class="keyword">as</span> b <span class="keyword">where</span> b.name<span class="operator">=</span>&quot;广东省&quot; <span class="keyword">and</span> a.parent_id<span class="operator">=</span>b.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> 市名称    <span class="operator">|</span> 省名称    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4792</span> <span class="operator">|</span> 茂名市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4798</span> <span class="operator">|</span> 湛江市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4808</span> <span class="operator">|</span> 东莞市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4809</span> <span class="operator">|</span> 江门市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4817</span> <span class="operator">|</span> 清远市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4826</span> <span class="operator">|</span> 佛山市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4832</span> <span class="operator">|</span> 阳江市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4837</span> <span class="operator">|</span> 汕头市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4845</span> <span class="operator">|</span> 河源市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4852</span> <span class="operator">|</span> 珠海市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4856</span> <span class="operator">|</span> 汕尾市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4861</span> <span class="operator">|</span> 深圳市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4868</span> <span class="operator">|</span> 梅州市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4877</span> <span class="operator">|</span> 揭阳市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4883</span> <span class="operator">|</span> 韶关市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4894</span> <span class="operator">|</span> 惠州市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4900</span> <span class="operator">|</span> 潮州市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4904</span> <span class="operator">|</span> 广州市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4916</span> <span class="operator">|</span> 肇庆市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4925</span> <span class="operator">|</span> 中山市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4926</span> <span class="operator">|</span> 云浮市    <span class="operator">|</span> 广东省    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+-----------+-----------+</span></span><br><span class="line"><span class="number">21</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526272829303132333435363738394041</span></span><br></pre></td></tr></table></figure><h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><blockquote><p>【查询语句】limit 数据索引起始值 数据量的大小</p></blockquote><p><code>limit 0,5</code>:查询的是第0,1,2,3,4条数据</p><p><code>limit 2,5</code>:查询的是第2,3,4,5,6条数据</p><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><blockquote><p>【查询语句】order by 字段 ASC / DESC</p></blockquote><ul><li>ASC（升序）</li><li>DESC（降序）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> province_city_region <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">asc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+-----------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> name      <span class="operator">|</span> type <span class="operator">|</span> parent_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+-----------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2928</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 山东省    <span class="operator">|</span>    <span class="number">0</span> <span class="operator">|</span>         <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2929</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 莱芜市    <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>      <span class="number">2928</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2930</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 莱城区    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2929</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2931</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 钢城区    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2929</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2932</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 济南市    <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>      <span class="number">2928</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2933</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 历城区    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2934</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 历下区    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2935</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 长清区    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2936</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 平阴县    <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">2932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2937</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">38</span>:<span class="number">54</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 章丘市    <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>      <span class="number">2932</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+-----------+------+-----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> province_city_region <span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">desc</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+--------------------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> name                     <span class="operator">|</span> type <span class="operator">|</span> parent_id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+--------------------------+------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5851</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 天峨县                   <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5850</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 凤山县                   <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5849</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 南丹县                   <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5848</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 环江毛南族自治县         <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5847</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 巴马瑶族自治县           <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5846</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">10</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 东兰县                   <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5845</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">10</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 金城江区                 <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5844</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">10</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 罗城仫佬族自治县         <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5843</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">10</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 宜州市                   <span class="operator">|</span>    <span class="number">1</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">5842</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">11</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-02</span><span class="number">-10</span> <span class="number">20</span>:<span class="number">39</span>:<span class="number">10</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> 都安瑶族自治县           <span class="operator">|</span>    <span class="number">2</span> <span class="operator">|</span>      <span class="number">5840</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------------------+---------------------+------------+--------------------------+------+-----------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233</span></span><br></pre></td></tr></table></figure><h4 id="子查询（嵌套查询）"><a href="#子查询（嵌套查询）" class="headerlink" title="子查询（嵌套查询）"></a>子查询（嵌套查询）</h4><p><code>注意</code>：数据量大的时候，子查询的效率高于连表查询</p><p>查询数据库结构-1的所有考试结果（学号，科目编号，成绩），降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方式一：使用连接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> r.StudentNo, r.SubjectNo, `StudentResult` </span><br><span class="line"><span class="keyword">FROM</span> `<span class="keyword">result</span>` r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.SubjectNo <span class="operator">=</span> sub.SubjectNo</span><br><span class="line"><span class="keyword">WHERE</span> SubjectName <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方式二：使用子查询（由里及外）</span></span><br><span class="line"><span class="comment">-- 查询所有数据库结构-1的学生学号</span></span><br><span class="line"><span class="keyword">SELECT</span> `StudentNo`, `SubjectNo`, `StudentResult` </span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span></span><br><span class="line"><span class="keyword">WHERE</span> SubjectNo <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> subject</span><br><span class="line">    <span class="keyword">WHERE</span> SubjectName <span class="operator">=</span> <span class="string">&#x27;数据库结构-1&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> StudentResult <span class="keyword">DESC</span></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><p>高等数学-2且分数不小于80的同学的学号和姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 连表查询 </span></span><br><span class="line"><span class="keyword">SELECT</span> s.StudentNo, s.StudentName</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="keyword">result</span> r <span class="keyword">ON</span> s.StudentNo <span class="operator">=</span> r.StudentNo</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> subject sub <span class="keyword">ON</span> r.SubjectNo <span class="operator">=</span> sub.SubjectNo</span><br><span class="line"><span class="keyword">WHERE</span> SubjectName <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span> <span class="keyword">AND</span> StudentResult <span class="operator">&gt;=</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 子查询 在改造</span></span><br><span class="line"><span class="keyword">SELECT</span> StudentNo, StudentName <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> StudentNo <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> StudentNo <span class="keyword">FROM</span> <span class="keyword">result</span> <span class="keyword">WHERE</span> StudentResult <span class="operator">&gt;</span> <span class="number">80</span> <span class="keyword">AND</span> SubjectNo <span class="operator">=</span> (</span><br><span class="line">        <span class="keyword">SELECT</span> SubjectNo <span class="keyword">FROM</span> `subject` <span class="keyword">WHERE</span> `SubjectName` <span class="operator">=</span> <span class="string">&#x27;高等数学-2&#x27;</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="number">12345678910111213</span></span><br></pre></td></tr></table></figure><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><p><code>in</code>操作符主要用于在where子句中指定一个条件，该条件检查某一列的值是否在一个特定的值列表中或者是否由一个子查询返回的结果集所包含，如果在，则将数据返回</p><ul><li>最简单的用法：检查某一列的值是否在一个特定的值列表中</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>检查某一列的值是否在子查询返回的结果集中：如查询和张三一个系的学生信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name, dept <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> dept <span class="keyword">in</span> (<span class="keyword">select</span> dept <span class="keyword">from</span> student <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li><code>in</code>还可以多重嵌套使用，例如查询机电学院中选修了’数据库’课程的学生姓名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> dept<span class="operator">=</span>‘机电’ <span class="keyword">and</span> </span><br><span class="line">student.id <span class="keyword">in</span> ( <span class="keyword">select</span> stu_id <span class="keyword">from</span> student_course sc </span><br><span class="line"><span class="keyword">where</span> course_id <span class="keyword">in</span> ( <span class="keyword">select</span> id <span class="keyword">from</span> course <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;数据库&#x27;</span>)));</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>注：student_course为选课表</p><h5 id="not-in"><a href="#not-in" class="headerlink" title="not in"></a>not in</h5><p><code>not in</code>的作用和<code>in</code>刚好反过来，即数据列的值不在特定的值列表中时返回，用法如下，与<code>in</code>的用法相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="exists"><a href="#exists" class="headerlink" title="exists"></a>exists</h5><p><code>exists</code>关键字主要用于检查子查询是否返回至少一行数据，如果子查询至少返回一行数据，则返回true。注意：子查询找到匹配项就会立即停止执行</p><ul><li>如查询有挂科的学生姓名（注：student_course为选课表）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">exists</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_course sc <span class="keyword">where</span> student.id <span class="operator">=</span> sc.stu_id <span class="keyword">and</span> grade <span class="operator">&lt;</span> <span class="number">60</span> );</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>优化：因为子查询只需要有数据返回即可，不关心具体返回什么数据，因此直接返回1即可，效率更高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">exists</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> student_course sc <span class="keyword">where</span> student.id <span class="operator">=</span> sc.stu_id <span class="keyword">and</span> grade <span class="operator">&lt;</span> <span class="number">60</span> );</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h5 id="not-exists"><a href="#not-exists" class="headerlink" title="not exists"></a>not exists</h5><p><code>not exists</code>关键字主要用于检查子查询是否返回至少一行数据，如果子查询至少返回一行数据，则返回false。</p><ul><li>如查询全部及格的学生姓名（注：student_course为选课表）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student_course sc <span class="keyword">where</span> student.id <span class="operator">=</span> sc.stu_id <span class="keyword">and</span> grade <span class="operator">&lt;</span> <span class="number">60</span> );</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>进阶用法：查询选修了全部课程的学生名单</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> course </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> student_course sc <span class="keyword">where</span> student.id <span class="operator">=</span> sc.stu_id <span class="keyword">and</span> sc.course_id <span class="operator">=</span> course.id));</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>可能直接看上面的sql比较绕，上面的sql可以近似理解为如下伪代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化一个空的Set来存储选修了所有课程的学生及其信息</span></span><br><span class="line"><span class="type">Set</span> <span class="variable">studentList</span> <span class="operator">=</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有的学生</span></span><br><span class="line"><span class="keyword">for</span> each student in 学生群体 &#123;</span><br><span class="line">    <span class="comment">// 初始化一个空的Set来存储当前学生未选修的课程</span></span><br><span class="line">    <span class="type">Set</span> <span class="variable">courseList</span> <span class="operator">=</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有的课程</span></span><br><span class="line">    <span class="keyword">for</span> each course in 课程列表 &#123;</span><br><span class="line">        <span class="comment">// 检查学生是否没有选修当前课程</span></span><br><span class="line">        <span class="keyword">if</span> (student没有选修course) &#123;</span><br><span class="line">            <span class="comment">// 如果没有选修，则添加此课程到未选修课程列表</span></span><br><span class="line">            courseList.add(course);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查当前学生是否有未选修的课程</span></span><br><span class="line">    <span class="keyword">if</span> (courseList.size() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果没有未选修的课程，说明该学生选修了所有课程</span></span><br><span class="line">        <span class="comment">// 将学生添加到已选修所有课程的学生列表中</span></span><br><span class="line">        studentList.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印或返回studentList，包含所有选修了所有课程的学生信息</span></span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627</span></span><br></pre></td></tr></table></figure><h5 id="in-和-exists-怎么选？"><a href="#in-和-exists-怎么选？" class="headerlink" title="in 和 exists 怎么选？"></a>in 和 exists 怎么选？</h5><p>遵循小表驱动大表原则</p><ul><li>如果B表数据量小于A表数据量，用in更优</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> B);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> select id from B&#123;</span><br><span class="line"><span class="keyword">for</span> select * from A where A.id = B.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>如果A表数据量小于B表数据量，用exists更优</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 遍历A表数据，看B表是否有与当前Aid相同的数据，如果有，则查询出来</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> A <span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> B <span class="keyword">where</span> B.id <span class="operator">=</span> A.id);</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> select id from A&#123;</span><br><span class="line"><span class="keyword">for</span> select * from B where B.id = A.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="查询常用函数"><a href="#查询常用函数" class="headerlink" title="查询常用函数"></a>查询常用<a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">函数</a></h4><h5 id="【数学运算】"><a href="#【数学运算】" class="headerlink" title="【数学运算】"></a>【数学运算】</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">ABS</span>(<span class="number">-8</span>)<span class="comment">--绝对值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CEILING</span>(<span class="number">9.4</span>)<span class="comment">--向上取整</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">FLOOR</span>(<span class="number">9.4</span>)<span class="comment">--向下取整</span></span><br><span class="line"><span class="keyword">SELECT</span> RAND()一一返回一个<span class="number">0</span><span class="operator">~</span><span class="number">1</span>之间的随机数</span><br><span class="line"><span class="keyword">SELECT</span> SIGN (<span class="number">10</span>)一一判断一个数的符号(负数返回<span class="number">-1</span>，正数返回<span class="number">1</span>,<span class="number">0</span>返回<span class="number">0</span>)</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h5 id="【字符串函数】"><a href="#【字符串函数】" class="headerlink" title="【字符串函数】"></a>【字符串函数】</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHAR_LENGTH</span>(<span class="string">&#x27;即使再小的帆也能远航&#x27;</span>)<span class="comment">--字符串长度</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;哈&#x27;</span>，<span class="string">&#x27;哈&#x27;</span>，<span class="string">&#x27;哈&#x27;</span>)<span class="comment">--拼接字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSERT</span>(<span class="string">&#x27;我爱编程helloworld&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;超级热爱&#x27;</span>)<span class="comment">--从某个位置开始替换某个长度</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOWER</span>(<span class="string">&#x27;Abc&#x27;</span>)<span class="comment">--转化为小写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">UPPER</span>(<span class="string">&#x27;Abc&#x27;</span>)<span class="comment">--转化为大写字母</span></span><br><span class="line"><span class="keyword">SELECT</span> INSTR(<span class="string">&#x27;Abc&#x27;</span>,<span class="string">&#x27;bc&#x27;</span>)<span class="comment">--返回第一次出现的子串的索引</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(<span class="string">&#x27;你好&#x27;</span>，<span class="string">&#x27;好&#x27;</span>，<span class="string">&#x27;坏&#x27;</span>)<span class="comment">--替换出现的指定字符串</span></span><br><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;你吃饭了吗&#x27;</span>，<span class="number">1</span>,<span class="number">3</span>)<span class="comment">--返回指定的子字符串（源字符串，截取的位置，截取的长度）</span></span><br><span class="line"><span class="keyword">SELECT</span> REVERSE(<span class="string">&#x27;我和你&#x27;</span>)<span class="comment">--反转</span></span><br><span class="line"><span class="comment">-- 查询学生，将查询出来的数据姓氏进行替换</span></span><br><span class="line"><span class="keyword">SELECT</span> REPLACE(student_name,<span class="string">&#x27;王&#x27;</span>，<span class="string">&#x27;玩&#x27;</span>)<span class="keyword">FROM</span> student</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h5 id="【时间和日期函数】"><a href="#【时间和日期函数】" class="headerlink" title="【时间和日期函数】"></a>【时间和日期函数】</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_DATE</span>()<span class="comment">--获取当前日期</span></span><br><span class="line"><span class="keyword">SELECT</span> CURDATE()<span class="operator">-</span>一获取当前日期</span><br><span class="line"><span class="keyword">SELECT</span> NOW()<span class="comment">--获取当前的时间</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">LOCALTIME</span>()<span class="comment">--本地时间</span></span><br><span class="line"><span class="keyword">SELECT</span> SYSDATE()<span class="operator">-</span>一系统时间</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(NOW())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(NOW())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DAY</span>(NOW())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">HOUR</span>(NOW())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MINUTE</span>(NOW())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SECOND</span>(NOW())</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h5 id="【数据库相关】"><a href="#【数据库相关】" class="headerlink" title="【数据库相关】"></a>【数据库相关】</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SYSTEM</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();</span><br><span class="line"><span class="keyword">SELECT</span> VERSION();<span class="comment">--查询数据库版本</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h5 id="【统计相关】"><a href="#【统计相关】" class="headerlink" title="【统计相关】"></a>【统计相关】</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">都能够统计表中的数据（想查询一个表中有多少个记录，就使用这个cout())</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(`BornDate`) <span class="keyword">FROM</span> student;<span class="comment">--Count(字段)，会忽略所有的nul1值</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> student;<span class="comment">--Count(*),不会忽略null值，本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="keyword">result</span>;<span class="comment">--Count(1),不会忽略忽略所有的nul1值，本质计算行数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(`StudentResult`) <span class="keyword">AS</span> 总和 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`StudentResult`) <span class="keyword">AS</span> 平均分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(`StudentResult`) <span class="keyword">AS</span> 最高分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(`StudentResult`) <span class="keyword">As</span> 最低分 <span class="keyword">FROM</span> <span class="keyword">result</span>;</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> sys_user </span><br><span class="line"><span class="keyword">SET</span> avatar <span class="operator">=</span> concat( &quot;https://hahaha/&quot;, <span class="built_in">FLOOR</span>(RAND()<span class="operator">*</span><span class="number">29</span><span class="operator">+</span><span class="number">1</span>), &quot;.png&quot; ) </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">avatar <span class="keyword">IS</span> <span class="keyword">NULL</span> </span><br><span class="line"><span class="keyword">OR</span> avatar <span class="operator">=</span> &quot;&quot;;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>使用函数可能导致字段的索引失效，造成效率下降，建议直接读出来，然后用java进行处理</p><h4 id="分组、过滤"><a href="#分组、过滤" class="headerlink" title="分组、过滤"></a>分组、过滤</h4><p>【分组】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name,gender <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> name            <span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> 系统管理员      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 企业管理员      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 门店管理员      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 郗淑            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 柳之            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 夏侯之          <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 吉滢            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 独孤杰          <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 蒙飘            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 卫柔            <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 根据 gender 进行分组</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> name,gender <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">group</span> <span class="keyword">by</span> gender limit <span class="number">0</span>,<span class="number">10</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> name            <span class="operator">|</span> gender <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="operator">|</span> 系统管理员      <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> 柳之            <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+--------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><p>【过滤】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询不同课程的平均分，最高分，最低分，平均分大于80。根据不同的课程分组</span></span><br><span class="line"><span class="keyword">SELECT</span> subjectName,<span class="built_in">AVG</span>(StudentResult) <span class="keyword">AS</span> 平均分,<span class="built_in">MAX</span>(StudentResult) <span class="keyword">AS</span> 最高分,<span class="built_in">MIN</span>(StudentResult) <span class="keyword">AS</span> 最低分</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">result</span> r</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> `subject` sub</span><br><span class="line"><span class="keyword">ON</span> r.`SubjectNo` <span class="operator">=</span> sub.`SubjectNo`</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> r.SubjectNo</span><br><span class="line"><span class="keyword">HAVING</span> 平均分<span class="operator">&gt;</span><span class="number">80</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>能使用where，就不要使用having，不然可能导致索引失效</p><p>【按照分组拼接字符串】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sale.attr_id, sale.attr_name, GROUP_CONCAT(<span class="keyword">DISTINCT</span> sale.attr_value)</span><br><span class="line"><span class="keyword">FROM</span> pms_sku_info skuInfo</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pms_sku_sale_attr_value sale <span class="keyword">ON</span> sale.sku_id <span class="operator">=</span> skuInfo.sku_id</span><br><span class="line"><span class="keyword">WHERE</span> skuInfo.spu_id <span class="operator">=</span> <span class="number">9</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sale.attr_id, sale.attr_name</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/4c566c0054024b188558637444ca5002.png#pic_center" alt="在这里插入图片描述"></p><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><h5 id="Union（并集）"><a href="#Union（并集）" class="headerlink" title="Union（并集）"></a>Union（并集）</h5><p>假设有<code>employees</code>（员工） 和 <code>contractors</code>（合同工），使用下列sql可以查询出所有员工和合同工，并将数据合并在一起。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> contractors;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT <span class="built_in">id</span>, name, job_title FROM contractors;</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">| <span class="built_in">id</span> | name  | job_title |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">|  1 | David | Developer |</span><br><span class="line">|  2 | Eve   | Tester    |</span><br><span class="line">|  3 | Frank | Designer  |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT <span class="built_in">id</span>, name, job_title FROM employees;</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">| <span class="built_in">id</span> | name  | job_title |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">|  1 | Alice | Developer |</span><br><span class="line">|  2 | Bob   | Designer  |</span><br><span class="line">|  3 | Frank | Designer  |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT <span class="built_in">id</span>, name, job_title FROM employees UNION SELECT <span class="built_in">id</span>, name, job_title FROM contractors;</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">| <span class="built_in">id</span> | name  | job_title |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">|  1 | Alice | Developer |</span><br><span class="line">|  2 | Bob   | Designer  |</span><br><span class="line">|  3 | Frank | Designer  |</span><br><span class="line">|  1 | David | Developer |</span><br><span class="line">|  2 | Eve   | Tester    |</span><br><span class="line">+----+-------+-----------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">12345678910111213141516171819202122232425262728293031</span><br></pre></td></tr></table></figure><p>从上面的执行结果可以发现，UNION操作符可以用于合并两个或更多SELECT语句的结果集，但会自动去除重复的行。</p><p>如果希望包含所有行，即使有重复，可以使用UNION ALL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> employees <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> contractors;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> job_title <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Alice <span class="operator">|</span> Developer <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Bob   <span class="operator">|</span> Designer  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Frank <span class="operator">|</span> Designer  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> David <span class="operator">|</span> Developer <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Eve   <span class="operator">|</span> Tester    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Frank <span class="operator">|</span> Designer  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="number">6</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="number">123456789101112</span></span><br></pre></td></tr></table></figure><h5 id="Except（差集）"><a href="#Except（差集）" class="headerlink" title="Except（差集）"></a>Except（差集）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> employees <span class="keyword">except</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> contractors;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> job_title <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> Alice <span class="operator">|</span> Developer <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> Bob   <span class="operator">|</span> Designer  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h5 id="Intersect（交集）"><a href="#Intersect（交集）" class="headerlink" title="Intersect（交集）"></a>Intersect（交集）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> employees <span class="keyword">intersect</span> <span class="keyword">SELECT</span> id, name, job_title <span class="keyword">FROM</span> contractors;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name  <span class="operator">|</span> job_title <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> Frank <span class="operator">|</span> Designer  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h4 id="连接查询-1"><a href="#连接查询-1" class="headerlink" title="连接查询"></a>连接查询</h4><p><a href="https://blog.csdn.net/laodanqiu/article/details/131233741">【MySQL高级】MySQL表的七种连接方式【附带练习sql】</a></p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>准确地建立索引可以加快数据查询效率，详细的内容可以查看如下文章：</p><ul><li><a href="https://blog.csdn.net/laodanqiu/article/details/131366020">【MySQL高级】MySQL索引基础介绍</a></li><li><a href="https://blog.csdn.net/laodanqiu/article/details/131414465">【MySQL高级】MySQL索引失效情况及避免方式【案例分析】</a></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是一种虚拟的表，它并不在数据库中以存储的数据值形式存在，而是基于一个或多个已存在的表（基表）的SQL查询结果。当你查询视图时，实际上是在执行视图所包含的SQL语句，获取并返回结果集。</p><p>视图的主要作用包括：</p><ol><li><strong>简化复杂查询</strong>：如果有一组复杂的查询，你可以将其封装成视图，这样在需要时只需查询视图即可，无需每次都编写复杂的SQL语句。</li><li><strong>数据安全性</strong>：视图可以作为数据访问的过滤层，允许用户只看到他们应该看到的数据，隐藏敏感或不必要的信息。</li><li><strong>逻辑数据独立性</strong>：即使底层表的结构发生变化，只要视图的定义得到相应的更新，应用程序仍然可以通过视图访问数据，无需修改代码。</li><li><strong>数据重用</strong>：视图可以被多次使用，避免了重复编写相同的查询语句。</li></ol><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>假设有两个表：</p><ul><li>员工表 <code>employees(emp_id, first_name, last_name, dept_id)</code></li><li>部门表 <code>departments(dept_id, dept_name)</code></li></ul><h5 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h5><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> EmployeeWithDepartment <span class="keyword">AS</span> <span class="keyword">SELECT</span> ...</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>我们可以创建一个视图来展示每个员工的全名和所在部门的名字，而不直接暴露部门ID或其他可能不相关的字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> EmployeeWithDepartment <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> e.first_name, e.last_name, d.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> departments d <span class="keyword">ON</span> e.dept_id <span class="operator">=</span> d.dept_id;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h5 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h5><p>一旦视图创建完成，就可以像查询普通表一样查询这个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> EmployeeWithDepartment;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h5><p>还可以通过视图来更新基表的数据，但这要求视图的定义满足一定的条件，如下视图不能更新</p><ul><li><strong>包含聚合函数的视图</strong>：如果视图的定义中使用了聚合函数，如 <code>SUM()</code>, <code>AVG()</code>, <code>MAX()</code>, <code>MIN()</code> 或 <code>COUNT()</code>，那么这样的视图通常不能更新，因为聚合操作意味着数据已经被汇总或计算，更新单个记录没有意义。</li><li><strong>包含 <code>DISTINCT</code> 关键字的视图</strong>：如果视图使用了 <code>DISTINCT</code> 来消除重复行，那么这样的视图也不能更新。</li><li><strong>包含 <code>GROUP BY</code> 子句的视图</strong>：使用了 <code>GROUP BY</code> 进行分组的视图同样不能更新，因为分组后的每一行代表了一组数据的汇总信息。</li><li><strong>包含 <code>HAVING</code> 子句的视图</strong>：<code>HAVING</code> 子句用于筛选 <code>GROUP BY</code> 后的结果集，因此也会影响视图的可更新性。</li><li><strong>包含 <code>UNION</code> 或 <code>UNION ALL</code> 的视图</strong>：使用了 <code>UNION</code> 或 <code>UNION ALL</code> 操作的视图不能更新，因为它们结合了多个查询的结果，这使得更新操作变得复杂。</li><li><strong>包含子查询的视图</strong>：如果视图的定义中包含子查询，特别是当子查询涉及到 <code>FROM</code> 子句中的表时，这样的视图通常也是不可更新的。</li><li><strong>包含表达式或常量字段的视图</strong>：如果视图的字段是由表达式或常量生成的，那么这样的视图也不能更新。</li><li><strong>包含函数调用的视图</strong>：如果视图的字段依赖于数据库函数，那么这种视图不能更新。</li><li><strong>包含 <code>JOIN</code> 的视图</strong>：如果视图基于多个表的联接，那么更新可能会影响到多个基表，这可能导致复杂的事务处理，因此这样的视图通常也不允许更新。</li><li><strong>嵌套视图</strong>：如果视图是从另一个不可更新的视图中派生出来的，那么这个视图本身也是不可更新的。</li></ul><p>为了确保视图能够被更新，其定义必须简单，通常只包含简单的 <code>SELECT</code> 语句，从单一表中选择特定的列，且不包含上述任何复杂元素。如果视图需要被更新，那么在创建视图时，应该考虑其定义，确保它符合可更新视图的要求。此外，即使视图定义允许更新，也需要检查基表的约束和事务一致性，以保证数据的完整性。</p><p>例如，如果你想通过视图更新某个员工的部门，可以这样做：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> EmployeeWithDepartment <span class="keyword">SET</span> dept_name <span class="operator">=</span> <span class="string">&#x27;New Department&#x27;</span> <span class="keyword">WHERE</span> first_name <span class="operator">=</span> <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>如上述更新语句违反了视图的定义规则，就不会执行成功。正确的做法通常是直接更新底层的<code>employees</code>表或者设计视图时考虑到更新的需求。</p><h3 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h3><p>【建表sql】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">IF</span><br><span class="line">        <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">        `id` <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> auto_increment COMMENT <span class="string">&#x27;主键&#x27;</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">        `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">        `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">        `is_deleted` TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;是否删除 0：未删除 1：已删除&#x27;</span>,</span><br><span class="line">        `username` <span class="type">VARCHAR</span> ( <span class="number">50</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        `password` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">        `gender` TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;性别 0：男 1：女&#x27;</span>,</span><br><span class="line">        `age` <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(`username`,`password`,`gender`,`age`) <span class="keyword">values</span>(<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">0</span>,<span class="number">18</span>),(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">0</span>,<span class="number">28</span>),(<span class="string">&#x27;word&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="number">1</span>,<span class="number">17</span>);</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line">Records: <span class="number">3</span>  Duplicates: <span class="number">0</span>  Warnings: <span class="number">0</span></span><br><span class="line"><span class="number">123456789101112131415161718</span></span><br></pre></td></tr></table></figure><p>【密码MD5加密操作】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> username <span class="operator">|</span> password <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> admin    <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> hello    <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> word     <span class="operator">|</span> <span class="number">123456</span>   <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------+--------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密id=1的数据的密码</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password<span class="operator">=</span>MD5(password) <span class="keyword">where</span> id<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> username <span class="operator">|</span> password                         <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">18</span>:<span class="number">38</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> admin    <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> hello    <span class="operator">|</span> <span class="number">123456</span>                           <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> word     <span class="operator">|</span> <span class="number">123456</span>                           <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 加密所有数据的密码</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> password<span class="operator">=</span>MD5(password);</span><br><span class="line">Query OK, <span class="number">3</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">3</span>  Changed: <span class="number">3</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> username <span class="operator">|</span> password                         <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> admin    <span class="operator">|</span> <span class="number">14e1</span>b600b1fd579f47433b88e8d85291 <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> hello    <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> word     <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据的时候就执行加密</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(`username`,`password`,`gender`,`age`) <span class="keyword">values</span>(<span class="string">&#x27;md5&#x27;</span>,MD5(<span class="string">&#x27;123456&#x27;</span>),<span class="number">0</span>,<span class="number">18</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> create_time         <span class="operator">|</span> update_time         <span class="operator">|</span> is_deleted <span class="operator">|</span> username <span class="operator">|</span> password                         <span class="operator">|</span> gender <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> admin    <span class="operator">|</span> <span class="number">14e1</span>b600b1fd579f47433b88e8d85291 <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> hello    <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">28</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">16</span>:<span class="number">16</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">01</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> word     <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">1</span> <span class="operator">|</span>   <span class="number">17</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">46</span> <span class="operator">|</span> <span class="number">2023</span><span class="number">-07</span><span class="number">-05</span> <span class="number">10</span>:<span class="number">19</span>:<span class="number">46</span> <span class="operator">|</span>          <span class="number">0</span> <span class="operator">|</span> md5      <span class="operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="operator">|</span>      <span class="number">0</span> <span class="operator">|</span>   <span class="number">18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------------------+---------------------+------------+----------+----------------------------------+--------+------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354</span></span><br></pre></td></tr></table></figure><p>在存储密码这种数据时，一定要进行加密，直接使用<code>MD5加密</code>也还是不安全的，可以被暴力破解，可以使用更加安全的<code>盐值加密</code></p><h2 id="source命令执行-sql文件的sql语句"><a href="#source命令执行-sql文件的sql语句" class="headerlink" title="source命令执行.sql文件的sql语句"></a>source命令执行<code>.sql</code>文件的sql语句</h2><h3 id="使用命令行的原因"><a href="#使用命令行的原因" class="headerlink" title="使用命令行的原因"></a>使用命令行的原因</h3><p>  有小伙伴说，干嘛要命令行导入sql文件，直接用navicat导入sql它不香吗，那确实是，直到小编导入一个很大的sql文件时，总会出现数据丢失，俺也不知道为啥，要是有小伙伴知道可以科普一下。</p><h3 id="命令行使用流程"><a href="#命令行使用流程" class="headerlink" title="命令行使用流程"></a>命令行使用流程</h3><h4 id="1、启动mysql"><a href="#1、启动mysql" class="headerlink" title="1、启动mysql"></a>1、启动mysql</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="2、连接mysql"><a href="#2、连接mysql" class="headerlink" title="2、连接mysql"></a>2、连接mysql</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p12345678</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>  12345678这么复杂的一串数字，不用猜，那肯定是我的mysql密码了</p><h4 id="3、看一下有啥数据库"><a href="#3、看一下有啥数据库" class="headerlink" title="3、看一下有啥数据库"></a>3、看一下有啥数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="4、要sql文件导入到那个数据库，就使用哪个"><a href="#4、要sql文件导入到那个数据库，就使用哪个" class="headerlink" title="4、要sql文件导入到那个数据库，就使用哪个"></a>4、要sql文件导入到那个数据库，就使用哪个</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use databaseName;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>  databaseName是小伙伴要使用的数据库名称</p><h4 id="5、导入sql文件"><a href="#5、导入sql文件" class="headerlink" title="5、导入sql文件"></a>5、导入sql文件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source d:<span class="operator">/</span>Desktop<span class="operator">/</span>database1.sql;</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>  sql文件的路径一定要输入正确，注意斜杆的方向</p><h4 id="6、看我完整操作一遍"><a href="#6、看我完整操作一遍" class="headerlink" title="6、看我完整操作一遍"></a>6、看我完整操作一遍</h4><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d21daeb6b9a4355464e8e6830735370a.png#pic_center" alt="在这里插入图片描述"><br>最后回车，接下来就会嗖嗖嗖执行sql语句，大功告成！</p><h3 id="Docker安装的MySQL容器如何使用Source"><a href="#Docker安装的MySQL容器如何使用Source" class="headerlink" title="Docker安装的MySQL容器如何使用Source"></a>Docker安装的MySQL容器如何使用Source</h3><p>如果MySQL是通过Docker安装的话，直接使用source命令是会报错的，操作过程如下：</p><p>进入容器控制台</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it [容器名] bash</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p[Mysql密码]</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>使用指定的数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use [数据库名称];</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>看我操作一遍：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/060394ce4491143b8557a16c4997a558.png#pic_center" alt="在这里插入图片描述"><br>为什么会报错呢？原因是容器里面并没有这个文件，这个文件是在主机上面的。因为需要先将主机上面的文件拷贝到容器里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> [主机的对应文件地址] [容器名]:/var/local</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ad94ff9b4e26a6a301597225a76b625d.png#pic_center" alt="在这里插入图片描述"><br>拷贝成功之后，再执行source命令即可，注意路径要改成容器下的路径</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e10d0ae70fa2a05a597009a34f90b9fd.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx备忘清单</title>
      <link href="/2024/11/24/NGINX%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/NGINX%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx备忘清单"><a href="#Nginx备忘清单" class="headerlink" title="Nginx备忘清单"></a>Nginx备忘清单</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status nginx <span class="comment"># nginx当前状态</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl reload nginx <span class="comment"># 重新加载 nginx</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart nginx <span class="comment"># 重启nginx</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> nginx -t   <span class="comment"># 检查语法</span></span><br><span class="line">nginx           <span class="comment"># 启动</span></span><br><span class="line">nginx -s reload <span class="comment"># 重启</span></span><br><span class="line">nginx -s stop   <span class="comment"># 关闭进程</span></span><br><span class="line">nginx -s quit   <span class="comment"># 平滑关闭nginx</span></span><br><span class="line">nginx -V        <span class="comment"># 查看nginx的安装状态，</span></span><br></pre></td></tr></table></figure><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx</span><br></pre></td></tr></table></figure><h3 id="简单代理"><a href="#简单代理" class="headerlink" title="简单代理"></a>简单代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">  <span class="attribute">proxy_redirect</span>      <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>    Host <span class="variable">$host</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><div class="table-container"><table><thead><tr><th><code>$args</code></th><th>这个变量等于请求行中的参数，同 <code>$query_string</code></th></tr></thead><tbody><tr><td><code>$remote_port</code></td><td>客户端的端口</td></tr><tr><td><code>$content_length</code></td><td>请求头中的 <code>Content-length</code> 字段</td></tr><tr><td><code>$remote_user</code></td><td>已经经过 <code>Auth Basic Module</code> 验证的用户名</td></tr><tr><td><code>$content_type</code></td><td>请求头中的 <code>Content-Type</code> 字段</td></tr><tr><td><code>$request_filename</code></td><td>当前请求的文件路径，由 <code>root</code> 或alias指令与URI请求生成</td></tr><tr><td><code>$document_root</code></td><td>当前请求在 <code>root</code> 指令中指定的值</td></tr><tr><td><code>$scheme</code></td><td>HTTP方法（如http，https）</td></tr><tr><td><code>$host</code></td><td>请求主机头字段，否则为服务器名称</td></tr><tr><td><code>$hostname</code></td><td>主机名</td></tr><tr><td><code>$http_user_agent</code></td><td>客户端<code>agent</code>信息</td></tr><tr><td><code>$http_cookie</code></td><td>客户端<code>cookie</code>信息</td></tr><tr><td><code>$server_protocol</code></td><td>请求使用的协议，通常是<code>HTTP/1.0</code>或<code>HTTP/1.1</code></td></tr><tr><td><code>$server_addr</code></td><td>服务器地址，在完成一次系统调用后可以确定这个值</td></tr><tr><td><code>$server_name</code></td><td>服务器名称</td></tr><tr><td><code>$server_port</code></td><td>请求到达服务器的端口号</td></tr><tr><td><code>$limit_rate</code></td><td>这个变量可以限制连接速率</td></tr><tr><td><code>$request_method</code></td><td>客户端请求的动作，如 GET/POST</td></tr><tr><td><code>$request_uri</code></td><td>包含请求参数的原始URI，不包含主机名，如：<code>/foo/bar.php?arg=baz</code></td></tr><tr><td><code>$remote_addr</code></td><td>客户端的IP地址</td></tr><tr><td><code>$uri</code></td><td>不带请求参数的当前URI，<code>$uri</code>不包含主机名，如 <code>/foo/bar.html</code></td></tr><tr><td><code>$document_uri</code></td><td>与 <code>$uri</code> 相同</td></tr><tr><td><code>$nginx_version</code></td><td><code>nginx</code> 版本</td></tr></tbody></table></div><p>更多全局变量<a href="https://nginx.org/en/docs/varindex.html">查看官方文档</a></p><h3 id="监听端口"><a href="#监听端口" class="headerlink" title="监听端口"></a>监听端口</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;      <span class="comment"># 标准 HTTP 协议</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl; <span class="comment"># 标准 HTTPS 协议</span></span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2; <span class="comment"># 对于 http2</span></span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span>; <span class="comment"># 使用 IPv6 在 80 上收听</span></span><br><span class="line">  <span class="comment"># 仅收听使用 IPv6</span></span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">80</span> ipv6only=<span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="域名-server-name"><a href="#域名-server-name" class="headerlink" title="域名 (server_name)"></a>域名 (server_name)</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment"># 监听 example.com</span></span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  <span class="comment"># 监听多个域</span></span><br><span class="line">  <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">  <span class="comment"># 监听所有子域</span></span><br><span class="line">  <span class="attribute">server_name</span> <span class="regexp">*.example.com</span>;</span><br><span class="line">  <span class="comment"># 监听所有顶级域</span></span><br><span class="line">  <span class="attribute">server_name</span> <span class="regexp">example.*</span>;</span><br><span class="line">  <span class="comment"># 监听未指定的主机名（监听 IP 地址本身）</span></span><br><span class="line">  <span class="attribute">server_name</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡-简单实例"><a href="#负载均衡-简单实例" class="headerlink" title="负载均衡(简单实例)"></a>负载均衡(简单实例)</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> node_js &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">0.0.0.0:3000</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">0.0.0.0:4000</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.155.142.421</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡-权重"><a href="#负载均衡-权重" class="headerlink" title="负载均衡(权重)"></a>负载均衡(权重)</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8080</span> weight=<span class="number">9</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="upstream-ip-hash"><a href="#upstream-ip-hash" class="headerlink" title="upstream ip_hash"></a>upstream ip_hash</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> test &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决负载均衡 <code>session</code> 的问题</p><h3 id="upstream-fair"><a href="#upstream-fair" class="headerlink" title="upstream fair"></a>upstream fair</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">  fair;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应时间短的优先分配</p><h3 id="server-可选参数"><a href="#server-可选参数" class="headerlink" title="server 可选参数"></a>server 可选参数</h3><div class="table-container"><table><thead><tr><th><code>weight</code></th><th>访问权重数值越高，收到请求越多</th></tr></thead><tbody><tr><td><code>fail_timeout</code></td><td>指定的时间内必须提供响应</td></tr><tr><td><code>max_fails</code></td><td>尝试失败服务器连接的最大次数</td></tr><tr><td><code>down</code></td><td>标记一个服务器不再接受任何请求</td></tr><tr><td><code>backup</code></td><td>有服务器宕机，标记的机器接收请求</td></tr></tbody></table></div><p>配置示例</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">9</span>; <span class="comment"># 权重</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">1</span>; <span class="comment"># 权重</span></span><br><span class="line">  <span class="comment"># 失败超时时间</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> max_fails=<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="upstream-url-hash"><a href="#upstream-url-hash" class="headerlink" title="upstream url_hash"></a>upstream url_hash</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">  <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">  <span class="attribute">hash_method</span> crc32;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按访问url的hash结果来分配请求</p><h3 id="upstream-keepalive"><a href="#upstream-keepalive" class="headerlink" title="upstream keepalive"></a>upstream keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> memcached_backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:11211</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.0.0.2:11211</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>激活缓存以连接到上游服务器</p><h3 id="子文件夹中的代理"><a href="#子文件夹中的代理" class="headerlink" title="子文件夹中的代理"></a>子文件夹中的代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /folder/ &#123; <span class="comment"># / 很重要！</span></span><br><span class="line">  <span class="attribute">proxy_pass</span> http://127.0.0.1:3000/; <span class="comment"># / 很重要！</span></span><br><span class="line">  <span class="attribute">proxy_redirect</span>      <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>    Host            <span class="variable">$host</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>    X-Real-IP       <span class="variable">$remote_addr</span>;</span><br><span class="line">  <span class="attribute">proxy_set_header</span>    X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://0.0.0.0:3000;</span><br><span class="line">    <span class="comment"># 其中 0.0.0.0:3000 是绑定在 </span></span><br><span class="line">    <span class="comment"># 0.0.0.0端口3000 列表上的 Node.js 服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基础-upstream"><a href="#基础-upstream" class="headerlink" title="基础 + (upstream)"></a>基础 + (upstream)</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> node_js &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">0.0.0.0:3000</span>;</span><br><span class="line">  <span class="comment"># 其中 0.0.0.0:3000 是绑定在 </span></span><br><span class="line">  <span class="comment"># 0.0.0.0端口3000 列表上的 Node.js 服务器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://node_js;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="升级连接（适用于支持-WebSockets-的应用程序）"><a href="#升级连接（适用于支持-WebSockets-的应用程序）" class="headerlink" title="升级连接（适用于支持 WebSockets 的应用程序）"></a>升级连接（适用于支持 WebSockets 的应用程序）</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> node_js &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">0.0.0.0:3000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  </span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://node_js;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>适用于 Node.js、Streamlit、Jupyter 等</p><h3 id="静态资源（传统-Web-服务器）"><a href="#静态资源（传统-Web-服务器）" class="headerlink" title="静态资源（传统 Web 服务器）"></a>静态资源（传统 Web 服务器）</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  <span class="attribute">root</span> /path/to/website;</span><br><span class="line">  <span class="comment"># root /www/data/ 示例，如果里面没有&#x27;root&#x27;，它将寻找 /www/data/index.html</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">location</span> /images/ &#123; <span class="comment"># 如果里面没有“root”，它将寻找 /www/data/images/index.html</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">location</span> /videos/ &#123; <span class="comment"># 由于里面有“root”，它会寻找 /www/media/videos/index.html</span></span><br><span class="line">      <span class="attribute">root</span> /www/media;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTPS-协议"><a href="#HTTPS-协议" class="headerlink" title="HTTPS 协议"></a>HTTPS 协议</h3><p>大多数 SSL 选项取决于您的应用程序做什么或需要什么</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_certificate</span> /path/to/cert.pem;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span> /path/to/privkey.pem;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">  <span class="attribute">ssl_trusted_certificate</span> /path/to/fullchain.pem;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">50m</span>;</span><br><span class="line">  <span class="attribute">add_header</span> Strict-Transport-Security max-age=<span class="number">15768000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可以使用 Let’s Encrypt 轻松保护您的网站/应用程序。去 <a href="https://certbot.eff.org/lets-encrypt/ubuntuxenial-nginx.html">lets-encrypt</a> 获取更多信息</p><h3 id="重定向-301永久"><a href="#重定向-301永久" class="headerlink" title="重定向(301永久)"></a>重定向(301永久)</h3><p>将 <a href="http://www.example.com/">www.example.com</a> 重定向到 example.com</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> www.example.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> http://example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 http 重定向到 https</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> example.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> https://example.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向-302临时"><a href="#重定向-302临时" class="headerlink" title="重定向(302临时)"></a>重定向(302临时)</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> yourdomain.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">302</span> http://otherdomain.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="永久重定向到-HTTPS-安全域"><a href="#永久重定向到-HTTPS-安全域" class="headerlink" title="永久重定向到 HTTPS 安全域"></a>永久重定向到 HTTPS 安全域</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> yourdomain.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向参数"><a href="#重定向参数" class="headerlink" title="重定向参数"></a>重定向参数</h3><div class="table-container"><table><thead><tr><th><code>permanent</code></th><th>永久性重定向。日志中的状态码为 <code>301</code></th></tr></thead><tbody><tr><td><code>redirect</code></td><td>临时重定向。日志中的状态码为 <code>302</code></td></tr></tbody></table></div><h3 id="HTTP-请求端真实的IP"><a href="#HTTP-请求端真实的IP" class="headerlink" title="HTTP 请求端真实的IP"></a>HTTP 请求端真实的IP</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="websocket-的代理-keepalive"><a href="#websocket-的代理-keepalive" class="headerlink" title="websocket 的代理 keepalive"></a>websocket 的代理 keepalive</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Upstreams</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span>;</span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># HTTP Server</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> your_hostname.com;</span><br><span class="line">  <span class="attribute">error_log</span> /var/log/nginx/rocketchat.access.log;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">      <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forward-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Forward-Proto http;</span><br><span class="line">      <span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">      <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Apache-的反向代理"><a href="#Apache-的反向代理" class="headerlink" title="Apache 的反向代理"></a>Apache 的反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> domain.tld;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">access_log</span> /log/domain.tld.access.log;</span><br><span class="line">  <span class="attribute">error_log</span> /log/domain.tld.<span class="literal">error</span>.log;</span><br><span class="line">  <span class="attribute">root</span> /var/www/domain.tld/htdocs;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 将请求传递给 Apache 后端</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 使用后备处理静态文件</span></span><br><span class="line">  <span class="section">location</span> <span class="regexp">~* \.(ogg|ogv|svg|svgz|eot|otf|woff|woff2|ttf|m4a|mp4|ttf|rss|atom|jpe?g|gif|cur|heic|png|tiff|ico|zip|webm|mp3|aac|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf|swf|webp)$</span> &#123;</span><br><span class="line">      <span class="attribute">add_header</span> <span class="string">&quot;Access-Control-Allow-Origin&quot;</span> <span class="string">&quot;*&quot;</span>;</span><br><span class="line">      <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">      <span class="attribute">expires</span> max;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@fallback</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 如果找不到文件，则回退以将请求传递给 Apache</span></span><br><span class="line">  <span class="section">location</span> <span class="variable">@fallback</span> &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gitlab-的反向代理"><a href="#Gitlab-的反向代理" class="headerlink" title="Gitlab 的反向代理"></a>Gitlab 的反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment">#侦听的80端口</span></span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://localhost:3000;</span><br><span class="line">    <span class="comment"># 以下是一些反向代理的配置可删除</span></span><br><span class="line">    <span class="attribute">proxy_redirect</span>             <span class="literal">off</span>;</span><br><span class="line">    <span class="comment"># 后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span>           Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">client_max_body_size</span>       <span class="number">10m</span>;  <span class="comment"># 允许客户端请求的最大单文件字节数</span></span><br><span class="line">    <span class="attribute">client_body_buffer_size</span>    <span class="number">128k</span>; <span class="comment"># 缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span>      <span class="number">300</span>;  <span class="comment"># nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">    <span class="attribute">proxy_send_timeout</span>         <span class="number">300</span>;  <span class="comment"># 后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span>         <span class="number">300</span>;  <span class="comment"># 连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">    <span class="comment"># 设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">    <span class="attribute">proxy_buffer_size</span>          <span class="number">4k</span>;</span><br><span class="line">    <span class="comment"># proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">    <span class="attribute">proxy_buffers</span>              <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="comment"># 高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span>    <span class="number">64k</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向整个网站"><a href="#重定向整个网站" class="headerlink" title="重定向整个网站"></a>重定向整个网站</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">server_name</span> old-site.com;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://new-site.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向单页"><a href="#重定向单页" class="headerlink" title="重定向单页"></a>重定向单页</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="section">location</span> = /oldpage.html &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> http://example.org/newpage.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向整个子路径"><a href="#重定向整个子路径" class="headerlink" title="重定向整个子路径"></a>重定向整个子路径</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /old-site &#123;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/old-site/(.*)</span> http://example.org/new-site/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> example &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  <span class="comment"># upstream的负载均衡，weight是权重，可以根据机器配置定义权重。</span></span><br><span class="line">  <span class="comment"># weigth参数表示权值，权值越高被分配到的几率越大。</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">192.168.122.11:8081</span> ;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:82</span> weight=<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:83</span> weight=<span class="number">3</span> down;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:84</span> weight=<span class="number">3</span>; max_fails=3  fail_timeout=20s;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:85</span> weight=<span class="number">4</span>;;</span><br><span class="line">  <span class="attribute">keepalive</span> <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment">#侦听的80端口</span></span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  git.example.cn;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 在这里设置一个代理，和 upstream 的名字一样</span></span><br><span class="line">    <span class="attribute">proxy_pass</span>   http://example;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内容缓存"><a href="#内容缓存" class="headerlink" title="内容缓存"></a>内容缓存</h3><p>允许浏览器基本上永久地缓存静态内容。 Nginx 将为您设置 Expires 和 Cache-Control 头信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span> /data;</span><br><span class="line">    <span class="attribute">expires</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要求浏览器永远不会缓存响应（例如用于跟踪请求），请使用 <code>-1</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> = /empty.gif &#123;</span><br><span class="line">    empty_gif;</span><br><span class="line">    <span class="attribute">expires</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET,POST,HEAD&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host  <span class="variable">$http_host</span>;    </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向-URI-来解决跨域问题"><a href="#重定向-URI-来解决跨域问题" class="headerlink" title="重定向 URI 来解决跨域问题"></a>重定向 URI 来解决跨域问题</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> test &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:8080</span>;</span><br><span class="line">  <span class="attribute">server</span> localhost:<span class="number">8081</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> api.xxx.com;</span><br><span class="line">  <span class="section">location</span> / &#123; </span><br><span class="line">    <span class="attribute">root</span>  html;                   <span class="comment"># 去请求../html文件夹里的文件</span></span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;  <span class="comment"># 首页响应地址</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 用于拦截请求，匹配任何以 /api/开头的地址，</span></span><br><span class="line">  <span class="comment"># 匹配符合以后，停止往下搜索正则。</span></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~/api/</span>&#123; </span><br><span class="line">    <span class="comment"># 代表重写拦截进来的请求，并且只能对域名后边的除去传递的参数外的字符串起作用</span></span><br><span class="line">    <span class="comment"># 例如www.a.com/api/msg?meth=1&amp;par=2重写，只对/api/msg重写。</span></span><br><span class="line">    <span class="comment"># rewrite后面的参数是一个简单的正则 ^/api/(.*)$，</span></span><br><span class="line">    <span class="comment"># $1代表正则中的第一个()，$2代表第二个()的值，以此类推。</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/api/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 把请求代理到其他主机 </span></span><br><span class="line">    <span class="comment"># 其中 http://www.b.com/ 写法和 http://www.b.com写法的区别如下</span></span><br><span class="line">    <span class="comment"># 如果你的请求地址是他 http://server/html/test.jsp</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com/ 后面有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/html/test.jsp 访问</span></span><br><span class="line">    <span class="comment"># 配置一： http://www.b.com 后面没有有“/” </span></span><br><span class="line">    <span class="comment">#         将反向代理成 http://www.b.com/test.jsp 访问</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://test;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果 proxy_pass  URL 是 http://a.xx.com/platform/ 这种情况</span></span><br><span class="line">    <span class="comment"># proxy_cookie_path应该设置成 /platform/ / (注意两个斜杠之间有空格)。</span></span><br><span class="line">    <span class="attribute">proxy_cookie_path</span> /platfrom/ /;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置 Cookie 头通过</span></span><br><span class="line">    <span class="attribute">proxy_pass_header</span> Set-Cookie;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳转到带-www-的域上面"><a href="#跳转到带-www-的域上面" class="headerlink" title="跳转到带 www 的域上面"></a>跳转到带 www 的域上面</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="comment"># 配置正常的带www的域名</span></span><br><span class="line">  <span class="attribute">server_name</span> www.wangchujiang.com;</span><br><span class="line">  <span class="attribute">root</span> /home/www/wabg/download;</span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">      <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="comment"># 将不带 www 的 wangchujiang.com </span></span><br><span class="line">  <span class="comment"># 永久性重定向到 https://www.wangchujiang.com</span></span><br><span class="line">  <span class="attribute">server_name</span> wangchujiang.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://www.wangchujiang.com<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理转发"><a href="#代理转发" class="headerlink" title="代理转发"></a>代理转发</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> server-api &#123;</span><br><span class="line">  <span class="comment"># api 代理服务地址</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:3110</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="section">upstream</span> server-resource &#123;</span><br><span class="line">  <span class="comment"># 静态资源 代理服务地址</span></span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:3120</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">3111</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  localhost; <span class="comment"># 这里指定域名</span></span><br><span class="line">  <span class="attribute">root</span> /home/www/server-statics;</span><br><span class="line">  <span class="comment"># 匹配 api 路由的反向代理到API服务</span></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~/api/</span> &#123;</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 假设这里验证码也在API服务中</span></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~/captcha</span> &#123;</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://server-api;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 假设你的图片资源全部在另外一个服务上面</span></span><br><span class="line">  <span class="section">location</span><span class="regexp"> ^~/img/</span> &#123;</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://server-resource;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 路由在前端，后端没有真实路由，</span></span><br><span class="line">  <span class="comment"># 路由不存在的 404 状态的页面返回 /index.html</span></span><br><span class="line">  <span class="comment"># 使用场景，用在 React/Vue项目没有真实路由</span></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html =<span class="number">404</span>;</span><br><span class="line">    <span class="comment">#                      空格很重要 ^</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="屏蔽-IP"><a href="#屏蔽-IP" class="headerlink" title="屏蔽 IP"></a>屏蔽 IP</h3><p>可以放到 <code>http</code>, <code>server</code>, <code>location</code>, <code>limit_except</code> 语句块</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> blockip.conf;</span><br></pre></td></tr></table></figure><p>在 <code>blockip.conf</code> 里面输入内容，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deny</span> <span class="number">165.91.122.67</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">deny</span> IP;            <span class="comment"># 屏蔽单个 ip 访问</span></span><br><span class="line"><span class="attribute">allow</span> IP;           <span class="comment"># 允许单个 ip 访问</span></span><br><span class="line"><span class="attribute">deny</span> all;           <span class="comment"># 屏蔽所有 ip 访问</span></span><br><span class="line"><span class="attribute">allow</span> all;          <span class="comment"># 允许所有 ip 访问</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.0.0.0</span>/<span class="number">8</span>;   <span class="comment"># 屏蔽整个段即从 123.0.0.1 到 123.255.255.254 访问的命令</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">124.45.0.0</span>/<span class="number">16</span>; <span class="comment"># 屏蔽IP段即从 123.45.0.1 到 123.45.255.254 访问的命令</span></span><br><span class="line"><span class="attribute">deny</span> <span class="number">123.45.6.0</span>/<span class="number">24</span>; <span class="comment"># 屏蔽IP段即从 123.45.6.1 到 123.45.6.254 访问的命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想实现这样的应用，除了几个IP外，其他全部拒绝</span></span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.1</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">1.1.1.2</span>;</span><br><span class="line"><span class="attribute">deny</span> all; </span><br></pre></td></tr></table></figure><h3 id="强制将-http-重定向到-https"><a href="#强制将-http-重定向到-https" class="headerlink" title="强制将 http 重定向到 https"></a>强制将 http 重定向到 https</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span>  example.com;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^</span> https://<span class="variable">$http_host</span><span class="variable">$request_uri</span>? <span class="literal">permanent</span>; <span class="comment"># 强制将 http 重定向到 https</span></span><br><span class="line">  <span class="comment"># 在错误页面和“服务器”响应头字段中启用或禁用发射nginx版本。 防止黑客利用版本漏洞攻击</span></span><br><span class="line">  <span class="attribute">server_tokens</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理转发连接替换"><a href="#代理转发连接替换" class="headerlink" title="代理转发连接替换"></a>代理转发连接替换</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span><span class="regexp"> ^~/api/upload</span> &#123;</span><br><span class="line">  <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> /wfs/v1/upload <span class="literal">break</span>;</span><br><span class="line">  <span class="attribute">proxy_pass</span> http://wfs-api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将地址 <code>/api/upload</code> 替换为 <code>/wfs/v1/upload</code></p><h3 id="爬虫-User-Agent-过滤"><a href="#爬虫-User-Agent-过滤" class="headerlink" title="爬虫 User-Agent 过滤"></a>爬虫 User-Agent 过滤</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* &quot;python|curl|java|wget|httpclient|okhttp&quot;)</span> &#123;</span><br><span class="line">      <span class="attribute">return</span> <span class="number">503</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment"># 正常处理</span></span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="图片防盗链"><a href="#图片防盗链" class="headerlink" title="图片防盗链"></a>图片防盗链</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;</span><br><span class="line">  <span class="attribute">root</span> html;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.nginx.com</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/</span> www.nginx.cn;</span><br><span class="line">    <span class="comment"># return 404;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚拟目录配置"><a href="#虚拟目录配置" class="headerlink" title="虚拟目录配置"></a>虚拟目录配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /img/ &#123;</span><br><span class="line">  <span class="attribute">alias</span> /var/www/image/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问 /img/ 目录里面的文件时，</span></span><br><span class="line"><span class="comment"># 会自动去 /var/www/image/ 目录找文件</span></span><br><span class="line"><span class="section">location</span> /img/ &#123;</span><br><span class="line">  <span class="attribute">root</span> /var/www/image;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 访问 /img/ 目录下的文件时，</span></span><br><span class="line"><span class="comment"># 会去 /var/www/image/img/ 目录下找文件</span></span><br></pre></td></tr></table></figure><h3 id="屏蔽文件目录"><a href="#屏蔽文件目录" class="headerlink" title="屏蔽文件目录"></a>屏蔽文件目录</h3><p>通用备份和归档文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* &quot;\.(old|orig|original|php#|php~|php_bak|save|swo|aspx?|tpl|sh|bash|bak?|cfg|cgi|dll|exe|git|hg|ini|jsp|log|mdb|out|sql|svn|swp|tar|rdf)$&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝访问 <code>.git</code> 和 <code>.svn</code> 目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ (.git|.svn)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝访问隐藏文件和目录</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ /\.(?!well-known\/)</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防盗图配置"><a href="#防盗图配置" class="headerlink" title="防盗图配置"></a>防盗图配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ \/public\/(css|js|img)\/.*\.(js|css|gif|jpg|jpeg|png|bmp|swf)</span> &#123;</span><br><span class="line">  <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> <span class="regexp">*.jslite.io</span>;</span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;</span><br><span class="line">      <span class="attribute">rewrite</span><span class="regexp"> ^/</span>  http://wangchujiang.com/piratesp.png;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="阻止常见攻击"><a href="#阻止常见攻击" class="headerlink" title="阻止常见攻击"></a>阻止常见攻击</h3><h4 id="base64编码的网址"><a href="#base64编码的网址" class="headerlink" title="base64编码的网址"></a>base64编码的网址</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* &quot;(base64_encode)(.*)(\()&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="javascript-eval-url"><a href="#javascript-eval-url" class="headerlink" title="javascript eval() url"></a>javascript eval() url</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~* &quot;(eval\()&quot;</span> &#123;</span><br><span class="line">    <span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gzip-配置"><a href="#Gzip-配置" class="headerlink" title="Gzip 配置"></a>Gzip 配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">gzip</span>  <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">256</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span> any;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_types</span></span><br><span class="line">    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</span><br><span class="line">    text/javascript application/javascript application/x-javascript</span><br><span class="line">    text/x-json application/json application/x-web-app-manifest+json</span><br><span class="line">    text/css text/plain text/x-component</span><br><span class="line">    font/opentype application/x-font-ttf application/vnd.ms-fontobject</span><br><span class="line">    image/x-icon;</span><br><span class="line"><span class="attribute">gzip_disable</span>  <span class="string">&quot;msie6&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="使网站不可索引"><a href="#使网站不可索引" class="headerlink" title="使网站不可索引"></a>使网站不可索引</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> X-Robots-Tag <span class="string">&quot;noindex&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">location</span> = /robots.txt &#123;</span><br><span class="line">  <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;User-agent: *\nDisallow: /\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础命令详解</title>
      <link href="/2024/11/24/Redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E9%9B%86%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/11/24/Redis%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E9%9B%86%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis基础命令详解"><a href="#Redis基础命令详解" class="headerlink" title="Redis基础命令详解"></a>Redis基础命令详解</h1><p>[TOC]</p><h3 id="【Redis01】Redis常用命令"><a href="#【Redis01】Redis常用命令" class="headerlink" title="【Redis01】Redis常用命令"></a>【Redis01】Redis常用命令</h3><h4 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h4><h5 id="1、ping（心跳命令）"><a href="#1、ping（心跳命令）" class="headerlink" title="1、ping（心跳命令）"></a>1、ping（心跳命令）</h5><blockquote><p>键入<a href="https://so.csdn.net/so/search?q=ping命令&amp;spm=1001.2101.3001.7020">ping命令</a>，若看到PONG响应，则说明客户端与Redis的连接时正常的。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/32dcc443c218f32758e4f729c47b8016.png" alt="image-20230408211628706"></p><h5 id="2、get-set（读写键值命令）"><a href="#2、get-set（读写键值命令）" class="headerlink" title="2、get/set（读写键值命令）"></a>2、get/set（读写键值命令）</h5><blockquote><p><code>set key value</code> 会将指定 <code>key-value</code>写入到DB。<code>get key</code>则会读取指定key的value值。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/59bac73cffda3d40ef5a7c8584a34049.png" alt="image-20230408211730487"></p><h5 id="3、select（切换数据库）"><a href="#3、select（切换数据库）" class="headerlink" title="3、select（切换数据库）"></a>3、select（切换数据库）</h5><blockquote><p>redis默认有 16 个数据库。这个在 Redis Desktop Manager（RDM）图形客户端中可以直 观地看到。默认使用的是 0 号 DB，可以通过 select db 索引来切换 DB。如图，切换到1号DB：</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/10dbc21656582a300780f7cb8eafc5dc.png" alt="image-20230408211802887"></p><h5 id="4、dbsize（查看key数量）"><a href="#4、dbsize（查看key数量）" class="headerlink" title="4、dbsize（查看key数量）"></a>4、dbsize（查看key数量）</h5><blockquote><p>dbsize 命令可以查看当前数据库中 key 的数量。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d3624f167254ce7fced4ba8a1ddf8faf.png" alt="image-20230408211945404"></p><h5 id="5、flushdb（删除当前库中所有数据）"><a href="#5、flushdb（删除当前库中所有数据）" class="headerlink" title="5、flushdb（删除当前库中所有数据）"></a>5、flushdb（删除当前库中所有数据）</h5><blockquote><p>清楚当前DB中的所有数据，不影响其他DB。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/83c23c160d5815a8e1ebf49a92723bce.png" alt="image-20230408212221534"></p><h5 id="6、flushall（删除所有DB中的数据）"><a href="#6、flushall（删除所有DB中的数据）" class="headerlink" title="6、flushall（删除所有DB中的数据）"></a>6、flushall（删除所有DB中的数据）</h5><p><img src="https://i-blog.csdnimg.cn/blog_migrate/6662b09e86dd67cb38f542aee6472256.png" alt="image-20230408212320609"></p><h4 id="二、Key-相关操作命令"><a href="#二、Key-相关操作命令" class="headerlink" title="二、Key 相关操作命令"></a>二、Key 相关操作命令</h4><h5 id="1、keys"><a href="#1、keys" class="headerlink" title="1、keys"></a>1、keys</h5><blockquote><p>格式：KEYS pattern</p><p>功能：查找所有符合给定模式 pattern 的 key，pattern 为正则表达式。</p><p>说明：KEYS 的速度非常快，但在一个大的数据库中使用它可能会阻塞当前服务器的服务。所以生产环境中一般不使用该命令，而使用 scan 命令代替。</p></blockquote><p>如图：查看所有模式与查看所有开头结尾为‘a’的模式</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9f9f2957d788316cd87d3574db02431b.png" alt="image-20230408213343952"></p><h5 id="2、exists"><a href="#2、exists" class="headerlink" title="2、exists"></a>2、exists</h5><blockquote><p>格式：EXISTS key</p><p>功能：检查给定 key 是否存在。</p><p>说明：若 key 存在，返回 1 ，否则返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3d94c713ffdcb85c2ccdeb6cf019460e.png" alt="image-20230408213455338"></p><h5 id="3、del"><a href="#3、del" class="headerlink" title="3、del"></a>3、del</h5><blockquote><p>格式：DEL key [key …]</p><p>功能：删除给定的一个或多个 key 。不存在的 key 会被忽略。</p><p>说明：返回被删除 key 的数量。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/38216be619a3b53d96d94090f5344651.png" alt="image-20230408213541854"></p><h5 id="4、rename"><a href="#4、rename" class="headerlink" title="4、rename"></a>4、rename</h5><blockquote><p>l 格式：RENAME key newkey</p><p>l 功能：将 key 改名为 newkey。</p><p>l 说明：当 key 和 newkey 相同，或者 key 不存在时，返回一个错误。当 newkey 已经存在时， RENAME 命令将覆盖旧值。改名成功时提示 OK ，失败时候返回一个错误。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/24000662100b495ab7080a64b0cd7011.png" alt="image-20230408213806672"></p><h5 id="5、move"><a href="#5、move" class="headerlink" title="5、move"></a>5、move</h5><blockquote><p>l 格式：MOVE key db</p><p>l 功能：将当前数据库的 key 移动到给定的数据库 db 当中。</p><p>l 说明：如果当前数据库(源数据库)和给定数据库(目标数据库)有相同名字的给定 key ，或者 key 不存在于当前数据库，那么 MOVE 没有任何效果。移动成功返回 1 ，失败则返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/65f8b441914f44583214e5160caee0f6.png" alt="image-20230408213945562"></p><h5 id="6、type"><a href="#6、type" class="headerlink" title="6、type"></a>6、type</h5><blockquote><p>l 格式：TYPE key</p><p>l 功能：返回 key 所储存的值的类型。</p><p>l 说明：返回值有以下六种</p><p> none (key 不存在)</p><p> <a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">string</a> (字符串)</p><p> list (列表)</p><p> set (集合)</p><p> zset (有序集)</p><p> hash (哈希表)</p></blockquote><h5 id="7、expire-pexpire"><a href="#7、expire-pexpire" class="headerlink" title="7、expire/pexpire"></a>7、expire/pexpire</h5><blockquote><p>l 格式：EXPIRE key seconds</p><p>l 功能：为给定 key 设置生存时间。当 key 过期时(生存时间为 0)，它会被自动删除。 expire 的时间单位为秒，pexpire 的时间单位为毫秒。在 Redis 中，带有生存时间的 key被称为“易失”(volatile)。</p><p>l 说明：生存时间设置成功返回 1。若 key 不存在时返回 0 。rename 操作不会改变 key的生存时间。</p></blockquote><h5 id="8、ttl-pttl"><a href="#8、ttl-pttl" class="headerlink" title="8、ttl/pttl"></a>8、ttl/pttl</h5><blockquote><p>格式：TTL key</p><p>功能：TTL, time to live，返回给定 key 的剩余生存时间。</p><p>说明：其返回值存在三种可能：</p><p> 1/当 key 不存在时，返回 -2 。</p><p> 2/当 key 存在但没有设置剩余生存时间时，返回 -1 。</p><p> 3/否则，返回 key 的剩余生存时间。ttl 命令返回的时间单位为秒，而 pttl 命令返回的时间单位为毫秒。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7238c5d4bdc3f7c447d65f90d7edcddd.png" alt="image-20230408214503144"></p><h5 id="9、persist"><a href="#9、persist" class="headerlink" title="9、persist"></a>9、persist</h5><blockquote><p>l 格式：PERSIST key</p><p>l 功能：去除给定 key 的生存时间，将这个 key 从“易失的”转换成“持久的”。</p><p>l 说明：当生存时间移除成功时，返回 1；若 key 不存在或 key 没有设置生存时间，则返回 0。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/88a26a9d3f0e71088f0ddf566a3d56d6.png" alt="image-20230408214631492"></p><h5 id="10、randomkey"><a href="#10、randomkey" class="headerlink" title="10、randomkey"></a>10、randomkey</h5><blockquote><p>l 格式：RANDOMKEY</p><p>l 功能：从当前数据库中随机返回(不删除)一个 key。</p><p>l 说明：当数据库不为空时，返回一个 key。当数据库为空时，返回 nil。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/79070ea76422bd1758c4100108fcb613.png" alt="image-20230408214740825"></p><h5 id="11、scan"><a href="#11、scan" class="headerlink" title="11、scan"></a>11、scan</h5><ul><li><p>格式：SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]</p></li><li><p>功能：用于迭代数据库中的数据库键。其各个选项的意义为：</p><ul><li>cursor：本次迭代开始的游标。</li><li>pattern ：本次迭代要匹配的 key 的模式。</li><li>count ：本次迭代要从数据集里返回多少元素，默认值为 10 。</li><li>type：本次迭代要返回的value 的类型，默认为所有类型。</li></ul><blockquote><p>SCAN 命令是一个基于游标 cursor 的迭代器：SCAN 命令每次被调用之后，都会向用户返回返回一个包含两个元素的数组， 第一个元素是用于进行下一次迭代的新游标，而第二个元素则是一个数组， 这个数组中包含了所有被迭代的元素。用户在下次迭代时需要使用这个新游标作为 SCAN 命令的游标参数，以此来延续之前的迭代过程。当 SCAN 命令的游标参数被设置为 0 时，服务器将开始一次新的迭代。如果新游标返回 0表示迭代已结束。</p></blockquote></li><li><p>说明：使用间断的、负数、超出范围或者其他非正常的游标来执行增量式迭代不会造成服务器崩溃。</p><blockquote><p>当数据量很大时，count 的数量的指定可能会不起作用，Redis 会自动调整每次的遍历数目。由于 scan 命令每次执行都只会返回少量元素，所以该命令可以用于生产环境，而不会出现像 KEYS 命令带来的服务器阻塞问题。</p><p>增量式迭代命令所使用的算法只保证在数据集的大小有界的情况下迭代才会停止，换句话说，如果被迭代数据集的大小不断地增长的话，增量式迭代命令可能永远也无法完成一次完整迭代。即当一个数据集不断地变大时，想要访问这个数据集中的所有元素就需要做越来越多的工作， 能否结束一个迭代取决于用户执行迭代的速度是否比数据集增长的速度更快。</p></blockquote></li><li><p>相关命令：另外还有 3 个 scan 命令用于对三种类型的 value 进行遍历。</p><ul><li>hscan：属于 Hash 型 Value 操作命令集合，用于遍历当前 db 中指定 Hash 表的所有 field-value 对。</li><li>sscan：属于 Set 型Value 操作命令集合，用于遍历当前 db 中指定 set 集合的所有元素</li><li>zscan：属于 ZSet 型 Value 操作命令集合，用于遍历当前 db 中指定有序集合的所有元素（数值与元素值）</li></ul></li></ul><h4 id="三、String型Value操作命令"><a href="#三、String型Value操作命令" class="headerlink" title="三、String型Value操作命令"></a>三、String型Value操作命令</h4><p>Redis 存储数据的 Value 可以是一个 String 类型数据。String 类型的Value 是 Redis 中最基本，最常见的类型。String 类型的 Value 中可以存放任意数据，包括数值型，甚至是二进制的图片、音频、视频、序列化对象等。一个 String 类型的 Value 最大是 512M 大小。</p><h5 id="1、set"><a href="#1、set" class="headerlink" title="1、set"></a>1、set</h5><blockquote><p>格式：SET key value [EX seconds | PX milliseconds] [NX|XX]</p><p>功能：SET 除了可以直接将 key 的值设为 value 外，还可以指定一些参数。</p><ul><li>EX seconds：为当前 key 设置过期时间，单位秒。等价于 SETEX 命令。</li><li>PX milliseconds：为当前 key 设置过期时间，单位毫秒。等价于 PSETEX 命令。</li><li>NX：指定的 key 不存在才会设置成功，用于添加指定的 key。等价于 SETNX 命令。</li><li>XX：指定的 key 必须存在才会设置成功，用于更新指定key 的value。</li></ul><p>说明：如果value 字符串中带有空格，则该字符串需要使用双引号或单引号引起来，否则会认为 set 命令的参数数量不正确，报错。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/904e39ffac1d514a2c5e35090e151f3e.png" alt="image-20230408215404893"></p><h5 id="2、setex-psetex"><a href="#2、setex-psetex" class="headerlink" title="2、setex/psetex"></a>2、setex/psetex</h5><blockquote><p>格式：SETEX/PSETEX key seconds value</p><p>功能：set expire，其不仅为 key 指定了value，还为其设置了生存时间。setex 的单位为秒，psetex 的单位为毫秒。</p><p>说明：如果 key 已经存在， 则覆写旧值。该命令类似于以下两个命令，不同之处是， SETEX 是一个原子性操作，关联值和设置生存时间两个动作会在同一时间内完成，该命令在 Redis 用作缓存时，非常实用。</p><ul><li>SET key value</li><li>EXPIRE key seconds # 设置生存时间</li></ul></blockquote><p>如下图两条指令作用相同：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9ce5b78d3b15e6157a2e8304955cec5d.png" alt="image-20230408215652794"></p><h5 id="3、setnx"><a href="#3、setnx" class="headerlink" title="3、setnx"></a>3、setnx</h5><blockquote><p>l 格式：SETNX key value</p><p>l 功能：SET if Not eXists，将 key 的值设为 value ，当且仅当 key 不存在。若给定的 key</p><p>已经存在，则 SETNX 不做任何动作。成功，返回 1，否则，返回 0。</p><p>l 说明：该命令等价于 <code>set key value nx</code></p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/833c5455fa2378e144298e3ed43d32e0.png" alt="image-20230408215816215"></p><h5 id="4、getset"><a href="#4、getset" class="headerlink" title="4、getset"></a>4、getset</h5><blockquote><p>格式：GETSET key value</p><p>功能：将给定 key 的值设为 value ，并返回 key 的旧值。</p><p>说明：当 key 存在但不是字符串类型时，返回一个错误；当 key 不存在时，返回 nil 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/17e29464af446156a242bc67f0d3af03.png" alt="image-20230408220000780"></p><h5 id="5、mset-msetnx"><a href="#5、mset-msetnx" class="headerlink" title="5、mset/msetnx"></a>5、mset/msetnx</h5><blockquote><p>格式：MSET/MSETNX key value [key value …]</p><p>功能：同时设置一个或多个 key-value 对。</p><p>说明：如果某个给定 key 已经存在，那么 MSET 会用新值覆盖原来的旧值，如果这不 是你所希望的效果，请考虑使用 MSETNX 命令：它只会在所有给定 key 都不存在的情 况下进行设置操作。MSET/MSETNX 是一个原子性(atomic)操作，所有给定 key 都会在同 一时间内被设置，某些给定 key 被更新而另一些给定 key 没有改变的情况不可能发生。该命令永不失败。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3707d2ebbcb7f310b33b02837daa8212.png" alt="image-20230408220130792"></p><h5 id="6、mget"><a href="#6、mget" class="headerlink" title="6、mget"></a>6、mget</h5><blockquote><p>格式：MGET key [key …]</p><p>功能：返回所有(一个或多个)给定 key 的值。</p><p>说明：如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。因此，该命令永不失败。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c551cb0b61dd0e43ee8a53ac60b8b31b.png" alt="image-20230408220218797"></p><h5 id="7、append"><a href="#7、append" class="headerlink" title="7、append"></a>7、append</h5><blockquote><p>格式：APPEND key value</p><p>功能：如果 key 已经存在并且是一个字符串， APPEND 命令将 value 追加到 key 原来的值的末尾。如果 key 不存在， APPEND 就简单地将给定 key 设为 value ，就像执行 SET key value 一样。</p><p>说明：追加 value 之后， key 中字符串的长度。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/e4981ce3306a0198fd183605e2ed8451.png" alt="image-20230408220359590"></p><h5 id="8、incr-decr"><a href="#8、incr-decr" class="headerlink" title="8、incr/decr"></a>8、incr/decr</h5><blockquote><p>格式：INCR key 或 DECR key</p><p>功能：increment，自动递增。将 key 中存储的数字值增一。decrement，自动递减。将 key 中存储的数字值减一。</p><p>说明：如果 key 不存在，那么 key 的值会先被初始化为 0，然后再执行增一/减一操作。如果值不能表示为数字，那么返回一个错误提示。如果执行正确，则返回增一/减一后的值。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/98d04f6f902aa069df4867bf50f378b4.png" alt="image-20230408220515890"></p><h5 id="9、incrby-decrby"><a href="#9、incrby-decrby" class="headerlink" title="9、incrby/decrby"></a>9、incrby/decrby</h5><blockquote><p>格式：INCRBY key increment 或 DECRBY key decrement</p><p>功能：将 key 中存储的数字值增加/减少指定的数值，这个数值只能是整数，可以是负数，但不能是小数。</p><p>说明：如果 key 不存在，那么 key 的值会先被初始化为 0，然后再执行增/减操作。如果值不能表示为数字，那么返回一个错误提示。如果执行正确，则返回增/减后的值。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d37b718d65aba13467ae4bf2e2f97c3e.png" alt="image-20230408220620950"></p><h5 id="10、incrbyfloat"><a href="#10、incrbyfloat" class="headerlink" title="10、incrbyfloat"></a>10、incrbyfloat</h5><blockquote><p>格式：INCRBYFLOAT key increment</p><p>功能：为 key 中所储存的值加上浮点数增量 increment 。</p><p>说明：与之前的说明相同。没有 decrbyfloat 命令，但 increment 为负数可以实现减操作效果。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/6e706c773a54b82010a58523d8fdcc9f.png" alt="image-20230408220721017"></p><h5 id="11、strlen"><a href="#11、strlen" class="headerlink" title="11、strlen"></a>11、strlen</h5><blockquote><p>格式：STRLEN key</p><p>功能：返回 key 所储存的字符串值的长度。</p><p>说明：当 key 储存的不是字符串值时，返回一个错误；当 key 不存在时，返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/c32699e48de7aa7d67d04a488280aba2.png" alt="image-20230408220812700"></p><h5 id="12、getrange"><a href="#12、getrange" class="headerlink" title="12、getrange"></a>12、getrange</h5><blockquote><p>格式：GETRANGE key start end</p><p>功能：返回 key 中字符串值的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定，包括 start 和 end 在内。</p><p>说明：end 必须要比 start 大。支持负数偏移量，表示从字符串最后开始计数，-1 表示最后一个字符，-2 表示倒数第二个，以此类推。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a66b2e453765ef5979c5e2efa2258931.png" alt="image-20230408220941085"></p><h5 id="13、setrange"><a href="#13、setrange" class="headerlink" title="13、setrange"></a>13、setrange</h5><blockquote><p>格式：SETRANGE key offset value</p><p>功能：用 value 参数替换给定 key 所储存的字符串值 str，从偏移量 offset 开始。</p><p>说明：当 offset 值大于 str 长度时，中间使用零字节\x00 填充，即 0000 0000 字节填充；对于不存在的 key 当作空串处理。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a0e024fe97e923880257651cc1029f02.png" alt="image-20230408221127133"></p><h5 id="14、位操作命令"><a href="#14、位操作命令" class="headerlink" title="14、位操作命令"></a>14、位操作命令</h5><blockquote><p>名称中包含 BIT 的命令，都是对二进制位的操作命令，例如，setbit、getbit、bitcount、bittop、bitfield，这些命令不常用。</p></blockquote><h5 id="15、典型应用场景"><a href="#15、典型应用场景" class="headerlink" title="15、典型应用场景"></a>15、典型应用场景</h5><p>Value 为 String 类型的应用场景很多，这里仅举这种典型应用场景的例子：</p><ul><li><p>数据缓存：Redis 作为数据缓存层，MySQL 作为数据存储层。应用服务器首先从 Redis 中获取数据，如果缓存层中没有，则从MySQL 中获取后先存入缓存层再返回给应用服务器。</p></li><li><p>计数器：在 Redis 中写入一个 value 为数值型的 key 作为平台计数器、视频播放计数器等。每个有效客户端访问一次，或视频每播放一次，都是直接修改 Redis 中的计数器，然后再以异步方式持久化到其它数据源中，例如持久化到 MySQL。</p></li><li><p>共享Session：对于一个分布式应用系统，如果将类似用户登录信息这样的 Session 数据保存在提供登录服务的服务器中，那么如果用户再次提交像收藏、支付等请求时可能会出现问题：在提供收藏、支付等服务的服务器中并没有该用户的 Session 数据，从而导致该用户需要重新登录。对于用户来说，这是不能接受的。此时，可以将系统中所有用户的 Session 数据全部保存到 Redis 中，用户在提交新的请求后，系统先从Redis 中查找相应的Session 数据，如果存在，则再进行相关操作，否则跳转到登录页面。这样就不会引发“重新登录”问题。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/22772d9be4efd77c382ddaa868860e98.png" alt="image-20230408221723064"></p></li><li><p>限速器：现在很多平台为了防止 DoS（Denial of Service，拒绝服务）攻击，一般都会限制一个 IP不能在一秒内访问超过 n 次。而 Redis 可以可以结合 key 的过期时间与 incr 命令来完成限速功能，充当限速器。注意，其无法防止 DDoS（Distributed Denial of Service，分布式拒绝服务）攻击。</p></li></ul><h4 id="四、Hash型Value操作命令"><a href="#四、Hash型Value操作命令" class="headerlink" title="四、Hash型Value操作命令"></a>四、Hash型Value操作命令</h4><p>Redis 存储数据的 Value 可以是一个 Hash 类型。Hash 类型也称为 Hash 表、字典等。</p><blockquote><p>Hash 表就是一个映射表 Map，也是由键-值对构成，为了与整体的 key 进行区分，这里的键称为 field，值称为 value。注意，Redis 的 Hash 表中的 field-value 对均为 String 类型。</p></blockquote><h5 id="1、hset"><a href="#1、hset" class="headerlink" title="1、hset"></a>1、hset</h5><blockquote><p>格式：HSET key field value</p><p>功能：将哈希表 key 中的域 field 的值设为 value 。</p><p>说明：如果 key 不存在，一个新的哈希表被创建并进行 <a href="http://redisdoc.com/hash/hset.html#hset">HSET</a> 操作。如果域 field 已经存在于哈希表中，旧值将被覆盖。如果 field 是哈希表中的一个新建域，并且值设置成功，返回 1 。如果哈希表中域 field 已经存在且旧值已被新值覆盖，返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/01e2a642037d70c7a2309a611c1edd74.png" alt="image-20230409212134039"></p><h5 id="2、hget"><a href="#2、hget" class="headerlink" title="2、hget"></a>2、hget</h5><blockquote><p>格式：HGET key field</p><p>功能：返回哈希表 key 中给定域 field 的值。</p><p>说明：当给定域不存在或是给定 key 不存在时，返回 nil 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/2f6e5bcb9108c83212435dc03b3a5df1.png" alt="image-20230409224311370"></p><h5 id="3、hmset"><a href="#3、hmset" class="headerlink" title="3、hmset"></a>3、hmset</h5><blockquote><p>格式：HMSET key field value [field value …]</p><p>功能：同时将多个 field-value (域-值)对设置到哈希表 key 中。</p><p>说明：此命令会覆盖哈希表中已存在的域。如果 key 不存在，一个空哈希表被创建并执行 HMSET 操作。如果命令执行成功，返回 OK 。当 key 不是哈希表(hash)类型时，返回一个错误。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9e99662feee1ec96f6a6abf779e838be.png" alt="image-20230409224637980"></p><h5 id="4、hmget"><a href="#4、hmget" class="headerlink" title="4、hmget"></a>4、hmget</h5><blockquote><p>格式：HMGET key field [field …]</p><p>功能：按照给出顺序返回哈希表 key 中一个或多个域的值。</p><p>说明：如果给定的域不存在于哈希表，那么返回一个 nil 值。因为不存在的 key 被当作一个空哈希表来处理，所以对一个不存在的 key 进行 HMGET 操作将返回一个只带有 nil 值的表。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/de76089f29bd9ab05deae9297d5997ca.png" alt="image-20230409224959688"></p><h5 id="5、hgetall"><a href="#5、hgetall" class="headerlink" title="5、hgetall"></a>5、hgetall</h5><blockquote><p>格式：HGETALL key</p><p>功能：返回哈希表 key 中所有的域和值。</p><p>说明：在返回值里，紧跟每个域名(field name)之后是域的值(value)，所以返回值的长度是哈希表大小的两倍。若 key 不存在，返回空列表。若 key 中包含大量元素，则该命令可能会阻塞 Redis 服务。所以生产环境中一般不使用该命令，而使用 hscan 命令代替。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/94da323983eaf4b8cf977641a59f2dce.png" alt="image-20230409225114987"></p><h5 id="6、hsetnx"><a href="#6、hsetnx" class="headerlink" title="6、hsetnx"></a>6、hsetnx</h5><blockquote><p>格式：HSETNX key field value</p><p>功能：将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在。</p><p>说明：若域 field 已经存在，该操作无效。如果 key 不存在，一个新哈希表被创建并执行 HSETNX 命令。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/361f13ab18a791a5ce13ab50d3863de9.png" alt="image-20230409225248298"></p><h5 id="7、hdel"><a href="#7、hdel" class="headerlink" title="7、hdel"></a>7、hdel</h5><blockquote><p>格式：HDEL key field [field …]</p><p>功能：删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</p><p>说明：返回被成功移除的域的数量，不包括被忽略的域。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/d5ba73054150475a7b77d45dfbbc8ec0.png" alt="image-20230409225403125"></p><h5 id="8、hexists"><a href="#8、hexists" class="headerlink" title="8、hexists"></a>8、hexists</h5><blockquote><p>格式：HEXISTS key field</p><p>功能：查看哈希表 key 中给定域 field 是否存在。</p><p>说明：如果哈希表含有给定域，返回 1 。如果不含有给定域，或 key 不存在，返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7ae8a279fbaa6d8ca8b518ff879a7800.png" alt="image-20230409225550040"></p><h5 id="9、hincrby-hincrbyfloat"><a href="#9、hincrby-hincrbyfloat" class="headerlink" title="9、hincrby/hincrbyfloat"></a>9、hincrby/hincrbyfloat</h5><blockquote><p>格式：HINCRBY key field increment</p><p>功能：为哈希表 key 中的域 field 的值加上增量 increment 。hincrby 命令只能增加整数值，而 hincrbyfloat 可以增加小数值。</p><p>说明：增量也可以为负数，相当于对给定域进行减法操作。如果 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。如果域 field 不存在，那么在执行命令前，域的值被初始化为 0。对一个储存字符串值的域 field 执行 HINCRBY 命令将造成一个错误。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bb36ec6a039c4f7bc76d973904ae1f2e.png" alt="image-20230409230136983"></p><h5 id="10、hkeys-hvals"><a href="#10、hkeys-hvals" class="headerlink" title="10、hkeys/hvals"></a>10、hkeys/hvals</h5><blockquote><p>格式：HKEYS key 或 HVALS key</p><p>功能：返回哈希表 key 中的所有域/值。</p><p>说明：当 key 不存在时，返回一个空表。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/90c577c02f3f22ff887258883e26a9ec.png" alt="image-20230409230353847"></p><h5 id="11、hlen"><a href="#11、hlen" class="headerlink" title="11、hlen"></a>11、hlen</h5><blockquote><p>格式：HLEN key</p><p>功能：返回哈希表 key 中域的数量。</p><p>说明：当 key 不存在时，返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f7f3e0077438f2807da15d848cd1b472.png" alt="image-20230409230704382"></p><h5 id="12、hstrlen"><a href="#12、hstrlen" class="headerlink" title="12、hstrlen"></a>12、hstrlen</h5><blockquote><p>格式：HSTRLEN key field</p><p>功能：返回哈希表 key 中， 与给定域 field 相关联的值的字符串长度（string length）。</p><p>说明：如果给定的键或者域不存在， 那么命令返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f4a16e9a39351e10da1e5af3aea09229.png" alt="image-20230409230758278"></p><h5 id="13、应用场景"><a href="#13、应用场景" class="headerlink" title="13、应用场景"></a>13、应用场景</h5><blockquote><p>Hash 型 Value 非常适合存储对象数据。key 为对象名称，value 为描述对象属性的 Map，对对象属性的修改在Redis 中就可直接完成。其不像String 型 Value 存储对象，那个对象是序列化过的，例如序列化为 JSON 串，对对象属性值的修改需要先反序列化为对象后再修改，修改后再序列化为JSON 串后写入到 Redis。</p></blockquote><h4 id="五、List型Value操作命令"><a href="#五、List型Value操作命令" class="headerlink" title="五、List型Value操作命令"></a>五、List型Value操作命令</h4><p>Redis 存储数据的 Value 可以是一个 String 列表类型数据。即该列表中的每个元素均为 String 类型数据。列表中的数据会按照插入顺序进行排序。不过，该列表的底层实际是一个无头节点的双向链表，所以对列表表头与表尾的操作性能较高，但对中间元素的插入与删除的操作的性能相对较差。</p><h5 id="1、lpush-rpush"><a href="#1、lpush-rpush" class="headerlink" title="1、lpush/rpush"></a>1、lpush/rpush</h5><blockquote><p>格式：LPUSH key value [value …] 或 RPUSH key value [value …]</p><p>功能：将一个或多个值 value 插入到列表 key 的表头/表尾（表头在左表尾在右）</p><p>说明：如果有多个 value 值，对于 lpush 来说，各个 value 会按从左到右的顺序依次插入到表头；对于 rpush 来说，各个 value 会按从左到右的顺序依次插入到表尾。如果 key不存在，一个空列表会被创建并执行操作。当 key 存在但不是列表类型时，返回一个错误。执行成功时返回列表的长度。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/f1b9a5e7402064abcce5732a954a2131.png" alt="image-20230410195544787"></p><h5 id="2、llen"><a href="#2、llen" class="headerlink" title="2、llen"></a>2、llen</h5><blockquote><p>格式：LLEN key</p><p>功能：返回列表 key 的长度。</p><p>说明：如果 key 不存在，则 key 被解释为一个空列表，返回 0 。如果 key 不是列表类型，返回一个错误。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/73052fa035f45d2be47205cecdb1abd4.png" alt="image-20230410195647719"></p><h5 id="3、lindex"><a href="#3、lindex" class="headerlink" title="3、lindex"></a>3、lindex</h5><blockquote><p>格式：LINDEX key index</p><p>功能：返回列表 key 中，下标为 index 的元素。列表从 0 开始计数。</p><p>说明：如果 index 参数的值不在列表的区间范围内(out of range)，返回 nil 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a09c8dcfa56ffb05ac5877291446df30.png" alt="image-20230410195918800"></p><h5 id="4、lset"><a href="#4、lset" class="headerlink" title="4、lset"></a>4、lset</h5><blockquote><p>格式：LSET key index value</p><p>功能：将列表 key 下标为 index 的元素的值设置为 value 。</p><p>说明：当 index 参数超出范围，或对一个空列表（key 不存在）进行 LSET 时，返回一个错误。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/57f8a5a2175cf42ef246a7a6c05f3579.png" alt="image-20230410200147980"></p><h5 id="5、lrange"><a href="#5、lrange" class="headerlink" title="5、lrange"></a>5、lrange</h5><blockquote><p>格式：LRANGE key start stop</p><p>功能：返回列表 key 中指定区间[start, stop]内的元素，即包含两个端点。</p><p>说明：List 的下标从 0 开始，即以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。超出范围的下标值不会引起错误。如果 start 下标比列表的最大下标 还要大，那么 LRANGE 返回一个空列表。如果 stop 下标比最大下标还要大，Redis 将 stop 的值设置为最大下标。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/4d2a4435e1be05b6f98825bb79ae23c1.png" alt="image-20230410200259538"></p><h5 id="6、lpushx-rpushx"><a href="#6、lpushx-rpushx" class="headerlink" title="6、lpushx/rpushx"></a>6、lpushx/rpushx</h5><blockquote><p>格式：LPUSHX key value 或 RPUSHX key value</p><p>功能：将值 value 插入到列表 key 的表头/表尾，当且仅当 key 存在并且是一个列表。</p><p>说明：当 key 不存在时，命令什么也不做。若执行成功，则输出表的长度。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/cbf39de196686f92c0b68221a128e3df.png" alt="image-20230410200413604"></p><h5 id="7、linsert"><a href="#7、linsert" class="headerlink" title="7、linsert"></a>7、linsert</h5><blockquote><p>格式：LINSERT key BEFORE|AFTER pivot value</p><p>功能：将值 value 插入到列表 key 当中，位于元素 pivot 之前或之后。</p><p>说明：当 pivot 元素不存在于列表中时，不执行任何操作，返回-1；当 key 不存在时， key 被视为空列表，不执行任何操作，返回 0；如果 key 不是列表类型，返回一个错误；如果命令执行成功，返回插入操作完成之后，列表的长度。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/5594b134f390e6c40154beec58a704bf.png" alt="image-20230410200645171"></p><h5 id="8、lpop-rpop"><a href="#8、lpop-rpop" class="headerlink" title="8、lpop/rpop"></a>8、lpop/rpop</h5><blockquote><p>格式：LPOP key [count] 或 RPOP key [count]</p><p>功能：从列表 key 的表头/表尾移除 count 个元素，并返回移除的元素。count 默认值 1</p><p>说明：当 key 不存在时，返回 nil</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uPdTzGAT-1681219408332)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410200826128.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410200826128.png</a>)]</p><h5 id="9、blpop-brpop"><a href="#9、blpop-brpop" class="headerlink" title="9、blpop/brpop"></a>9、blpop/brpop</h5><blockquote><p>格式：BLPOP key [key …] timeout 或 BRPOP key [key …] timeout</p><p>功能：BLPOP/BRPOP 是列表的阻塞式(blocking)弹出命令。它们是 LPOP/RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP/BRPOP 命令阻塞，直到等待 timeout 超时或发现可弹出元素为止。当给定多个 key 参数时，按参数 key的先后顺序依次检查各个列表，弹出第一个非空列表的头元素。timeout 为阻塞时长，单位为秒，其值若为 0，则表示只要没有可弹出元素，则一直阻塞。</p><p>说明：假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的 key ，第二个元素是被弹出元素的值。</p></blockquote><p>该指令详细介绍：<a href="https://www.modb.pro/db/13770">Redis每日一练(26)：BLPOP和BRPOP命令 - 墨天轮 (modb.pro)</a></p><h5 id="10、rpoplpush"><a href="#10、rpoplpush" class="headerlink" title="10、rpoplpush"></a>10、rpoplpush</h5><blockquote><p>格式：RPOPLPUSH source destination</p><p>功能：命令 RPOPLPUSH 在一个原子时间内，执行以下两个动作：</p><ul><li>将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。</li><li>将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。如果 source 不存在，值 nil 被返回，并且不执行其他动作。如果 source 和 destination 相同，则列表中的表尾元素被移动到表头，并返回该元素，可以把这种特殊情况视作列 表的旋转(rotation)操作。</li></ul></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GhNRwCLj-1681218054418)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410201242354.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410201242354.png</a>)]</p><h5 id="11、brpoplpush"><a href="#11、brpoplpush" class="headerlink" title="11、brpoplpush"></a>11、brpoplpush</h5><blockquote><p>格式：BRPOPLPUSH source destination timeout</p><p>功能：BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。timeout 为阻塞时长，单位为秒，其值若为 0，则表示只要没有可弹出元素，则一直阻塞。</p><p>说明：假如在指定时间内没有任何元素被弹出，则返回一个 nil 和等待时长。反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长。</p></blockquote><p>如图：nums列表为空[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fsjQiqNt-1681218054418)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410201459060.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410201459060.png</a>)]</p><h5 id="12、lrem"><a href="#12、lrem" class="headerlink" title="12、lrem"></a>12、lrem</h5><blockquote><p>格式：LREM key count value</p><p>功能：根据参数 count 的值，移除列表中与参数 value 相等的元素。count 的值可以是以下几种：</p><ul><li>count &gt; 0 : 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count 。</li><li>count &lt; 0 : 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。</li><li>count = 0 : 移除表中所有与 value 相等的值。</li></ul><p>说明：返回被移除元素的数量。当 key 不存在时， LREM 命令返回 0 ，因为不存在的 key 被视作空表(empty list)。</p></blockquote><p>图中lls列表不存在：</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-i1kldKKZ-1681218054419)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410202033415.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410202033415.png</a>)]</p><h5 id="13、ltrim"><a href="#13、ltrim" class="headerlink" title="13、ltrim"></a>13、ltrim</h5><blockquote><p>格式：LTRIM key start stop</p><p>功能：对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</p><p>说明：下标(index)参数 start 和 stop 都以 0 为底，也就是说，以 0 表示列表的第一个元素，以 1 表示列表的第二个元素，以此类推。也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。当 key 不是列表类型时，返回一个错误。如果 start 下标比列表的最大下标 end ( LLEN list 减去 1 )还要大，或者 start &gt; stop ， LTRIM 返回一个空列表，因为 LTRIM 已经将整个列表清空。如果 stop 下标比 end 下标还要大，Redis 将 stop 的值设置为 end 。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ux6oXHR2-1681218054419)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410202145481.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230410202145481.png</a>)]</p><h5 id="14、应用场景"><a href="#14、应用场景" class="headerlink" title="14、应用场景"></a>14、应用场景</h5><p> Value 为 List 类型的应用场景很多，主要是通过构建不同的数据结构来实现相应的业务功能。这里仅对这些数据结构的实现方式进行总结，不举具体的例子。</p><h6 id="（1）栈"><a href="#（1）栈" class="headerlink" title="（1）栈"></a>（1）栈</h6><p> 通过 lpush + lpop 可以实现栈数据结构效果：先进后出。通过 lpush 从列表左侧插入数据，通过 lpop 从列表左侧取出数据。当然，通过 rpush + rpop 也可以实现相同效果，只不过操作的是列表右侧。</p><h6 id="（2）队列"><a href="#（2）队列" class="headerlink" title="（2）队列"></a>（2）队列</h6><p> 通过 lpush + rpop 可以实现队列数据结构效果：先进先出。通过 lpush 从列表左侧插入数据，通过 rpop 从列表右侧取出数据。当然，通过 rpush + lpop 也可以实现相同效果，只不过操作的方向正好相反。</p><h6 id="（3）阻塞式消息队列"><a href="#（3）阻塞式消息队列" class="headerlink" title="（3）阻塞式消息队列"></a>（3）阻塞式消息队列</h6><p> 通过 lpush + brpop 可以实现阻塞式消息队列效果。作为消息生产者的客户端使用 lpush从列表左侧插入数据，作为消息消费者的多个客户端使用 brpop 阻塞式“抢占”列表尾部数据进行消费，保证了消费的负载均衡与<a href="https://edu.csdn.net/cloud/sd_summit?utm_source=glcblog&amp;spm=1001.2101.3001.7020">高可用性</a>。brpop 的 timeout 设置为 0，表示只要没有数据可弹出，就永久阻塞。</p><h6 id="（4）动态有限集合"><a href="#（4）动态有限集合" class="headerlink" title="（4）动态有限集合"></a>（4）动态有限集合</h6><p> 通过 lpush + ltrim 可以实现有限集合。通过lpush 从列表左侧向列表中添加数据，通过 ltrim 保持集合的动态有限性。像企业的末位淘汰、学校的重点班等动态管理，都可通过这种动态有限集合来实现。当然，通过rpush + ltrim 也可以实现相同效果，只不过操作的方向正好相反。</p><h4 id="六、Set型Value操作命令"><a href="#六、Set型Value操作命令" class="headerlink" title="六、Set型Value操作命令"></a>六、Set型Value操作命令</h4><p>Redis 存储数据的 Value 可以是一个 Set 集合，且集合中的每一个元素均 String 类型。Set与 List 非常相似，但不同之处是 Set 中的元素具有无序性与不可重复性，而 List 则具有有序性与可重复性。</p><p>Redis 中的 Set 集合与 Java 中的 Set 集合的实现相似，其底层都是value 为 null 的 hash表。也正因为此，才会引发无序性与不可重复性。</p><h5 id="1、sadd"><a href="#1、sadd" class="headerlink" title="1、sadd"></a>1、sadd</h5><blockquote><p>格式：SADD key member [member …]</p><p>功能：将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member</p><p>元素将被忽略。</p><p>说明：假如 key 不存在，则创建一个只包含 member 元素作成员的集合。当 key 不是集合类型时，返回一个错误。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HZ9aKIX8-1681218054420)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192311511.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192311511.png</a>)]</p><h5 id="2、smembers"><a href="#2、smembers" class="headerlink" title="2、smembers"></a>2、smembers</h5><blockquote><p>格式：SMEMBERS key</p><p>功能：返回集合 key 中的所有成员。</p><p>说明：不存在的 key 被视为空集合。若 key 中包含大量元素，则该命令可能会阻塞 Redis服务。所以生产环境中一般不使用该命令，而使用 sscan 命令代替。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/156b2c23858bfac2300216806a3c182d.png" alt="image-20230411192452736"></p><h5 id="3、scard"><a href="#3、scard" class="headerlink" title="3、scard"></a>3、scard</h5><blockquote><p>格式：SCARD key</p><p>功能：返回 Set 集合的长度</p><p>说明：当 key 不存在时，返回 0 。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/bee60a7abb7883202a6b84e04c38026c.png" alt="image-20230411192548168"></p><h5 id="4、sismember"><a href="#4、sismember" class="headerlink" title="4、sismember"></a>4、sismember</h5><blockquote><p>格式：SISMEMBER key member</p><p>功能：判断 member 元素是否集合 key 的成员。</p><p>说明：如果 member 元素是集合的成员，返回 1 。如果 member 元素不是集合的成员，或 key 不存在，返回 0 。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-By00Kd5B-1681218054422)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192658608.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192658608.png</a>)]</p><h5 id="5、smove"><a href="#5、smove" class="headerlink" title="5、smove"></a>5、smove</h5><blockquote><p>格式：SMOVE source destination member</p><p>功能：将 member 元素从 source 集合移动到 destination 集合。</p><p>说明：如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去，返回 1。当 destination 集合已经包含 member 元素时， SMOVE命令只是简单地将 source 集合中的 member 元素删除。当 source 或 destination 不是集合类型时，返回一个错误。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-HeIqQuCP-1681218054422)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192802656.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192802656.png</a>)]</p><h5 id="6、srem"><a href="#6、srem" class="headerlink" title="6、srem"></a>6、srem</h5><blockquote><p>格式：SREM key member [member …]</p><p>功能：移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略，且返回成功移除的元素个数。</p><p>说明：当 key 不是集合类型，返回一个错误。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-tzXDyhRW-1681218054423)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192926406.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411192926406.png</a>)]</p><h5 id="7、srandmember"><a href="#7、srandmember" class="headerlink" title="7、srandmember"></a>7、srandmember</h5><blockquote><p>格式：SRANDMEMBER key [count]</p><p>功能：返回集合中的 count 个随机元素。count 默认值为 1。</p><p>说明：若 count 为正数，且小于集合长度，那么返回一个包含 count 个元素的数组，数组中的元素各不相同。如果 count 大于等于集合长度，那么返回整个集合。如果count 为负数，那么返回一个包含 count 绝对值个元素的数组，但数组中的元素可能会出现重复。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fgiGBRJ3-1681218054423)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193102935.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193102935.png</a>)]</p><h5 id="8、spop"><a href="#8、spop" class="headerlink" title="8、spop"></a>8、spop</h5><blockquote><p>格式：SPOP key [count]</p><p>功能：移除并返回集合中的 count 个随机元素。count 必须为正数，且默认值为 1。</p><p>说明：如果 count 大于等于集合长度，那么移除并返回整个集合。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-5OJ7lWtL-1681218054424)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193320299.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193320299.png</a>)]</p><h5 id="9、sdiff-sdiffstore"><a href="#9、sdiff-sdiffstore" class="headerlink" title="9、sdiff/sdiffstore"></a>9、sdiff/sdiffstore</h5><blockquote><p>格式：SDIFF key [key …] 或 SDIFFSTORE destination key [key …]</p><p>功能：返回第一个集合与其它集合之间的差集。差集，difference。</p><p>说明：这两个命令的不同之处在于，sdiffstore 不仅能够显示差集，还能将差集存储到指定的集合 destination 中。如果 destination 集合已经存在，则将其覆盖。不存在的 key 被视为空集。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-sH710fKh-1681218054425)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193446264.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193446264.png</a>)]</p><h5 id="10、sinter-sinterstore"><a href="#10、sinter-sinterstore" class="headerlink" title="10、sinter / sinterstore"></a>10、sinter / sinterstore</h5><blockquote><p>格式：SINTER key [key …] 或 SINTERSTORE destination key [key …]</p><p>功能：返回多个集合间的交集。交集，intersection。</p><p>说明：这两个命令的不同之处在于，sinterstore 不仅能够显示交集，还能将交集存储到指定的集合 destination 中。如果 destination 集合已经存在，则将其覆盖。不存在的 key被视为空集。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-aW2vfO9Z-1681218054425)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193629443.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193629443.png</a>)]</p><h5 id="11、sunion-sunionstore"><a href="#11、sunion-sunionstore" class="headerlink" title="11、sunion/sunionstore"></a>11、sunion/sunionstore</h5><blockquote><p>格式：SUNION key [key …] 或 SUNIONSTORE destination key [key …]</p><p>功能：返回多个集合间的并集。并集，union。</p><p>说明：这两个命令的不同之处在于，sunionstore 不仅能够显示并集，还能将并集存储到指定的集合 destination 中。如果 destination 集合已经存在，则将其覆盖。不存在的 key被视为空集。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OuJUo2Qc-1681218054426)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193825086.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411193825086.png</a>)]</p><h5 id="12、应用场景"><a href="#12、应用场景" class="headerlink" title="12、应用场景"></a>12、应用场景</h5><h6 id="（1）动态黑名单"><a href="#（1）动态黑名单" class="headerlink" title="（1）动态黑名单"></a>（1）动态黑名单</h6><p>例如某服务器中要设置用于访问控制的黑名单。如果直接将黑名单写入服务器的配置文件，那么存在的问题是，无法动态修改黑名单。此时可以将黑名单直接写入Redis，只要有客户端来访问服务器，服务器在获取到客户端IP 后先从Redis 的黑名单中查看是否存在该IP，如果存在，则拒绝访问，否则访问通过。</p><h6 id="（2）有限随机数"><a href="#（2）有限随机数" class="headerlink" title="（2）有限随机数"></a>（2）有限随机数</h6><p>有限随机数是指返回的随机数是基于某一集合范围内的随机数，例如抽奖、随机选人。通过 spop 或 srandmember 可以实现从指定集合中随机选出元素。</p><h6 id="（3）用户画像"><a href="#（3）用户画像" class="headerlink" title="（3）用户画像"></a>（3）用户画像</h6><p>社交平台、<a href="https://edu.csdn.net/cloud/pm_summit?utm_source=blogglc&amp;spm=1001.2101.3001.7020">电商</a>平台等各种需要用户注册登录的平台，会根据用户提供的资料与用户使用习惯，为每个用户进行画像，即为每个用户定义很多可以反映该用户特征的标签，这些标签就可以使用sadd 添加到该用户对应的集合中。这些标签具有无序、不重复特征。</p><p>同时平台还可以使用 sinter/sinterstore 根据用户画像间的交集进行好友推荐、商品推荐、客户推荐等。</p><h4 id="七、有序Set型Value操作命令"><a href="#七、有序Set型Value操作命令" class="headerlink" title="七、有序Set型Value操作命令"></a>七、有序Set型Value操作命令</h4><p>Redis 存储数据的Value 可以是一个有序Set，这个有序 Set 中的每个元素均String 类型。有序 Set 与 Set 的不同之处是，有序 Set 中的每一个元素都有一个分值 score，Redis 会根据 score 的值对集合进行由小到大的排序。其与 Set 集合要求相同，元素不能重复，但元素的 score 可以重复。由于该类型的所有命令均是字母z 开头，所以该 Set 也称为 ZSet。</p><h5 id="1、zadd"><a href="#1、zadd" class="headerlink" title="1、zadd"></a>1、zadd</h5><blockquote><p>格式：ZADD key score member [[score member] [score member] …]</p><p>功能：将一个或多个 member 元素及其 score 值加入到有序集 key 中的适当位置。</p><p>说明：score 值可以是整数值或双精度浮点数。如果 key 不存在，则创建一个空的有序集并执行 ZADD 操作。当 key 存在但不是有序集类型时，返回一个错误。如果命令执行成功，则返回被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。若写入的 member 值已经存在，但score 值不同，则新的 score 值将覆盖老 score。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-6uazNJpi-1681218054426)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411194528792.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411194528792.png</a>)]</p><h5 id="2、zrange-zrevrange"><a href="#2、zrange-zrevrange" class="headerlink" title="2、zrange/zrevrange"></a>2、zrange/zrevrange</h5><blockquote><p>格式：ZRANGE key start stop [WITHSCORES] 或 ZREVRANGE key start stop [WITHSCORES]</p><p>功能：返回有序集 key 中，指定区间内的成员。zrange 命令会按 score 值递增排序， zrevrange 命令会按score 递减排序。具有相同 score 值的成员按字典序/逆字典序排列。可以通过使用 WITHSCORES 选项，来让成员和它的 score 值一并返回。</p><p>说明：下标参数从 0 开始，即 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。也可以使用负数下标，-1 表示最后一个成员，-2 表示倒数第二个成员，以此类推。超出范围的下标并不会引起错误。例如，当 start 的值比有序集的最大下标还要大，或是 start &gt; stop 时， ZRANGE 命令只是简单地返回一个空列表。再比如 stop 参数的值比有序集的最大下标还要大，那么 Redis 将 stop 当作最大下标来处理。</p><p>若 key 中指定范围内包含大量元素，则该命令可能会阻塞 Redis 服务。所以生产环境中如果要查询有序集合中的所有元素，一般不使用该命令，而使用 zscan 命令代替。</p></blockquote><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b36c60c1876788811241f57ad1ce00e1.png" alt="image-20230411194713248"></p><h5 id="3、zrangebyscore-zrevrangebyscore"><a href="#3、zrangebyscore-zrevrangebyscore" class="headerlink" title="3、zrangebyscore/zrevrangebyscore"></a>3、zrangebyscore/zrevrangebyscore</h5><blockquote><p>格式：ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</p><p>功能：返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增/递减次序排列。具有相同 score 值的成员按字典序/逆字典序排列。可选的 LIMIT 参数指定返回结果的数量及区间(就像 SQL 中的 SELECT LIMIT offset, count )，注意当 offset 很大时，定位 offset 的操作可能需要遍历整个有序集，此过程效率可能会较低。可选的 WITHSCORES 参数决定结果集是单单返回有序集的成员，还是将有序集成员及其 score 值一起返回。</p><p>说明：min 和 max 的取值是正负无穷大的。默认情况下，区间的取值使用闭区间 (小于等于或大于等于)，也可以通过给参数前增加左括号“(”来使用可选的开区间 (小于或大于)。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-6u0RbrYt-1681218054427)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195027560.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195027560.png</a>)]</p><h5 id="4、zcard"><a href="#4、zcard" class="headerlink" title="4、zcard"></a>4、zcard</h5><blockquote><p>格式：ZCARD key</p><p>功能：返回集合的长度</p><p>说明：当 key 不存在时，返回 0 。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-cfDiABPs-1681218054428)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195150576.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195150576.png</a>)]</p><h5 id="5、zcount"><a href="#5、zcount" class="headerlink" title="5、zcount"></a>5、zcount</h5><blockquote><p>格式：ZCOUNT key min max</p><p>功能：返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min或 max )的成员的数量。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-jJbynJKT-1681218054429)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195252304.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195252304.png</a>)]</p><h5 id="6、zscore"><a href="#6、zscore" class="headerlink" title="6、zscore"></a>6、zscore</h5><blockquote><p>格式：ZSCORE key member</p><p>功能：返回有序集 key 中，成员 member 的 score 值。</p><p>说明：如果 member 元素不是有序集 key 的成员，或 key 不存在，返回 nil 。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-VZ1nmMwt-1681218054429)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195405826.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195405826.png</a>)]</p><h5 id="7、zincrby"><a href="#7、zincrby" class="headerlink" title="7、zincrby"></a>7、zincrby</h5><blockquote><p>格式：ZINCRBY key increment member</p><p>功能：为有序集 key 的成员 member 的 score 值加上增量 increment 。increment 值可以是整数值或双精度浮点数。</p><p>说明：可以通过传递一个负数值 increment ，让 score 减去相应的值。当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member 。当 key 不是有序集类型时，返回一个错误。命令执行成功，则返回 member 成员的新 score 值。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-j9kPl1xO-1681218054430)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195539936.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195539936.png</a>)]</p><h5 id="8、zrank-zrevrank"><a href="#8、zrank-zrevrank" class="headerlink" title="8、zrank/zrevrank"></a>8、zrank/zrevrank</h5><blockquote><p>格式：ZRANK key member 或 ZREVRANK key member</p><p>功能：返回有序集 key 中成员 member 的排名。zrank 命令会按 score 值递增排序，zrevrank 命令会按 score 递减排序。</p><p>说明：score 值最小的成员排名为 0 。如果 member 不是有序集 key 的成员，返回 nil 。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-P5KtHLr8-1681218054430)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195712685.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195712685.png</a>)]</p><h5 id="9、zrem"><a href="#9、zrem" class="headerlink" title="9、zrem"></a>9、zrem</h5><blockquote><p>格式：ZREM key member [member …]</p><p>功能：移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。</p><p>说明：当 key 存在但不是有序集类型时，返回一个错误。执行成功，则返回被成功移除的成员的数量，不包括被忽略的成员。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-j3z0muca-1681218054431)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195847811.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411195847811.png</a>)]</p><h5 id="10、zremrangebyrank"><a href="#10、zremrangebyrank" class="headerlink" title="10、zremrangebyrank"></a>10、zremrangebyrank</h5><blockquote><p>格式：ZREMRANGEBYRANK key start stop</p><p>功能：移除有序集 key 中，指定排名(rank)区间内的所有成员。</p><p>说明：排名区间分别以下标参数 start 和 stop 指出，包含 start 和 stop 在内。排名区间参数从 0 开始，即 0 表示排名第一的成员， 1 表示排名第二的成员，以此类推。也可以使用负数表示，-1 表示最后一个成员，-2 表示倒数第二个成员，以此类推。命令执行成功，则返回被移除成员的数量。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-Au1pv6wx-1681218054431)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411200011252.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411200011252.png</a>)]</p><h5 id="11、zremrangebyscore"><a href="#11、zremrangebyscore" class="headerlink" title="11、zremrangebyscore"></a>11、zremrangebyscore</h5><blockquote><p>格式：ZREMRANGEBYSCORE key min max</p><p>功能：移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或max )的成员。</p><p>说明：命令执行成功，则返回被移除成员的数量。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-4T9UPuU8-1681218054432)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411200151552.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411200151552.png</a>)]</p><h5 id="12、zrangebylex"><a href="#12、zrangebylex" class="headerlink" title="12、zrangebylex"></a>12、zrangebylex</h5><blockquote><p>格式：ZRANGEBYLEX key min max [LIMIT offset count]</p><p>功能：该命令仅适用于集合中所有成员都具有相同分值的情况。当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序（lexicographical ordering）来进行排序。即这个命令返回给定集合中元素值介于 min 和 max 之间的成员。如果有序集合里面的成员带有不同的分值， 那么命令的执行结果与 zrange key 效果相同。</p><p>说明：合法的 min 和 max 参数必须包含左小括号“(”或左中括号“[”，其中左小括号“(”表示开区间， 而左中括号“[”则表示闭区间。min 或max 也可使用特殊字符“+”和“-”，分别表示正无穷大与负无穷大。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-EPjONsTS-1681218054432)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205145970.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205145970.png</a>)]</p><h5 id="13、zlexcount"><a href="#13、zlexcount" class="headerlink" title="13、zlexcount"></a>13、zlexcount</h5><blockquote><p>格式：ZLEXCOUNT key min max</p><p>功能：该命令仅适用于集合中所有成员都具有相同分值的情况。该命令返回该集合中元素值本身（而非score 值）介于 min 和 max 范围内的元素数量。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-8R7cihDj-1681218054433)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205406092.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205406092.png</a>)]</p><h5 id="14、zremrangebylex"><a href="#14、zremrangebylex" class="headerlink" title="14、zremrangebylex"></a>14、zremrangebylex</h5><blockquote><p>格式：ZREMRANGEBYLEX key min max</p><p>功能：该命令仅适用于集合中所有成员都具有相同分值的情况。该命令会移除该集合中元素值本身介于 min 和 max 范围内的所有元素。</p></blockquote><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-IGF4CIPP-1681219975326)(<a href="https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205517353.png">https://typora-1259159092.cos.ap-nanjing.myqcloud.com/typora/image-20230411205517353.png</a>)]</p><h5 id="15、应用场景"><a href="#15、应用场景" class="headerlink" title="15、应用场景"></a>15、应用场景</h5><p>有序 Set 最为典型的应用场景就是排行榜，例如音乐、视频平台中根据播放量进行排序的排行榜；电商平台根据用户评价或销售量进行排序的排行榜等。将播放量作为 score，将作品 id 作为 member，将用户评价积分或销售量作为 score，将商家 id 作为member。使用 zincrby 增加排序 score，使用 zrevrange 获取 Top 前几名，使用 zrevrank 查询当前排名，使用 zscore 查询当前排序score 等。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis详解</title>
      <link href="/2024/11/24/Redis%E8%AF%A6%E8%A7%A3/"/>
      <url>/2024/11/24/Redis%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis详解"><a href="#Redis详解" class="headerlink" title="Redis详解"></a>Redis详解</h1><p>[TOC]</p><h2 id="一、Redis-是什么"><a href="#一、Redis-是什么" class="headerlink" title="一、Redis 是什么"></a>一、Redis 是什么</h2><p>​    Redis 是Remote Dictionary Server(Redis) 的缩写，是一个使用 C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型的Key-Value数据库，并提供多种语言的API。</p><p>​    它是一种 NoSQL（not-only sql，泛指非关系型数据库）的数据库，可以用作数据库、缓存、消息中间件、分布式锁等。</p><h2 id="二、Redis-的特点和功能"><a href="#二、Redis-的特点和功能" class="headerlink" title="二、Redis 的特点和功能"></a>二、Redis 的特点和功能</h2><ul><li><p><a href="https://marketing.csdn.net/p/3127db09a98e0723b83b2914d9256174?pId=2782&amp;utm_source=glcblog&amp;spm=1001.2101.3001.7020">性能</a>优秀，数据在内存中，读写速度非常快，支持并发 10W QPS（每秒查询量）。</p></li><li><p>单进程单线程，是线程安全的，采用 IO 多路复用机制。</p></li><li><p>丰富的数据类型，支持字符串（strings）、散列（hashes）、列表（lists）、集合（sets）、有序集合（sorted sets）等。</p></li><li><p>支持数据持久化。</p><p>可以将内存中数据保存在磁盘中，重启时加载。</p></li><li><p>主从复制，哨兵，高可用。</p></li><li><p>可以用作分布式锁。</p></li><li><p>可以作为消息中间件使用，支持发布订阅</p></li></ul><h2 id="三、缓存和数据库数据一致性问题"><a href="#三、缓存和数据库数据一致性问题" class="headerlink" title="三、缓存和数据库数据一致性问题"></a>三、缓存和数据库<a href="https://so.csdn.net/so/search?q=数据一致性&amp;spm=1001.2101.3001.7020">数据一致性</a>问题</h2><p>​    分布式环境下非常容易出现缓存和数据库间数据一致性问题，针对这一点，如果项目对缓存的要求是强一致性的，那么就不要使用缓存。</p><p>​    我们只能采取合适的策略来降低缓存和数据库间数据不一致的概率，而无法保证两者间的强一致性。</p><p>​    合适的策略包括合适的缓存更新策略，更新数据库后及时更新缓存、缓存失败时增加重试机制，以及使用canal同步mysql到redis，具体可见如下链接：</p><p><a href="https://blog.csdn.net/zxljsbk/article/details/80055544?spm=1001.2014.3001.5502">linux 利用canal充当中间件同步mysql数据到redis_linux下canal实现mysql数据同步-CSDN博客</a>。</p><h2 id="四、缓存选型（Redis-和-Memcached-的区别）"><a href="#四、缓存选型（Redis-和-Memcached-的区别）" class="headerlink" title="四、缓存选型（Redis 和 Memcached 的区别）"></a>四、缓存选型（Redis 和 Memcached 的区别）</h2><p>Redis 和 Memcached 的区别</p><ul><li><strong>存储方式上：</strong>Memcache 会把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小。Redis 有部分数据存在硬盘上，这样能保证数据的持久性。</li><li><strong>数据支持类型上：</strong>Memcache 对数据类型的支持简单，只支持简单的 key-value，，而 Redis 支持五种数据类型。</li><li><strong>使用底层模型不同：</strong>它们之间底层实现方式以及与客户端之间通信的应用协议不一样。Redis 直接自己构建了 VM 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</li><li><strong>Value 的大小：</strong>Redis 可以达到 1GB，而 Memcache 只有 1MB</li></ul><h2 id="五、Redis-为什么能这么快"><a href="#五、Redis-为什么能这么快" class="headerlink" title="五、Redis 为什么能这么快"></a>五、Redis 为什么能这么快</h2><p>​    官方提供的数据可以达到 100000+ 的 QPS（每秒内的查询次数），这个数据不比 Memcached 差。</p><ul><li>Redis 完全基于内存，绝大部分请求是纯粹的内存操作，非常迅速，数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度是 O(1)。</li><li>数据结构简单，对数据操作也简单。</li><li>采用单线程，避免了不必要的上下文切换和竞争条件，不存在多线程导致的 CPU 切换，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有死锁问题导致的性能消耗。</li><li>使用多路复用 IO 模型，非阻塞 IO。</li></ul><h2 id="六、Redis-缓存的淘汰策略"><a href="#六、Redis-缓存的淘汰策略" class="headerlink" title="六、Redis 缓存的淘汰策略"></a>六、<a href="https://so.csdn.net/so/search?q=Redis 缓存&amp;spm=1001.2101.3001.7020">Redis 缓存</a>的淘汰策略</h2><p>Redis 有六种淘汰策略，如下图：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/3c9b78d0ad34dd35dfc885222b799e02.png" alt="img"></p><p>Redis 4.0 加入了 LFU（least frequency use）淘汰策略，包括 volatile-lfu 和 allkeys-lfu，通过统计访问频率，将访问频率最少，即最不经常使用的 KV 淘汰</p><h2 id="七、Redis-持久化"><a href="#七、Redis-持久化" class="headerlink" title="七、Redis 持久化"></a>七、Redis 持久化</h2><h3 id="1-为什么需要持久化"><a href="#1-为什么需要持久化" class="headerlink" title="1.为什么需要持久化"></a><strong>1.为什么需要持久化</strong></h3><p>​    比如redis里有10gb数据，突然停电或者意外宕机了，再启动的时候10gb都没了！所以需要持久化，宕机后再通过持久化文件将数据恢复。</p><h3 id="2-Redis-的持久化策略的两种方式"><a href="#2-Redis-的持久化策略的两种方式" class="headerlink" title="2.Redis 的持久化策略的两种方式"></a>2.Redis 的持久化策略的两种方式</h3><ul><li><strong>RDB（默认）：</strong>快照形式是直接把内存中的数据保存到 dump.rdb 文件中，定时全量保存，保存的是数据。</li><li><strong>AOF：</strong>把所有的对 Redis 的服务器进行修改的命令都保存到 appendonly.aof 文件中，定时向文件中追加，保存的是命令。</li></ul><h3 id="3-RDB的特点"><a href="#3-RDB的特点" class="headerlink" title="3.RDB的特点"></a>3.RDB的特点</h3><p>RDB性能高，速率快，全量持久化，但数据可靠性低。</p><p>(1)rdb文件</p><p>​    RDB(Redis DataBase)：基于时间的快照，Redis默认是会以快照”RDB”的形式将数据持久化到磁盘的一个二进制文件 dump.rdb中，其默认只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前时间点之间未做快照的数据。</p><p>​    但是我们可以通过配置文件配置多个时间点的备份,这样就可以保留多个备份,当出现问题时候方便恢复到不同时间节点,很适合备份,并且此文件格式支持不少第三方工具可以进行后续的<a href="https://edu.csdn.net/cloud/sd_summit?utm_source=glcblog&amp;spm=1001.2101.3001.7020">数据分析</a>。比如:可以在最近24小时内,每小时进行一次备份RDB文件，并且在每个月的每一天，也备份一个RDB文件，这样的话，即便遇上问题，也可以随时将数据集还原到不同的版本，所以RDB 非常适合灾难恢复。</p><p>(2)优点</p><p>​    由于rdb文件都是二进制文件，所以很小，在灾难恢复的时候会快些。</p><p>​    他的效率（宕机恢复的效率，而不是持久化的效率）相对于aof要高（bgsave而不是save），因为每来个请求他都不会处理任何事，只是bgsave的时候他会fork()子进程且可能copyonwrite，但copyonwrite只是一个寻址的过程，纳秒级别的。而aof每次都是写盘操作，毫秒级别。没法比。</p><p>注：fork()子进程以及copyonwrite（写时复制）的详解可见文末的参考“RDB原理”</p><p>(3)缺点</p><p>​    数据可靠性比aof低，也就是会丢失的多。因为aof可以配置每秒都持久化或者每个命令处理完就持久化一次这种高频率的操作，而rdb的话虽然也是靠配置进行bgsave，但是没有aof配置那么灵活，也没aof持久化快，因为rdb每次全量，aof每次只追加。</p><h3 id="4-AOF的特点"><a href="#4-AOF的特点" class="headerlink" title="4.AOF的特点"></a>4.AOF的特点</h3><p>AOF数据可靠性高，增量持久化，但宕机恢复的效率相比于RDB还是略低。</p><p>(1)aof文件</p><p>​     AOF(Append Only File)：只追加文件，使用 AOF 做持久化，每一个写命令都通过 write 函数追加到 appendonly.aof 中。而RDB是压缩成<a href="https://so.csdn.net/so/search?q=二进制&amp;spm=1001.2101.3001.7020">二进制</a>等时机开子进程去干这件事。</p><p>(2)优点</p><p>①持久化的速度快，因为每次都只是追加，rdb每次都全量持久化。</p><p>②全程持久化，只需要在配置中开启 appendonly yes。这样 Redis 每执行一个修改数据的命令，都会把它添加到 AOF 文件中，当 Redis 重启时，将会读取 AOF 文件进行重放，恢复到 Redis 关闭前的最后时刻。</p><p>③数据相对更可靠，丢失少，使用 AOF 的优点是会让 Redis 变得非常耐久。可以设置不同的 Fsync 策略，AOF的默认策略是每秒钟 Fsync 一次，在这种配置下，就算发生故障停机，也最多丢失一秒钟的数据。</p><p>(3)缺点</p><p>​    灾难性恢复的时候过慢，因为aof每次都只追加原命令，导致aof文件过大，但是后面会rewrite，但是相对于rdb也是慢的。</p><h3 id="5-项目中如何选择这两种方式"><a href="#5-项目中如何选择这两种方式" class="headerlink" title="5.项目中如何选择这两种方式"></a>5.项目中如何选择这两种方式</h3><p>如果你追求性能，同时仍然可以承受数分钟内的数据丢失的话，那么可以使用 RDB 持久化。</p><p>如果你非常关心你的数据，并且性能对性能要求不是那么高的话，那么可以使用 AOF 持久化。</p><p>注：Redis 支持同时开启 RDB 和 AOF，系统重启后，Redis 会优先使用 AOF 来恢复数据，这样丢失的数据会最少。</p><h2 id="八、Redis-集群模式选择"><a href="#八、Redis-集群模式选择" class="headerlink" title="八、Redis 集群模式选择"></a>八、Redis 集群模式选择</h2><p>​    redis集群有三种模式  1.主从复制  2.哨兵模式  3.Cluster集群模式</p><p>主从复制：选取有三台（奇数）服务器，一主两从，主节点负责写入，从节点负责读取，达到读写分离，此时三台集群上的数据一致，但是有个不好的点在于 当主节点挂了的话，就需要人为操作，来重启主节点。</p><p>哨兵模式：哨兵模式在原有主从复制的基础上加了哨兵机制，简单理解就是监测各个节点活性，假如主节点挂了，还可以自动重启主节点。</p><p>Cluster集群模式：将数据均分到所有主节点上。与主从复制不同，集群中的节点不存储全量数据，而是分片存储。这种方式适合数据量较大的场景，可以均摊服务器压力</p><h2 id="九、Redis-哨兵的基本原理"><a href="#九、Redis-哨兵的基本原理" class="headerlink" title="九、Redis 哨兵的基本原理"></a>九、Redis 哨兵的基本原理</h2><p><img src="https://i-blog.csdnimg.cn/blog_migrate/470bac817637351a0240be4294be8f4b.jpeg" alt="图片"></p><p>如图，是 Redis Sentinel（哨兵）的架构图。Redis Sentinel（哨兵）主要功能包括主节点存活检测、主从运行情况检测、自动故障转移、主从切换。</p><p>Redis Sentinel 最小配置是一主一从。Redis 的 Sentinel 系统可以用来管理多个 Redis 服务器。</p><p>该系统可以执行以下四个任务：</p><p><strong>监控：</strong>不断检查主服务器和从服务器是否正常运行。</p><p><strong>通知：</strong>当被监控的某个 Redis 服务器出现问题，Sentinel 通过 API 脚本向管理员或者其他应用程序发出通知。</p><p><strong>自动故障转移：</strong>当主节点不能正常工作时，Sentinel 会开始一次自动的故障转移操作，它会将与失效主节点是主从关系的其中一个从节点升级为新的主节点，并且将其他的从节点指向新的主节点，这样人工干预就可以免了。</p><p><strong>配置提供者：</strong>在 Redis Sentinel 模式下，客户端应用在初始化时连接的是 Sentinel 节点集合，从中获取主节点的信息。</p><p>哨兵的工作原理：</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/ffb3a31699849f207318312704875795.jpeg" alt="图片"></p><p>①每个 Sentinel 节点都需要定期执行以下任务：每个 Sentinel 以每秒一次的频率，向它所知的主服务器、从服务器以及其他的 Sentinel 实例发送一个 PING 命令。（如上图）</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/2c3e23d30640c78d9e979e30271f2aec.jpeg" alt="图片"></p><p>②如果一个实例距离最后一次有效回复 PING 命令的时间超过 down-after-milliseconds 所指定的值，那么这个实例会被 Sentinel 标记为主观下线。（如上图）</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/7bffd1f46d77e42a2a693a6798623090.jpeg" alt="图片"></p><p>③如果一个主服务器被标记为主观下线，那么正在监视这个服务器的所有 Sentinel 节点，要以每秒一次的频率确认主服务器的确进入了主观下线状态。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/772194763db4a8ef9b863643906d8670.jpeg" alt="图片"></p><p>④如果一个主服务器被标记为主观下线，并且有足够数量的 Sentinel（至少要达到配置文件指定的数量）在指定的时间范围内同意这一判断，那么这个主服务器被标记为客观下线。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/b4682bde082521063221016e22b3ff37.jpeg" alt="图片"></p><p>⑤一般情况下，每个 Sentinel 会以每 10 秒一次的频率向它已知的所有主服务器和从服务器发送 INFO 命令。</p><p>当一个主服务器被标记为客观下线时，Sentinel 向下线主服务器的所有从服务器发送 INFO 命令的频率，会从 10 秒一次改为每秒一次。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/307d347ba48f473e8e957fc735932186.jpeg" alt="图片"></p><p>⑥Sentinel 和其他 Sentinel 协商客观下线的主节点的状态，如果处于 SDOWN 状态，则投票自动选出新的主节点，将剩余从节点指向新的主节点进行数据复制。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/a3af2976aff3ddb91e0ef0aac7893923.jpeg" alt="图片"></p><p>⑦当没有足够数量的 Sentinel 同意主服务器下线时，主服务器的客观下线状态就会被移除。</p><p>当主服务器重新向 Sentinel 的 PING 命令返回有效回复时，主服务器的主观下线状态就会被移除。</p><h2 id="十、Redis缓存雪崩、穿透、击穿概念及解决办法"><a href="#十、Redis缓存雪崩、穿透、击穿概念及解决办法" class="headerlink" title="十、Redis缓存雪崩、穿透、击穿概念及解决办法"></a>十、Redis缓存雪崩、穿透、击穿概念及解决办法</h2><p><strong>雪崩场景：</strong></p><p>​     如果首页所有 Key 的失效时间都是 12 小时，中午 12 点刷新的，我零点有个大促活动大量用户涌入，假设每秒 6000 个请求，本来缓存可以抗住每秒 5000 个请求，但是缓存中所有 Key 都失效了，此时 6000 个/秒的请求全部落在了数据库上，数据库必然扛不住，真实情况可能 数据库都没反应过来直接挂了，此时，如果没什么特别的方案来处理，DBA 很着急，重启数据库，但是数据库立马又被新流量给打死了。这就是我理解的缓存雪崩。</p><p><strong>雪崩解决方案：</strong></p><p>​    在批量往 Redis 存数据的时候，把每个 Key 的失效时间都加个随机值就好了，这样可以保证数据不会再同一时间大面积失效，或者设置热点数据永不过期。</p><p><strong>穿透场景：</strong></p><p>​    缓存穿透是指缓存和数据库中都没有的数据，而用户（黑客）不断发起请求，这样的不断攻击导致数据库压力很大，严重会击垮数据库</p><p><strong>穿透解决方案：</strong></p><p>​    缓存穿透我会在接口层增加校验，比如用户鉴权，参数做校验，不合法的校验直接 return，或者 使用高级用法布隆过滤器（Bloom Filter）这个也能很好的预防缓存穿透的发生。</p><p><strong>击穿场景：</strong></p><p>​    缓存击穿，这个跟缓存雪崩有点像，但是又有一点不一样，缓存雪崩是因为大面积的缓存失效，打崩了 DB。而缓存击穿不同的是缓存击穿是指一个 Key 非常热点，在不停地扛着大量的请求，大并发集中对这一个点进行访问，当这个 Key 在失效的瞬间，持续的大并发直接落到了数据库上，就在这个 Key 的点上击穿了缓存。</p><p><strong>击穿解决方案：</strong></p><p>​    使用互斥锁或者分布式锁来对并发请求进行控制，避免对同一资源的并发读写竞争，另外也可以使用热点数据预加载等机制来提前将热点数据加入缓存，在其失效时快速刷新缓存</p><p>参考：<a href="https://mp.weixin.qq.com/s/G0PUOOD9_IgTJEVUKsTOmg">2W 字图解 Redis，面试必过必杀技！！</a></p><p>​     <a href="https://mp.weixin.qq.com/s/1TYKqtpo59HhliZtqcBQiw">JAVA架构 | Redis分布式缓存原理分析</a></p><p><a href="https://blog.csdn.net/ymb615ymb/article/details/123392106">     十三、Redis持久化之RDB原理_会飞的IT蜗牛的博客-CSDN博客_rdb</a></p>]]></content>
      
      
      <categories>
          
          <category> Redis详解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 3 备忘清单</title>
      <link href="/2024/11/24/Vue%203%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/Vue%203%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-3-备忘清单"><a href="#Vue-3-备忘清单" class="headerlink" title="Vue 3 备忘清单"></a>Vue 3 备忘清单</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>Vue 是一套用于构建用户界面的渐进式框架</p><ul><li><a href="https://cn.vuejs.org/">Vue 3.x 官方文档</a> <em>(cn.vuejs.org)</em></li><li><a href="https://router.vuejs.org/zh/">Vue Router 4.x 官方文档</a> <em>(router.vuejs.org)</em></li><li><a href="https://quickref.me/zh-CN/docs/vue2.html">Vue 2 备忘清单</a></li></ul><p>注意：Vue 3.x 版本对应 Vue Router 4.x 路由版本</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">已安装 16.0 或更高版本的 Node.js</span><br><span class="line"></span><br><span class="line">$ npm init vue@latest</span><br><span class="line">指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具</span><br><span class="line"></span><br><span class="line">✔ Project name: … &lt;your-project-name&gt;</span><br><span class="line">✔ Add TypeScript? … No/Yes</span><br><span class="line">✔ Add JSX Support? … No/Yes</span><br><span class="line">✔ Add Vue Router <span class="keyword">for</span> Single Page Application development? … No/Yes</span><br><span class="line">✔ Add Pinia <span class="keyword">for</span> state management? … No/Yes</span><br><span class="line">✔ Add Vitest <span class="keyword">for</span> Unit testing? … No/Yes</span><br><span class="line">✔ Add Cypress <span class="keyword">for</span> both Unit and End-to-End testing? … No/Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code quality? … No/Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No/Yes</span><br><span class="line"></span><br><span class="line">Scaffolding project <span class="keyword">in</span> ./&lt;your-project-name&gt;...</span><br><span class="line">Done.</span><br><span class="line">安装依赖并启动开发服务器</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> &lt;your-project-name&gt;</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br><span class="line">当你准备将应用发布到生产环境时，请运行：</span><br><span class="line"></span><br><span class="line">$ npm run build</span><br><span class="line">此命令会在 ./dist 文件夹中为你的应用创建一个生产环境的构建版本</span><br></pre></td></tr></table></figure><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      message</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>挂载应用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过-CDN-使用-Vue"><a href="#通过-CDN-使用-Vue" class="headerlink" title="通过 CDN 使用 Vue"></a>通过 CDN 使用 Vue</h3><script src="https://unpkg.com/vue@3/dist/vue.global.js"></script> <div id="app"></div><script>   const { createApp, ref } = Vue    createApp({             setup() {       const message = ref("Hello Vue3")        return {            message        }                     }    }).mount('#app')</script><h3 id="使用-ES-模块构建版本"><a href="#使用-ES-模块构建版本" class="headerlink" title="使用 ES 模块构建版本"></a>使用 ES 模块构建版本</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123; message, ref &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; createApp, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;https://unpkg.com/vue@3/dist/vue.esm-browser.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> message = <span class="title function_">ref</span>(<span class="string">&quot;Hello Vue3&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        message</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="文本插值"><a href="#文本插值" class="headerlink" title="文本插值"></a>文本插值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">使用的是 Mustache 语法 (即双大括号)，每次 msg 属性更改时它也会同步更新</span><br></pre></td></tr></table></figure><h3 id="原始-HTML"><a href="#原始-HTML" class="headerlink" title="原始 HTML"></a>原始 HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">]<span class="tag">&lt;<span class="name">p</span>&gt;</span>Using text interpolation: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">双大括号&#123;&#123;&#125;&#125;会将数据解释为纯文本，使用 v-html 指令，将插入 HTML</span><br></pre></td></tr></table></figure><h3 id="Attribute-绑定"><a href="#Attribute-绑定" class="headerlink" title="Attribute 绑定"></a>Attribute 绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">简写</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="布尔型-Attribute"><a href="#布尔型-Attribute" class="headerlink" title="布尔型 Attribute"></a>布尔型 Attribute</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span></span><br><span class="line">  Button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态绑定多个值"><a href="#动态绑定多个值" class="headerlink" title="动态绑定多个值"></a>动态绑定多个值</h3><p>通过不带参数的 <code>v-bind</code>，你可以将它们绑定到单个元素上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> comp <span class="keyword">from</span> <span class="string">&quot;./Comp.vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> a = <span class="title function_">ref</span>(<span class="string">&quot;hello&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> b = <span class="title function_">ref</span>(<span class="string">&quot;world&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123;a, b&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你是使用的 <code>setup</code> 语法糖。需要使用 <code>defineprops</code> 声名（可以直接使用<code>a</code>/<code>b</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-JavaScript-表达式"><a href="#使用-JavaScript-表达式" class="headerlink" title="使用 JavaScript 表达式"></a>使用 JavaScript 表达式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="仅支持表达式-例子都是无效"><a href="#仅支持表达式-例子都是无效" class="headerlink" title="仅支持表达式(例子都是无效)"></a>仅支持表达式(例子都是无效)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 这是一个语句，而非表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">var</span> a = <span class="number">1</span> &#125;&#125;</span><br><span class="line">&lt;!-- 条件控制也不支持，请使用三元表达式 --&gt;</span><br><span class="line">&#123;&#123; <span class="keyword">if</span> (ok) &#123; <span class="keyword">return</span> message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">:title</span>=<span class="string">&quot;toTitleDate(date)&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; formatDate(date) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参数-Arguments"><a href="#参数-Arguments" class="headerlink" title="参数 Arguments"></a>参数 Arguments</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里的 <code>attributeName</code> 会作为一个 JS 表达式被动态执行</p><h3 id="动态的事件名称"><a href="#动态的事件名称" class="headerlink" title="动态的事件名称"></a>动态的事件名称</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">eventName</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修饰符-Modifiers"><a href="#修饰符-Modifiers" class="headerlink" title="修饰符 Modifiers"></a>修饰符 Modifiers</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">.prevent` 修饰符会告知 `v-on` 指令对触发的事件调用 `event.preventDefault()</span><br></pre></td></tr></table></figure><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v-on:submit.prevent=<span class="string">&quot;onSubmit&quot;</span></span><br><span class="line">──┬─ ─┬──── ─┬─────  ─┬──────</span><br><span class="line">  ┆   ┆      ┆        ╰─ Value 解释为JS表达式</span><br><span class="line">  ┆   ┆      ╰─ Modifiers 由前导点表示</span><br><span class="line">  ┆   ╰─ Argument 跟随冒号或速记符号</span><br><span class="line">  ╰─ Name 以 v- 开头使用速记时可以省略</span><br></pre></td></tr></table></figure><h2 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h2><h3 id="声明状态"><a href="#声明状态" class="headerlink" title="声明状态"></a>声明状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; state.count &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `defineComponent`用于IDE推导类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// setup 用于组合式 API 的特殊钩子函数</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴露 state 到模板</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="声明方法"><a href="#声明方法" class="headerlink" title="声明方法"></a>声明方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; state.count &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不要忘记同时暴露 increment 函数</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      state,</span><br><span class="line">      increment</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="lt-script-setup-gt-setup语法糖"><a href="#lt-script-setup-gt-setup语法糖" class="headerlink" title="&lt;script setup&gt; setup语法糖"></a><code>&lt;script setup&gt;</code> setup语法糖</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> state = <span class="title function_">reactive</span>(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; state.count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>setup</code></strong> 语法糖用于简化代码，尤其是当需要暴露的状态和方法越来越多时</p><h3 id="用-ref-定义响应式变量"><a href="#用-ref-定义响应式变量" class="headerlink" title="用 ref() 定义响应式变量"></a>用 <code>ref()</code> 定义响应式变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">reactive`只能用于对象、数组和 `Map`、`Set` 这样的集合类型，对 string、number 和 boolean 这样的原始类型则需要使用`ref</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">const count = ref(0);</span><br><span class="line"></span><br><span class="line">console.log(count); // &#123; value: 0 &#125;</span><br><span class="line">console.log(count.value); // 0</span><br><span class="line">count.value++;</span><br><span class="line">console.log(count.value); // 1</span><br><span class="line">const objectRef = ref(&#123; count: 0 &#125;);</span><br><span class="line"></span><br><span class="line">// 这是响应式的替换</span><br><span class="line">objectRef.value = &#123; count: 1 &#125;;</span><br><span class="line">const obj = &#123;</span><br><span class="line">  foo: ref(1),</span><br><span class="line">  bar: ref(2)</span><br><span class="line">&#125;;</span><br><span class="line">// 该函数接收一个 ref</span><br><span class="line">// 需要通过 .value 取值</span><br><span class="line">// 但它会保持响应性</span><br><span class="line">callSomeFunction(obj.foo);</span><br><span class="line"></span><br><span class="line">// 仍然是响应式的</span><br><span class="line">const &#123; foo, bar &#125; = obj;</span><br></pre></td></tr></table></figure><p>在 html 模板中不需要带 <code>.value</code> 就可以使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="有状态方法"><a href="#有状态方法" class="headerlink" title="有状态方法"></a>有状态方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive, defineComponent, onUnmounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">&#x27;lodash-es&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 每个实例都有了自己的预置防抖的处理函数</span></span><br><span class="line">    <span class="keyword">const</span> debouncedClick = <span class="title function_">debounce</span>(click, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">click</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// ... 对点击的响应 ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最好是在组件卸载时</span></span><br><span class="line">    <span class="comment">// 清除掉防抖计时器</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      debouncedClick.<span class="title function_">cancel</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应式样式"><a href="#响应式样式" class="headerlink" title="响应式样式"></a>响应式样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> open = <span class="title function_">ref</span>(<span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;open = !open&quot;</span>&gt;</span>Toggle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Vue!<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: height <span class="number">0.1s</span> linear;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="built_in">v-bind</span>(open ? <span class="string">&#x27;30px&#x27;</span> : <span class="string">&#x27;0px&#x27;</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式进阶-——-watch-和-computed"><a href="#响应式进阶-——-watch-和-computed" class="headerlink" title="响应式进阶 —— watch 和 computed"></a>响应式进阶 —— watch 和 computed</h2><h3 id="监听状态"><a href="#监听状态" class="headerlink" title="监听状态"></a>监听状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isEvent = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  state.<span class="property">count</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    is event: &#123;&#123; isEvent ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="立即监听状态"><a href="#立即监听状态" class="headerlink" title="立即监听状态"></a>立即监听状态</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(count, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  isEvent.<span class="property">value</span> = count.<span class="property">value</span> % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  <span class="comment">// 上例中的 watch 不会立即执行，导致 isEvent 状态的初始值不准确。配置立即执行，会在一开始的时候立即执行一次</span></span><br><span class="line">  <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="计算状态"><a href="#计算状态" class="headerlink" title="计算状态"></a>计算状态</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// computed 的回调函数里，会根据已有并用到的状态计算出新的状态</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> capital = <span class="title function_">computed</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> text.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>to capital: &#123;&#123; capital &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><h3 id="defineProps"><a href="#defineProps" class="headerlink" title="defineProps"></a>defineProps</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineProps &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这里可以将 `username` 解构出来，</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 但是一旦解构出来再使用，就不具备响应式能力</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">username</span>: <span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>username: &#123;&#123; username &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件定义需要的参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> username = <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">:username</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件参入参数</p><h3 id="defineEmits"><a href="#defineEmits" class="headerlink" title="defineEmits"></a>defineEmits</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineEmits, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;search&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;search&#x27;</span>, keyword.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件定义支持 <code>emit</code> 的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params">keyword</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> @<span class="attr">search</span>=<span class="string">&quot;onSearch&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件绑定子组件定义的事件</p><h3 id="defineExpose"><a href="#defineExpose" class="headerlink" title="defineExpose"></a>defineExpose</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; defineExpose, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> keyword = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(keyword.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123; onSearch &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;keyword&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件对父组件暴露方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> childrenRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> onSearch = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  childrenRef.<span class="property">value</span>.<span class="title function_">onSearch</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">children</span> <span class="attr">ref</span>=<span class="string">&#x27;childrenRef&#x27;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;onSearch&quot;</span>&gt;</span>search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件调用子组件的方法</p><h3 id="Provide-Inject"><a href="#Provide-Inject" class="headerlink" title="Provide / Inject"></a>Provide / Inject</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">InjectionKey</span>, <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ProvideKey</span> = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="title class_">Ref</span>&lt;<span class="built_in">string</span>&gt;&gt;</span><br></pre></td></tr></table></figure><p>在应用中使用 <code>ProvideKey</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> text = ref&lt;string&gt;(<span class="string">&#x27;123&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">provide</span>(<span class="title class_">ProvideKey</span>, text)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件为后代组件提供数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=<span class="string">&quot;ts&quot;</span>&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ProvideKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> value = <span class="title function_">inject</span>(<span class="title class_">ProvideKey</span>)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>后代组件注入父组件提供的数据</p><h2 id="Vue-中使用-TypeScript"><a href="#Vue-中使用-TypeScript" class="headerlink" title="Vue 中使用 TypeScript"></a>Vue 中使用 TypeScript</h2><h3 id="为组件的-props-标注类型"><a href="#为组件的-props-标注类型" class="headerlink" title="为组件的 props 标注类型"></a>为组件的 props 标注类型</h3><p>当使用 <code>&lt;script setup&gt;</code> 时，<code>defineProps()</code> 宏函数支持从它的参数中推导类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">foo</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">bar</span>: <span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">props.<span class="property">foo</span> <span class="comment">// string</span></span></span><br><span class="line"><span class="language-javascript">props.<span class="property">bar</span> <span class="comment">// number | undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对同一个文件中的一个接口或对象类型字面量的引用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line"></span><br><span class="line">defineProps&lt;<span class="title class_">Props</span>&gt;()</span><br></pre></td></tr></table></figure><h4 id="Props-解构默认值"><a href="#Props-解构默认值" class="headerlink" title="Props 解构默认值"></a>Props 解构默认值</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  msg?: <span class="built_in">string</span></span><br><span class="line">  labels?: <span class="built_in">string</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps&lt;<span class="title class_">Props</span>&gt;(), &#123;</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">labels</span>: <span class="function">() =&gt;</span> [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用目前为实验性的响应性语法糖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">interface <span class="title class_">Props</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: string</span></span><br><span class="line"><span class="language-javascript">  count?: number</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对 defineProps() 的响应性解构</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 默认值会被编译为等价的运行时选项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  name, count = <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">&#125; = defineProps&lt;<span class="title class_">Props</span>&gt;()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为组件的-emits-标注类型"><a href="#为组件的-emits-标注类型" class="headerlink" title="为组件的 emits 标注类型"></a>为组件的 emits 标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 运行时</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;update&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 基于类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;change&#x27;</span>, <span class="attr">id</span>: number): <span class="title function_">void</span></span></span><br><span class="line"><span class="language-javascript">  (<span class="attr">e</span>: <span class="string">&#x27;update&#x27;</span>, <span class="attr">value</span>: string): <span class="keyword">void</span></span></span><br><span class="line"><span class="language-javascript">&#125;&gt;()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref() 标注类型"></a>为 ref() 标注类型</h3><p>ref 会根据初始化时的值推导其类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Ref</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">year</span>: <span class="title class_">Ref</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="string">&#x27;2020&#x27;</span>)</span><br><span class="line"></span><br><span class="line">year.<span class="property">value</span> = <span class="number">2020</span> <span class="comment">// 成功！</span></span><br></pre></td></tr></table></figure><h3 id="为-reactive-标注类型"><a href="#为-reactive-标注类型" class="headerlink" title="为 reactive() 标注类型"></a>为 reactive() 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  year?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">book</span>: <span class="title class_">Book</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;Vue 3 指引&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为-computed-标注类型"><a href="#为-computed-标注类型" class="headerlink" title="为 computed() 标注类型"></a>为 computed() 标注类型</h3><p>你还可以通过泛型参数显式指定类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = computed&lt;<span class="built_in">number</span>&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 若返回值不是 number 类型则会报错</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="为事件处理函数标注类型"><a href="#为事件处理函数标注类型" class="headerlink" title="为事件处理函数标注类型"></a>为事件处理函数标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// `event` 隐式地标注为 `any` 类型</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显式地为事件处理函数的参数标注类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为-provide-inject-标注类型"><a href="#为-provide-inject-标注类型" class="headerlink" title="为 provide / inject 标注类型"></a>为 provide / inject 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; provide, inject &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">InjectionKey</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="title class_">Symbol</span>() <span class="keyword">as</span> <span class="title class_">InjectionKey</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="comment">// 若提供的是非字符串值会导致错误</span></span><br><span class="line"><span class="title function_">provide</span>(key, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// foo 的类型：string | undefined</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="title function_">inject</span>(key)</span><br></pre></td></tr></table></figure><h3 id="为模板引用标注类型"><a href="#为模板引用标注类型" class="headerlink" title="为模板引用标注类型"></a>为模板引用标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> el = ref&lt;<span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  el.<span class="property">value</span>?.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&quot;el&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为组件模板引用标注类型"><a href="#为组件模板引用标注类型" class="headerlink" title="为组件模板引用标注类型"></a>为组件模板引用标注类型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyModal.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isContentShown = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">open</span> = </span></span><br><span class="line"><span class="language-javascript">      (<span class="params"></span>) =&gt; (isContentShown.<span class="property">value</span> = <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  open</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 TypeScript 内置的 <code>InstanceType</code> 工具类型来获取其实例类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- App.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyModal</span> <span class="keyword">from</span> <span class="string">&#x27;./MyModal.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">type <span class="title class_">Modal</span> = <span class="title class_">InstanceType</span>&lt;<span class="keyword">typeof</span> <span class="title class_">MyModal</span>&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> modal = ref&lt;<span class="title class_">Modal</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">openModal</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  modal.<span class="property">value</span>?.<span class="title function_">open</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选项式-API-为组件的-props-标注类型"><a href="#选项式-API-为组件的-props-标注类型" class="headerlink" title="选项式 API 为组件的 props 标注类型"></a>选项式 API 为组件的 props 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// 启用了类型推导</span></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">id</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>],</span><br><span class="line">    <span class="attr">msg</span>: &#123; <span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    <span class="attr">metadata</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 类型：string | undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    <span class="comment">// 类型：number|string|undefined</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">    <span class="comment">// 类型：string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">msg</span></span><br><span class="line">    <span class="comment">// 类型：any</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">metadata</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>使用 PropType 这个工具类型来标记更复杂的 props 类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">PropType</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">author</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">year</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">book</span>: &#123;</span><br><span class="line">      <span class="comment">// 提供相对 `Object` 更确定的类型</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="title class_">Book</span>&gt;,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 也可以标记函数</span></span><br><span class="line">    <span class="attr">callback</span>: <span class="title class_">Function</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="function">(<span class="params"><span class="attr">id</span>: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>&gt;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">title</span> <span class="comment">// string</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">book</span>.<span class="property">year</span> <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TS Error: argument of type &#x27;string&#x27; is not</span></span><br><span class="line">    <span class="comment">// assignable to parameter of type &#x27;number&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callback</span>?.(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为组件的-emits-标注类型"><a href="#选项式-API-为组件的-emits-标注类型" class="headerlink" title="选项式 API 为组件的 emits 标注类型"></a>选项式 API 为组件的 emits 标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Payload</span> = &#123; <span class="attr">bookName</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">emits</span>: &#123;</span><br><span class="line">    <span class="title function_">addBook</span>(<span class="params"><span class="attr">payload</span>: <span class="title class_">Payload</span></span>) &#123;</span><br><span class="line">      <span class="comment">// 执行运行时校验</span></span><br><span class="line">      <span class="keyword">return</span> payload.<span class="property">bookName</span>.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;addBook&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">bookName</span>: <span class="number">123</span> <span class="comment">// 类型错误</span></span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 类型错误</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;non-declared-event&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为计算属性标记类型"><a href="#选项式-API-为计算属性标记类型" class="headerlink" title="选项式 API 为计算属性标记类型"></a>选项式 API 为计算属性标记类型</h3><p>计算属性会自动根据其返回值来推导其类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">greeting</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> <span class="comment">// 类型：string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在某些场景中，你可能想要显式地标记出计算属性的类型以确保其实现是正确的：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;Hello!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 显式标注返回类型</span></span><br><span class="line">    <span class="title function_">greeting</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">message</span> + <span class="string">&#x27;!&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标注一个可写的计算属性</span></span><br><span class="line">    <span class="attr">greetingUppercased</span>: &#123;</span><br><span class="line">      <span class="title function_">get</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">greeting</span>.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params"><span class="attr">newValue</span>: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">message</span> = newValue.<span class="title function_">toUpperCase</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-为事件处理函数标注类型"><a href="#选项式-API-为事件处理函数标注类型" class="headerlink" title="选项式 API 为事件处理函数标注类型"></a>选项式 API 为事件处理函数标注类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params"><span class="attr">event</span>: <span class="title class_">Event</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>((event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span>).<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="选项式-API-扩展全局属性"><a href="#选项式-API-扩展全局属性" class="headerlink" title="选项式 API 扩展全局属性"></a>选项式 API 扩展全局属性</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$http</span>: <span class="keyword">typeof</span> axios</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型扩展的位置"><a href="#类型扩展的位置" class="headerlink" title="类型扩展的位置"></a>类型扩展的位置</h4><p>我们可以将这些类型扩展放在一个 <code>.ts</code> 文件，或是一个影响整个项目的 <code>*.d.ts</code> 文件中</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不工作，将覆盖原始类型。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常工作。</span></span><br><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$translate</span>: <span class="function">(<span class="params"><span class="attr">key</span>: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="选项式-API-扩展自定义选项"><a href="#选项式-API-扩展自定义选项" class="headerlink" title="选项式 API 扩展自定义选项"></a>选项式 API 扩展自定义选项</h3><p>某些插件，比如 vue-router，提供了一些自定义的组件选项，比如 beforeRouteEnter：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果没有确切的类型标注，这个钩子函数的参数会隐式地标注为 <code>any</code> 类型。我们可以为 <code>ComponentCustomOptions</code> 接口扩展自定义的选项来支持：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">ComponentCustomOptions</span> &#123;</span><br><span class="line">    beforeRouteEnter?(</span><br><span class="line">      <span class="attr">to</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">from</span>: <span class="title class_">Route</span>,</span><br><span class="line">      <span class="attr">next</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">    ): <span class="built_in">void</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="API-参考"><a href="#API-参考" class="headerlink" title="API 参考"></a>API 参考</h2><h3 id="全局-API-应用实例"><a href="#全局-API-应用实例" class="headerlink" title="全局 API - 应用实例"></a>全局 API - 应用实例</h3><div class="table-container"><table><thead><tr><th><code>createApp()</code></th><th>创建一个应用实例 <a href="https://cn.vuejs.org/api/application.html#create-app">#</a></th></tr></thead><tbody><tr><td><code>createSSRApp()</code></td><td>以 <a href="https://cn.vuejs.org/guide/scaling-up/ssr.html#client-hydration">SSR 激活</a>模式创建一个应用实例 <a href="https://cn.vuejs.org/api/application.html#create-ssr-app">#</a></td></tr><tr><td><code>app.mount()</code></td><td>将应用实例挂载在一个容器元素中 <a href="https://cn.vuejs.org/api/application.html#app-mount">#</a></td></tr><tr><td><code>app.unmount()</code></td><td>卸载一个已挂载的应用实例 <a href="https://cn.vuejs.org/api/application.html#app-unmount">#</a></td></tr><tr><td><code>app.provide()</code></td><td>提供一个可以在应用中的所有后代组件中注入使用的值 <a href="https://cn.vuejs.org/api/application.html#app-provide">#</a></td></tr><tr><td><code>app.component()</code></td><td>注册或获取全局组件 <a href="https://cn.vuejs.org/api/application.html#app-component">#</a></td></tr><tr><td><code>app.directive()</code></td><td>注册或获取全局指令 <a href="https://cn.vuejs.org/api/application.html#app-directive">#</a></td></tr><tr><td><code>app.use()</code></td><td>安装一个插件 <a href="https://cn.vuejs.org/api/application.html#app-use">#</a></td></tr><tr><td><code>app.mixin()</code></td><td>全局注册一个混入 <a href="https://cn.vuejs.org/api/application.html#app-mixin">#</a></td></tr><tr><td><code>app.version</code></td><td>当前应用所使用的 Vue 版本号 <a href="https://cn.vuejs.org/api/application.html#app-version">#</a></td></tr><tr><td><code>app.config</code></td><td>获得应用实例的配置设定 <a href="https://cn.vuejs.org/api/application.html#app-config">#</a></td></tr><tr><td><code>app.config.errorHandler</code></td><td>为应用内抛出的未捕获错误指定一个全局处理函数 <a href="https://cn.vuejs.org/api/application.html#app-config-errorhandler">#</a></td></tr><tr><td><code>app.config.warnHandler</code></td><td>为 Vue 的运行时警告指定一个自定义处理函数 <a href="https://cn.vuejs.org/api/application.html#app-config-warnhandler">#</a></td></tr><tr><td><code>app.config.performance</code></td><td>在浏览器开发工具中追踪性能表现 <a href="https://cn.vuejs.org/api/application.html#app-config-performance">#</a></td></tr><tr><td><code>app.config.compilerOptions</code></td><td>配置运行时编译器的选项 <a href="https://cn.vuejs.org/api/application.html#app-config-compileroptions">#</a></td></tr><tr><td><code>app.config.globalProperties</code></td><td>注册全局属性对象 <a href="https://cn.vuejs.org/api/application.html#app-config-globalproperties">#</a></td></tr><tr><td><code>app.config.optionMergeStrategies</code></td><td>定义自定义组件选项的合并策略的对象 <a href="https://cn.vuejs.org/api/application.html#app-config-optionmergestrategies">#</a></td></tr></tbody></table></div><h3 id="全局-API-通用"><a href="#全局-API-通用" class="headerlink" title="全局 API - 通用"></a>全局 API - 通用</h3><div class="table-container"><table><thead><tr><th><code>version</code></th><th>Vue 版本号 <a href="https://cn.vuejs.org/api/general.html#version">#</a></th></tr></thead><tbody><tr><td><code>nextTick()</code></td><td>等待下一次 DOM 更新后执行回调 <a href="https://cn.vuejs.org/api/general.html#nexttick">#</a></td></tr><tr><td><code>defineComponent()</code></td><td>在定义 Vue 组件时提供类型推导的辅助函数 <a href="https://cn.vuejs.org/api/general.html#definecomponent">#</a></td></tr><tr><td><code>defineAsyncComponent()</code></td><td>定义一个异步组件 <a href="https://cn.vuejs.org/api/general.html#defineasynccomponent">#</a></td></tr><tr><td><code>defineCustomElement()</code></td><td>和 <code>defineComponent</code> 接受的参数相同，不同的是会返回一个原生自定义元素类的构造器 <a href="https://cn.vuejs.org/api/general.html#definecustomelement">#</a></td></tr></tbody></table></div><h3 id="组合式-API-setup"><a href="#组合式-API-setup" class="headerlink" title="组合式 API - setup()"></a>组合式 API - setup()</h3><div class="table-container"><table><thead><tr><th><code>基本使用</code></th><th><a href="https://cn.vuejs.org/api/composition-api-setup.html#basic-usage">#</a></th></tr></thead><tbody><tr><td><code>访问 Props</code></td><td><a href="https://cn.vuejs.org/api/composition-api-setup.html#accessing-props">#</a></td></tr><tr><td><code>Setup 上下文</code></td><td><a href="https://cn.vuejs.org/api/composition-api-setup.html#setup-context">#</a></td></tr><tr><td><code>与渲染函数一起使用</code></td><td><a href="https://cn.vuejs.org/api/composition-api-setup.html#usage-with-render-functions">#</a></td></tr></tbody></table></div><h3 id="组合式-API-依赖注入"><a href="#组合式-API-依赖注入" class="headerlink" title="组合式 API - 依赖注入"></a>组合式 API - 依赖注入</h3><div class="table-container"><table><thead><tr><th><code>provide()</code></th><th>提供一个可以被后代组件中注入使用的值 <a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#provide">#</a></th></tr></thead><tbody><tr><td><code>inject()</code></td><td>注入一个由祖先组件提供的值 <a href="https://cn.vuejs.org/api/composition-api-dependency-injection.html#inject">#</a></td></tr></tbody></table></div><h3 id="组合式-API-生命周期钩子"><a href="#组合式-API-生命周期钩子" class="headerlink" title="组合式 API - 生命周期钩子"></a>组合式 API - 生命周期钩子</h3><div class="table-container"><table><thead><tr><th><code>onMounted()</code></th><th>组件挂载完成后执行 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted">#</a></th></tr></thead><tbody><tr><td><code>onUpdated()</code></td><td>状态变更而更新其 DOM 树之后调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated">#</a></td></tr><tr><td><code>onUnmounted()</code></td><td>组件实例被卸载之后调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted">#</a></td></tr><tr><td><code>onBeforeMount()</code></td><td>组件被挂载之前被调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforemount">#</a></td></tr><tr><td><code>onBeforeUpdate()</code></td><td>状态变更而更新其 DOM 树之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeupdate">#</a></td></tr><tr><td><code>onBeforeUnmount()</code></td><td>组件实例被卸载之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onbeforeunmount">#</a></td></tr><tr><td><code>onErrorCaptured()</code></td><td>捕获了后代组件传递的错误时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onerrorcaptured">#</a></td></tr><tr><td><code>onRenderTracked()</code></td><td>组件渲染过程中追踪到响应式依赖时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertracked">#</a></td></tr><tr><td><code>onRenderTriggered()</code></td><td>响应式依赖的变更触发了组件渲染时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onrendertriggered">#</a></td></tr><tr><td><code>onActivated()</code></td><td>若组件实例是 <KeepAlive> 缓存树的一部分，当组件被插入到 DOM 中时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onactivated">#</a></td></tr><tr><td><code>onDeactivated()</code></td><td>若组件实例是 <KeepAlive> 缓存树的一部分，当组件从 DOM 中被移除时调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#ondeactivated">#</a></td></tr><tr><td><code>onServerPrefetch()</code></td><td>组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onserverprefetch">#</a></td></tr></tbody></table></div><h3 id="组合式-API-响应式-工具"><a href="#组合式-API-响应式-工具" class="headerlink" title="组合式 API - 响应式: 工具"></a>组合式 API - 响应式: 工具</h3><div class="table-container"><table><thead><tr><th><code>isRef()</code></th><th>判断是否为 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isref">#</a></th></tr></thead><tbody><tr><td><code>unref()</code></td><td>是 ref，返回内部值，否则返回参数本身 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#unref">#</a></td></tr><tr><td><code>toRef()</code></td><td>创建一个属性对应的 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">#</a></td></tr><tr><td><code>toRefs()</code></td><td>将对象上的每一个可枚举属性转换为 ref <a href="https://cn.vuejs.org/api/reactivity-utilities.html#torefs">#</a></td></tr><tr><td><code>isProxy()</code></td><td>检查一个对象是否是由 <code>reactive()</code>、<code>readonly()</code>、<code>shallowReactive()</code> 或 <code>shallowReadonly()</code> 创建的代理 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isproxy">#</a></td></tr><tr><td><code>isReactive()</code></td><td>检查一个对象是否是由 <code>reactive()</code> 或 <code>shallowReactive()</code> 创建的代理。 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreactive">#</a></td></tr><tr><td><code>isReadonly()</code></td><td>检查传入的值是否为只读对象 <a href="https://cn.vuejs.org/api/reactivity-utilities.html#isreadonly">#</a></td></tr></tbody></table></div><h3 id="组合式-API-响应式-核心"><a href="#组合式-API-响应式-核心" class="headerlink" title="组合式 API - 响应式: 核心"></a>组合式 API - 响应式: 核心</h3><div class="table-container"><table><thead><tr><th><code>ref()</code></th><th>返回一个 ref 对象 <a href="https://cn.vuejs.org/api/reactivity-core.html#ref">#</a></th></tr></thead><tbody><tr><td><code>computed ()</code></td><td>定义一个计算属性 <a href="https://cn.vuejs.org/api/reactivity-core.html#computed">#</a></td></tr><tr><td><code>reactive()</code></td><td>返回一个对象的响应式代理 <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive">#</a></td></tr><tr><td><code>readonly()</code></td><td>返回一个原值的只读代理 <a href="https://cn.vuejs.org/api/reactivity-core.html#readonly">#</a></td></tr><tr><td><code>watchEffect()</code></td><td>立即运行一个函数，同时监听 <a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect">#</a></td></tr><tr><td><code>watchPostEffect()</code></td><td><code>watchEffect()</code> 使用 <code>flush: &#39;post&#39;</code> 选项时的别名。 <a href="https://cn.vuejs.org/api/reactivity-core.html#watchposteffect">#</a></td></tr><tr><td><code>watchSyncEffect()</code></td><td><code>watchEffect()</code> 使用 <code>flush: &#39;sync&#39;</code> 选项时的别名。 <a href="https://cn.vuejs.org/api/reactivity-core.html#watchsynceffect">#</a></td></tr><tr><td><code>watch()</code></td><td>侦听一个或多个响应式数据源 <a href="https://cn.vuejs.org/api/reactivity-core.html#watch">#</a></td></tr></tbody></table></div><h3 id="选项式-API-状态选项"><a href="#选项式-API-状态选项" class="headerlink" title="选项式 API - 状态选项"></a>选项式 API - 状态选项</h3><div class="table-container"><table><thead><tr><th><code>data</code></th><th>声明组件初始响应式状态 <a href="https://cn.vuejs.org/api/options-state.html#data">#</a></th></tr></thead><tbody><tr><td><code>props</code></td><td>声明一个组件的 props <a href="https://cn.vuejs.org/api/options-state.html#props">#</a></td></tr><tr><td><code>computed</code></td><td>声明要在组件实例上暴露的计算属性 <a href="https://cn.vuejs.org/api/options-state.html#computed">#</a></td></tr><tr><td><code>methods</code></td><td>声明要混入到组件实例中的方法 <a href="https://cn.vuejs.org/api/options-state.html#methods">#</a></td></tr><tr><td><code>watch</code></td><td>声明在数据更改时调用的侦听回调 <a href="https://cn.vuejs.org/api/options-state.html#watch">#</a></td></tr><tr><td><code>emits</code></td><td>声明由组件触发的自定义事件 <a href="https://cn.vuejs.org/api/options-state.html#emits">#</a></td></tr><tr><td><code>expose</code></td><td>声明当组件实例被父组件通过模板引用访问时暴露的公共属性 <a href="https://cn.vuejs.org/api/options-state.html#expose">#</a></td></tr></tbody></table></div><h3 id="选项式-API-生命周期选项"><a href="#选项式-API-生命周期选项" class="headerlink" title="选项式 API - 生命周期选项"></a>选项式 API - 生命周期选项</h3><div class="table-container"><table><thead><tr><th><code>beforeCreate</code></th><th>组件实例初始化完成之后立即调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforecreate">#</a></th></tr></thead><tbody><tr><td><code>created</code></td><td>组件实例处理完所有与状态相关的选项后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#created">#</a></td></tr><tr><td><code>beforeMount</code></td><td>组件被挂载之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforemount">#</a></td></tr><tr><td><code>mounted</code></td><td>组件被挂载之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#mounted">#</a></td></tr><tr><td><code>beforeUpdate</code></td><td>状态变更而更新其 DOM 树之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforeupdate">#</a></td></tr><tr><td><code>updated</code></td><td>状态变更而更新其 DOM 树之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#updated">#</a></td></tr><tr><td><code>beforeUnmount</code></td><td>组件实例被卸载之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#beforeunmount">#</a></td></tr><tr><td><code>unmounted</code></td><td>组件实例被卸载之后调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#unmounted">#</a></td></tr><tr><td><code>errorCaptured</code></td><td>捕获了后代组件传递的错误时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#errorcaptured">#</a></td></tr><tr><td><code>renderTracked</code> <em>Dev only</em></td><td>组件渲染过程中追踪到响应式依赖时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#rendertracked">#</a></td></tr><tr><td><code>renderTriggered</code> <em>Dev only</em></td><td>响应式依赖的变更触发了组件渲染时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#rendertriggered-sup-classvt-badge-dev-only">#</a></td></tr><tr><td><code>activated</code></td><td>若组件实例是 缓存树的一部分，当组件被插入到 DOM 中时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#activated">#</a></td></tr><tr><td><code>deactivated</code></td><td>若组件实例是 缓存树的一部分，当组件从 DOM 中被移除时调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#deactivated">#</a></td></tr><tr><td><code>serverPrefetch</code> <em>SSR only</em></td><td>组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#serverprefetch">#</a></td></tr></tbody></table></div><h3 id="选项式-API-其他杂项"><a href="#选项式-API-其他杂项" class="headerlink" title="选项式 API - 其他杂项"></a>选项式 API - 其他杂项</h3><div class="table-container"><table><thead><tr><th><code>name</code></th><th>显式声明组件展示时的名称 <a href="https://cn.vuejs.org/api/options-misc.html#name">#</a></th></tr></thead><tbody><tr><td><code>inheritAttrs</code></td><td>是否启用默认的组件 <code>attribute</code> 透传行为 <a href="https://cn.vuejs.org/api/options-misc.html#inheritattrs">#</a></td></tr><tr><td><code>components</code></td><td>注册对当前组件实例可用的组件 <a href="https://cn.vuejs.org/api/options-misc.html#components">#</a></td></tr><tr><td><code>directives</code></td><td>注册对当前组件实例可用的指令 <a href="https://cn.vuejs.org/api/options-misc.html#directives">#</a></td></tr></tbody></table></div><h3 id="选项式-API-渲染选项"><a href="#选项式-API-渲染选项" class="headerlink" title="选项式 API - 渲染选项"></a>选项式 API - 渲染选项</h3><div class="table-container"><table><thead><tr><th><code>template</code></th><th>声明组件的字符串模板 <a href="https://cn.vuejs.org/api/options-rendering.html#template">#</a></th></tr></thead><tbody><tr><td><code>render</code></td><td>编程式地创建组件虚拟 DOM 树的函数 <a href="https://cn.vuejs.org/api/options-rendering.html#render">#</a></td></tr><tr><td><code>compilerOptions</code></td><td>配置组件模板的运行时编译器选项 <a href="https://cn.vuejs.org/api/options-rendering.html#compileroptions">#</a></td></tr></tbody></table></div><h3 id="选项式-API-组件实例"><a href="#选项式-API-组件实例" class="headerlink" title="选项式 API - 组件实例"></a>选项式 API - 组件实例</h3><div class="table-container"><table><thead><tr><th><code>$data</code></th><th>观察的数据对象 <a href="https://cn.vuejs.org/api/component-instance.html#data">#</a></th></tr></thead><tbody><tr><td><code>$props</code></td><td>组件已解析的 props 对象 <a href="https://cn.vuejs.org/api/component-instance.html#props">#</a></td></tr><tr><td><code>$el</code></td><td>实例管理的 DOM 根节点 <a href="https://cn.vuejs.org/api/component-instance.html#el">#</a></td></tr><tr><td><code>$options</code></td><td>实例的初始化选项 <a href="https://cn.vuejs.org/api/component-instance.html#options">#</a></td></tr><tr><td><code>$parent</code></td><td>父实例 <a href="https://cn.vuejs.org/api/component-instance.html#parent">#</a></td></tr><tr><td><code>$root</code></td><td>当前组件树的根实例 <a href="https://cn.vuejs.org/api/component-instance.html#root">#</a></td></tr><tr><td><code>$slots</code></td><td>访问被插槽分发的内容 <a href="https://cn.vuejs.org/api/component-instance.html#slots">#</a></td></tr><tr><td><code>$refs</code></td><td>DOM 元素和组件实例 <a href="https://cn.vuejs.org/api/component-instance.html#refs">#</a></td></tr><tr><td><code>$attrs</code></td><td>包含了组件所有<a href="https://cn.vuejs.org/guide/components/attrs.html">透传 attributes</a> <a href="https://cn.vuejs.org/api/component-instance.html#attrs">#</a></td></tr><tr><td><code>$watch()</code></td><td>观察 Vue 实例上的一个表达式或者一个函数计算结果的变化 <a href="https://cn.vuejs.org/api/component-instance.html#watch">#</a></td></tr><tr><td><code>$emit()</code></td><td>触发一个自定义事件 <a href="https://cn.vuejs.org/api/component-instance.html#emit">#</a></td></tr><tr><td><code>$forceUpdate()</code></td><td>强制该组件重新渲染 <a href="https://cn.vuejs.org/api/component-instance.html#forceupdate">#</a></td></tr><tr><td><code>$nextTick()</code></td><td>回调延迟执行 <a href="https://cn.vuejs.org/api/component-instance.html#nexttick">#</a></td></tr></tbody></table></div><h3 id="选项式-API-组合选项"><a href="#选项式-API-组合选项" class="headerlink" title="选项式 API - 组合选项"></a>选项式 API - 组合选项</h3><div class="table-container"><table><thead><tr><th><code>provide</code></th><th>提供可以被后代组件注入的值 <a href="https://cn.vuejs.org/api/options-composition.html#provide">#</a></th></tr></thead><tbody><tr><td><code>inject</code></td><td>注入一个由祖先组件提供的值 <a href="https://cn.vuejs.org/api/options-composition.html#inject">#</a></td></tr><tr><td><code>mixins</code></td><td>接收一个混入对象的数组 <a href="https://cn.vuejs.org/api/options-composition.html#mixins">#</a></td></tr><tr><td><code>extends</code></td><td>要继承的“基类”组件 <a href="https://cn.vuejs.org/api/options-composition.html#extends">#</a></td></tr></tbody></table></div><h3 id="内置内容-指令"><a href="#内置内容-指令" class="headerlink" title="内置内容 - 指令"></a>内置内容 - 指令</h3><div class="table-container"><table><thead><tr><th><code>v-text</code></th><th>更新元素的 <code>textContent</code> <a href="https://cn.vuejs.org/api/built-in-directives.html#v-text">#</a></th></tr></thead><tbody><tr><td><code>v-html</code></td><td>更新元素的 <code>innerHTML</code> <a href="https://cn.vuejs.org/api/built-in-directives.html#v-html">#</a></td></tr><tr><td><code>v-show</code></td><td>切换元素的 <code>display</code> css 属性 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-show">#</a></td></tr><tr><td><code>v-if</code></td><td>有条件地渲染元素 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-if">#</a></td></tr><tr><td><code>v-else</code></td><td><a href="https://cn.vuejs.org/api/built-in-directives.html#v-else">#</a></td></tr><tr><td><code>v-else-if</code></td><td><a href="https://cn.vuejs.org/api/built-in-directives.html#v-else-if">#</a></td></tr><tr><td><code>v-for</code></td><td>多次渲染元素或模板块 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-for">#</a></td></tr><tr><td><code>v-on</code></td><td>绑定事件监听器 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-on">#</a></td></tr><tr><td><code>v-bind</code></td><td>动态地绑定一个或多个属性 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-bind">#</a></td></tr><tr><td><code>v-model</code></td><td>创建双向绑定 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-model">#</a></td></tr><tr><td><code>v-slot</code></td><td>提供插槽或接收 props 的插槽 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-slot">#</a></td></tr><tr><td><code>v-pre</code></td><td>跳过元素和它的子元素编译过程 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-pre">#</a></td></tr><tr><td><code>v-once</code></td><td>只渲染元素和组件一次 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-once">#</a></td></tr><tr><td><code>v-memo</code> <em>(3.2+)</em></td><td>缓存一个模板的子树 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-memo">#</a></td></tr><tr><td><code>v-cloak</code></td><td>保持在元素上直到实例结束编译 <a href="https://cn.vuejs.org/api/built-in-directives.html#v-cloak">#</a></td></tr><tr><td><code>serverPrefetch</code> <em>SSR only</em></td><td>组件实例在服务器上被渲染之前调用 <a href="https://cn.vuejs.org/api/options-lifecycle.html#serverprefetch">#</a></td></tr></tbody></table></div><h3 id="内置内容-组件"><a href="#内置内容-组件" class="headerlink" title="内置内容 - 组件"></a>内置内容 - 组件</h3><div class="table-container"><table><thead><tr><th><code>&lt;Transition&gt;</code></th><th>单个元素/组件的过渡效果 <a href="https://cn.vuejs.org/api/built-in-components.html#transition">#</a></th></tr></thead><tbody><tr><td><code>&lt;TransitionGroup&gt;</code></td><td>多个元素/组件的过渡效果 <a href="https://cn.vuejs.org/api/built-in-components.html#transitiongroup">#</a></td></tr><tr><td><code>&lt;KeepAlive&gt;</code></td><td>缓存包裹在其中的动态切换组件 <a href="https://cn.vuejs.org/api/built-in-components.html#keepalive">#</a></td></tr><tr><td><code>&lt;Teleport&gt;</code></td><td>将其插槽内容渲染到 DOM 中的另一个位置 <a href="https://cn.vuejs.org/api/built-in-components.html#teleport">#</a></td></tr><tr><td><code>&lt;Suspense&gt;</code> <em>(Experimental)</em></td><td>协调对组件树中嵌套的异步依赖的处理 <a href="https://cn.vuejs.org/api/built-in-components.html#suspense">#</a></td></tr></tbody></table></div><h3 id="内置内容-特殊-Attributes"><a href="#内置内容-特殊-Attributes" class="headerlink" title="内置内容 - 特殊 Attributes"></a>内置内容 - 特殊 Attributes</h3><div class="table-container"><table><thead><tr><th><code>key</code></th><th>用在 Vue 的虚拟 DOM 算法 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#key">#</a></th></tr></thead><tbody><tr><td><code>ref</code></td><td>元素或子组件注册引用信息 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#ref">#</a></td></tr><tr><td><code>is</code></td><td>绑定动态组件 <a href="https://cn.vuejs.org/api/built-in-special-attributes.html#is">#</a></td></tr></tbody></table></div><h3 id="内置内容-特殊元素"><a href="#内置内容-特殊元素" class="headerlink" title="内置内容 - 特殊元素"></a>内置内容 - 特殊元素</h3><div class="table-container"><table><thead><tr><th><code>&lt;component&gt;</code></th><th>渲染一个“元组件”用于动态组件或元素 <a href="https://cn.vuejs.org/api/built-in-special-elements.html#component">#</a></th></tr></thead><tbody><tr><td><code>&lt;slot&gt;</code></td><td>组件模板中的插槽内容出口 <a href="https://cn.vuejs.org/api/built-in-special-elements.html#slot">#</a></td></tr></tbody></table></div><h3 id="单文件组件-语法定义"><a href="#单文件组件-语法定义" class="headerlink" title="单文件组件 - 语法定义"></a>单文件组件 - 语法定义</h3><div class="table-container"><table><thead><tr><th><code>总览</code></th><th><a href="https://cn.vuejs.org/api/sfc-spec.html#overview">#</a></th></tr></thead><tbody><tr><td><code>相应语言块</code></td><td><a href="https://cn.vuejs.org/api/sfc-spec.html#language-blocks">#</a></td></tr><tr><td><code>自动名称推导</code></td><td><a href="https://cn.vuejs.org/api/sfc-spec.html#automatic-name-inference">#</a></td></tr><tr><td><code>预处理器</code></td><td><a href="https://cn.vuejs.org/api/sfc-spec.html#pre-processors">#</a></td></tr><tr><td><code>Src 导入</code></td><td><a href="https://cn.vuejs.org/api/sfc-spec.html#src-imports">#</a></td></tr><tr><td><code>注释</code></td><td><a href="https://cn.vuejs.org/api/sfc-spec.html#comments">#</a></td></tr></tbody></table></div><h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件 - "></a>单文件组件 - <script setup></h3><div class="table-container"><table><thead><tr><th><code>基本语法</code></th><th><a href="https://cn.vuejs.org/api/sfc-script-setup.html#basic-syntax">#</a></th></tr></thead><tbody><tr><td><code>响应式</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#reactivity">#</a></td></tr><tr><td><code>使用组件</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#using-components">#</a></td></tr><tr><td><code>使用自定义指令</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#using-custom-directives">#</a></td></tr><tr><td><code>defineProps() 和 defineEmits()</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#defineprops-defineemits">#</a></td></tr><tr><td><code>defineExpose</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#defineexpose">#</a></td></tr><tr><td><code>useSlots() 和 useAttrs()</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#useslots-useattrs">#</a></td></tr><tr><td><code>与普通的 &lt;script&gt; 一起使用</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#usage-alongside-normal-script">#</a></td></tr><tr><td><code>顶层 await</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#top-level-await">#</a></td></tr><tr><td><code>针对 TypeScript 的功能</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#typescript-only-features">#</a></td></tr><tr><td><code>限制</code></td><td><a href="https://cn.vuejs.org/api/sfc-script-setup.html#restrictions">#</a></td></tr></tbody></table></div><h3 id="单文件组件-CSS-功能"><a href="#单文件组件-CSS-功能" class="headerlink" title="单文件组件 - CSS 功能"></a>单文件组件 - CSS 功能</h3><div class="table-container"><table><thead><tr><th><code>组件作用域 CSS</code></th><th><a href="https://cn.vuejs.org/api/sfc-css-features.html#scoped-css">#</a></th></tr></thead><tbody><tr><td><code>CSS Modules</code></td><td><a href="https://cn.vuejs.org/api/sfc-css-features.html#css-modules">#</a></td></tr><tr><td><code>CSS 中的 v-bind()</code></td><td><a href="https://cn.vuejs.org/api/sfc-css-features.html#v-bind-in-css">#</a></td></tr></tbody></table></div><h3 id="进阶-API-渲染函数"><a href="#进阶-API-渲染函数" class="headerlink" title="进阶 API - 渲染函数"></a>进阶 API - 渲染函数</h3><div class="table-container"><table><thead><tr><th><code>h()</code></th><th>创建虚拟 DOM 节点 <a href="https://cn.vuejs.org/api/render-function.html#h">#</a></th></tr></thead><tbody><tr><td><code>mergeProps()</code></td><td>合并多个 props 对象 <a href="https://cn.vuejs.org/api/render-function.html#mergeprops">#</a></td></tr><tr><td><code>cloneVNode()</code></td><td>克隆一个 vnode <a href="https://cn.vuejs.org/api/render-function.html#clonevnode">#</a></td></tr><tr><td><code>isVNode()</code></td><td>判断一个值是否为 vnode 类型 <a href="https://cn.vuejs.org/api/render-function.html#isvnode">#</a></td></tr><tr><td><code>resolveComponent()</code></td><td>按名称手动解析已注册的组件 <a href="https://cn.vuejs.org/api/render-function.html#resolvecomponent">#</a></td></tr><tr><td><code>resolveDirective()</code></td><td>按名称手动解析已注册的指令 <a href="https://cn.vuejs.org/api/render-function.html#resolvedirective">#</a></td></tr><tr><td><code>withDirectives()</code></td><td>用于给 vnode 增加自定义指令 <a href="https://cn.vuejs.org/api/render-function.html#withdirectives">#</a></td></tr><tr><td><code>withModifiers()</code></td><td>用于向事件处理函数添加内置 <code>v-on 修饰符</code> <a href="https://cn.vuejs.org/api/render-function.html#withmodifiers">#</a></td></tr></tbody></table></div><h3 id="进阶-API-服务端渲染"><a href="#进阶-API-服务端渲染" class="headerlink" title="进阶 API - 服务端渲染"></a>进阶 API - 服务端渲染</h3><div class="table-container"><table><thead><tr><th><code>renderToString()</code></th><th><a href="https://cn.vuejs.org/api/ssr.html#rendertostring">#</a></th></tr></thead><tbody><tr><td><code>renderToNodeStream()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#rendertonodestream">#</a></td></tr><tr><td><code>pipeToNodeWritable()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#pipetonodewritable">#</a></td></tr><tr><td><code>renderToWebStream()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#rendertowebstream">#</a></td></tr><tr><td><code>pipeToWebWritable()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#pipetowebwritable">#</a></td></tr><tr><td><code>renderToSimpleStream()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#rendertosimplestream">#</a></td></tr><tr><td><code>useSSRContext()</code></td><td><a href="https://cn.vuejs.org/api/ssr.html#usessrcontext">#</a></td></tr></tbody></table></div><h3 id="进阶-API-TypeScript-工具类型"><a href="#进阶-API-TypeScript-工具类型" class="headerlink" title="进阶 API - TypeScript 工具类型"></a>进阶 API - TypeScript 工具类型</h3><div class="table-container"><table><thead><tr><th><code>PropType&lt;T&gt;</code></th><th>在用运行时 props 声明时给一个 prop 标注更复杂的类型定义 <a href="https://cn.vuejs.org/api/utility-types.html#proptypet">#</a></th></tr></thead><tbody><tr><td><code>ComponentCustomProperties</code></td><td>增强组件实例类型以支持自定义全局属性 <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomproperties">#</a></td></tr><tr><td><code>ComponentCustomOptions</code></td><td>扩展组件选项类型以支持自定义选项 <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomoptions">#</a></td></tr><tr><td><code>ComponentCustomProps</code></td><td>扩展全局可用的 TSX props <a href="https://cn.vuejs.org/api/utility-types.html#componentcustomprops">#</a></td></tr><tr><td><code>CSSProperties</code></td><td>扩展在样式属性绑定上允许的值的类型 <a href="https://cn.vuejs.org/api/utility-types.html#cssproperties">#</a></td></tr></tbody></table></div><h3 id="进阶-API-自定义渲染"><a href="#进阶-API-自定义渲染" class="headerlink" title="进阶 API - 自定义渲染"></a>进阶 API - 自定义渲染</h3><div class="table-container"><table><thead><tr><th><code>createRenderer()</code></th><th>创建一个自定义渲染器 <a href="https://cn.vuejs.org/api/custom-renderer.html#create-renderer">#</a></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yum备忘清单</title>
      <link href="/2024/11/24/YUM%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/"/>
      <url>/2024/11/24/YUM%20%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="YUM-备忘清单"><a href="#YUM-备忘清单" class="headerlink" title="YUM 备忘清单"></a>YUM 备忘清单</h1><h2 id="YUM-清单查询"><a href="#YUM-清单查询" class="headerlink" title="YUM 清单查询"></a>YUM 清单查询</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>yum（<code>Y</code>ellow dog <code>U</code>pdater, <code>M</code>odified）是一个在 <code>Fedora</code> 和 <code>RedHat</code> 以及 SUSE 中的 <code>Shell</code> 前端软件包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum [options] [<span class="built_in">command</span>] [package ...]</span><br></pre></td></tr></table></figure><hr><ul><li><a href="http://yum.baseurl.org/">YUM 官方网站</a> <em>(yum.baseurl.org)</em></li><li><a href="https://docs.fedoraproject.org/en-US/Fedora/15/html/Deployment_Guide/ch-yum.html">Fedora 中的 Yum 文档</a> <em>(fedoraproject.org)</em></li><li><a href="http://wiki.centos.org/PackageManagement/Yum/">CentOS 中的 Yum 文档</a> <em>(wiki.centos.org)</em></li><li><a href="https://www.scientificlinux.org/documentation/faq/yum.apt.repo">Scientific Linux 中的 Yum 文档</a> <em>(scientificlinux.org)</em></li></ul><h3 id="YUM-查询"><a href="#YUM-查询" class="headerlink" title="YUM 查询"></a>YUM 查询</h3><p>子命令描述和任务</p><h4 id="help"><a href="#help" class="headerlink" title="help"></a>help</h4><p>显示 yum 命令和选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>显示 yum 子命令和选项</p><h3 id="单独的包"><a href="#单独的包" class="headerlink" title="单独的包"></a>单独的包</h3><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>列出存储库中的包名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出存储库中的包名称</span></span><br><span class="line">yum list available</span><br><span class="line"><span class="comment"># 列出所有可用的包</span></span><br><span class="line">yum list installed</span><br><span class="line"><span class="comment"># 列出所有已安装的包</span></span><br><span class="line">yum list all</span><br><span class="line"><span class="comment"># 列出已安装和可用的软件包</span></span><br><span class="line">yum list kernel</span><br></pre></td></tr></table></figure><h4 id="info"><a href="#info" class="headerlink" title="info"></a>info</h4><p>列出已安装和可用的内核包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出有关 `vsftpd` 软件包的信息</span></span><br><span class="line">$ yum info vsftpd</span><br></pre></td></tr></table></figure><h4 id="deplist"><a href="#deplist" class="headerlink" title="deplist"></a>deplist</h4><p>显示包的依赖项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum deplist nfs-utils</span><br></pre></td></tr></table></figure><p>列出依赖项和提供它们的包</p><h4 id="provides"><a href="#provides" class="headerlink" title="provides"></a>provides</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找提供查询文件的包</span></span><br><span class="line">$ yum provides “*bin/top”</span><br><span class="line"><span class="comment"># 显示包含 README.top 文件的包</span></span><br><span class="line">$ yum provides “*/README.top”</span><br></pre></td></tr></table></figure><h4 id="search"><a href="#search" class="headerlink" title="search"></a>search</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找名称或描述中带有 samba 的软件包</span></span><br><span class="line">$ yum search samba</span><br></pre></td></tr></table></figure><h4 id="updateinfo"><a href="#updateinfo" class="headerlink" title="updateinfo"></a>updateinfo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取有关可用软件包更新的信息</span></span><br><span class="line">$ yum updateinfo security</span><br></pre></td></tr></table></figure><p>获取有关可用 security 更新的信息</p><h3 id="包组"><a href="#包组" class="headerlink" title="包组"></a>包组</h3><h4 id="grouplist"><a href="#grouplist" class="headerlink" title="grouplist"></a>grouplist</h4><p>列出已安装和可用软件包组的名称</p><h4 id="groupinfo"><a href="#groupinfo" class="headerlink" title="groupinfo"></a>groupinfo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 Web 服务器组中的包</span></span><br><span class="line">$ yum groupinfo <span class="string">&quot;Web Server&quot;</span></span><br></pre></td></tr></table></figure><h4 id="check-update"><a href="#check-update" class="headerlink" title="check-update"></a>check-update</h4><p>查询存储库以获取可用的软件包更新</p><h3 id="管理-YUM-存储库"><a href="#管理-YUM-存储库" class="headerlink" title="管理 YUM 存储库"></a>管理 YUM 存储库</h3><h4 id="repolist"><a href="#repolist" class="headerlink" title="repolist"></a>repolist</h4><p>显示启用的软件存储库</p><h4 id="repoinfo"><a href="#repoinfo" class="headerlink" title="repoinfo"></a>repoinfo</h4><p>显示有关启用的 <code>yum</code> 存储库的信息 *</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum repoinfo rhel-7-server-rpms</span><br></pre></td></tr></table></figure><p>请参阅有关 rhel-7-server-rpms 存储库的信息</p><h4 id="repo-pkgs"><a href="#repo-pkgs" class="headerlink" title="repo-pkgs"></a>repo-pkgs</h4><p>使用特定存储库中的包 *</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出来自 my-rpms 存储库的软件包</span></span><br><span class="line">$ yum repo-pkgs my-rpms list</span><br><span class="line"><span class="comment"># 从 my-rpms repo 安装所有软件包</span></span><br><span class="line">$ yum repo-pkgs my-rpms install</span><br><span class="line"><span class="comment"># 从 my-rpms 存储库中删除所有软件包</span></span><br><span class="line">$ yum repo-pkgs my-rpms remove</span><br></pre></td></tr></table></figure><h4 id="makecache"><a href="#makecache" class="headerlink" title="makecache"></a>makecache</h4><p>下载 <code>yum</code> 存储库数据到缓存</p><h3 id="故障排除和维护-YUM"><a href="#故障排除和维护-YUM" class="headerlink" title="故障排除和维护 YUM"></a>故障排除和维护 YUM</h3><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>检查本地 RPM 数据库是否有问题（运行了很长时间）</p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有 yum 安装、更新和清理操作</span></span><br><span class="line">$ yum <span class="built_in">history</span> list</span><br><span class="line"><span class="comment"># 显示 yum info 3 的详细信息</span></span><br><span class="line">$ yum <span class="built_in">history</span> info 3</span><br><span class="line"><span class="comment"># 撤消事务 3 中的 yum 操作</span></span><br><span class="line">$ yum <span class="built_in">history</span> undo 3</span><br><span class="line"><span class="comment"># 重做事务 3 中撤消的 yum 操作</span></span><br><span class="line">$ yum <span class="built_in">history</span> redo 3</span><br></pre></td></tr></table></figure><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除缓存中保存的包</span></span><br><span class="line">$ yum clean packages</span><br><span class="line"><span class="comment"># 从缓存中清除所有包和元数据</span></span><br><span class="line">$ yum clean all</span><br></pre></td></tr></table></figure><p>清除缓存的包数据</p><h4 id="fssnapshot"><a href="#fssnapshot" class="headerlink" title="fssnapshot"></a>fssnapshot</h4><p>列出 LVM 快照（帮助在包更新后回滚）</p><h4 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出启用的文件系统过滤器</span></span><br><span class="line">$ yum fs filters</span><br><span class="line"><span class="comment"># 过滤所有正在安装的文档（小心！）</span></span><br><span class="line">$ yum fs documentation</span><br></pre></td></tr></table></figure><p>对文件系统采取行动（防止在最小系统上安装 doc 或语言文件）非常有用！</p><h3 id="使用-YUM-管理语言包"><a href="#使用-YUM-管理语言包" class="headerlink" title="使用 YUM 管理语言包"></a>使用 YUM 管理语言包</h3><h4 id="langavailable"><a href="#langavailable" class="headerlink" title="langavailable"></a>langavailable</h4><p>列出已安装的语言 *</p><h4 id="langinfo"><a href="#langinfo" class="headerlink" title="langinfo"></a>langinfo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出与西班牙语相关的软件包</span></span><br><span class="line">$ yum langinfo es</span><br></pre></td></tr></table></figure><h4 id="langinstall"><a href="#langinstall" class="headerlink" title="langinstall"></a>langinstall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装与西班牙语相关的软件包</span></span><br><span class="line">$ yum langinstall es</span><br></pre></td></tr></table></figure><h4 id="langlist"><a href="#langlist" class="headerlink" title="langlist"></a>langlist</h4><p>列出已安装的语言 *</p><h4 id="langremove"><a href="#langremove" class="headerlink" title="langremove"></a>langremove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除与西班牙语相关的软件包</span></span><br><span class="line">$ yum langremove es</span><br></pre></td></tr></table></figure><h3 id="使用-YUM-安装、删除和升级软件包"><a href="#使用-YUM-安装、删除和升级软件包" class="headerlink" title="使用 YUM 安装、删除和升级软件包"></a>使用 YUM 安装、删除和升级软件包</h3><h4 id="install"><a href="#install" class="headerlink" title="install"></a>install</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 vsftpd 包</span></span><br><span class="line">$ yum install vsftpd</span><br></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用可用更新更新所有软件包</span></span><br><span class="line">$ yum update</span><br><span class="line"><span class="comment"># 更新 httpd 包（如果可用）</span></span><br><span class="line">$ yum update httpd</span><br><span class="line"><span class="comment"># 应用与安全相关的包更新</span></span><br><span class="line">$ yum update --security</span><br></pre></td></tr></table></figure><h4 id="update-to"><a href="#update-to" class="headerlink" title="update-to"></a>update-to</h4><p>将一个或所有软件包更新到特定版本</p><h4 id="upgrade"><a href="#upgrade" class="headerlink" title="upgrade"></a>upgrade</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y upgrade</span><br></pre></td></tr></table></figure><p>更新包考虑过时，只升级所有包，不升级软件和系统内核</p><h4 id="localinstall"><a href="#localinstall" class="headerlink" title="localinstall"></a>localinstall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本地文件、http 或 ftp 安装包</span></span><br><span class="line">$ yum localinstall abc-1-1.i686.rpm</span><br><span class="line"><span class="comment"># 从本地目录安装 abc 包</span></span><br><span class="line">$ yum localinstall http://myrepo/abc-1-1.i686.rpm</span><br></pre></td></tr></table></figure><p>从 FTP 站点安装 abc</p><h4 id="downgrade"><a href="#downgrade" class="headerlink" title="downgrade"></a>downgrade</h4><p>将软件包降级到早期版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum downgrade abc</span><br></pre></td></tr></table></figure><p>将 abc 包降级到早期版本</p><h4 id="reinstall"><a href="#reinstall" class="headerlink" title="reinstall"></a>reinstall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新安装 util-linux（以替换任何已删除的文件）</span></span><br><span class="line">$ yum reinstall util-linux</span><br></pre></td></tr></table></figure><h4 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 ftp 包并安装 lftp 包</span></span><br><span class="line">$ yum swap ftp lftp</span><br></pre></td></tr></table></figure><h4 id="erase-remove"><a href="#erase-remove" class="headerlink" title="erase/remove"></a>erase/remove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 vsftpd 包和依赖</span></span><br><span class="line">$ yum remove vsftpd</span><br></pre></td></tr></table></figure><h4 id="autoremove"><a href="#autoremove" class="headerlink" title="autoremove"></a>autoremove</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除 httpd 和其他不需要的包</span></span><br><span class="line">$ yum autoremove httpd</span><br></pre></td></tr></table></figure><h4 id="groupinstall"><a href="#groupinstall" class="headerlink" title="groupinstall"></a>groupinstall</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Web 服务器包</span></span><br><span class="line">$ yum groupinstall <span class="string">&quot;Web server&quot;</span></span><br></pre></td></tr></table></figure><h3 id="更多-YUM-相关命令（安装-yum-utils-软件包）"><a href="#更多-YUM-相关命令（安装-yum-utils-软件包）" class="headerlink" title="更多 YUM 相关命令（安装 yum-utils 软件包）"></a>更多 YUM 相关命令（安装 yum-utils 软件包）</h3><h4 id="find-repos-of-install"><a href="#find-repos-of-install" class="headerlink" title="find-repos-of-install"></a>find-repos-of-install</h4><p>查找包来自哪个存储库</p><h4 id="needs-restarting"><a href="#needs-restarting" class="headerlink" title="needs-restarting"></a>needs-restarting</h4><p>查找已更新且需要重启的进程</p><h4 id="repoclosure"><a href="#repoclosure" class="headerlink" title="repoclosure"></a>repoclosure</h4><p>从存储库中获取未满足的依赖项列表</p><h4 id="repoquery"><a href="#repoquery" class="headerlink" title="repoquery"></a>repoquery</h4><p>查询远程仓库和本地 <code>RPM</code> 数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示依赖包</span></span><br><span class="line">$ repoquery --requires --resolve bash</span><br></pre></td></tr></table></figure><h4 id="reposync"><a href="#reposync" class="headerlink" title="reposync"></a>reposync</h4><p>将 <code>yum</code> 存储库同步到本地目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 repo 获取包</span></span><br><span class="line">$ reposync -r rhel-atomic-host-beta-rpms</span><br></pre></td></tr></table></figure><h4 id="repotrack"><a href="#repotrack" class="headerlink" title="repotrack"></a>repotrack</h4><p>下载一个包及其所有依赖项</p><h4 id="show-installed"><a href="#show-installed" class="headerlink" title="show-installed"></a>show-installed</h4><p>列出已安装的 RPM 包和统计信息</p><h4 id="verifytree"><a href="#verifytree" class="headerlink" title="verifytree"></a>verifytree</h4><p>检查本地 yum 存储库的一致性</p><h4 id="yum-complete-transaction"><a href="#yum-complete-transaction" class="headerlink" title="yum-complete-transaction"></a>yum-complete-transaction</h4><p>尝试完成未完成的 yum 交易</p><h4 id="yumdb"><a href="#yumdb" class="headerlink" title="yumdb"></a>yumdb</h4><p>检查或更改 yum 数据库</p><h4 id="yumdownloader"><a href="#yumdownloader" class="headerlink" title="yumdownloader"></a>yumdownloader</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用本地源离线安装 net-tools 工具包</span></span><br><span class="line">$ yumdownloader net-tools.x86_64</span><br><span class="line"><span class="comment"># 使用 –destdir 参数设置下载的目标目录</span></span><br><span class="line">$ yumdownloader net-tools.x86_64 --destdir=/usr/local/bin/</span><br><span class="line"><span class="comment"># 使用 –resolve 参数解决依赖关系并下载所需的安装包</span></span><br><span class="line">$ yumdownloader net-tools.x86_64 --resolve --destdir=/usr/local/bin/</span><br></pre></td></tr></table></figure><p>从 repo 下载一个包到当前目录</p><h3 id="不同-YUM-命令的常用选项"><a href="#不同-YUM-命令的常用选项" class="headerlink" title="不同 YUM 命令的常用选项"></a>不同 YUM 命令的常用选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum --disableplugin=langpacks info vsftpd</span><br><span class="line"><span class="comment"># 显示与正在运行的进程相关的包</span></span><br><span class="line">yum --enableplugin=ps ps</span><br><span class="line">yum install docker \</span><br><span class="line">  --enablerepo=rhel-7-server-extras-rpm</span><br><span class="line">yum list available --disablerepo=epel</span><br><span class="line"><span class="comment"># 下载 vsftpd 包到缓存</span></span><br><span class="line">yum install --downloadonly vsftpd</span><br></pre></td></tr></table></figure><hr><div class="table-container"><table><thead><tr><th><code>-y</code></th><th>如果出现提示，假设是</th></tr></thead><tbody><tr><td><code>--assumeno</code></td><td>如果提示，则假设否</td></tr><tr><td><code>-q</code></td><td>不产生任何输出</td></tr><tr><td><code>-v</code></td><td>产生额外的调试输出</td></tr><tr><td><code>--noplugins</code></td><td>运行命令而不加载任何 yum 插件</td></tr><tr><td><code>--disableplugin=</code></td><td>禁用单个命令的特定插件</td></tr><tr><td><code>--enableplugin=</code></td><td>启用已安装但当前已禁用的插件</td></tr><tr><td><code>--enablerepo=</code></td><td>为单个命令启用当前禁用的 repo（通配符可以）</td></tr><tr><td><code>--disablerepo=</code></td><td>为单个命令禁用当前启用的 repo（通配符可以）</td></tr><tr><td><code>--downloadonly</code></td><td>下载到 <code>/var/cache/yum/arch/prod/repo/packages/</code>，但不要安装</td></tr><tr><td><code>--filter-???=</code></td><td>代替???与vendors, rpm-groups, arches 和其他人一起过滤输出</td></tr><tr><td><code>--changelog</code></td><td>显示包的变更日志信息</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> Yum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2024/11/24/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2024/11/24/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用命令大全"><a href="#linux常用命令大全" class="headerlink" title="linux常用命令大全"></a>linux常用命令大全</h1><p>[TOC]</p><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><h4 id="pwd-查看当前工作目录"><a href="#pwd-查看当前工作目录" class="headerlink" title="pwd-查看当前工作目录"></a><strong>pwd-查看当前工作目录</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><h4 id="cd-更改当前工作目录"><a href="#cd-更改当前工作目录" class="headerlink" title="cd-更改当前工作目录"></a>cd-更改当前工作目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/directory   <span class="comment"># 进入指定目录</span></span><br><span class="line"><span class="built_in">cd</span> ..                   <span class="comment"># 返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ~                    <span class="comment"># 进入用户的主目录</span></span><br></pre></td></tr></table></figure><h4 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="touch-创建文件"></a><strong>touch-创建文件</strong></h4><p>语法：touch 文件名</p><p>创建一个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> file1.txt</span><br></pre></td></tr></table></figure><p>查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> -l   <span class="comment">#查看列表详细信息</span></span><br><span class="line"><span class="built_in">ls</span> -a   <span class="comment">#查看全部文件，包括隐藏文件</span></span><br><span class="line">ll      <span class="comment">#查看列表详细信息，等于ls -l</span></span><br><span class="line">ll -h   <span class="comment">#查看列表详细信息，显示文件大小以K,M,G的方式显示，等于ls -l -h</span></span><br></pre></td></tr></table></figure><h4 id="mkdir-创建目录"><a href="#mkdir-创建目录" class="headerlink" title="mkdir-创建目录"></a><strong>mkdir-创建目录</strong></h4><p>语法：mkdir 空格 路径和目录名</p><p>当前路径下创建一个目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> dir1</span><br></pre></td></tr></table></figure><p>选项：mkdir  -p  // 父系，当<a href="https://so.csdn.net/so/search?q=创建目录&amp;spm=1001.2101.3001.7020">创建目录</a>没有上一级时，自动创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /dir1/dir2/dir3  <span class="comment">#当前路径下没有dir1,dir2时会被自动创建</span></span><br></pre></td></tr></table></figure><h4 id="cp-复制文件"><a href="#cp-复制文件" class="headerlink" title="cp-复制文件"></a><strong>cp-复制文件</strong></h4><p>语法：cp  源文件路径  目标文件夹</p><p>选项：cp  -r   源目录   目标目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> filename dir1/</span><br><span class="line"><span class="built_in">ls</span> dir1/</span><br></pre></td></tr></table></figure><p>看到复制的文件即可</p><h4 id="mv-移动文件"><a href="#mv-移动文件" class="headerlink" title="mv-移动文件"></a><strong>mv-移动文件</strong></h4><p>语法：mv  源文件路径  目标文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> filename      <span class="comment">#先创建一个文件</span></span><br><span class="line"><span class="built_in">mv</span> filename dir1/   <span class="comment">#移动文件</span></span><br><span class="line"><span class="built_in">ls</span> dir1/            <span class="comment">#查看移动的文件</span></span><br><span class="line"><span class="built_in">mv</span> filename1 filename2   <span class="comment">#修改文件名</span></span><br></pre></td></tr></table></figure><h4 id="rm-删除文件"><a href="#rm-删除文件" class="headerlink" title="rm-删除文件"></a><strong>rm-删除文件</strong></h4><p>语法：rm -rf   文件或目录的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> filename</span><br><span class="line"><span class="built_in">rm</span> -r /dir/filename <span class="comment">#递归删除文件</span></span><br><span class="line"><span class="built_in">rm</span> -f /dir/filename <span class="comment">#不再是否询问删除文件</span></span><br></pre></td></tr></table></figure><h4 id="tar-打包和压缩"><a href="#tar-打包和压缩" class="headerlink" title="tar-打包和压缩"></a>tar-打包和压缩</h4><p>语法：tar -选项 源文件 目的路径</p><p>选项：v是显示解压/打包过程详情</p><p><strong>tar选项说明：</strong></p><div class="table-container"><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>生成档案文件，创建打包文件</td></tr><tr><td>x</td><td>解开档案文件</td></tr><tr><td>v</td><td>列出归档解档的详细过程，显示进度</td></tr><tr><td>f</td><td>指定档案文件名称，f 后面一定是 .tar 文件，所以必须放选项最后</td></tr></tbody></table></div><p><img src="https://bu.dusays.com/2024/12/18/67621ee3afa79.png" alt="image-20241218090115062"></p><ul><li>在 tar 命令中有一个选项 -z 可以调用 gzip ，从而可以方便的实现压缩和解压缩的</li><li>功能命令格式如下：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 压缩文件</span><br><span class="line">tar -zcvf 打包文件.tar.gz 被压缩的文件／路径...</span><br><span class="line"># 解压缩文件</span><br><span class="line">tar -zxvf 打包文件.tar.gz</span><br><span class="line"># 解压缩到指定路径</span><br><span class="line">tar -zxvf 打包文件.tar.gz -C 目标路径</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-C</td><td>解压缩到指定目录，注意：<strong>要解压缩的目录必须存在</strong></td></tr></tbody></table></div><h4 id="打包，压缩"><a href="#打包，压缩" class="headerlink" title="打包，压缩"></a>打包，压缩</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf etc.tar /etc              <span class="comment">#tar              </span></span><br><span class="line">tar -czvf etc-gzip.tar.gz /etc/   <span class="comment">#zip</span></span><br><span class="line">tar -cjf etc-bzip.tar.bz /etc/    <span class="comment">#bip</span></span><br><span class="line">tar -cJf etc-xzip.tar.xz /etc/    <span class="comment">#xzip</span></span><br><span class="line">gzip FileName                     <span class="comment">#gz</span></span><br><span class="line">tar zcvf FileName.tar/gz DirName  <span class="comment">#tar.gz</span></span><br><span class="line">bzip2 -z FileName                 <span class="comment">#bz2</span></span><br><span class="line">tar jcvf FileName.tar.bz2 DirName <span class="comment">#tar.bz2</span></span><br><span class="line">compress FileName                 <span class="comment">#Z</span></span><br><span class="line">tar zcvf FileName.tar.tgz FileName <span class="comment">#tar.tgz</span></span><br><span class="line">zip FileName.zip DirName          <span class="comment">#zip</span></span><br><span class="line">rar e FileName.rar                <span class="comment">#rar</span></span><br><span class="line">xz  FileName.tar                  <span class="comment">#xz</span></span><br></pre></td></tr></table></figure><h4 id="解压，解包"><a href="#解压，解包" class="headerlink" title="解压，解包"></a>解压，解包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf etc.tar /etc            <span class="comment">#tar</span></span><br><span class="line">tar -tf etc.tar                 <span class="comment">#查看</span></span><br><span class="line">tar -xvf etc2.tar.bz2           </span><br><span class="line">tar -xvf etc2.tar.bz2 -C /tmp   </span><br><span class="line">gunzip FileName.gz              <span class="comment">#gz</span></span><br><span class="line">gunzip -d FileName.gz           </span><br><span class="line">tar zxvf FileName.tar.gz        <span class="comment">#tar.gz</span></span><br><span class="line">tar zxvf FileName.tar.gz DirName</span><br><span class="line">bzip2 -d FileName.bz2           <span class="comment">#bz2</span></span><br><span class="line">bunzip2 FileName.bz2</span><br><span class="line">tar jxvf FileName.tar.bz2       <span class="comment">#tar.bz2</span></span><br><span class="line">bzip2 -d FileName.bz            <span class="comment">#bz</span></span><br><span class="line">bunzip2 FileName.bz</span><br><span class="line">tar jxvf FileName.tar.bz        <span class="comment">#tar.bz</span></span><br><span class="line">uncompress FileName.Z           <span class="comment">#Z</span></span><br><span class="line">tar Zxvf FileName.tar.Z         <span class="comment">#tar.Z</span></span><br><span class="line">tar zxvf FileName.tgz           <span class="comment">#tgz</span></span><br><span class="line">unzip FileName.zip              <span class="comment">#zip</span></span><br><span class="line">rar a FileName.rar              <span class="comment">#rar</span></span><br><span class="line">xz -d FileName.xz               <span class="comment">#xz</span></span><br></pre></td></tr></table></figure><h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a><strong>查看文件内容</strong></h3><p>cat查看文件全部内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> filename</span><br></pre></td></tr></table></figure><p>tac 与 cat 命令刚好相反，文件内容从最后一行开始显示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span> filename</span><br></pre></td></tr></table></figure><p>less分页查看文件内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less filename</span><br></pre></td></tr></table></figure><p>more翻页查看文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more filename</span><br></pre></td></tr></table></figure><p>head查看文件头部内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">head</span> -n 10 filename <span class="comment">#查看文件前10行</span></span><br></pre></td></tr></table></figure><p>tail尾部</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -n 10 filename <span class="comment">#查看文件后10行</span></span><br></pre></td></tr></table></figure><p>grep过滤关键字</p><p>针对文件内容进行过滤</p><p>语法：grep 关键字  文件名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;abc&#x27;</span> filename</span><br></pre></td></tr></table></figure><p>前提是文件中要有abc哦,否则结果没有内容。</p><h4 id="tree-查看目录结构及其子分支"><a href="#tree-查看目录结构及其子分支" class="headerlink" title="tree-查看目录结构及其子分支"></a>tree-查看<a href="https://so.csdn.net/so/search?q=目录结构&amp;spm=1001.2101.3001.7020">目录结构</a>及其子分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tree <span class="built_in">dirname</span>    <span class="comment">#指定目录</span></span><br></pre></td></tr></table></figure><h4 id="vi-修改文件内容"><a href="#vi-修改文件内容" class="headerlink" title="vi-修改文件内容"></a><strong>vi-修改文件内容</strong></h4><p>vi，vim</p><p>可视模式，按V进入，小v光标自己选取，大V直接选取一行，YY+p复制粘贴即可。</p><p>ctrl+V，上下选择，然后可以ctrl+&gt;  进行整体缩进。</p><p><strong>文本编辑</strong></p><blockquote><p>​    <strong>yy 复制</strong></p><p>​    dd 删除</p><p>​    p 粘贴</p><p>​    u undo撤销</p></blockquote><p><strong>查找替换</strong></p><blockquote><p>​    :范围 s/原内容/新内容/全局</p><p>​    :1,5 s/root/qianfeng/g   从1－5行的root 替换为qianfeng</p><p>​    :% s/原内容/新内容/全局</p></blockquote><p><strong>另存为</strong></p><blockquote><p>​    :w file9.txt 另存为 file9.txt</p></blockquote><p><strong>光标定位</strong></p><blockquote><p>​    hjkL   //上下左右</p><p>​    0 $   //行首行尾</p><p>​    gg G //页首页尾</p><p>​    3G 进入第三行  </p><p>​    /string (n N 可以循环的)   //查找字符，按n键选下一个（重要）</p><p>​    :set nu 设置行号</p><p>​    :set nonu 取消设置行号</p><p>​    :set list 显示控制字符</p></blockquote><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a><strong>文件类型</strong></h3><p>Linux 最经典的一句话是：「<strong>一切皆文件</strong>」，不仅普通的文件和目录，就连块设备、管道、socket 等，也都是统一交给文件系统管理的。</p><blockquote><p>常见类型</p><p>​    - 普通文件（文本文件，二进制文件，压缩文件，电影，图片。。。）</p><p>​    d 目录文件（蓝色）</p><p>非常见类型</p><p>​    b 设备文件（块设备）存储设备硬盘，U盘 /dev/sda, /dev/sda1</p><p>​    c 设备文件（字符设备）打印机，终端 /dev/tty1</p><p>​    l 链接文件（淡蓝色）</p><p>​    s 套接字文件</p><p>​    p 管道文件</p></blockquote><p>查看不同的文件类型。你能找出几种呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc</span><br></pre></td></tr></table></figure><p>注意</p><p>通过颜色判断文件的类型是不一定正确的！！！</p><p>Linux系统中文件是没有扩展名！！！</p><h4 id="find-查找文件"><a href="#find-查找文件" class="headerlink" title="find-查找文件"></a>find-查找文件</h4><p>语法：find 查找文件路径 选项 ‘filename’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find /path -name<span class="string">&#x27;filename&#x27;</span>   <span class="comment">#按文件名称</span></span><br><span class="line">find /path +5M<span class="string">&#x27;              #按文件大小，+（大于） -（小于） =（等于）</span></span><br><span class="line"><span class="string">find /Maxdepth 4 -a -name&#x27;</span>filename<span class="string">&#x27;   #指定目录深度</span></span><br><span class="line"><span class="string">find /path -user jack        #按属主</span></span><br><span class="line"><span class="string">find /path -group it         #按属组</span></span><br><span class="line"><span class="string">find /tmp -type f            #按文件类型，f普通文件 b块设备文件 d目录 p管道 l链接</span></span><br><span class="line"><span class="string">find . -perm 644 -ls         #按文件权限</span></span><br><span class="line"><span class="string">find /etc -name &quot;775*&quot; -delete #找到后删除</span></span><br><span class="line"><span class="string">find /etc -name &quot;hosts*&quot; -ok cp -rvf &#123;&#125; /tmp \   #找到后复制</span></span><br></pre></td></tr></table></figure><h4 id="locate-文件查找"><a href="#locate-文件查找" class="headerlink" title="locate-文件查找"></a>locate-文件查找</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# updatedb        <span class="comment">#更新locate数据库</span></span><br><span class="line">[root@localhost ~]# locate hosts    <span class="comment">#查找hosts文件</span></span><br><span class="line">/etc/hosts</span><br><span class="line">/etc/samba/lmhosts</span><br><span class="line">/usr/bin/sss_ssh_knownhostsproxy</span><br><span class="line">/usr/lib64/security/pam_rhosts.so</span><br><span class="line">/usr/share/doc/pam/README.d/README.pam_rhosts</span><br><span class="line">/usr/share/man/de/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/fr/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/ja/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/man5/hosts.5.gz</span><br><span class="line">/usr/share/man/man5/hosts.equiv.5.gz</span><br><span class="line">/usr/share/man/man5/lmhosts.5.gz</span><br><span class="line">/usr/share/man/ru/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/sv/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/man/uk/man1/sss_ssh_knownhostsproxy.1.gz</span><br><span class="line">/usr/share/vim/vim80/ftplugin/denyhosts.vim</span><br><span class="line">/usr/share/vim/vim80/ftplugin/hostsaccess.vim</span><br><span class="line">/usr/share/vim/vim80/syntax/denyhosts.vim</span><br><span class="line">/usr/share/vim/vim80/syntax/hostsaccess.vim</span><br><span class="line">/usr/share/zsh/site-functions/_sd_hosts_or_user_at_host</span><br></pre></td></tr></table></figure><h4 id="ln-软链接"><a href="#ln-软链接" class="headerlink" title="ln-软链接"></a>ln-软链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /sourcefile /destfile</span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a><strong>用户管理</strong></h3><h4 id="id-显示用户信息"><a href="#id-显示用户信息" class="headerlink" title="id-显示用户信息"></a><strong>id-显示用户信息</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> -u   <span class="comment">#仅显示UID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> -r   <span class="comment">#仅显示实际的ID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> -g   <span class="comment">#仅显示用户的基本组ID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> -G   <span class="comment">#仅显示用户所属的所有组ID</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> -n   <span class="comment">#显示名称，而非ID</span></span><br></pre></td></tr></table></figure><h4 id="useradd-创建用户"><a href="#useradd-创建用户" class="headerlink" title="useradd-创建用户"></a><strong>useradd-创建用户</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username</span><br></pre></td></tr></table></figure><p>创建用户user02，指定uid</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username -u 1001</span><br></pre></td></tr></table></figure><p>创建用户user03 指定家目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd username -d /username</span><br></pre></td></tr></table></figure><h4 id="passwd-设置或更改用户密码"><a href="#passwd-设置或更改用户密码" class="headerlink" title="passwd-设置或更改用户密码"></a>passwd-设置或更改用户密码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd username</span><br></pre></td></tr></table></figure><h4 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel-删除用户"></a><strong>userdel-删除用户</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">userdel username</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">userdel -f username   <span class="comment">#强制删除用户</span></span><br></pre></td></tr></table></figure><h4 id="修改登录SHELL"><a href="#修改登录SHELL" class="headerlink" title="修改登录SHELL"></a>修改登录SHELL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s /sbin/nologin username</span><br></pre></td></tr></table></figure><h4 id="su-切换用户"><a href="#su-切换用户" class="headerlink" title="su-切换用户"></a>su-切换用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su username       <span class="comment">#以root身份登录用户</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">su - username     <span class="comment">#以用户身份登录用户</span></span><br></pre></td></tr></table></figure><h3 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a><strong>用户组管理</strong></h3><h4 id="groupadd-创建组"><a href="#groupadd-创建组" class="headerlink" title="groupadd-创建组"></a><strong>groupadd-创建组</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">groupadd groupname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -3 /etc/group   <span class="comment">#查看,或者</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27;groupname&#x27;</span> /etc/group</span><br></pre></td></tr></table></figure><h4 id="groupdel-删除组"><a href="#groupdel-删除组" class="headerlink" title="groupdel-删除组"></a><strong>groupdel-删除组</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupdel groupname</span><br><span class="line"><span class="built_in">tail</span> -3 /etc/group   <span class="comment">#查看,或者</span></span><br><span class="line">grep <span class="string">&#x27;groupname&#x27;</span> /etc/group</span><br></pre></td></tr></table></figure><h4 id="usermod-添加用户到组"><a href="#usermod-添加用户到组" class="headerlink" title="usermod-添加用户到组"></a>usermod-添加用户到组</h4><p>查看用户原信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> username</span><br><span class="line">uid=1002(username) gid=1002(username) 组=1002(username)</span><br></pre></td></tr></table></figure><p>语法：usermod aG 组名 用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod username -aG groupname</span><br></pre></td></tr></table></figure><h4 id="gpasswd-添加用户到组"><a href="#gpasswd-添加用户到组" class="headerlink" title="gpasswd-添加用户到组"></a>gpasswd-添加用户到组</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -a username groupname</span><br></pre></td></tr></table></figure><p>再次查看用户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> username</span><br><span class="line">uid=1002(username) gid=1002(username) 组=1002(username),1005(hr)</span><br></pre></td></tr></table></figure><h4 id="gpasswd-从组中删除用户"><a href="#gpasswd-从组中删除用户" class="headerlink" title="gpasswd-从组中删除用户"></a>gpasswd-从组中删除用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpasswd -d username groupname</span><br></pre></td></tr></table></figure><h3 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a><strong>文件权限管理</strong></h3><h4 id="Linux用户权限解析"><a href="#Linux用户权限解析" class="headerlink" title="Linux用户权限解析"></a><strong>Linux用户权限解析</strong></h4><h5 id="权限对象："><a href="#权限对象：" class="headerlink" title="权限对象："></a><strong>权限对象：</strong></h5><blockquote><p>​    属主： u</p><p>​    属组： g</p><p>​    其他人: o</p><p>​    所有人：a(u+g+o)</p></blockquote><h5 id="查看权限："><a href="#查看权限：" class="headerlink" title="查看权限："></a><strong>查看权限：</strong></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l filename</span><br><span class="line">-rw-r--r--.   1   root root  179  5月  25  14:27  filename</span><br></pre></td></tr></table></figure><blockquote><p>​    -rw-：属主的权限，读写</p><p>​    r—：属组的权限，读</p><p>​    r—：其他人的权限，读</p><p>​    1：第2字段的值为1，说明文件只有这一个文件名。即只有一个指向该链接的硬链接。</p><p>​    root：文件的属主</p><p>​    root：文件的属组</p><p>​    179：文件大小</p><p>​    5月  25  14:27：时间</p><p>​    filename：文件名称</p></blockquote><h5 id="权限类型："><a href="#权限类型：" class="headerlink" title="权限类型："></a><strong>权限类型：</strong></h5><blockquote><p>​    读：r=4</p><p>​    写：w=2</p><p>​    执行: x=1</p></blockquote><h5 id="chmod-设置权限："><a href="#chmod-设置权限：" class="headerlink" title="chmod-设置权限："></a><strong>chmod-设置权限：</strong></h5><p>使用符号：u用户 g组  o其他  r读  w写  x执行</p><p>语法： chmod  对象(u/g/o/a)赋值符(+/-/=)权限类型(r/w/x)   文件/目录</p><p>选项：-R 针对目录中所有的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 644 filename   <span class="comment">#设置一个文件属主读写，属组读，其他人读权限</span></span><br><span class="line">ll filename</span><br><span class="line">-rw-r--r--. 1 root root    0 7月  25 13:42 filename</span><br><span class="line"><span class="built_in">chmod</span> +x filename   <span class="comment">#赋予文件所有者执行权限</span></span><br><span class="line">ll</span><br><span class="line">-rwxr-xr-x. 1 root root    0 7月  25 13:42 filename</span><br><span class="line"><span class="built_in">chmod</span> -r filename   <span class="comment">#收回文件所有者读权限</span></span><br><span class="line">ll</span><br><span class="line">--wx--x--x. 1 root root    0 7月  25 13:42 filename</span><br><span class="line"><span class="built_in">chmod</span> xiaoming filename   <span class="comment">#只改属主</span></span><br><span class="line"><span class="built_in">chmod</span> .hr filename   <span class="comment">#只改属组</span></span><br></pre></td></tr></table></figure><h5 id="chgrp-修改属组"><a href="#chgrp-修改属组" class="headerlink" title="chgrp-修改属组:"></a>chgrp-修改属组:</h5><p>chgrp： 设置一个文件属于哪个组</p><p>语法：chgrp 组名 文件 </p><p>选项：-R是递归修改文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> groupname filename</span><br></pre></td></tr></table></figure><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="ps-静态查看进程"><a href="#ps-静态查看进程" class="headerlink" title="ps-静态查看进程"></a>ps-静态查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br><span class="line">ps -aux</span><br></pre></td></tr></table></figure><h4 id="top-动态查看进程"><a href="#top-动态查看进程" class="headerlink" title="top-动态查看进程"></a>top-动态查看进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h4 id="kill-杀死进程"><a href="#kill-杀死进程" class="headerlink" title="kill-杀死进程"></a>kill-杀死进程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 processId    <span class="comment">#非法杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -15 processId   <span class="comment">#正常终止进程</span></span><br></pre></td></tr></table></figure><h4 id="nice-进程优先级"><a href="#nice-进程优先级" class="headerlink" title="nice-进程优先级"></a>nice-进程优先级</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -aox | grep processId  <span class="comment">#查看进程优先级</span></span><br><span class="line">renice -20 processId   <span class="comment">#指定进程id的优先级为-20</span></span><br><span class="line">ps -aox | grep processId  <span class="comment">#再次查看进程优先级</span></span><br></pre></td></tr></table></figure><h4 id="jobs-作业控制"><a href="#jobs-作业控制" class="headerlink" title="jobs-作业控制"></a>jobs-作业控制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 3000 &amp;   <span class="comment">#后台运行一个程序</span></span><br><span class="line"><span class="built_in">jobs</span>           <span class="comment">#查看后台运行程序</span></span><br><span class="line"><span class="built_in">fg</span> 1           <span class="comment">#将作业1调回到前台</span></span><br><span class="line"><span class="built_in">kill</span> %1        <span class="comment">#杀死作业序号为1的后台程序</span></span><br></pre></td></tr></table></figure><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="nmtui-简易图形配置网络连接"><a href="#nmtui-简易图形配置网络连接" class="headerlink" title="nmtui-简易图形配置网络连接"></a>nmtui-简易图形配置网络连接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure><p><img src="https://i-blog.csdnimg.cn/direct/f32ba9310b404cfd835d279957552b1f.png" alt="img"></p><h4 id="ss-端口查看"><a href="#ss-端口查看" class="headerlink" title="ss-端口查看"></a>ss-端口查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ss -tnl</span><br></pre></td></tr></table></figure><h4 id="netstat-端口查看"><a href="#netstat-端口查看" class="headerlink" title="netstat-端口查看"></a>netstat-端口查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnlp</span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><h4 id="which-命令查找"><a href="#which-命令查找" class="headerlink" title="which-命令查找"></a>which-命令查找</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">ls</span>=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">/usr/bin/ls</span><br></pre></td></tr></table></figure><h4 id="whereis-命令查找"><a href="#whereis-命令查找" class="headerlink" title="whereis-命令查找"></a>whereis-命令查找</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# whereis <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span>: /usr/bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</span><br></pre></td></tr></table></figure><h4 id="ssh-远程登陆"><a href="#ssh-远程登陆" class="headerlink" title="ssh-远程登陆"></a>ssh-远程登陆</h4><p>语法：ssh [options] [user@]ipaddress [command]</p><blockquote><p>选项：</p><ul><li><code>-l user</code>：指定要登录的用户。</li><li><code>-p port</code>：指定连接到远程主机的端口号，默认是22。</li><li><code>-i identity_file</code>：指定身份验证文件（私钥文件）。</li><li><code>-v</code>：详细模式，可以显示调试信息。</li><li><code>-C</code>：启用压缩。</li><li><code>-N</code>：不执行远程命令，只进行端口转发。</li><li><code>-f</code>：后台运行。</li><li><code>-L local_port:remote_host:remote_port</code>：本地端口转发。</li><li><code>-R remote_port:local_host:local_port</code>：远程端口转发。</li><li><code>-D [bind_address:]port</code>：动态应用程序级端口转发。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ssh username@remote_ip</span><br><span class="line">ssh -p 2024 username@remote_ip               <span class="comment">#指定端口登录</span></span><br><span class="line">ssh -i /path/to/private_key user@remote_ip   <span class="comment">#使用身份验证文件</span></span><br><span class="line">ssh user@remote_ip <span class="built_in">command</span>                   <span class="comment">#在远程主机上执行命令</span></span><br><span class="line">ssh -v user@remote_ip                        <span class="comment">#详细模式</span></span><br><span class="line">ssh -C user@remote_ip                        <span class="comment">#启用压缩</span></span><br><span class="line">ssh -f -N user@remote_ip                     <span class="comment">#后台运行且不执行命令</span></span><br><span class="line">ssh -L local_port:remote_host:remote_port user@remote_ip   <span class="comment">#本地端口转发</span></span><br><span class="line">ssh -R remote_port:local_host:local_port user@remote_ip    <span class="comment">#远程端口转发</span></span><br><span class="line">ssh -D [bind_address:]port user@remote_ip                  <span class="comment">#动态端口转发</span></span><br><span class="line">ssh -A user@remote_ip                        <span class="comment">#启用代理转发</span></span><br><span class="line">ssh -X user@remote_ip                        <span class="comment">#启用 X11 转发</span></span><br></pre></td></tr></table></figure><h4 id="scp-远程拷贝"><a href="#scp-远程拷贝" class="headerlink" title="scp-远程拷贝"></a>scp-远程拷贝</h4><p>语法：scp [可选参数] file_source file_target</p><blockquote><p>选项：</p><ul><li>-1： 强制scp命令使用协议ssh1</li><li>-2： 强制scp命令使用协议ssh2</li><li>-4： 强制scp命令只使用IPv4寻址</li><li>-6： 强制scp命令只使用IPv6寻址</li><li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li><li>-p：保留原文件的修改时间，访问时间和访问权限。</li><li>-q： 不显示传输进度条。</li><li>-r： 递归复制整个目录。</li><li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li><li>-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul></blockquote><p> 从本地复制到远程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scp local_file remote_username@remote_ip:remode_folder           <span class="comment">#指定远程文件夹</span></span><br><span class="line">scp local_file remote_username@remote_ip:remode_file             <span class="comment">#指定远程文件名</span></span><br><span class="line">scp local_file remote_ip:remode_folder                           <span class="comment">#指定远程文件夹</span></span><br><span class="line">scp local_file remote_ip:remode_file                             <span class="comment">#指定远程文件名</span></span><br><span class="line">scp -r /home/space/music/ root@www.runoob.com:/home/root/others/ <span class="comment">#递归复制整个目录</span></span><br><span class="line">scp -r /home/space/music/ www.runoob.com:/home/root/others/ </span><br></pre></td></tr></table></figure><p> 从远程复制到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp root@remote_ip:/home/root/music /home/music/test.mp3 </span><br><span class="line">scp -r remote_ip:/home/root/others/ /home/music/</span><br></pre></td></tr></table></figure><p>指定端口号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 4588 remote@remote_ip: /tmp/test.txt /home/administrator</span><br></pre></td></tr></table></figure><h4 id="ssh-免密登录"><a href="#ssh-免密登录" class="headerlink" title="ssh-免密登录"></a>ssh-免密登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen                    <span class="comment">#然后一顿回车</span></span><br><span class="line">ssh-copy-id remote_ip         <span class="comment">#将密钥发送给远程主机,此步之后要求输入root用户密码</span></span><br><span class="line">ssh remote_ip                 <span class="comment">#测试，观察还用不用输密码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法</title>
      <link href="/2024/11/24/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2024/11/24/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><h3 id="一、二分查找"><a href="#一、二分查找" class="headerlink" title="一、二分查找"></a>一、二分查找</h3><p>在有序数组中通过将目标值与数组中间值比较，每次将查找范围缩小一半。高效查找的经典算法，时间复杂度为 O(log n)。</p><p><code>时间复杂度:最佳 O(1) | 平均 O(log n) | 最差 O(log n)     空间复杂度:O(1).&gt;</code></p><blockquote><h5 id="应用场景-前提条件："><a href="#应用场景-前提条件：" class="headerlink" title="应用场景/前提条件："></a>应用场景/前提条件：</h5><p>数组必须是有序的才能应用二分查找</p></blockquote><h4 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>二分查找（Binary Search）是一种高效的查找算法，也叫折半查找。核心思想：对于一个<strong>有序</strong>的数据集合，每次查找都将查找范围缩小为原来的一半，直到找到目标值或确定目标值不存在。二分查找要求数据必须是有序的，经常应用于数组等支持随机访问的数据结构里。跟线性查找相比，二分查找的效率要高得多，特别是对于大规模数据集。</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>确定查找范围的左边界 left 和右边界 right</li><li>计算中间位置 mid = (left + right) / 2（注意整数溢出问题，更安全的做法是 mid = left + (right - left) / 2）</li><li>将中间位置的元素与目标值比较<ul><li>如果中间元素等于目标值，查找成功，返回中间元素的位置</li><li>如果中间元素大于目标值，目标值可能在左半部分，将右边界调整为 mid - 1</li><li>如果中间元素小于目标值，目标值可能在右半部分，将左边界调整为 mid + 1</li></ul></li><li>重复步骤2-3，直到找到目标值或者左边界大于右边界（此时表示目标值不存在）</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cfe9386c814.webp" alt="img"></p><h4 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>要求有序</strong>：二分查找只适用于有序数据集合</li><li><strong>时间复杂度</strong>：O(log n)，在大规模数据集上非常高效</li><li><strong>空间复杂度</strong>：迭代实现为O(1)，递归实现为O(log n)（因为递归调用栈的深度）</li><li><strong>随机访问</strong>：要求数据结构支持O(1)时间复杂度的随机访问（比如数组）</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="comment">// 迭代实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 避免整数溢出</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 找到目标值</span></span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在左半部分继续查找</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在右半部分继续查找</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRecursive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearchRecursive(arr, target, left, mid - <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearchRecursive(arr, target, mid + <span class="number">1</span>, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">70</span>, <span class="number">80</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 迭代方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> binarySearch(arr, target);</span><br><span class="line">        <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 不存在于数组中&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 在数组中的索引为 &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归方法</span></span><br><span class="line">        result = binarySearchRecursive(arr, target, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 不存在于数组中&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 在数组中的索引为 &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>查找效率非常高，时间复杂度为 O(log n)</li><li>在大规模数据集上表现优异</li><li>实现相对简单</li><li>不需要额外的空间（迭代实现）</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>要求数据必须是有序的</li><li>只适用于支持随机访问的数据结构（如数组）</li><li>对于频繁插入和删除的数据结构，维护有序性的成本很高</li><li>不适合小数据量的查找（这种情况下线性查找可能更快）</li></ul><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>二分查找在很多场景中都有广泛的应用：</p><ul><li><p>数据库索引的实现（如 B 树和 B+ 树的查找过程）</p></li><li><p>查找最接近某个值的元素（下界查找和上界查找）</p></li><li><p>计算平方根等数值计算中（二分法求解）</p></li><li><p>猜数字游戏（每次猜测中间值）</p></li><li><p>在旋转排序数组中查找元素</p></li><li><p>查找数组中第一个或最后一个满足某条件的元素</p><h6 id="二分查找的变种"><a href="#二分查找的变种" class="headerlink" title="二分查找的变种"></a>二分查找的变种</h6><p>二分查找有许多变种，用来解决不同的问题：</p></li></ul><h6 id="查找第一个等于目标值的值："><a href="#查找第一个等于目标值的值：" class="headerlink" title="查找第一个等于目标值的值："></a>查找第一个等于目标值的值：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findFirstEqual</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到目标值，但需要继续向左查找是否有相同值</span></span><br><span class="line">            result = mid;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测验"><a href="#测验" class="headerlink" title="测验"></a>测验</h4><ol><li>二分查找的时间复杂度是多少？为什么它比线性查找更高效？</li><li>二分查找的前提条件是什么？它适用于哪些数据结构？</li><li>为什么计算中间位置时，推荐使用 <code>mid = left + (right - left) / 2</code> 而不是 <code>mid = (left + right) / 2</code>？</li><li>在有重复元素的有序数组中，如何找到目标值的第一次出现位置？</li><li>二分查找的递归实现和迭代实现在空间复杂度上有何区别？</li></ol><blockquote><p>测验答案</p><ol><li>O(log n)。因为每次查找都将搜索范围缩小一半，线性查找需要遍历全部元素。</li><li>数据必须有序。适用于支持随机访问的数据结构，如数组。</li><li><code>mid = left + (right - left) / 2</code> 可以避免在处理大数组的时候可能发生的整数溢出问题。如果 left 和 right 都很大，它们的和有可能超过整数类型的最大值。</li><li>找到目标值后不立即返回，记录当前位置，继续在左半部分查找（将 right 设为 mid - 1），直到找不到为止，最后返回记录的位置。</li><li>迭代实现空间复杂度为 O(1)，只需常量级的额外空间；递归实现的空间复杂度为 O(log n)，因为递归调用栈的深度与二分查找的次数成正比。</li></ol></blockquote><h3 id="二、线性查找"><a href="#二、线性查找" class="headerlink" title="二、线性查找"></a>二、线性查找</h3><p>从头到尾逐个检查数组中的每个元素，直到找到目标值或遍历完整个数组。简单直观但效率较低，适合小型或无序数据集。</p><p><code>时间复杂度:最佳 O(1) | 平均 O(n/2) | 最差 O(n)    空间复杂度:O(1)</code></p><blockquote><h5 id="应用场景-前提条件"><a href="#应用场景-前提条件" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于无序数据</li><li>适合小规模数据集</li></ul></blockquote><h4 id="算法讲解-1"><a href="#算法讲解-1" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>线性查找（Linear Search），也称为顺序查找（Sequential Search），是最简单的一种查找算法。它的工作原理是：从数据结构的第一个元素开始，按顺序依次检查每个元素，直到找到目标值或者遍历完整个数据结构。线性查找不要求数据必须是有序的，适用于各种数据集合。</p><h5 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h5><ol><li>从数据结构的第一个元素开始</li><li>将当前元素与要查找的目标值进行比较</li><li>如果当前元素等于目标值，则查找成功，返回元素的位置</li><li>如果当前元素不等于目标值，则继续检查下一个元素</li><li>重复步骤2-4，直到找到目标值或者遍历完所有元素</li><li>如果遍历完所有元素仍未找到目标值，则查找失败，返回表示失败的信息（如-1）</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cfeb17ab451.webp" alt="img"></p><h4 id="核心特性-1"><a href="#核心特性-1" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>简单性</strong>：算法思路简单，易于实现</li><li><strong>适用性</strong>：适用于任何数据结构，不需要需预先排序</li><li><strong>时间复杂度</strong>：最好情况O(1)，最坏和平均情况均为O(n)</li><li><strong>空间复杂度</strong>：O(1)，只需要常数级的额外空间</li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinearSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">linearSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 找到目标值，返回索引</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">80</span>, <span class="number">30</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">110</span>, <span class="number">100</span>, <span class="number">130</span>, <span class="number">170</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">110</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> linearSearch(arr, target);</span><br><span class="line">        <span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 不存在于数组中&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 在数组中的索引为 &quot;</span> + result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>实现极其简单，代码量少</li><li>不需要预先排序数据</li><li>适用于任何数据结构</li><li>对于小规模数据集效率可以接受</li><li>无额外空间要求</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度为O(n)，当数据量大时效率低下</li><li>不利用数据的任何特征（如有序性）来加速查找</li><li>对于有序数据，不如二分查找高效</li><li>随着数据规模增长，性能下降显著</li></ul><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><p>虽然线性查找效率不高，但在小部分场景中仍然有一定的适用性：</p><ul><li>小规模数据集的查找</li><li>无序数据集的查找</li><li>仅需查找一次或偶尔查找的场景</li><li>对算法实现简单性要求高于效率的场景</li><li>作为其他高级查找算法的基础或回退方案</li><li>适合用作教学或算法入门学习</li></ul><h4 id="测验-1"><a href="#测验-1" class="headerlink" title="测验"></a>测验</h4><h3 id="三、跳跃查找"><a href="#三、跳跃查找" class="headerlink" title="三、跳跃查找"></a>三、跳跃查找</h3><p>在有序数组中，通过跳跃固定步长来缩小查找范围，然后在确定的区间内进行线性查找。结合了二分查找和线性查找的优点。</p><p><code>时间复杂度:最佳 O(1) | 平均 O(√n) | 最差 O(√n)     空间复杂度:O(1)</code></p><blockquote><h5 id="应用场景-前提条件-1"><a href="#应用场景-前提条件-1" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>数组必须是有序的</li><li>较适合大型数据集</li></ul></blockquote><ol><li>线性查找的平均时间复杂度是多少？</li><li>当数据已经有序时，线性查找的效率会提高吗？为什么？</li><li>线性查找的空间复杂度是多少？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>线性查找的平均时间复杂度是O(n)。</li><li>不会。线性查找无论数据是否有序，都需要从头开始逐个检查，直到找到目标值或遍历完整个数据结构。</li><li>线性查找的空间复杂度是O(1)，它只需要常量级的额外空间来存储循环变量和比较结果，不随输入数据规模改变。</li></ol></blockquote><h4 id="算法讲解-2"><a href="#算法讲解-2" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><p>跳跃查找（Jump Search）是一种在有序数组中查找元素的算法，核心思想是通过跳过固定步长的元素来缩小搜索范围，然后在缩小的区间内进行线性查找。跳跃查找是<strong>二分查找和线性查找的混合体</strong>，特别适合<strong>大型有序数据集</strong>。</p><p>跳跃查找的效率取决于步长的选择。在最佳情况下，跳跃查找的时间复杂度可以达到 O(√n)，优于线性查找的 O(n)，但不如二分查找的 O(log n)。但是在一些具体场景下，跳跃查找比二分查找表现更好，比如当内存中访问顺序元素比随机访问更高效的时候。</p><h4 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>确定跳跃步长（通常取 √n，n 是数组长度）</li><li>从数组开头开始，每次跳过步长个元素，直到找到大于或等于目标值的元素或达到数组末尾</li><li>如果找到的元素大于目标值，则回退一步，在该区间内进行线性查找</li><li>如果找到目标值，返回其索引；否则返回未找到标识</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cfebdb35bc9.webp" alt="img"></p><h4 id="核心特性-2"><a href="#核心特性-2" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>分块查找</strong>：将数组分成大小为 √n 的块，跳跃式地查找</li><li><strong>步长选择</strong>：最优步长为 √n，在时间和空间复杂度间取得平衡</li><li><strong>时间复杂度</strong>：平均情况为 O(√n)</li><li><strong>空间复杂度</strong>：O(1)，不需要额外空间</li><li><strong>适用条件</strong>：必须在有序数组上进行操作</li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpSearch</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jumpSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定最佳步长</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(Math.sqrt(n));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳跃查找阶段</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (arr[Math.min(step, n) - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">            prev = step;</span><br><span class="line">            step += (<span class="type">int</span>) Math.floor(Math.sqrt(n));</span><br><span class="line">            <span class="keyword">if</span> (prev &gt;= n) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 线性查找阶段</span></span><br><span class="line">        <span class="keyword">while</span> (arr[prev] &lt; target) &#123;</span><br><span class="line">            prev++;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果已到达下一步长或数组末尾，则未找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (prev == Math.min(step, n)) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否找到目标元素</span></span><br><span class="line">        <span class="keyword">if</span> (arr[prev] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;  <span class="comment">// 返回元素索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> jumpSearch(arr, target);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 在索引 &quot;</span> + index + <span class="string">&quot; 处找到&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;元素 &quot;</span> + target + <span class="string">&quot; 未在数组中找到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，在上述代码里，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确定最佳步长</span></span><br><span class="line"><span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(Math.sqrt(n));</span><br></pre></td></tr></table></figure><p>确定了跳跃查找最关键的步长参数，这里会直接影响算法的效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">jumpSearch</span><span class="params">(arr, target)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 确定最佳步长</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">step</span> <span class="operator">=</span> Math.floor(Math.sqrt(n));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 跳跃查找阶段</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (arr[Math.min(step, n) - <span class="number">1</span>] &lt; target) &#123;</span><br><span class="line">        prev = step;</span><br><span class="line">        step += Math.floor(Math.sqrt(n));</span><br><span class="line">        <span class="keyword">if</span> (prev &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线性查找阶段</span></span><br><span class="line">    <span class="keyword">while</span> (arr[prev] &lt; target) &#123;</span><br><span class="line">        prev++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果已到达下一步长或数组末尾，则未找到元素</span></span><br><span class="line">        <span class="keyword">if</span> (prev == Math.min(step, n)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否找到目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (arr[prev] == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> prev;  <span class="comment">// 返回元素索引</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="type">const</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">377</span>, <span class="number">610</span>];</span><br><span class="line"><span class="type">const</span> <span class="variable">target</span> <span class="operator">=</span> <span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="variable">index</span> <span class="operator">=</span> jumpSearch(arr, target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    console.log(`元素 $&#123;target&#125; 在索引 $&#123;index&#125; 处找到`);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    console.log(`元素 $&#123;target&#125; 未在数组中找到`);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h5><h6 id="自适应步长"><a href="#自适应步长" class="headerlink" title="自适应步长"></a>自适应步长</h6><p>根据数据规模动态调整步长：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">optimizedJumpSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据数组大小调整步长</span></span><br><span class="line">    <span class="type">int</span> step;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        step = <span class="number">5</span>;  <span class="comment">// 小数组使用较小步长</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">        step = (<span class="type">int</span>) Math.floor(Math.sqrt(n));  <span class="comment">// 中等数组使用标准步长</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step = (<span class="type">int</span>) Math.floor(Math.cbrt(n) * <span class="number">3</span>);  <span class="comment">// 大数组使用更大步长</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后续跳跃查找逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="缓存友好优化"><a href="#缓存友好优化" class="headerlink" title="缓存友好优化"></a>缓存友好优化</h5><p>根据计算机缓存特性优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">cacheOptimizedJumpSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据缓存行大小选择步长</span></span><br><span class="line">    <span class="comment">// 假设每个缓存行为64字节，每个int为4字节，则一个缓存行可以存储16个int</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">cacheLineSize</span> <span class="operator">=</span> <span class="number">16</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(Math.sqrt(n / cacheLineSize)) * cacheLineSize;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (step &lt; cacheLineSize) &#123;</span><br><span class="line">        step = cacheLineSize;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后续跳跃查找逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ul><li>比线性查找更高效，时间复杂度为 O(√n)</li><li>比二分查找更易于实现</li><li>在链表等只能顺序访问的数据结构上有优势</li><li>良好的内存局部性，更利于缓存命中</li></ul><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度不如二分查找的 O(log n)</li><li>性能对步长的选择比较敏感</li><li>必须是有序数组</li><li>对于小数组，优势不明显</li><li>针对频繁动态变化的数据结构，需要重新计算最优步长</li></ul><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）处理大型有序数组，尤其是当内存访问成本高时</p><p>2）在内存局部性要求高的系统中，如嵌入式系统或低级系统优化</p><p>3）随机访问成本高于顺序访问时作为二分查找的替代方案</p><p>4）在链表等顺序访问数据结构上查找</p><p>5）外部存储设备上的数据查找，比如磁盘存储，顺序读取比随机读取更高效</p><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><h5 id="跳跃链表实现"><a href="#跳跃链表实现" class="headerlink" title="跳跃链表实现"></a>跳跃链表实现</h5><p>将跳跃查找的思想应用到链表数据结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    Node next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jumpSearchInLinkedList</span><span class="params">(Node head, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算链表长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 确定步长</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> (<span class="type">int</span>) Math.floor(Math.sqrt(length));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 跳跃查找阶段</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.data &lt; target) &#123;</span><br><span class="line">        <span class="comment">// 记住上一个跳跃点</span></span><br><span class="line">        prev = current;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳跃到下一个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; step &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">            position++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回退到上一个跳跃点</span></span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">null</span> || (current != head &amp;&amp; current.data &gt; target)) &#123;</span><br><span class="line">        current = prev;</span><br><span class="line">        position -= step;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 线性查找阶段</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.data &lt; target) &#123;</span><br><span class="line">        current = current.next;</span><br><span class="line">        position++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否找到目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (current != <span class="literal">null</span> &amp;&amp; current.data == target) &#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;  <span class="comment">// 未找到元素</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="跳跃查找与其他算法组合"><a href="#跳跃查找与其他算法组合" class="headerlink" title="跳跃查找与其他算法组合"></a>跳跃查找与其他算法组合</h5><p>在大型数据结构中结合多种查找算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hybridSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据数组大小选择算法</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">20</span>) &#123;</span><br><span class="line">        <span class="comment">// 小数组使用线性查找</span></span><br><span class="line">        <span class="keyword">return</span> linearSearch(arr, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &lt;= <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="comment">// 中等数组使用跳跃查找</span></span><br><span class="line">        <span class="keyword">return</span> jumpSearch(arr, target);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 大数组使用二分查找</span></span><br><span class="line">        <span class="keyword">return</span> binarySearch(arr, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">linearSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测验-2"><a href="#测验-2" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>跳跃查找的最优步长是多少？为什么这个步长是最优的？</li><li>跳跃查找的时间复杂度是多少？与线性查找和二分查找相比如何？</li><li>在什么情况下，跳跃查找比二分查找更有优势？</li></ol><blockquote><p>测验答案</p><ol><li>跳跃查找的最优步长是 √n，其中 n 是数组长度。这个步长在时间复杂度方面达到了最优平衡，让算法的时间复杂度达到 O(√n)。</li><li>O(√n)，优于线性查找的 O(n)，但不如二分查找的 O(log n)。</li><li>顺序访问比随机访问更高效的时候，跳跃查找比二分查找更好用，比如在链表、磁盘存储或缓存友好型系统中。</li></ol></blockquote><h3 id="四、哈希查找"><a href="#四、哈希查找" class="headerlink" title="四、哈希查找"></a>四、哈希查找</h3><h4 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h4><p>通过哈希函数将元素映射到固定大小的表中进行快速查找，平均时间复杂度为O(1)，适合大规模数据查找。</p><p><code>时间复杂度:最佳 O(1) | 平均 O(1) | 最差 O(n)    空间复杂度:O(n)</code></p><blockquote><h5 id="应用场景-前提条件-2"><a href="#应用场景-前提条件-2" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>需要预先构建哈希表</li><li>处理哈希冲突的策略（如链地址法或开放寻址法）</li></ul></blockquote><h4 id="算法讲解-3"><a href="#算法讲解-3" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h5><p>哈希查找（Hash Search），又称散列查找，是一种高效的查找算法，它用哈希函数将数据转换为数组下标，然后直接访问数组中的元素。哈希查找的核心思想是<strong>将数据元素通过哈希函数映射到哈希表中的位置，实现快速查找</strong>。</p><p>在理想情况下，哈希查找的时间复杂度为 O(1)，这就意味着无论数据规模多大，查找操作都能在常数时间内完成，这是哈希查找相比其他查找算法（如二分查找、线性查找）的最大优势。</p><p>不过使用哈希查找必须要考虑哈希冲突（不同的数据被映射到相同的位置）问题。</p><h4 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>设计一个适合数据特点的哈希函数，将数据映射到哈希表的索引位置</li><li>构建哈希表，将所有元素通过哈希函数映射、存储到相应位置</li><li>解决可能出现的哈希冲突（通常采用链地址法或开放寻址法）</li><li>查找时，通过同样的哈希函数计算目标数据的哈希值</li><li>根据哈希值定位到哈希表中的位置</li><li>如果存在冲突，则按照解决冲突的方法查找目标元素</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cfed99be17b.webp" alt="img"></p><h4 id="核心特性-3"><a href="#核心特性-3" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>快速访问</strong>：理想情况下查找时间复杂度为 O(1)</li><li><strong>哈希函数</strong>：哈希查找的核心，将数据映射到数组索引的函数</li><li><strong>哈希冲突</strong>：不同数据映射到相同位置的情况，需要特殊处理</li><li><strong>空间换时间</strong>：通过额外的内存空间换取查找时间的提升</li><li><strong>负载因子</strong>：表示哈希表的填充程度，影响查找效率和冲突概率</li><li><strong>动态扩容</strong>：负载因子过高时，需要扩大哈希表并重新哈希<strong>所有</strong>元素</li></ul><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSearch</span> &#123;</span><br><span class="line">    <span class="comment">// 哈希表节点类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        String key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        Node next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(String key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哈希表类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HashTable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> Node[] buckets;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>; <span class="comment">// 负载因子阈值</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">HashTable</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">            <span class="built_in">this</span>.buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[capacity];</span><br><span class="line">            <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 哈希函数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(String key)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : key.toCharArray()) &#123;</span><br><span class="line">                hash = (hash * <span class="number">31</span> + c) % capacity;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(hash);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(String key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="type">float</span>)size / capacity &gt;= LOAD_FACTOR) &#123;</span><br><span class="line">                resize(<span class="number">2</span> * capacity);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果桶为空，直接插入</span></span><br><span class="line">            <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                buckets[index] = newNode;</span><br><span class="line">                size++;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 处理哈希冲突，使用链地址法</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> buckets[index];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查是否已存在相同的键</span></span><br><span class="line">            <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.key.equals(key)) &#123;</span><br><span class="line">                    current.value = value; <span class="comment">// 更新值</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (current.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 在链表末尾添加新节点</span></span><br><span class="line">            current.next = newNode;</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找键对应的值</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> buckets[index];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 遍历链表查找匹配的键</span></span><br><span class="line">            <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.key.equals(key)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> current.value;</span><br><span class="line">                &#125;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 未找到</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除键值对</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(String key)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key);</span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> buckets[index];</span><br><span class="line">            <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 查找目标节点</span></span><br><span class="line">            <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current.key.equals(key)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                prev = current;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 未找到目标节点</span></span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 删除节点</span></span><br><span class="line">            <span class="keyword">if</span> (prev == <span class="literal">null</span>) &#123;</span><br><span class="line">                buckets[index] = current.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 扩容并重新哈希</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">            Node[] oldBuckets = buckets;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建新的哈希表</span></span><br><span class="line">            buckets = <span class="keyword">new</span> <span class="title class_">Node</span>[newCapacity];</span><br><span class="line">            capacity = newCapacity;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重新哈希所有元素</span></span><br><span class="line">            <span class="keyword">for</span> (Node bucket : oldBuckets) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> bucket;</span><br><span class="line">                <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">                    put(current.key, current.value);</span><br><span class="line">                    current = current.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HashTable</span> <span class="variable">hashTable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashTable</span>(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入数据</span></span><br><span class="line">        hashTable.put(<span class="string">&quot;apple&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        hashTable.put(<span class="string">&quot;banana&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        hashTable.put(<span class="string">&quot;orange&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        hashTable.put(<span class="string">&quot;grape&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;apple: &quot;</span> + hashTable.get(<span class="string">&quot;apple&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;banana: &quot;</span> + hashTable.get(<span class="string">&quot;banana&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;orange: &quot;</span> + hashTable.get(<span class="string">&quot;orange&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;grape: &quot;</span> + hashTable.get(<span class="string">&quot;grape&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;watermelon: &quot;</span> + hashTable.get(<span class="string">&quot;watermelon&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除数据</span></span><br><span class="line">        hashTable.remove(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;After removing orange: &quot;</span> + hashTable.get(<span class="string">&quot;orange&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="哈希冲突解决方法"><a href="#哈希冲突解决方法" class="headerlink" title="哈希冲突解决方法"></a>哈希冲突解决方法</h5><p>哈希查找的核心问题是如何处理哈希冲突。下面是两种主要的解决方案：</p><h5 id="链地址法（Separate-Chaining）"><a href="#链地址法（Separate-Chaining）" class="headerlink" title="链地址法（Separate Chaining）:"></a>链地址法（Separate Chaining）:</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chainInsert</span><span class="params">(String key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果桶为空，直接插入</span></span><br><span class="line">    <span class="keyword">if</span> (buckets[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">        buckets[index] = newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 否则遍历链表</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> buckets[index];</span><br><span class="line">    <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果找到相同的键，更新值</span></span><br><span class="line">        <span class="keyword">if</span> (current.key.equals(key)) &#123;</span><br><span class="line">            current.value = value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表末尾添加新节点</span></span><br><span class="line">    <span class="keyword">if</span> (current.key.equals(key)) &#123;</span><br><span class="line">        current.value = value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        current.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ul><li>查找、插入和删除操作的平均时间复杂度为 O(1)</li><li>适用于快速查找</li><li>不要求数据有序，更灵活</li><li>支持动态数据集，高效地添加和删除元素</li><li>通过合适的哈希函数和解决冲突策略，能实现非常优秀的性能</li></ul><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li>哈希冲突会降低查找效率，最坏情况下时间复杂度可能退化到 O(n)</li><li>需要额外的空间存储哈希表</li><li>不支持范围查询，不适合按顺序遍历场景</li><li>负载因子过高会导致性能下降，过低会浪费空间</li></ul><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><p>哈希查找适用于以下场景：</p><ul><li>需要快速查找、插入和删除操作的数据结构，如字典或映射</li><li>实现缓存系统，比如LRU缓存、内存缓存等</li><li>数据库索引，特别是等值查询</li><li>符号表实现，如编译器和解释器中的变量表</li><li>去重操作，判断元素是否已存在</li><li>网页爬虫的URL去重</li></ul><h4 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h4><h5 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a>一致性哈希</h5><p>一致性哈希是<strong>分布式系统</strong>中的重要概念，目的是尽可能少地重新分配数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsistentHash</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> numberOfReplicas; <span class="comment">// 虚拟节点数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortedMap&lt;Integer, String&gt; circle = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConsistentHash</span><span class="params">(<span class="type">int</span> numberOfReplicas, Collection&lt;String&gt; nodes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfReplicas = numberOfReplicas;</span><br><span class="line">        <span class="keyword">for</span> (String node : nodes) &#123;</span><br><span class="line">            addNode(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(String node)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">virtualNode</span> <span class="operator">=</span> node + <span class="string">&quot;#&quot;</span> + i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> getHash(virtualNode);</span><br><span class="line">            circle.put(hash, node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(String node)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfReplicas; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">virtualNode</span> <span class="operator">=</span> node + <span class="string">&quot;#&quot;</span> + i;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> getHash(virtualNode);</span><br><span class="line">            circle.remove(hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数据应该存储的节点</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getNode</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (circle.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> getHash(key);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果没有大于等于该hash值的节点，则返回第一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (!circle.containsKey(hash)) &#123;</span><br><span class="line">            SortedMap&lt;Integer, String&gt; tailMap = circle.tailMap(hash);</span><br><span class="line">            hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> circle.get(hash);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哈希函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHash</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(key.hashCode()) % <span class="number">359</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h5><p>布隆过滤器是一种空间效率高的概率型数据结构，判断一个元素是否在集合中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BitSet bitSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> bitSetSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numHashFunctions;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">(<span class="type">int</span> expectedInsertions, <span class="type">double</span> falsePositiveProbability)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算最佳bit数组大小</span></span><br><span class="line">        <span class="built_in">this</span>.bitSetSize = (<span class="type">int</span>) Math.ceil(-(expectedInsertions * Math.log(falsePositiveProbability)) / (Math.log(<span class="number">2</span>) * Math.log(<span class="number">2</span>)));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算最佳哈希函数数量</span></span><br><span class="line">        <span class="built_in">this</span>.numHashFunctions = (<span class="type">int</span>) Math.ceil((bitSetSize / expectedInsertions) * Math.log(<span class="number">2</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.bitSet = <span class="keyword">new</span> <span class="title class_">BitSet</span>(bitSetSize);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String element)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numHashFunctions; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> getHash(element, i);</span><br><span class="line">            bitSet.set(hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查元素是否可能在集合中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mightContain</span><span class="params">(String element)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numHashFunctions; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> getHash(element, i);</span><br><span class="line">            <span class="keyword">if</span> (!bitSet.get(hash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 肯定不在集合中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 可能在集合中</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成多个哈希值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getHash</span><span class="params">(String element, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash1</span> <span class="operator">=</span> element.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash2</span> <span class="operator">=</span> hash1 &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs((hash1 + index * hash2) % bitSetSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测验-3"><a href="#测验-3" class="headerlink" title="测验"></a>测验</h4><ol><li>什么是哈希查找？它的平均时间复杂度是多少？</li><li>什么是哈希冲突？列举两种常见的解决方法。</li><li>负载因子对哈希表性能有什么影响？</li><li>哈希函数的设计原则有哪些？</li><li>开放寻址法中的线性探测、二次探测和双重哈希有什么区别？</li></ol><blockquote><p>测验答案</p><ol><li>一种通过哈希函数将数据转换为数组下标，然后直接访问数组中元素的查找算法，平均时间复杂度为 O(1)。</li><li>哈希冲突是指不同的数据通过哈希函数得到相同的哈希值。常见的解决方法有：（1）链地址法：在冲突位置建立链表；（2）开放寻址法：在原始位置基础上按照某种方式寻找下一个可用位置。</li><li>负载因子表示哈希表的填充程度。负载因子过高会增加哈希冲突概率，降低查找效率；负载因子过低会浪费空间。哈希表通常在负载因子达到某个阈值（比如0.75）时进行扩容。</li><li>（1）计算简单高效；（2）尽可能均匀分布，减少冲突；（3）具有雪崩效应，输入微小变化导致输出显著不同；（4）确定性，相同输入产生相同输出。</li><li>线性探测：冲突时按固定步长（一般是 1）向后查找空位；二次探测：冲突时按二次方向后查找；双重哈希：冲突时使用第二个哈希函数计算步长。二次探测和双重哈希都可以减轻线性探测的聚集问题。</li></ol></blockquote><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>冒泡排序是一种简单的排序算法，通过相邻元素的比较和交换，使较大的元素逐渐”浮”到数组末尾。</p><p><code>时间复杂度:最佳 O(n) | 平均 O(n²) | 最差 O(n²)     空间复杂度:O(1)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-3"><a href="#应用场景-前提条件-3" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于小规模数据</li><li>对几乎已排序的数据效率较高</li></ul></blockquote><h4 id="算法讲解-4"><a href="#算法讲解-4" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h5><p>冒泡排序（Bubble Sort）的核心思想非常简单：<strong>从头开始，不断比较相邻的两个元素，如果前者比后者大，就交换位置。</strong> 这样从头到尾完整地走一趟，最大的那个元素就必然会“沉”到队尾的最终位置。只需不断重复这个过程，每一轮都将当前未排序部分的最大值找出来送到末端，直到所有元素都排列整齐。因为在这个过程中较小的元素会像气泡一样逐渐“冒”到数组的前方，所以叫冒泡排序故得此名。</p><h4 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>比较相邻的元素。如果第一个比第二个大，就交换它们</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对</li><li>这步做完后，最后的元素会是最大的数</li><li>针对所有的元素重复以上的步骤，除了已经是最大数的最后一个</li><li>持续每次对越来越少(每次重复都会少一个最大数)的元素重复上面的步骤，直到没有任何一对数字需要比较</li></ol><p>为了帮助大家更好的理解，我们以初始数组 <code>[5, 3, 8, 4, 2]</code> 为例，查看每一步的详细流程：</p><hr><h5 id="第一轮"><a href="#第一轮" class="headerlink" title="第一轮"></a>第一轮</h5><p>在此轮中，比较将进行4次，目标是将当前数组中的最大值移动到最右边。</p><ol><li>比较 5 和 3，5 &gt; 3，交换。数组变为 <code>[3, 5, 8, 4, 2]</code>。</li><li>比较 5 和 8，5 &lt; 8，不交换。</li><li>比较 8 和 4，8 &gt; 4，交换。数组变为 <code>[3, 5, 4, 8, 2]</code>。</li><li>比较 8 和 2，8 &gt; 2，交换。数组变为 <code>[3, 5, 4, 2, 8]</code>。</li></ol><p>本轮结束后，数组为 <code>[3, 5, 4, 2, 8]</code>。最大元素 8 已经到达其最终的正确位置。</p><hr><h5 id="第二轮"><a href="#第二轮" class="headerlink" title="第二轮"></a>第二轮</h5><p>现在，我们只对前面未排序的4个元素 <code>[3, 5, 4, 2]</code> 重复此过程。</p><ol><li>比较 3 和 5，3 &lt; 5，不交换。</li><li>比较 5 和 4，5 &gt; 4，交换。数组变为 <code>[3, 4, 5, 2, 8]</code>。</li><li>比较 5 和 2，5 &gt; 2，交换。数组变为 <code>[3, 4, 2, 5, 8]</code>。</li></ol><p>本轮结束后，数组为 <code>[3, 4, 2, 5, 8]</code>。次大元素 5 也到达了它的正确位置。</p><hr><h5 id="第三轮"><a href="#第三轮" class="headerlink" title="第三轮"></a>第三轮</h5><p>对前面未排序的3个元素 <code>[3, 4, 2]</code> 重复此过程。</p><ol><li>比较 3 和 4，3 &lt; 4，不交换。</li><li>比较 4 和 2，4 &gt; 2，交换。数组变为 <code>[3, 2, 4, 5, 8]</code>。</li></ol><p>本轮结束后，数组为 <code>[3, 2, 4, 5, 8]</code>。元素 4 到达了它的正确位置。</p><hr><h5 id="第四轮"><a href="#第四轮" class="headerlink" title="第四轮"></a>第四轮</h5><p>对前面未排序的2个元素 <code>[3, 2]</code> 重复此过程。</p><ol><li>比较 3 和 2，3 &gt; 2，交换。数组变为 <code>[2, 3, 4, 5, 8]</code>。</li></ol><p>本轮结束后，数组为 <code>[2, 3, 4, 5, 8]</code>。</p><p>此时，所有元素都已在正确位置，排序完成✅。示意图如下：</p><p><img src="https://bu.dusays.com/2025/09/21/68cfef843ae97.webp" alt="img"></p><h4 id="核心特性-4"><a href="#核心特性-4" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>稳定性</strong>：冒泡排序是稳定的排序算法，相等元素的相对位置在排序后不会改变</li><li><strong>原地排序</strong>：只需要常数级的额外空间</li><li><strong>时间复杂度</strong>：最坏和平均情况为O(n²)，最好情况为O(n)</li><li><strong>比较排序</strong>：基于元素间的比较进行排序</li></ul><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 每次遍历后，最大的i+1个元素已经排好序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">// 如果当前元素大于下一个元素，则交换</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        bubbleSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="优化版本"><a href="#优化版本" class="headerlink" title="优化版本"></a>优化版本</h5><p>如果是一个已经排好序的数组，上述代码也会循环执行，我们可以针对这一点进行如下优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">optimizedBubbleSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">boolean</span> swapped;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有发生交换，说明数组已经有序，可以提前退出排序</span></span><br><span class="line">        <span class="keyword">if</span> (!swapped) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h5><ul><li>代码简单，容易实现</li><li>适合小规模数据排序</li><li>对于几乎已经排好序的数据，效率较高</li><li>稳定的排序算法</li></ul><h5 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度高，为O(n²)</li><li>随着元素数量增加，效率急剧下降</li><li>每次只能将一个元素移动到其最终位置，效率不高</li></ul><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><p>由于效率问题，冒泡排序的应用场景比较少，不过也不是完全没有，比如：</p><ul><li>教学演示：简单直观，常用于算法入门教学</li><li>小规模数据排序：当数据量较小、空间资源有限时可以使用</li><li>对于接近有序的数组：有优化版本可以在接近有序的情况下提前终止</li><li>嵌入式系统或资源受限环境：因为它不需要额外的内存空间</li></ul><h4 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h4><h5 id="鸡尾酒排序（双向冒泡排序）"><a href="#鸡尾酒排序（双向冒泡排序）" class="headerlink" title="鸡尾酒排序（双向冒泡排序）"></a>鸡尾酒排序（双向冒泡排序）</h5><p>鸡尾酒排序是冒泡排序的一种变体，它从低到高然后从高到低来回排序，比冒泡排序的效率稍微高一点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cocktailSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">swapped</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (swapped) &#123;</span><br><span class="line">        <span class="comment">// 从左到右</span></span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果没有交换，则已经排序完成</span></span><br><span class="line">        <span class="keyword">if</span> (!swapped)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">// 否则重置swapped标志准备从右到左</span></span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        end--;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从右到左</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> end - <span class="number">1</span>; i &gt;= start; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        start++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测验-4"><a href="#测验-4" class="headerlink" title="测验"></a>测验</h4><ol><li>冒泡排序的平均时间复杂度是多少？</li><li>冒泡排序是稳定的排序算法吗？</li><li>对于已经排好序的数组，优化版冒泡排序的时间复杂度是多少？</li><li>冒泡排序每一轮遍历后，数组尾部会有什么特点？</li><li>如何优化冒泡排序以提高效率？</li></ol><blockquote><p>测验答案</p><ol><li>冒泡排序的平均时间复杂度是O(n²)。</li><li>是的，冒泡排序是稳定的排序算法。因为只有当前一个元素大于后一个元素时才交换，相等元素不会改变相对位置。</li><li>对于已经排好序的数组，优化版冒泡排序的时间复杂度是O(n)。因为第一轮遍历不会发生交换，优化版会检测到这点并提前终止。</li><li>冒泡排序每一轮遍历后，数组尾部会有一个元素到达其最终位置，且是当前未排序部分中的最大元素。第i轮结束后，末尾i个元素已排好序。</li><li>优化冒泡排序的方法:<ul><li>添加标志位跟踪是否发生交换，无交换则提前终止</li><li>记录最后一次交换位置，下一轮只遍历到该位置</li><li>使用双向冒泡(鸡尾酒排序)，同时将最大值上浮和最小值下沉</li></ul></li></ol></blockquote><h3 id="二、快速排序"><a href="#二、快速排序" class="headerlink" title="二、快速排序"></a>二、快速排序</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>快速排序是一种高效的分治算法，通过选择一个基准元素，将数组分为两部分，一部分小于基准，一部分大于基准，然后递归地对两部分进行排序。</p><p><code>时间复杂度:最佳 O(n log n) | 平均 O(n log n) | 最差 O(n²)    空间复杂度:O(log n)</code></p><p>稳定性:不稳定</p><blockquote><h5 id="应用场景-前提条件-4"><a href="#应用场景-前提条件-4" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>实际应用中最常用的高效排序算法</li><li>对于大多数输入可达到最佳性能</li><li>缓存友好</li></ul></blockquote><h4 id="算法讲解-5"><a href="#算法讲解-5" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h5><p>快速排序（Quick Sort）是一种极其高效的分治排序算法，也是<strong>实际应用中最常用的排序算法之一</strong>。</p><p>它的核心思想可以概括为“选个基准，然后左右站队”：</p><ol><li>选基准(pivot)：首先，从数组中任意选择一个元素作为“基准”。</li><li>站队：接着，重新排列数组，将所有小于基准的元素移动到基准的左边，所有大于等于基准的元素移动到右边。这一步完成后，该基准元素就找到了它在最终有序序列中的“最终位置”。</li><li>分而治之：最后，对基准左右两边的子数组（现在它们是两个独立的、更小的问题），递归地重复上述过程，直到每个子数组都排序完毕。</li></ol><p>通过这种巧妙的“分而治之”策略，快速排序能将一个大问题不断分解成小问题来解决，平均时间复杂度能达到卓越的 O(nlogn)。</p><h4 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>从数列中选择一个元素作为”基准”，本文采用最左侧元素作为基准</li><li>将所有比基准值小的元素放到基准前面，所有比基准值大的元素放到基准后面（分区操作）</li><li>对基准左右两个子序列分别重复步骤1和2，直到子序列只有一个元素或为空</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cff0855d868.webp" alt="img"></p><h4 id="核心特性-5"><a href="#核心特性-5" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>分治策略</strong>：将问题分解为更小的子问题，逐步解决</li><li><strong>原地排序</strong>：只需要 O(logn) 的额外空间复杂度（主要用于递归调用的栈空间）</li><li><strong>时间复杂度</strong>：平均情况为 O(nlogn)，最坏情况为 O(n²)，最好情况为 O(nlogn)</li><li><strong>不稳定性</strong>：相等元素的相对位置在排序后可能会改变</li><li><strong>高效性</strong>：在实际应用中，快速排序通常是最快的排序算法之一</li></ul><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="comment">// 获取分区点位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">pivotIndex</span> <span class="operator">=</span> partition(arr, low, high);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归排序左右子数组</span></span><br><span class="line">            quickSort(arr, low, pivotIndex - <span class="number">1</span>);</span><br><span class="line">            quickSort(arr, pivotIndex + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 选择最左侧元素作为基准</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">pivot</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low + <span class="number">1</span>; j &lt;= high; j++) &#123;</span><br><span class="line">            <span class="comment">// 将小于基准的元素移到左侧</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">                <span class="comment">// 交换元素</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将基准元素放到正确位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        arr[low] = arr[i - <span class="number">1</span>];</span><br><span class="line">        arr[i - <span class="number">1</span>] = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，在上面的实现里，我们如下代码将小于基准的元素移到左侧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low + <span class="number">1</span>; j &lt;= high; j++) &#123;</span><br><span class="line">    <span class="comment">// 将小于基准的元素移到左侧</span></span><br><span class="line">    <span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">        <span class="comment">// 交换元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后修正基准的位置，实现基准左侧都小于基准、基准右侧大于等于基准：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[low];</span><br><span class="line">arr[low] = arr[i - <span class="number">1</span>];</span><br><span class="line">arr[i - <span class="number">1</span>] = temp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-1"><a href="#优化策略-1" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="随机选择基准元素"><a href="#随机选择基准元素" class="headerlink" title="随机选择基准元素"></a>随机选择基准元素</h5><p>使用最左侧元素作为基准可能会在数组已经排序或接近排序时导致最坏性能，随机选择基准可以降低这种风险:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">randomPartition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="comment">// 随机选择基准元素位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> low + (<span class="type">int</span>)(Math.random() * (high - low + <span class="number">1</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将随机选择的基准元素与最左侧元素交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = arr[low];</span><br><span class="line">    arr[low] = temp;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用标准分区过程</span></span><br><span class="line">    <span class="keyword">return</span> partition(arr, low, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="三数取中法"><a href="#三数取中法" class="headerlink" title="三数取中法"></a>三数取中法</h5><p>选择左端、中间和右端三个元素的中值作为基准，可以进一步优化快速排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">medianOfThreePartition</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对三个元素进行排序</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt; arr[low])</span><br><span class="line">        swap(arr, mid, low);</span><br><span class="line">    <span class="keyword">if</span> (arr[high] &lt; arr[low])</span><br><span class="line">        swap(arr, high, low);</span><br><span class="line">    <span class="keyword">if</span> (arr[high] &lt; arr[mid])</span><br><span class="line">        swap(arr, high, mid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将中值（现在在arr[mid]）放到arr[low]</span></span><br><span class="line">    swap(arr, mid, low);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用标准分区过程</span></span><br><span class="line">    <span class="keyword">return</span> partition(arr, low, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h5><ul><li>平均情况下非常高效，时间复杂度为 O(nlogn)</li><li>原地排序，空间复杂度低</li><li>缓存友好，数据局部性好</li><li>适合处理大规模数据</li><li>在许多实际应用中表现优秀</li></ul><h5 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h5><ul><li>最坏情况下性能退化至 O(n²)，比如当数组已经排序时</li><li>不稳定的排序算法</li><li>对于小数组，快速排序可能比其他基础排序慢</li><li>递归实现可能导致栈溢出（可以使用迭代方式解决）</li></ul><h4 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>需要高效排序大量数据的情况</li><li>作为系统库中的排序函数（如 C++ 的 std::sort、Java 的 Arrays.sort）</li><li>需要就地排序且对空间复杂度敏感的场景</li><li>需要平均情况下高性能的应用</li></ul><h4 id="扩展-4"><a href="#扩展-4" class="headerlink" title="扩展"></a>扩展</h4><h5 id="双轴快速排序"><a href="#双轴快速排序" class="headerlink" title="双轴快速排序"></a>双轴快速排序</h5><p>Java 的 Arrays.sort() 使用的是双轴快速排序，它使用两个枢轴(基准)，可以进一步提高性能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dualPivotQuickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (high &lt;= low) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果arr[low] &gt; arr[high]，交换它们</span></span><br><span class="line">    <span class="keyword">if</span> (arr[low] &gt; arr[high]) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[low];</span><br><span class="line">        arr[low] = arr[high];</span><br><span class="line">        arr[high] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取两个枢轴</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot1</span> <span class="operator">=</span> arr[low];</span><br><span class="line">    <span class="type">int</span> <span class="variable">pivot2</span> <span class="operator">=</span> arr[high];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">lt</span> <span class="operator">=</span> low + <span class="number">1</span>;    <span class="comment">// 小于pivot1的区域右边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">gt</span> <span class="operator">=</span> high - <span class="number">1</span>;   <span class="comment">// 大于pivot2的区域左边界</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low + <span class="number">1</span>;     <span class="comment">// 当前考察的元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">        <span class="comment">// 当前元素小于第一个枢轴</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot1) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[lt];</span><br><span class="line">            arr[lt] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">            lt++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 当前元素大于第二个枢轴</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot2) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[gt];</span><br><span class="line">            arr[gt] = temp;</span><br><span class="line">            gt--;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 当前元素在两个枢轴之间</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放置枢轴到正确位置</span></span><br><span class="line">    arr[low] = arr[lt - <span class="number">1</span>];</span><br><span class="line">    arr[lt - <span class="number">1</span>] = pivot1;</span><br><span class="line">    </span><br><span class="line">    arr[high] = arr[gt + <span class="number">1</span>];</span><br><span class="line">    arr[gt + <span class="number">1</span>] = pivot2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归处理三个部分</span></span><br><span class="line">    dualPivotQuickSort(arr, low, lt - <span class="number">2</span>);</span><br><span class="line">    dualPivotQuickSort(arr, lt, gt);</span><br><span class="line">    dualPivotQuickSort(arr, gt + <span class="number">2</span>, high);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测验-5"><a href="#测验-5" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>快速排序的平均时间复杂度是多少？</li><li>快速排序是稳定的排序算法吗？</li><li>使用最左侧元素作为基准的快速排序在什么情况下会出现最坏性能？</li><li>快速排序的空间复杂度是多少？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>O(nlogn)。</li><li>不是，因为基准元素的移动可能会改变相等元素的相对位置。</li><li>当数组已经排序或接近排序时，每次分区只能减少一个元素，时间复杂度退化为O(n²)。</li><li>O(logn)，主要是递归调用占用的栈空间，最坏情况下为O(n)。</li></ol></blockquote><h3 id="三、归并排序"><a href="#三、归并排序" class="headerlink" title="三、归并排序"></a>三、归并排序</h3><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><p>归并排序是一种高效、分治策略的排序算法，通过递归地将数组分为两半，分别排序后再合并，以实现整体排序。</p><p><code>时间复杂度:最佳 O(n log n) | 平均 O(n log n) | 最差 O(n log n)    空间复杂度:O(n)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-5"><a href="#应用场景-前提条件-5" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于大规模数据</li><li>适合链表排序</li><li>需要稳定性时优先选择</li></ul></blockquote><h4 id="算法讲解-6"><a href="#算法讲解-6" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h5><p>归并排序（Merge Sort）是一种高效且稳定的“分治”排序算法。其核心策略可以概括为“<strong>先递归拆分，再有序合并</strong>”。它会持续地将一个大数组对半切分，直到每个部分都只剩一个元素（此时天然有序）。接着，再反向地将这些相邻的有序部分两两配对，按大小顺序合并成一个更长的有序数组，不断重复此过程，直到最终还原成一个完整的有序序列。</p><p>归并排序的性能极其稳定，无论原始序列是好是坏，时间复杂度都保持在卓越的 O(nlogn)。与快速排序的“就地交换”不同，它通过“有序合并”实现排序，这一特性也保证了其排序的稳定性（相同元素的原始相对顺序在排序后不会改变），但通常需要额外的存储空间来辅助合并操作。</p><h4 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>将待排序数组递归地分割成两半，直到每个子数组只包含一个元素（此时认为子数组已排序）</li><li>递归地合并相邻的子数组，<strong>合并时比较两个子数组的元素，按顺序放入临时数组</strong>（核心）</li><li>将临时数组中的元素复制回原数组对应的位置</li><li>重复步骤2和3，直到所有子数组合并成一个完整的有序数组</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cff1c3962d3.webp" alt="img"></p><h4 id="核心特性-6"><a href="#核心特性-6" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>分治策略</strong>：将问题分解为更小的子问题，再将子问题的解合并</li><li><strong>稳定排序</strong>：相等元素的相对位置在排序后不会改变</li><li><strong>时间复杂度</strong>：最好、最坏、平均情况均为 O(nlogn)</li><li><strong>空间复杂度</strong>：需要 O(n) 的额外空间</li><li><strong>非原地排序</strong>：需要额外空间来存储临时数组</li></ul><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="comment">// 找出中间点</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归排序左右两半</span></span><br><span class="line">            mergeSort(arr, left, mid);</span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 合并已排序的两半</span></span><br><span class="line">            merge(arr, left, mid, right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算两个子数组的大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> mid - left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> right - mid;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建临时数组</span></span><br><span class="line">        <span class="type">int</span>[] L = <span class="keyword">new</span> <span class="title class_">int</span>[n1];</span><br><span class="line">        <span class="type">int</span>[] R = <span class="keyword">new</span> <span class="title class_">int</span>[n2];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复制数据到临时数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">            L[i] = arr[left + i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">            R[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并临时数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class="line">                arr[k] = L[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = R[j];</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复制L[]的剩余元素</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 复制R[]的剩余元素</span></span><br><span class="line">        <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">            arr[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，在上述代码里，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并临时数组</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> left;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arr[k] = R[j];</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    k++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现了归并排序最关键的合并过程，将两个有序子数组合并成一个更大的有序数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">mergeSort</span><span class="params">(arr, left = <span class="number">0</span>, right = arr.length - <span class="number">1</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 找出中间点</span></span><br><span class="line">        <span class="type">const</span> <span class="variable">mid</span> <span class="operator">=</span> Math.floor(left + (right - left) / <span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归排序左右两半</span></span><br><span class="line">        mergeSort(arr, left, mid);</span><br><span class="line">        mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并已排序的两半</span></span><br><span class="line">        merge(arr, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function <span class="title function_">merge</span><span class="params">(arr, left, mid, right)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算两个子数组的大小</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">n1</span> <span class="operator">=</span> mid - left + <span class="number">1</span>;</span><br><span class="line">    <span class="type">const</span> <span class="variable">n2</span> <span class="operator">=</span> right - mid;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建临时数组</span></span><br><span class="line">    <span class="type">const</span> <span class="variable">L</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n1);</span><br><span class="line">    <span class="type">const</span> <span class="variable">R</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>(n2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制数据到临时数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        L[i] = arr[left + i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">let</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        R[j] = arr[mid + <span class="number">1</span> + j];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并临时数组</span></span><br><span class="line">    <span class="type">let</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="type">let</span> <span class="variable">k</span> <span class="operator">=</span> left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j]) &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制L的剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) &#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制R的剩余元素</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) &#123;</span><br><span class="line">        arr[k] = R[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="type">const</span> <span class="variable">arr</span> <span class="operator">=</span> [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">console.log(<span class="string">&quot;排序前：&quot;</span>, arr);</span><br><span class="line">mergeSort(arr);</span><br><span class="line">console.log(<span class="string">&quot;排序后：&quot;</span>, arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-2"><a href="#优化策略-2" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="小规模数组使用插入排序"><a href="#小规模数组使用插入排序" class="headerlink" title="小规模数组使用插入排序"></a>小规模数组使用插入排序</h5><p>当子数组规模较小时，可以使用插入排序代替递归，提高效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 当数组长度小于等于INSERTION_SORT_THRESHOLD时使用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (right - left &lt;= INSERTION_SORT_THRESHOLD) &#123;</span><br><span class="line">        insertionSort(arr, left, right);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">    mergeSort(arr, left, mid);</span><br><span class="line">    mergeSort(arr, mid + <span class="number">1</span>, right);</span><br><span class="line">    merge(arr, left, mid, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &gt;= left &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        arr[j + <span class="number">1</span>] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="避免不必要的复制"><a href="#避免不必要的复制" class="headerlink" title="避免不必要的复制"></a>避免不必要的复制</h5><p>如果第一个子数组的最大元素小于等于第二个子数组的最小元素，那么无需合并，直接返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果arr[mid] &lt;= arr[mid+1]，数组已经有序，无需合并</span></span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &lt;= arr[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常规合并过程</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-6"><a href="#优缺点-6" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h5><ul><li>时间复杂度稳定，在最好、最坏和平均情况下均为 O(nlogn)</li><li>稳定排序算法，保持相等元素的相对顺序</li><li>适合处理大规模数据，尤其是外部排序</li><li>可以改造为并行算法，提高效率</li></ul><h5 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h5><ul><li>需要 O(n) 的额外空间</li><li>对于小规模数据，递归开销较大</li><li>不是原地排序算法，空间效率不如快速排序等</li><li>在一些情况下，常数因子较大，实际性能可能不如快速排序</li></ul><blockquote><p>算法复杂度中的 O(n logn)，只是<strong>忽略了常数因子</strong>的量级分析。但是在实际情况中，<strong>常数因子 + 实际操作成本</strong>对性能影响很大。</p><p>归并排序中的常数因子主要来自：</p><ol><li><strong>大量的内存复制操作（额外空间）</strong></li></ol><ul><li>每次合并子数组时，都需要将两个子数组复制到一个临时数组，再合并写回原数组。</li><li>这会造成大量内存分配和数据拷贝，带来不小的开销。</li><li>在缓存局部性（CPU cache）方面也不如快速排序高效。</li></ul><ol><li><strong>空间复杂度 O(n)</strong></li></ol><p>每一层递归合并都需要额外的数组，增加内存占用且可能导致更多的 GC（垃圾回收）。</p><ol><li><strong>递归调用多、函数开销高</strong></li></ol><p>递归深度为 logn，每一层都会处理大量数组复制和合并操作。函数调用开销 + 合并逻辑相对复杂，会导致性能下降。</p></blockquote><h4 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）需要稳定排序时（保持相等元素的相对顺序）</p><p>2）外部排序，当数据量太大无法全部装入内存</p><p>3）逆序对计数等特殊问题</p><p>4）对数据稳定性要求高的企业级应用</p><blockquote><p>什么是“逆序对”？</p><p>在一个数组中，如果有一对下标 (i, j) 满足：</p><p>i &lt; j 且 nums[i] &gt; nums[j]</p><p>那么这一对就叫做一个逆序对（Inversion Pair）。</p><p>示例：</p><p>数组：nums = [7, 5, 6, 4]</p><p>逆序对有 (7,5)、(7,6)、(7,4)、(5,4)、(6,4) 共 5 个</p></blockquote><p>5）适合链表等顺序存储结构的排序</p><h4 id="扩展-5"><a href="#扩展-5" class="headerlink" title="扩展"></a>扩展</h4><h5 id="外部归并排序"><a href="#外部归并排序" class="headerlink" title="外部归并排序"></a>外部归并排序</h5><p>数据量大到无法全部装入内存的时候，可以使用外部归并排序：</p><ol><li>将大文件分割成多个能载入内存的小文件</li><li>对每个小文件单独排序</li><li>将排序好的小文件归并成大文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">externalMergeSort</span><span class="params">(String inputFile, String outputFile, <span class="type">int</span> chunkSize)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步：分割文件并排序各个块</span></span><br><span class="line">    List&lt;String&gt; chunkFiles = splitAndSort(inputFile, chunkSize);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第二步：归并排序文件</span></span><br><span class="line">    mergeFiles(chunkFiles, outputFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多路归并"><a href="#多路归并" class="headerlink" title="多路归并"></a>多路归并</h5><p>通过多路归并进一步优化合并过程，尤其是在外部排序里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">multiWayMerge</span><span class="params">(List&lt;String&gt; inputFiles, String outputFile)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建优先队列，存储每个文件的当前元素</span></span><br><span class="line">    PriorityQueue&lt;FileEntry&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为每个输入文件打开一个读取器</span></span><br><span class="line">    <span class="comment">// 将每个文件的第一个元素添加到优先队列</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环直到优先队列为空</span></span><br><span class="line">    <span class="comment">// 每次取出最小元素，写入输出文件，并从相应文件读取下一个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-6"><a href="#测验-6" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>归并排序的最好、最坏和平均时间复杂度分别是多少？</li><li>归并排序的空间复杂度是多少？</li><li>归并排序与快速排序相比有哪些优缺点？</li></ol><blockquote><p>测验答案</p><ol><li>最好、最坏和平均时间复杂度均为 O(nlogn)。</li><li>O(n)，需要额外空间来存储临时数组。</li><li>优点：时间复杂度稳定，是稳定排序。缺点：需要额外空间，不是原地排序。</li></ol></blockquote><h3 id="四、插入排序"><a href="#四、插入排序" class="headerlink" title="四、插入排序"></a>四、插入排序</h3><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><p>插入排序是一种简单且高效的排序算法，它通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><p><code>时间复杂度:最佳 O(n) | 平均 O(n²) | 最差 O(n²)   空间复杂度:O(1)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-6"><a href="#应用场景-前提条件-6" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于小规模数据</li><li>对几乎已排序的数据非常高效</li><li>数据流实时排序</li></ul></blockquote><h4 id="算法讲解-7"><a href="#算法讲解-7" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h5><p>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作方式类似于我们打牌时的整理牌序，它将待排序序列分为两部分：已排序部分和未排序部分。算法不断地从未排序部分取出元素，然后插入到已排序部分的正确位置，直到所有元素都排序完毕。</p><h4 id="算法步骤-7"><a href="#算法步骤-7" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>将第一个元素视为已排序序列，其余元素视为未排序序列</li><li>从未排序序列中取出第一个元素，称为”待插入元素”</li><li>从已排序序列的末尾开始，依次与待插入元素比较</li><li>如果已排序序列中的元素大于待插入元素，则将该元素后移一位</li><li>重复步骤3和4，直到找到小于或等于待插入元素的位置</li><li>将待插入元素插入到该位置</li><li>重复步骤2至6，直到未排序序列为空</li></ol><p>为了帮助大家更好的理解，我们以初始数组 <code>[5, 2, 4, 6, 1, 3]</code> 为例，查看每一步的详细流程：</p><hr><ul><li>初始状态： 默认第一个元素 <code>5</code> 为已排序部分。</li><li>第一轮：<ul><li>待插入元素：<code>2</code></li><li>过程： 将 <code>2</code> 与已排序的 <code>5</code> 比较，<code>2 &lt; 5</code>，因此 <code>5</code> 向右移动，<code>2</code> 插入到 <code>5</code> 的前面。</li><li>结果：<code>[2, 5, 4, 6, 1, 3]</code>。已排序部分为 <code>[2, 5]</code>。</li></ul></li><li>第二轮：<ul><li>待插入元素：<code>4</code></li><li>过程： 将 <code>4</code> 与已排序的 <code>5</code> 比较，<code>4 &lt; 5</code>，<code>5</code> 右移；再与 <code>2</code> 比较，<code>4 &gt; 2</code>，故 <code>4</code> 插入到 <code>2</code> 的后面。</li><li>结果：<code>[2, 4, 5, 6, 1, 3]</code>。已排序部分为 <code>[2, 4, 5]</code>。</li></ul></li><li>第三轮：<ul><li>待插入元素：<code>6</code></li><li>过程： 将 <code>6</code> 与已排序的 <code>5</code> 比较，<code>6 &gt; 5</code>，说明 <code>6</code> 的位置就在当前已排序部分的末尾，无需移动。</li><li>结果：<code>[2, 4, 5, 6, 1, 3]</code>。已排序部分为 <code>[2, 4, 5, 6]</code>。</li></ul></li><li>第四轮：<ul><li>待插入元素：<code>1</code></li><li>过程： 将 <code>1</code> 依次与 <code>6</code>, <code>5</code>, <code>4</code>, <code>2</code> 比较，因 <code>1</code> 是最小的，所有已排序元素均向右移动，<code>1</code> 插入到数组开头。</li><li>结果：<code>[1, 2, 4, 5, 6, 3]</code>。已排序部分为 <code>[1, 2, 4, 5, 6]</code>。</li></ul></li><li>第五轮：<ul><li>待插入元素：<code>3</code></li><li>过程： 将 <code>3</code> 依次与 <code>6</code>, <code>5</code>, <code>4</code> 比较，它们都向右移动；再与 <code>2</code> 比较，<code>3 &gt; 2</code>，故 <code>3</code> 插入到 <code>2</code> 的后面。</li><li>结果：<code>[1, 2, 3, 4, 5, 6]</code>。数组全部排序完成。</li></ul></li></ul><p><img src="https://bu.dusays.com/2025/09/21/68cff347c5562.webp" alt="img"></p><h4 id="核心特性-7"><a href="#核心特性-7" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>稳定性：稳定的排序算法，相等元素的相对位置在排序后不会改变</li><li>原地排序：只需要常数级的额外空间</li><li>时间复杂度：最坏和平均情况为O(n²)，最好情况为O(n)</li><li>适应性：对于部分有序的数组，插入排序的效率更高</li><li>增量处理：可以在排序过程中实时加入新元素</li></ul><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i]; <span class="comment">// 当前待插入元素</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将大于key的元素向后移动</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                j = j - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 找到key的正确位置，插入</span></span><br><span class="line">            arr[j + <span class="number">1</span>] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        insertionSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="二分查找优化"><a href="#二分查找优化" class="headerlink" title="二分查找优化"></a>二分查找优化</h5><p>在原来的基础上，可以使用二分查找来加速寻找插入位置的过程，减少比较次数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">binaryInsertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用二分查找找到插入位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将元素后移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入元素</span></span><br><span class="line">        arr[left] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-7"><a href="#优缺点-7" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-7"><a href="#优点-7" class="headerlink" title="优点"></a>优点</h5><ul><li>算法实现简单，容易理解</li><li>对于小规模数据或基本有序的数据效率较高</li><li>稳定的排序算法</li><li>适合增量式排序（可以一边插入元素一边保持有序）</li><li>对于接近有序的数组，时间复杂度接近O(n)</li></ul><h5 id="缺点-7"><a href="#缺点-7" class="headerlink" title="缺点"></a>缺点</h5><ul><li>对于大规模乱序数组，时间复杂度为O(n²)，效率较低</li><li>需要较多的元素移动操作</li><li>不适合对倒序或接近倒序的数组进行排序</li></ul><h4 id="应用场景-7"><a href="#应用场景-7" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>数据规模较小的排序任务</li><li>对几乎已经排好序的数据进行排序</li><li>在线算法场景：数据是实时到达的，需要动态地将新元素插入到已排序的序列中</li><li>嵌入式系统或资源受限环境</li><li>作为更复杂排序算法（如希尔排序）的基础</li></ul><h4 id="扩展-6"><a href="#扩展-6" class="headerlink" title="扩展"></a>扩展</h4><h5 id="希尔排序：插入排序的改进版"><a href="#希尔排序：插入排序的改进版" class="headerlink" title="希尔排序：插入排序的改进版"></a>希尔排序：插入排序的改进版</h5><p>希尔排序是对插入排序的改进版本，更加高效，它的原理是比较相距一定间隔的元素，逐步减小间隔直到为1，此时数组已基本有序，再进行一次插入排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始间隔设为n/2，每次减半</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 对每个间隔进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对间隔为gap的元素进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-7"><a href="#测验-7" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>插入排序的平均时间复杂度是多少？</li><li>插入排序是稳定的排序算法吗？</li><li>插入排序最适合什么类型的数据？</li><li>二分插入排序相比基本插入排序有什么改进？</li></ol><blockquote><p>测验答案</p><ol><li>O(n²) 。</li><li>是的，因为只有当待插入元素小于已排序序列中的元素时才会移动，相等元素不会改变相对位置。</li><li>小规模数据和几乎已经排好序的数据，在这些情况下，插入排序可以达到<strong> 接近O(n) </strong>的时间复杂度。</li><li>二分插入排序使用二分查找来快速定位待插入元素的正确位置，减少了比较次数，但移动元素的操作次数不变。</li></ol></blockquote><h3 id="五、选择排序"><a href="#五、选择排序" class="headerlink" title="五、选择排序"></a>五、选择排序</h3><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><p>选择排序是一种简单直观的排序算法，它通过重复从未排序部分选择最小元素，放入已排序部分的末尾，逐步构建有序序列。每轮只需一次交换，交换次数最少。</p><p><code>时间复杂度:最佳 O(n²) | 平均 O(n²) | 最差 O(n²)    空间复杂度:O(1)</code></p><p>稳定性:不稳定</p><blockquote><h5 id="应用场景-前提条件-7"><a href="#应用场景-前提条件-7" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于小规模数据</li><li>对数据移动较少的情况效率较高</li></ul></blockquote><h4 id="算法讲解-8"><a href="#算法讲解-8" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h5><p>择排序是一种非常简单直观的排序算法，工作原理可以概括为“<strong>每次从未排序的队伍中，选出最优者，让它归位</strong>”。具体来说，算法在每一轮都会遍历所有还未排序的元素，从中找出最小（或最大）的一个，然后将其与未排序部分的第一个元素交换位置。这个操作能确保每一轮过后，都有一个元素被精准地放在它最终的正确位置上。接着，算法会缩小范围，在剩下的元素中重复这个“选择与交换”的过程，直到整个序列完全有序。</p><h4 id="算法步骤-8"><a href="#算法步骤-8" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>首先在未排序序列中找到最小（或最大）元素，存放到排序序列的起始位置</li><li>再从剩余未排序元素中继续寻找最小（或最大）元素，然后放到未排序部分的起始位置</li><li>重复步骤2，直到所有元素均排序完毕</li></ol><p>为了帮助大家更好的理解，我们以初始数组 <code>[64, 25, 12, 22, 11]</code> 为例，查看每一步的详细流程：</p><ol><li>第一轮：找到全局最小值 <code>11</code>，与首位 <code>64</code> 交换。数组变为 <code>[11, 25, 12, 22, 64]</code>。</li><li>第二轮：在剩余部分 <code>[25, 12, 22, 64]</code> 中找到最小值 <code>12</code>，与当前首位 <code>25</code> 交换。数组变为 <code>[11, 12, 25, 22, 64]</code>。</li><li>第三轮：在剩余部分 <code>[25, 22, 64]</code> 中找到最小值 <code>22</code>，与当前首位 <code>25</code> 交换。数组变为 <code>[11, 12, 22, 25, 64]</code>。</li><li>第四轮：在剩余部分 <code>[25, 64]</code> 中找到最小值 <code>25</code>，它已在正确位置，无需交换。</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cff3f7e4044.webp" alt="img"></p><h4 id="核心特性-8"><a href="#核心特性-8" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>稳定性</strong>：选择排序是不稳定的排序算法，它可能会改变相等元素的相对位置</li><li><strong>原地排序</strong>：只需要常数级的额外空间</li><li><strong>时间复杂度</strong>：最好、最坏和平均情况均为 O(n²)</li><li><strong>比较排序</strong>：基于元素间的比较进行排序</li><li><strong>交换次数少</strong>：最多进行 <code>n-1</code> 次交换，比冒泡排序的交换次数要少</li></ul><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 找出从i到n-1中最小值的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i != minIndex) &#123;</span><br><span class="line">                <span class="comment">// 将找到的最小值与当前位置i交换</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[minIndex];</span><br><span class="line">                arr[minIndex] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">64</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        selectionSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-8"><a href="#优缺点-8" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-8"><a href="#优点-8" class="headerlink" title="优点"></a>优点</h5><ul><li>实现简单，思路清晰</li><li>交换操作的次数比冒泡排序少，平均性能比冒泡排序好</li><li>对于小规模的数据效率还算可以</li><li>不占用额外内存空间</li></ul><h5 id="缺点-8"><a href="#缺点-8" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度固定为 O(n²) ，无论输入数据如何都要扫描全部未处理的元素</li><li>不稳定的排序算法，可能会改变相同元素的相对位置</li><li>当数据量较大时，效率低下</li></ul><h4 id="应用场景-8"><a href="#应用场景-8" class="headerlink" title="应用场景"></a>应用场景</h4><p>选择排序虽然效率不高，但在某些特定场景下仍有一些应用场景，跟冒泡排序类似：</p><ul><li>数据规模较小的排序场景</li><li>对交换操作开销较大的排序场景（选择排序的交换次数少）</li><li>内存空间有限的嵌入式系统</li><li>算法教学和入门学习</li></ul><h4 id="扩展-7"><a href="#扩展-7" class="headerlink" title="扩展"></a>扩展</h4><h5 id="双向选择排序"><a href="#双向选择排序" class="headerlink" title="双向选择排序"></a>双向选择排序</h5><p>双向选择排序是选择排序的一种变体，每轮同时选出最小值和最大值，分别放到序列的两端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bidirectionalSelectionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> left;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> left;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在当前未排序区间找出最小值和最大值的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将最小值交换到左边</span></span><br><span class="line">        <span class="keyword">if</span> (minIndex != left) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">            arr[left] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果最大值的索引恰好是left，交换后最大值现在在minIndex位置</span></span><br><span class="line">            <span class="keyword">if</span> (maxIndex == left) &#123;</span><br><span class="line">                maxIndex = minIndex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将最大值交换到右边</span></span><br><span class="line">        <span class="keyword">if</span> (maxIndex != right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[right];</span><br><span class="line">            arr[right] = arr[maxIndex];</span><br><span class="line">            arr[maxIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-8"><a href="#测验-8" class="headerlink" title="测验"></a>测验</h4><ol><li>选择排序的平均时间复杂度是多少？</li><li>选择排序是稳定的排序算法吗？为什么？</li><li>选择排序相比冒泡排序的主要优势是什么？</li><li>选择排序每一轮遍历后，数组前端会有什么特点？</li><li>对于优化选择排序，你有哪些思路？</li></ol><blockquote><p>测验答案</p><ol><li>选择排序的平均时间复杂度是 O(n²)。</li><li>选择排序是不稳定的排序算法。因为交换操作可能会改变相等元素的相对顺序。例如，在数组[5, 5, 2]中，第一个5可能会与2交换位置，导致两个5的相对位置发生变化。</li><li>选择排序相比冒泡排序的主要优势是交换次数更少，最多进行 n-1 次交换，而冒泡排序在最坏情况下需要 O(n²) 次交换。</li><li>每一轮会有一个元素到达其最终位置，且是当前未排序部分中的最小元素。第i轮结束后，前i个元素已经排好序了。</li><li>优化选择排序的方法:<ul><li>使用双向选择排序，同时查找最大值和最小值</li><li>使用二元选择排序，减少比较次数</li><li>结合堆数据结构（变成堆排序）降低时间复杂度</li></ul></li></ol></blockquote><h3 id="六、堆排序"><a href="#六、堆排序" class="headerlink" title="六、堆排序"></a>六、堆排序</h3><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><p>堆排序是一种基于比较的高效排序算法，它利用堆这种数据结构的特性进行排序，通过建立最大堆，不断取出最大元素并调整堆来实现排序。</p><p><code>时间复杂度:最佳 O(n log n) | 平均 O(n log n) | 最差 O(n log n)   空间复杂度:O(1)</code></p><p>稳定性:不稳定</p><blockquote><h5 id="应用场景-前提条件-8"><a href="#应用场景-前提条件-8" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>对大规模数据效率高</li><li>不需要额外空间</li><li>保证最坏情况时间复杂度为O(n log n)</li></ul></blockquote><h4 id="算法讲解-9"><a href="#算法讲解-9" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h5><p>堆排序（Heap Sort）是一种高效的原地排序算法，它巧妙地利用了“堆”数据结构。其核心思想是首先将待排序的数组重构成一个最大堆（Max Heap）。在最大堆中，根节点（数组的第一个元素）始终是所有元素中的最大值。</p><p>构建好最大堆后，算法将堆顶的最大元素与堆末尾的元素交换，从而将当前的最大值放置到数组的正确最终位置。接着，将堆的大小减一，并对剩余的元素进行“堆化”调整，确保新的根节点仍然是剩余元素中的最大值。此过程不断重复——交换、缩小堆、重新堆化——直到所有元素都被放置到其最终的有序位置，完成整个排序。</p><blockquote><p>堆（Heap）是一种特殊的完全二叉树结构，它的两个重要特性：</p><ul><li>堆是一个完全二叉树，除了最底层外，其他层的节点都是满的，最底层的节点从左到右填充。</li><li>在最大堆中，每个节点的值都大于或等于其子节点的值；在最小堆中，每个节点的值都小于或等于其子节点的值。</li></ul><p>堆的数组表示：</p><p>虽然堆是一种树结构，但是也可以用数组高效地表示，这是堆的一个重要特性。</p><p>对于数组中索引为 i 的节点：</p><p>其左子节点的索引为 2*i + 1</p><p>其右子节点的索引为 2*i + 2</p><p>这种表示方法非常紧凑，不需要使用额外的指针，充分利用了完全二叉树的性质。</p></blockquote><h4 id="算法步骤-9"><a href="#算法步骤-9" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>将无序序列构建成一个最大堆</li><li>将堆顶元素（最大值）与堆的最后一个元素交换</li><li>剔除最后一个元素（已排序），将剩余元素重新构建为最大堆</li><li>重复步骤2和3，直到堆中只剩下一个元素</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cff4a091b76.webp" alt="img"><img src="https://bu.dusays.com/2025/09/21/68cff4a0a39de.webp" alt="img"></p><h4 id="核心特性-9"><a href="#核心特性-9" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>堆数据结构</strong>：利用完全二叉树的性质，可以用数组高效表示</li><li><strong>原地排序</strong>：只需要常数级的额外空间</li><li><strong>时间复杂度</strong>：建堆时间为O(n)，排序时间为O(nlogn)，总体时间复杂度为O(nlogn)</li><li><strong>不稳定性</strong>：相等元素的相对位置在排序后可能会改变</li><li><strong>自适应性</strong>：对于部分有序或完全无序的数据，性能比较稳定</li></ul><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建最大堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            heapify(arr, n, i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 逐个从堆顶取出元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 将当前堆顶（最大值）移到末尾</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">            arr[i] = temp;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对剩余元素重新构建最大堆</span></span><br><span class="line">            heapify(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调整以root为根的子树为最大堆</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> root)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> root;      <span class="comment">// 初始化最大值为根节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * root + <span class="number">1</span>; <span class="comment">// 左子节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * root + <span class="number">2</span>; <span class="comment">// 右子节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果左子节点大于根节点</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果右子节点大于当前最大值</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">            largest = right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果最大值不是根节点</span></span><br><span class="line">        <span class="keyword">if</span> (largest != root) &#123;</span><br><span class="line">            <span class="comment">// 交换根节点和最大值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">swap</span> <span class="operator">=</span> arr[root];</span><br><span class="line">            arr[root] = arr[largest];</span><br><span class="line">            arr[largest] = swap;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归调整被影响的子树</span></span><br><span class="line">            heapify(arr, n, largest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        heapSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码中，<code>heapify</code>函数是堆排序的核心，负责构建最大堆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> n = arr.<span class="property">length</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建最大堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="title function_">heapify</span>(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 逐个从堆顶取出元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 将当前堆顶（最大值）移到末尾</span></span><br><span class="line">        [arr[<span class="number">0</span>], arr[i]] = [arr[i], arr[<span class="number">0</span>]];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对剩余元素重新构建最大堆</span></span><br><span class="line">        <span class="title function_">heapify</span>(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, n, root</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> largest = root;      <span class="comment">// 初始化最大值为根节点</span></span><br><span class="line">    <span class="keyword">const</span> left = <span class="number">2</span> * root + <span class="number">1</span>; <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">const</span> right = <span class="number">2</span> * root + <span class="number">2</span>; <span class="comment">// 右子节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果左子节点大于根节点</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果右子节点大于当前最大值</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果最大值不是根节点</span></span><br><span class="line">    <span class="keyword">if</span> (largest !== root) &#123;</span><br><span class="line">        <span class="comment">// 交换根节点和最大值</span></span><br><span class="line">        [arr[root], arr[largest]] = [arr[largest], arr[root]];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归调整被影响的子树</span></span><br><span class="line">        <span class="title function_">heapify</span>(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;排序前：&quot;</span>, arr);</span><br><span class="line"><span class="title function_">heapSort</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;排序后：&quot;</span>, arr);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-3"><a href="#优化策略-3" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h5><p>递归调用<code>heapify</code>可能在大规模数据时导致栈溢出，可以使用迭代方式实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapifyIterative</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">largest</span> <span class="operator">=</span> root;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">keepGoing</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (keepGoing) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * largest + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * largest + <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> largest;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[maxIndex]) &#123;</span><br><span class="line">            maxIndex = left;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[maxIndex]) &#123;</span><br><span class="line">            maxIndex = right;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (maxIndex != largest) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[largest];</span><br><span class="line">            arr[largest] = arr[maxIndex];</span><br><span class="line">            arr[maxIndex] = temp;</span><br><span class="line">            </span><br><span class="line">            largest = maxIndex;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            keepGoing = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆排序的自适应版本"><a href="#堆排序的自适应版本" class="headerlink" title="堆排序的自适应版本"></a>堆排序的自适应版本</h5><p>也可以通过记录每次下滑操作的深度，减少不必要的比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adaptiveHeapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">item</span> <span class="operator">=</span> arr[root];</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (i &lt; n/<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> <span class="number">2</span>*i + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 选择较大的子节点</span></span><br><span class="line">        <span class="keyword">if</span> (child+<span class="number">1</span> &lt; n &amp;&amp; arr[child] &lt; arr[child+<span class="number">1</span>]) &#123;</span><br><span class="line">            child++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果子节点大于item，继续下滑</span></span><br><span class="line">        <span class="keyword">if</span> (item &lt; arr[child]) &#123;</span><br><span class="line">            arr[i] = arr[child];</span><br><span class="line">            i = child;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr[i] = item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-9"><a href="#优缺点-9" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-9"><a href="#优点-9" class="headerlink" title="优点"></a>优点</h5><ul><li>时间复杂度稳定，最好、最坏、平均情况均为O(nlogn)</li><li>原地排序，空间复杂度为O(1)</li><li>可以用于实现优先队列</li><li>适合处理大规模数据</li><li>不受输入数据分布影响，性能稳定</li></ul><h5 id="缺点-9"><a href="#缺点-9" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不是稳定的排序算法</li><li>在实际应用中，常数因子较大，可能比快速排序慢</li><li>对缓存不够友好，数据访问的局部性不好</li><li>实现复杂度较高，特别是构建堆的部分</li></ul><h4 id="应用场景-9"><a href="#应用场景-9" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>需要保证最坏情况时间复杂度的场景</li><li>实现优先队列（Priority Queue）</li><li>需要找出序列中最大或最小的k个元素</li><li>定时器系统中的事件调度</li></ul><h4 id="扩展-8"><a href="#扩展-8" class="headerlink" title="扩展"></a>扩展</h4><h5 id="使用堆实现优先队列"><a href="#使用堆实现优先队列" class="headerlink" title="使用堆实现优先队列"></a>使用堆实现优先队列</h5><p>堆数据结构本身是实现优先队列的理想选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueue</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] heap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PriorityQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.heap = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt;= capacity) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> size++;</span><br><span class="line">        heap[current] = value;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 上浮操作，维护堆的性质</span></span><br><span class="line">        <span class="keyword">while</span> (current &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> (current - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (heap[current] &lt;= heap[parent]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap[current];</span><br><span class="line">            heap[current] = heap[parent];</span><br><span class="line">            heap[parent] = temp;</span><br><span class="line">            </span><br><span class="line">            current = parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">extractMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> heap[<span class="number">0</span>];</span><br><span class="line">        heap[<span class="number">0</span>] = heap[--size];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下沉操作，维护堆的性质</span></span><br><span class="line">        heapify(heap, size, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// heapify方法同上...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="TopK问题"><a href="#TopK问题" class="headerlink" title="TopK问题"></a>TopK问题</h5><p>使用堆排序解决TopK问题（找出数组中最大/最小的K个数）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] findTopK(<span class="type">int</span>[] arr, <span class="type">int</span> k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || k &gt; arr.length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;无效的k值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建大小为k的最小堆</span></span><br><span class="line">    <span class="comment">// 这里使用数组前k个元素构建初始堆</span></span><br><span class="line">    <span class="type">int</span>[] minHeap = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">    System.arraycopy(arr, <span class="number">0</span>, minHeap, <span class="number">0</span>, k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        minHeapify(minHeap, k, i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历剩余元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前元素大于堆顶，替换堆顶并重新调整堆</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; minHeap[<span class="number">0</span>]) &#123;</span><br><span class="line">            minHeap[<span class="number">0</span>] = arr[i];</span><br><span class="line">            minHeapify(minHeap, k, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将堆中元素复制到结果数组</span></span><br><span class="line">    System.arraycopy(minHeap, <span class="number">0</span>, result, <span class="number">0</span>, k);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">minHeapify</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> n, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">smallest</span> <span class="operator">=</span> i;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &lt; arr[smallest]) &#123;</span><br><span class="line">        smallest = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &lt; arr[smallest]) &#123;</span><br><span class="line">        smallest = right;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (smallest != i) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[smallest];</span><br><span class="line">        arr[smallest] = temp;</span><br><span class="line">        </span><br><span class="line">        minHeapify(arr, n, smallest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-9"><a href="#测验-9" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>堆排序的时间复杂度是多少？</li><li>堆排序是稳定的排序算法吗？</li><li>在堆中，父节点的索引与子节点索引有什么关系？</li><li>堆排序的空间复杂度是多少？</li></ol><blockquote><p>测验答案</p><ol><li>O(nlogn)，在最好、最坏和平均情况下都是。</li><li>不是。</li><li>对于一个索引为i的节点，其左子节点索引为2i+1，右子节点索引为2i+2。</li><li>O(1)，是一种原地排序算法。</li></ol></blockquote><h3 id="七、计数排序"><a href="#七、计数排序" class="headerlink" title="七、计数排序"></a>七、计数排序</h3><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p>计数排序是一种非比较型的排序算法，适用于数据范围较小的情况，它通过统计元素出现的次数来进行排序。</p><p><code>时间复杂度:最佳 O(n + k) | 平均 O(n + k) | 最差 O(n + k)  空间复杂度:O(n + k)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-9"><a href="#应用场景-前提条件-9" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>仅适用于整数</li><li>适用于数据范围较小的情况</li><li>非比较型排序算法</li></ul></blockquote><h4 id="算法讲解-10"><a href="#算法讲解-10" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h5><p>计数排序（Counting Sort）是一种非比较型的排序算法，核心思想是通过统计元素出现的次数进行排序，利用数组的索引来确定元素的正确位置。</p><p>计数排序特别适合于已知范围不大的整数序列排序，其时间复杂度为 O(n+k)，其中 n 是待排序数组的长度，k 是整数的范围。当 k 不是很大时，计数排序可以实现线性时间排序，这是基于比较的排序算法（快速排序、归并排序等）无法达到的。</p><h4 id="算法步骤-10"><a href="#算法步骤-10" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>找出待排序数组中的最大值和最小值，确定计数数组的大小</li><li>创建一个计数数组，统计每个元素出现的次数</li><li>对计数数组进行累加，得到每个元素在排序后数组中的位置</li><li>创建一个临时数组，从后向前扫描原数组，根据计数数组确定元素位置</li><li>将临时数组复制回原数组</li></ol><p><img src="https://algo.codefather.cn/algorithms/sorting/需要计数排序流程图" alt="img"><img src="https://bu.dusays.com/2025/09/21/68cff60ce290d.webp" alt="img"></p><p><img src="https://bu.dusays.com/2025/09/21/68cff60cb8e00.webp" alt="img"></p><h4 id="核心特性-10"><a href="#核心特性-10" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>非比较排序：不通过比较元素大小进行排序</li><li>稳定排序：相等元素的相对位置在排序后不会改变</li><li>时间复杂度：O(n+k)，其中 k 是数据范围</li><li>空间复杂度：O(n+k)，需要额外空间存储计数数组和临时数组</li><li>适用范围：整数且范围较小的数据集</li></ul><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountingSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找出数组中的最大值和最小值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算计数数组的大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">range</span> <span class="operator">=</span> max - min + <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建计数数组并统计每个元素出现的次数</span></span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[range];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            count[arr[i] - min]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算累加数组，确定每个元素在排序后的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; range; i++) &#123;</span><br><span class="line">            count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建临时数组存储排序结果</span></span><br><span class="line">        <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从后往前遍历原数组，保证排序的稳定性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            output[count[arr[i] - min] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            count[arr[i] - min]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将排序结果复制回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = output[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        countingSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>计数排序最关键的操作是从后向前扫描保证排序的稳定性，相同的元素在排序后相对顺序不变：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从后往前遍历原数组，保证排序的稳定性</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    output[count[arr[i] - min] - <span class="number">1</span>] = arr[i];</span><br><span class="line">    count[arr[i] - min]--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-4"><a href="#优化策略-4" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="处理负数和极大范围"><a href="#处理负数和极大范围" class="headerlink" title="处理负数和极大范围"></a>处理负数和极大范围</h5><p>当数据范围很大或包含负数时，标准计数排序可能面临问题，可以进行如下优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortForLargeRange</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 找出数组中的最大值和最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">            min = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算范围</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">range</span> <span class="operator">=</span> max - min + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果范围过大，可以考虑使用其他排序算法</span></span><br><span class="line">    <span class="keyword">if</span> (range &gt; arr.length * <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里可以调用其他排序算法，如快速排序</span></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正常的计数排序逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h5><p>当只需要排序结果、不需要保持稳定性时，可以省略输出数组，直接更新原数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortInPlace</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 找出最大值和最小值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        max = Math.max(max, arr[i]);</span><br><span class="line">        min = Math.min(min, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建计数数组</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        count[arr[i] - min]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 直接从计数数组重建原数组</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[index++] = i + min;</span><br><span class="line">            count[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-10"><a href="#优缺点-10" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-10"><a href="#优点-10" class="headerlink" title="优点"></a>优点</h5><ul><li>时间复杂度为 O(n+k)，当 k 不大时可以达到线性时间</li><li>稳定排序算法</li><li>适合对整数进行排序</li><li>不需要比较元素，对于范围小的数据集非常高效</li></ul><h5 id="缺点-10"><a href="#缺点-10" class="headerlink" title="缺点"></a>缺点</h5><ul><li>只适用于整数排序</li><li>当数据范围 k 很大时，空间复杂度高</li><li>不适合对浮点数、字符串等进行排序（需要额外转换）</li><li>对于数据分布极不均匀的情况效率低下</li></ul><h4 id="应用场景-10"><a href="#应用场景-10" class="headerlink" title="应用场景"></a>应用场景</h4><p>计数排序比较适合数据范围较小且是整数的排序场景，尤其是元素分布集中、重复值较多的情况：</p><p>1）用于对范围较小的整数进行排序，如年龄、分数等</p><p>3）对于需要重复计数或统计数据的场景（如直方图统计）</p><p>4）对于要求稳定排序且元素为整数的场景</p><p>5）用于计算特定范围内元素的分布统计</p><h4 id="扩展-9"><a href="#扩展-9" class="headerlink" title="扩展"></a>扩展</h4><h5 id="基数排序结合"><a href="#基数排序结合" class="headerlink" title="基数排序结合"></a>基数排序结合</h5><p>计数排序可以作为基数排序的子过程，处理每一位的排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 找出最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每一位数字进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">        countingSortByDigit(arr, exp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortByDigit</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> exp)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">// 一位数字范围是0-9</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计当前位上每个数字出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        count[(arr[i] / exp) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 累加计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从后向前构建输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        output[count[(arr[i] / exp) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[(arr[i] / exp) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制到原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="对象排序"><a href="#对象排序" class="headerlink" title="对象排序"></a>对象排序</h5><p>通过提取对象的整数键进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;: &quot;</span> + score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortStudents</span><span class="params">(Student[] students)</span> &#123;</span><br><span class="line">    <span class="comment">// 找出最高分和最低分</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> students[<span class="number">0</span>].score, min = students[<span class="number">0</span>].score;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (students[i].score &gt; max) &#123;</span><br><span class="line">            max = students[i].score;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (students[i].score &lt; min) &#123;</span><br><span class="line">            min = students[i].score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算范围</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">range</span> <span class="operator">=</span> max - min + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建计数数组</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[range];</span><br><span class="line">    <span class="keyword">for</span> (Student student : students) &#123;</span><br><span class="line">        count[student.score - min]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 累加计数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; range; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建输出数组</span></span><br><span class="line">    Student[] output = <span class="keyword">new</span> <span class="title class_">Student</span>[students.length];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从后向前遍历，保证稳定性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> students.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        output[count[students[i].score - min] - <span class="number">1</span>] = students[i];</span><br><span class="line">        count[students[i].score - min]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; students.length; i++) &#123;</span><br><span class="line">        students[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-10"><a href="#测验-10" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>计数排序的时间复杂度是多少？它与归并排序相比有什么优势？</li><li>计数排序适用于哪些数据类型？为什么不适合排序浮点数？</li><li>如何修改计数排序使其能够处理负数？</li></ol><blockquote><p>测验答案</p><ol><li>计数排序的时间复杂度是 O(n+k)，其中 k 是数据范围。当 k 较小时，它比归并排序 O(nlogn) 更高效。</li><li>计数排序主要适用于整数数据类型。浮点数理论上有无限多个取值，不方便直接用索引表示，精度问题也会导致统计困难。</li><li>通过找出最小值 min，并使用 arr[i] - min 作为索引。</li></ol></blockquote><h3 id="八、希尔排序"><a href="#八、希尔排序" class="headerlink" title="八、希尔排序"></a>八、希尔排序</h3><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><p>希尔排序是插入排序的改进版本，通过比较相距一定间隔的元素来工作，逐步减小间隔直到只比较相邻元素。</p><p><code>时间复杂度:最佳 O(n log n) | 平均 O(n log² n) | 最差 O(n²)    空间复杂度:O(1)</code></p><p>稳定性:不稳定</p><blockquote><h5 id="应用场景-前提条件-10"><a href="#应用场景-前提条件-10" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>插入排序的改进版</li><li>适用于中等规模数据</li></ul></blockquote><h4 id="算法讲解-11"><a href="#算法讲解-11" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h5><p>希尔排序（Shell Sort）是插入排序的一种改进版本，它是第一个突破O(n²)的排序算法，核心思想是利用<strong>步长序列</strong>对数据进行分组，在每个分组内使用插入排序，逐步减小步长直到为1，完成最终排序。</p><p>希尔排序时元素会大跨度移动，解决了插入排序在处理大规模乱序数组效率低下的问题，让元素更快移动到正确位置。虽然说后来出现了更高效的排序算法，但是希尔排序凭借其简单性和在中等规模数据上的良好表现，仍然是实际应用中的重要排序算法。</p><h4 id="算法步骤-11"><a href="#算法步骤-11" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>选择一个步长序列，建议初始步长 n/2，每次减半直到步长为1</li><li>对每个步长，对数组进行分组，对应位置相隔为步长的元素视为一组</li><li>对每一组使用插入排序进行排序</li><li>减小步长，重复步骤2和3，直到步长减少到1</li><li>当步长为1时，相当于对整个数组做一次插入排序，此时数组已基本有序，所需的比较和移动次数大大减少</li></ol><p>为了帮助大家更好的理解，我们以初始数组 <code>[8, 9, 1, 7, 2, 6, 3, 5, 4]</code> 为例，查看每一步的详细流程：</p><p>1）第一轮排序</p><ul><li>选择间隔 (Gap): 4 (数组长度9除以2取整)</li><li>分组: 按照间隔4将数组分为4个子序列。<ul><li>第1组 (下标0, 4, 8): <code>[8, 2, 4]</code></li><li>第2组 (下标1, 5): <code>[9, 6]</code></li><li>第3组 (下标2, 6): <code>[1, 3]</code></li><li>第4组 (下标3, 7): <code>[7, 5]</code></li></ul></li><li>对每组进行插入排序:<ul><li><code>[8, 2, 4]</code> 排序后变为 <code>[2, 4, 8]</code></li><li><code>[9, 6]</code> 排序后变为 <code>[6, 9]</code></li><li><code>[1, 3]</code> 排序后变为 <code>[1, 3]</code></li><li><code>[7, 5]</code> 排序后变为 <code>[5, 7]</code></li></ul></li><li>本轮结果: 将排序后的元素放回原位置，数组变为 <code>[2, 6, 1, 5, 4, 9, 3, 7, 8]</code>。</li></ul><p>2）第二轮排序</p><ul><li><p>缩小间隔 (Gap): 2 (上一间隔4除以2)</p></li><li><p>分组: 此时基于新数组</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[2, 6, 1, 5, 4, 9, 3, 7, 8]</span><br></pre></td></tr></table></figure><p>  ，按照间隔2分为2个子序列。</p><ul><li>第1组 (偶数下标): <code>[2, 1, 4, 3, 8]</code></li><li>第2组 (奇数下标): <code>[6, 5, 9, 7]</code></li></ul><ul><li><p>对每组进行插入排序:</p><ul><li><code>[2, 1, 4, 3, 8]</code> 排序后变为 <code>[1, 2, 3, 4, 8]</code></li><li><code>[6, 5, 9, 7]</code> 排序后变为 <code>[5, 6, 7, 9]</code></li></ul></li><li><p>本轮结果: 将元素放回原位置，数组变为 <code>[1, 5, 2, 6, 3, 7, 4, 9, 8]</code>。此时数组已经比之前更加有序。</p></li></ul><p>3）第三轮排序（最终轮）</p><ul><li>缩小间隔 (Gap): 1。</li><li>操作: 当间隔为1时，希尔排序就等同于对整个数组进行一次普通插入排序。</li><li>排序过程: 对 <code>[1, 5, 2, 6, 3, 7, 4, 9, 8]</code> 进行插入排序。由于数组已基本有序，这次排序的效率非常高。</li><li>最终排序结果: 数组变为完全有序的 <code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>。</li></ul><p><img src="https://bu.dusays.com/2025/09/21/68cffb37543fb.webp" alt="img"></p><h4 id="核心特性-11"><a href="#核心特性-11" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>递减步长序列：初始较大步长让元素大幅度移动，后续减小步长微调元素位置</li><li>分组插入排序：对每个步长形成的分组独立应用插入排序</li><li>时间复杂度：取决于步长序列，一般在O(n1.3)到O(n2)之间</li><li>不稳定性：相等元素的相对位置在排序后可能会改变</li><li>适应性：对于中等大小的数组表现良好</li></ul><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始步长为n/2，每次减半</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 对每个步长进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="comment">// 保存当前元素</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                <span class="type">int</span> j;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 对同一组的元素进行插入排序</span></span><br><span class="line">                <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 将temp放到正确位置</span></span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">19</span>, <span class="number">92</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        shellSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>希尔排序的核心是通过步长（gap）将数组分成多个子序列，对每个子序列进行插入排序。步长初始较大，逐渐减小，最终当步长为1时，整个数组已经基本有序，最后一轮插入排序效率很高。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 初始步长为n/2，每次减半</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 对每个步长进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 保存当前元素</span></span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对同一组的元素进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将temp放到正确位置</span></span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">19</span>, <span class="number">92</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前：&quot;</span>);</span><br><span class="line">    printArray(arr, n);</span><br><span class="line">    </span><br><span class="line">    shellSort(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后：&quot;</span>);</span><br><span class="line">    printArray(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-5"><a href="#优化策略-5" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="使用优化的步长序列"><a href="#使用优化的步长序列" class="headerlink" title="使用优化的步长序列"></a>使用优化的步长序列</h5><p>Knuth提出的步长序列可以提高希尔排序的性能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">knuthShellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算初始步长：Knuth序列 h = 3*h + 1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n/<span class="number">3</span>) &#123;</span><br><span class="line">        h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Knuth序列进行希尔排序</span></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 对每个步长进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> h; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= h &amp;&amp; arr[j - h] &gt; temp; j -= h) &#123;</span><br><span class="line">                arr[j] = arr[j - h];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新步长</span></span><br><span class="line">        h = h/<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Hibbard序列"><a href="#Hibbard序列" class="headerlink" title="Hibbard序列"></a>Hibbard序列</h5><p>Hibbard提出的步长序列也是一种常用优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hibbardShellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算初始步长：Hibbard序列 2^k - 1</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    k--;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Hibbard序列进行希尔排序</span></span><br><span class="line">    <span class="keyword">while</span> (k &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对每个步长进行插入排序</span></span><br><span class="line">        <span class="comment">// ... 与基本实现相同 ...</span></span><br><span class="line">        </span><br><span class="line">        k--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-11"><a href="#优缺点-11" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-11"><a href="#优点-11" class="headerlink" title="优点"></a>优点</h5><ul><li>比插入排序更高效，尤其是对于大规模乱序数组</li><li>代码简单，容易实现</li><li>在中等大小的数组中性能良好</li><li>对于几乎已排序的数据效率很高</li><li>不需要额外的空间（原地排序）</li></ul><h5 id="缺点-11"><a href="#缺点-11" class="headerlink" title="缺点"></a>缺点</h5><ul><li>不是稳定的排序算法</li><li>步长序列的选择对性能影响很大</li><li>时间复杂度分析复杂，依赖于所选的步长序列</li><li>对于非常大的数据集，其他高级排序算法（如快速排序、堆排序）可能更高效</li><li>对于非常小的数据集，简单的插入排序可能更高效</li></ul><h4 id="应用场景-11"><a href="#应用场景-11" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>中等规模的数据排序</li><li>作为更复杂排序算法的预处理步骤</li><li>数组基本有序但有少数元素错位较远的情况</li><li>嵌入式系统或资源受限环境中的排序</li><li>实时系统中需要可预测性能的场景</li></ul><h4 id="扩展-10"><a href="#扩展-10" class="headerlink" title="扩展"></a>扩展</h4><h5 id="结合其他排序算法"><a href="#结合其他排序算法" class="headerlink" title="结合其他排序算法"></a>结合其他排序算法</h5><p>可以将希尔排序与其他排序算法结合使用，例如在最后一轮（gap=1）时使用插入排序的优化版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hybridShellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用希尔排序进行预处理</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> n/<span class="number">2</span>; gap &gt; <span class="number">1</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// ... 标准希尔排序代码 ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最后一轮使用优化的插入排序</span></span><br><span class="line">    binaryInsertionSort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">binaryInsertionSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用二分查找找到插入位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] &gt; key) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将元素后移</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>; j &gt;= left; j--) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入元素</span></span><br><span class="line">        arr[left] = key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-11"><a href="#测验-11" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>希尔排序的时间复杂度取决于什么？</li><li>希尔排序相比于插入排序的主要优势是什么？</li><li>为什么说希尔排序是第一个突破O(n²)的排序算法？</li></ol><blockquote><p>测验答案</p><ol><li>步长序列的选择，不同的步长序列会导致不同的时间复杂度。</li><li>能够让元素进行大跨度移动，更快地接近最终位置，特别适合大规模乱序数组。</li><li>希尔排序在某些步长序列下可以达到O(n^1.3)等 亚二次时间复杂度。</li></ol></blockquote><h3 id="九、桶排序"><a href="#九、桶排序" class="headerlink" title="九、桶排序"></a>九、桶排序</h3><h4 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h4><p>桶排序是一种分配式排序算法，将元素分到有限数量的桶里，每个桶再单独排序（比如用插入排序），最后依次把各个桶中的元素取出来即完成排序。</p><p><code>时间复杂度:最佳 O(n) | 平均 O(n + n²/k + k) | 最差 O(n²)   空间复杂度:O(n + k)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-11"><a href="#应用场景-前提条件-11" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适合均匀分布的数据</li><li>需要额外空间</li><li>可以与其他排序算法结合</li></ul></blockquote><h4 id="算法讲解-12"><a href="#算法讲解-12" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h5><p>桶排序（Bucket Sort）是一种分布式排序算法，核心思想是将数据分散到有限数量的桶中，然后对每个桶中的数据进行排序，最后将各个桶中的数据有序地合并起来。桶排序是计数排序的扩展版本，特别适合均匀分布的数据集。</p><p>桶排序的效率取决于数据分布的均匀性。在最佳情况下，桶排序的时间复杂度可以达到 O(n)，在特定场景下非常高效。桶排序结合了哈希表的思想，通过映射函数将元素分配到不同的桶中实现排序。</p><h4 id="算法步骤-12"><a href="#算法步骤-12" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>确定桶的数量和范围，创建对应数量的桶（通常是数组或链表）</li><li>根据映射函数将每个元素分配到对应的桶中</li><li>对每个桶内的元素分别进行排序（可以使用任何排序算法）</li><li>按照桶的顺序将各个桶中的元素依次取出，组成有序序列<img src="https://algo.codefather.cn/algorithms/sorting/需要桶排序流程图" alt="img"><img src="https://bu.dusays.com/2025/09/21/68cffc8498b9d.webp" alt="img"></li></ol><h4 id="核心特性-12"><a href="#核心特性-12" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>分布式排序：将元素分散到多个桶中进行局部排序</li><li>映射函数：需要一个合理的映射函数决定元素与桶的对应关系</li><li>时间复杂度：平均情况为 O(n+k)，其中 k 是桶的数量，最坏情况为 O(n²)</li><li>空间复杂度：O(n+k)，需要额外空间存储桶和临时数据</li><li>稳定性：取决于桶内排序使用的算法，如果使用稳定的排序算法那么桶排序也是稳定的</li></ul><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BucketSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定桶的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bucketCount</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建桶</span></span><br><span class="line">        List&lt;List&lt;Double&gt;&gt; buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(bucketCount);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">            buckets.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找出数组中的最大值和最小值</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>], min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">                min = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算每个桶的范围大小</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">range</span> <span class="operator">=</span> (max - min) / bucketCount;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将元素分配到对应的桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> item : arr) &#123;</span><br><span class="line">            <span class="comment">// 计算元素应该放入哪个桶</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">bucketIndex</span> <span class="operator">=</span> (<span class="type">int</span>)((item - min) / range);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 处理最大值的边界情况</span></span><br><span class="line">            <span class="keyword">if</span> (bucketIndex == bucketCount) &#123;</span><br><span class="line">                bucketIndex--;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            buckets.get(bucketIndex).add(item);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对每个桶中的元素进行排序</span></span><br><span class="line">        <span class="keyword">for</span> (List&lt;Double&gt; bucket : buckets) &#123;</span><br><span class="line">            Collections.sort(bucket);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将桶中排序好的元素放回原数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Double&gt; bucket : buckets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">double</span> item : bucket) &#123;</span><br><span class="line">                arr[index++] = item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">double</span> item : arr) &#123;</span><br><span class="line">            System.out.print(item + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">double</span>[] arr = &#123;<span class="number">0.42</span>, <span class="number">0.32</span>, <span class="number">0.33</span>, <span class="number">0.52</span>, <span class="number">0.37</span>, <span class="number">0.47</span>, <span class="number">0.51</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        bucketSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-6"><a href="#优化策略-6" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="动态调整桶的数量"><a href="#动态调整桶的数量" class="headerlink" title="动态调整桶的数量"></a>动态调整桶的数量</h5><p>根据上面的介绍我们知道，桶的数量会影响算法性能，所以可以根据数据分布动态调整：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSort</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 估计数据的分布情况</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">variance</span> <span class="operator">=</span> calculateVariance(arr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据方差动态确定桶的数量</span></span><br><span class="line">    <span class="type">int</span> bucketCount;</span><br><span class="line">    <span class="keyword">if</span> (variance &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">        <span class="comment">// 数据分布均匀，使用更多的桶</span></span><br><span class="line">        bucketCount = arr.length;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (variance &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">        <span class="comment">// 数据分布一般，使用中等数量的桶</span></span><br><span class="line">        bucketCount = arr.length / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数据分布不均匀，使用较少的桶</span></span><br><span class="line">        bucketCount = arr.length / <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后续桶排序逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculateVariance</span><span class="params">(<span class="type">double</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="comment">// 计算数组的方差，用于评估数据分布</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, squareSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> num : arr) &#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        squareSum += num * num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> <span class="variable">mean</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">    <span class="keyword">return</span> (squareSum / arr.length) - (mean * mean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化桶内排序"><a href="#优化桶内排序" class="headerlink" title="优化桶内排序"></a>优化桶内排序</h5><p>针对不同大小和数据特性的桶，选择不同的排序算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sortBucket</span><span class="params">(List&lt;Double&gt; bucket)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (bucket.size() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (bucket.size() &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">// 对于小规模数据，使用插入排序</span></span><br><span class="line">        insertionSort(bucket);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对于大规模数据，使用快速排序或其他高效算法</span></span><br><span class="line">        Collections.sort(bucket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertionSort</span><span class="params">(List&lt;Double&gt; list)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">key</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; list.get(j) &gt; key) &#123;</span><br><span class="line">            list.set(j + <span class="number">1</span>, list.get(j));</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        list.set(j + <span class="number">1</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-12"><a href="#优缺点-12" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-12"><a href="#优点-12" class="headerlink" title="优点"></a>优点</h5><ul><li>当数据分布均匀时，时间复杂度接近 O(n)，非常高效</li><li>适合外部排序，可以有效处理大规模数据</li><li>可以与其他排序算法结合使用</li><li>适合对浮点数进行排序</li><li>适合并行化实现</li></ul><h5 id="缺点-12"><a href="#缺点-12" class="headerlink" title="缺点"></a>缺点</h5><ul><li>对数据分布敏感，最坏情况下可能退化到 O(n²)</li><li>需要额外的空间存储桶</li><li>桶的数量和映射函数选择对性能影响很大</li><li>对于非均匀分布的数据，可能导致某些桶过大，效率下降</li><li>需要知道数据的大致分布情况才能设计最优的桶数量</li></ul><h4 id="应用场景-12"><a href="#应用场景-12" class="headerlink" title="应用场景"></a>应用场景</h4><p>接下来看下桶排序的应用场景：</p><p>1）数据分布相对均匀的场景，如随机生成的[0,1)区间内均匀分布的浮点数</p><p>2）外部排序，处理无法一次性装入内存的大规模数据</p><p>4）并行计算环境中，可以将数据分散到不同节点处理</p><p>5）与其他算法结合，比如作为基数排序或分布式系统中的预处理步骤</p><h4 id="扩展-11"><a href="#扩展-11" class="headerlink" title="扩展"></a>扩展</h4><h5 id="应用于外部排序"><a href="#应用于外部排序" class="headerlink" title="应用于外部排序"></a>应用于外部排序</h5><p>当数据量过大无法一次性加载到内存时，可以使用桶排序思想：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">externalBucketSort</span><span class="params">(String inputFile, String outputFile, <span class="type">int</span> bucketCount)</span> &#123;</span><br><span class="line">    <span class="comment">// 第一阶段：扫描文件，确定数据范围</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">min</span> <span class="operator">=</span> Double.MAX_VALUE;</span><br><span class="line">    <span class="type">double</span> <span class="variable">max</span> <span class="operator">=</span> Double.MIN_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取文件，找出最大值和最小值</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第二阶段：创建桶文件</span></span><br><span class="line">    String[] bucketFiles = <span class="keyword">new</span> <span class="title class_">String</span>[bucketCount];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">        bucketFiles[i] = <span class="string">&quot;bucket_&quot;</span> + i + <span class="string">&quot;.tmp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三阶段：将输入文件的数据分配到各个桶文件中</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">range</span> <span class="operator">=</span> (max - min) / bucketCount;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第四阶段：对每个桶文件进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">        <span class="comment">// 读取桶文件到内存，排序后写回</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第五阶段：合并所有排序好的桶文件到输出文件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多维桶排序"><a href="#多维桶排序" class="headerlink" title="多维桶排序"></a>多维桶排序</h5><p>扩展到多维数据的排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + x + <span class="string">&quot;, &quot;</span> + y + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bucketSortPoints</span><span class="params">(Point[] points)</span> &#123;</span><br><span class="line">    <span class="comment">// 确定x和y维度的范围</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">minX</span> <span class="operator">=</span> Double.MAX_VALUE, maxX = Double.MIN_VALUE;</span><br><span class="line">    <span class="type">double</span> <span class="variable">minY</span> <span class="operator">=</span> Double.MAX_VALUE, maxY = Double.MIN_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (Point p : points) &#123;</span><br><span class="line">        minX = Math.min(minX, p.x);</span><br><span class="line">        maxX = Math.max(maxX, p.x);</span><br><span class="line">        minY = Math.min(minY, p.y);</span><br><span class="line">        maxY = Math.max(maxY, p.y);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 确定网格桶数量（根据数据规模调整）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">xBuckets</span> <span class="operator">=</span> (<span class="type">int</span>)Math.sqrt(points.length);</span><br><span class="line">    <span class="type">int</span> <span class="variable">yBuckets</span> <span class="operator">=</span> (<span class="type">int</span>)Math.sqrt(points.length);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建二维桶数组</span></span><br><span class="line">    List&lt;Point&gt;[][] buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[xBuckets][yBuckets];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; xBuckets; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yBuckets; j++) &#123;</span><br><span class="line">            buckets[i][j] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算每个维度的范围大小</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">xRange</span> <span class="operator">=</span> (maxX - minX) / xBuckets;</span><br><span class="line">    <span class="type">double</span> <span class="variable">yRange</span> <span class="operator">=</span> (maxY - minY) / yBuckets;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将点分配到对应的桶中</span></span><br><span class="line">    <span class="keyword">for</span> (Point p : points) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">xIndex</span> <span class="operator">=</span> (<span class="type">int</span>)((p.x - minX) / xRange);</span><br><span class="line">        <span class="type">int</span> <span class="variable">yIndex</span> <span class="operator">=</span> (<span class="type">int</span>)((p.y - minY) / yRange);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理边界情况</span></span><br><span class="line">        <span class="keyword">if</span> (xIndex == xBuckets) xIndex--;</span><br><span class="line">        <span class="keyword">if</span> (yIndex == yBuckets) yIndex--;</span><br><span class="line">        </span><br><span class="line">        buckets[xIndex][yIndex].add(p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每个桶中的点进行排序（例如，先按x再按y）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; xBuckets; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yBuckets; j++) &#123;</span><br><span class="line">            Collections.sort(buckets[i][j], (p1, p2) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (p1.x != p2.x) &#123;</span><br><span class="line">                    <span class="keyword">return</span> Double.compare(p1.x, p2.x);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Double.compare(p1.y, p2.y);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收集结果</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; xBuckets; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; yBuckets; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Point p : buckets[i][j]) &#123;</span><br><span class="line">                points[index++] = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-12"><a href="#测验-12" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>桶排序的平均时间复杂度是多少？在什么情况下会达到这个复杂度？</li><li>桶排序的最坏时间复杂度是多少？什么情况下会出现？</li><li>如何选择合适的桶数量和映射函数？</li></ol><blockquote><p>测验答案</p><ol><li>平均时间复杂度是 O(n+k)，其中 k 是桶的数量。数据均匀分布、每个桶内元素数量接近相同的时候。</li><li>最坏时间复杂度是 O(n²)，当所有元素都被映射到同一个桶中时可能达到。</li><li>桶的数量通常与输入数据量相当，映射函数要尽可能保证元素均匀分布到各个桶中。</li></ol></blockquote><h3 id="十、计数排序"><a href="#十、计数排序" class="headerlink" title="十、计数排序"></a>十、计数排序</h3><h4 id="计数排序-1"><a href="#计数排序-1" class="headerlink" title="计数排序"></a>计数排序</h4><p>基数排序是一种非比较型的排序算法，通过逐位比较元素的每一位（从最低位到最高位）来实现排序。</p><p><code>时间复杂度:最佳 O(n * k) | 平均 O(n * k) | 最差 O(n * k)    空间复杂度:O(n + k)</code></p><p>稳定性:稳定</p><blockquote><h5 id="应用场景-前提条件-12"><a href="#应用场景-前提条件-12" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>适用于整数排序</li><li>非比较型排序</li><li>k为最大整数位数</li></ul></blockquote><h4 id="算法讲解-13"><a href="#算法讲解-13" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h5><p>基数排序（Radix Sort）是一种非比较型的排序算法，核心思想是按照数位来排序，从最低有效位（Least Significant Digit, LSD）或最高有效位（Most Significant Digit, MSD）开始，依次对每个位置的数字进行排序。基数排序特别适合用于整数或定长字符串的排序，时间复杂度是 O(n×k)，其中 n 是待排序数组的长度，k 是数据的最大位数。</p><p>基数排序不会直接比较元素之间的大小，通过分配和收集过程实现排序，在一些特定场景下性能优于比较排序算法。</p><h4 id="算法步骤-13"><a href="#算法步骤-13" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>找出待排序数组中的最大值，确定最大位数</li><li>从最低位开始，对每一位上的数字进行计数排序（或桶排序）</li><li>按照当前位的数字大小将元素重新排列</li><li>对下一个更高位重复步骤2和3，直到处理完所有位</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68cffd76a9ed1.webp" alt="img"></p><p><img src="https://bu.dusays.com/2025/09/21/68cffd76afe6f.webp" alt="img"></p><p><img src="https://algo.codefather.cn/algorithms/sorting/需要基数排序流程图" alt="img"></p><h4 id="核心特性-13"><a href="#核心特性-13" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>非比较排序：不通过比较元素大小进行排序</li><li>稳定排序：相等元素的相对位置在排序后不会改变</li><li>时间复杂度：O(n×k)，其中 k 是数据的最大位数</li><li>空间复杂度：O(n+r)，其中 r 是基数（比如十进制数的基数为10）</li><li>适用范围：整数或固定长度的字</li><li>符串</li></ul><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找出最大值，确定最大位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对每一位进行计数排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">            countingSortByDigit(arr, exp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortByDigit</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> exp)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">        <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// 输出数组</span></span><br><span class="line">        <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>]; <span class="comment">// 计数数组，默认为10，因为一位数字的范围是0~9</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 统计当前位上每个数字出现的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">            count[digit]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算累加数组，确定每个数字在输出数组中的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建输出数组，从后向前遍历以保持稳定性</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">            output[count[digit] - <span class="number">1</span>] = arr[i];</span><br><span class="line">            count[digit]--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将排序好的数组复制回原数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            arr[i] = output[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">        </span><br><span class="line">        radixSort(arr);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;排序后的数组：&quot;</span>);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>关键步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对每一位进行计数排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= <span class="number">10</span>) &#123;</span><br><span class="line">    countingSortByDigit(arr, exp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里实现了基数排序的核心思想，从最低位开始依次对每个位置的数字进行排序。使用计数排序作为每一轮的排序算法，保证排序稳定性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中的最大值</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组按照特定数位进行计数排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">countingSortByDigit</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> <span class="built_in">exp</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span>* output = (<span class="type">int</span>*)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> count[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 计数数组，默认为10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计当前位上每个数字出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算累加数组，确定每个数字在输出数组中的位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建输出数组，从后向前遍历以保持稳定性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        output[count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[(arr[i] / <span class="built_in">exp</span>) % <span class="number">10</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将排序好的数组复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出最大值，确定最大位数</span></span><br><span class="line">    <span class="type">int</span> max = getMax(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每一位进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="built_in">exp</span> = <span class="number">1</span>; max / <span class="built_in">exp</span> &gt; <span class="number">0</span>; <span class="built_in">exp</span> *= <span class="number">10</span>) &#123;</span><br><span class="line">        countingSortByDigit(arr, n, <span class="built_in">exp</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序前：&quot;</span>);</span><br><span class="line">    printArray(arr, n);</span><br><span class="line">    </span><br><span class="line">    radixSort(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;排序后：&quot;</span>);</span><br><span class="line">    printArray(arr, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-7"><a href="#优化策略-7" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="处理负数"><a href="#处理负数" class="headerlink" title="处理负数"></a>处理负数</h5><p>标准的基数排序不能直接处理负数，可以通过以下方式优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSortWithNegatives</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数组分为负数和非负数两部分</span></span><br><span class="line">    List&lt;Integer&gt; negatives = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; nonNegatives = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            negatives.add(-num); <span class="comment">// 负数取绝对值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nonNegatives.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将负数数组转换为整数数组</span></span><br><span class="line">    <span class="type">int</span>[] negArr = <span class="keyword">new</span> <span class="title class_">int</span>[negatives.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; negatives.size(); i++) &#123;</span><br><span class="line">        negArr[i] = negatives.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将非负数数组转换为整数数组</span></span><br><span class="line">    <span class="type">int</span>[] nonNegArr = <span class="keyword">new</span> <span class="title class_">int</span>[nonNegatives.size()];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nonNegatives.size(); i++) &#123;</span><br><span class="line">        nonNegArr[i] = nonNegatives.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对两部分分别进行基数排序</span></span><br><span class="line">    radixSort(negArr);</span><br><span class="line">    radixSort(nonNegArr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将排序后的负数部分逆序并取反，与非负数部分合并</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> negArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        arr[index++] = -negArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nonNegArr.length; i++) &#123;</span><br><span class="line">        arr[index++] = nonNegArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用不同基数"><a href="#使用不同基数" class="headerlink" title="使用不同基数"></a>使用不同基数</h5><p>通过改变基数（radix）来优化算法性能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSortWithCustomBase</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出最大值，确定最大位数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每一位进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="number">1</span>; max / exp &gt; <span class="number">0</span>; exp *= base) &#123;</span><br><span class="line">        countingSortByDigitWithBase(arr, exp, base);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortByDigitWithBase</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> exp, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    <span class="type">int</span>[] output = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[base]; <span class="comment">// 计数数组大小为基数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计当前位上每个数字出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (arr[i] / exp) % base;</span><br><span class="line">        count[digit]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算累加数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; base; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">digit</span> <span class="operator">=</span> (arr[i] / exp) % base;</span><br><span class="line">        output[count[digit] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[digit]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-13"><a href="#优缺点-13" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-13"><a href="#优点-13" class="headerlink" title="优点"></a>优点</h5><ul><li>在固定位数的情况下，时间复杂度可达到 O(n)，比 比较排序 更快</li><li>稳定排序算法，能保持相等元素的相对顺序</li><li>适合处理大量数据和长整数</li><li>不受输入数据分布影响，排序性能稳定</li><li>适合处理位数相同的字符串</li></ul><h5 id="缺点-13"><a href="#缺点-13" class="headerlink" title="缺点"></a>缺点</h5><ul><li>只适用于整数和定长字符串等可以分解为独立”位”的数据</li><li>需要额外的空间进行计数和输出</li><li>如果数据最大值很大，但数据量很小，会导致很多不必要的空桶操作</li><li>对负数需要特殊处理</li><li>不适合对浮点数直接进行排序（需要特殊转换）</li></ul><h4 id="应用场景-13"><a href="#应用场景-13" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）固定长度的整数排序，如电话号码、邮政编码等</p><p>2）字符串排序，比如单词字典、文件名</p><p>3）大数据量但数值范围有限的数据集排序</p><p>4）配合其他排序算法构建混合排序策略</p><h4 id="扩展-12"><a href="#扩展-12" class="headerlink" title="扩展"></a>扩展</h4><h5 id="字符串排序"><a href="#字符串排序" class="headerlink" title="字符串排序"></a>字符串排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSortStrings</span><span class="params">(String[] arr, <span class="type">int</span> maxLength)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从最低位（最右侧）开始，对每一位进行计数排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> maxLength - <span class="number">1</span>; pos &gt;= <span class="number">0</span>; pos--) &#123;</span><br><span class="line">        countingSortByCharPosition(arr, pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">countingSortByCharPosition</span><span class="params">(String[] arr, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line">    String[] output = <span class="keyword">new</span> <span class="title class_">String</span>[n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 字符的ASCII范围，这里简化为128</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对于短于pos的字符串，认为该位是空字符（ASCII为0）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">charIndex</span> <span class="operator">=</span> (pos &lt; arr[i].length()) ? arr[i].charAt(pos) : <span class="number">0</span>;</span><br><span class="line">        count[charIndex]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算累加数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">128</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建输出数组，从后向前遍历以保持稳定性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">charIndex</span> <span class="operator">=</span> (pos &lt; arr[i].length()) ? arr[i].charAt(pos) : <span class="number">0</span>;</span><br><span class="line">        output[count[charIndex] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[charIndex]--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MSD基数排序"><a href="#MSD基数排序" class="headerlink" title="MSD基数排序"></a>MSD基数排序</h5><p>最高位优先（Most Significant Digit, MSD）的基数排序适合字典排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">msdRadixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr == <span class="literal">null</span> || arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找出最大值，确定最大位数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算最大位数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxDigits</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (max &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        maxDigits++;</span><br><span class="line">        max /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从最高位开始排序</span></span><br><span class="line">    <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line">    msdRadixSortRecursive(arr, temp, <span class="number">0</span>, arr.length - <span class="number">1</span>, maxDigits);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">msdRadixSortRecursive</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span>[] temp, <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span> digit)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt;= high || digit &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算当前位的除数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">divisor</span> <span class="operator">=</span> (<span class="type">int</span>)Math.pow(<span class="number">10</span>, digit - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 统计每个数字出现的次数</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt;= high; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (arr[i] / divisor) % <span class="number">10</span>;</span><br><span class="line">        count[d]++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算起始位置</span></span><br><span class="line">    <span class="type">int</span>[] startPos = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    startPos[<span class="number">0</span>] = low;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        startPos[i] = startPos[i - <span class="number">1</span>] + count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序当前位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt;= high; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> (arr[i] / divisor) % <span class="number">10</span>;</span><br><span class="line">        temp[startPos[d]++] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low; i &lt;= high; i++) &#123;</span><br><span class="line">        arr[i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每个数字分组进行递归排序</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> low;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start + count[i] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (end &gt; start) &#123;</span><br><span class="line">            msdRadixSortRecursive(arr, temp, start, end, digit - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        start = end + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-13"><a href="#测验-13" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>基数排序的时间复杂度是多少？它跟归并排序相比有什么优势？</li><li>LSD（最低位优先）和MSD（最高位优先）基数排序有什么区别？</li><li>基数排序在处理不同类型数据时有哪些限制？</li></ol><blockquote><p>测验答案</p><ol><li>基数排序的时间复杂度是 O(n×k)，其中 k 是数据的最大位数。当 k 较小时，基数排序可以接近 O(n)，比归并排序的 O(nlogn) 更高效。</li><li>LSD从最低位开始排序，适合按数值大小排序；MSD从最高位开始排序，适合字典序排序。LSD需要对所有数据统一排序每一位，MSD可以递归处理不同的子集。</li><li>基数排序主要适合处理可以分解为独立”位”的数据，比如整数和定长字符串，不适合直接处理浮点数、变长字符串等类型。</li></ol></blockquote><h2 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h2><h3 id="一、Rabin-Karp算法"><a href="#一、Rabin-Karp算法" class="headerlink" title="一、Rabin-Karp算法"></a>一、Rabin-Karp算法</h3><h4 id="Rabin-Karp算法"><a href="#Rabin-Karp算法" class="headerlink" title="Rabin-Karp算法"></a>Rabin-Karp算法</h4><p>Rabin-Karp是一种基于哈希的字符串匹配算法，通过计算哈希值快速过滤不匹配的位置，是一种高效的字符串搜索方法，尤其适合多模式匹配场景。</p><h4 id="算法讲解-14"><a href="#算法讲解-14" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h5><p>Rabin-Karp算法是一种<strong>基于哈希函数的字符串匹配算法</strong>，由 Michael O. Rabin 和 Richard M. Karp 于1987年提出，核心思想是用<strong>哈希函数</strong>将模式串和文本串中的子串转换为数值进行比较，避免大量不必要的字符比较。这个算法特别适合<strong>多模式串匹配场景</strong>，时间复杂度平均为O(n+m)，n是文本串长度，m是模式串长度。</p><p>Rabin-Karp算法的关键在于使用<strong>滚动哈希函数</strong>（Rolling Hash），它可以在常数时间内计算出滑动窗口的新哈希值，保证算法在大多数情况下的高效性。</p><h4 id="算法步骤-14"><a href="#算法步骤-14" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>计算模式串的哈希值</li><li>计算文本串中长度为m的第一个子串的哈希值（m为模式串长度）</li><li>在文本串上滑动窗口，对于每个位置：<ul><li>使用滚动哈希技术高效计算当前窗口的哈希值</li><li>如果哈希值与模式串相等，则进行字符逐一比较以避免哈希冲突</li><li>如果完全匹配，则找到一个匹配位置</li></ul></li><li>重复步骤3，直到处理完整个文本串</li></ol><h4 id="核心特性-14"><a href="#核心特性-14" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>基于哈希比较</strong>：通过哈希值比较代替直接字符比较</li><li><strong>滚动哈希</strong>：O(1)时间复杂度计算下一窗口的哈希值</li><li><strong>时间复杂度</strong>：平均情况O(n+m)，最坏情况O(n*m)</li><li><strong>空间复杂度</strong>：O(1)，只需常数额外空间</li><li><strong>适用范围</strong>：单模式和多模式串匹配场景，特别是多模式匹配</li></ul><h4 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabinKarp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">101</span>; <span class="comment">// 哈希计算使用的质数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算哈希乘数，等于d^(m-1) % PRIME，用于滚动哈希计算</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            h = (h * <span class="number">256</span>) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算模式串和第一个窗口的哈希值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">patternHash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">textHash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            patternHash = (<span class="number">256</span> * patternHash + pattern.charAt(i)) % PRIME;</span><br><span class="line">            textHash = (<span class="number">256</span> * textHash + text.charAt(i)) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 滑动窗口，比较哈希值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">            <span class="comment">// 哈希值相等时，检查是否真正匹配</span></span><br><span class="line">            <span class="keyword">if</span> (patternHash == textHash) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (text.charAt(i + j) != pattern.charAt(j)) &#123;</span><br><span class="line">                        match = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i; <span class="comment">// 找到匹配</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算下一个窗口的哈希值</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - m) &#123;</span><br><span class="line">                textHash = (<span class="number">256</span> * (textHash - text.charAt(i) * h) + text.charAt(i + m)) % PRIME;</span><br><span class="line">                <span class="comment">// 处理负数哈希值</span></span><br><span class="line">                <span class="keyword">if</span> (textHash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    textHash += PRIME;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;ABABCABABDABACDABABCABAB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> search(text, pattern);</span><br><span class="line">        <span class="keyword">if</span> (position == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到匹配&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;模式串在位置 &quot;</span> + position + <span class="string">&quot; 处匹配&quot;</span>);</span><br><span class="line">            System.out.println(text);</span><br><span class="line">            <span class="comment">// 打印指示匹配位置的指针</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(pattern);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-8"><a href="#优化策略-8" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="使用更好的哈希函数"><a href="#使用更好的哈希函数" class="headerlink" title="使用更好的哈希函数"></a>使用更好的哈希函数</h5><p>比如使用更复杂的哈希函数来减少冲突：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImprovedRabinKarp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">PRIME1</span> <span class="operator">=</span> <span class="number">1000000007</span>; <span class="comment">// 第一个哈希的质数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">PRIME2</span> <span class="operator">=</span> <span class="number">1000000009</span>; <span class="comment">// 第二个哈希的质数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用双哈希来减少冲突</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算哈希乘数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            h1 = (h1 * <span class="number">256</span>) % PRIME1;</span><br><span class="line">            h2 = (h2 * <span class="number">256</span>) % PRIME2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算模式串和第一个窗口的哈希值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">patternHash1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">patternHash2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">textHash1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">textHash2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            patternHash1 = (<span class="number">256</span> * patternHash1 + pattern.charAt(i)) % PRIME1;</span><br><span class="line">            patternHash2 = (<span class="number">256</span> * patternHash2 + pattern.charAt(i)) % PRIME2;</span><br><span class="line">            textHash1 = (<span class="number">256</span> * textHash1 + text.charAt(i)) % PRIME1;</span><br><span class="line">            textHash2 = (<span class="number">256</span> * textHash2 + text.charAt(i)) % PRIME2;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 滑动窗口，比较哈希值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">            <span class="comment">// 两个哈希都相等时，再进行字符比较</span></span><br><span class="line">            <span class="keyword">if</span> (patternHash1 == textHash1 &amp;&amp; patternHash2 == textHash2) &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (text.charAt(i + j) != pattern.charAt(j)) &#123;</span><br><span class="line">                        match = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i; <span class="comment">// 找到匹配</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 计算下一个窗口的哈希值</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; n - m) &#123;</span><br><span class="line">                textHash1 = (<span class="number">256</span> * (textHash1 - text.charAt(i) * h1) + text.charAt(i + m)) % PRIME1;</span><br><span class="line">                textHash2 = (<span class="number">256</span> * (textHash2 - text.charAt(i) * h2) + text.charAt(i + m)) % PRIME2;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 处理负数哈希值</span></span><br><span class="line">                <span class="keyword">if</span> (textHash1 &lt; <span class="number">0</span>) textHash1 += PRIME1;</span><br><span class="line">                <span class="keyword">if</span> (textHash2 &lt; <span class="number">0</span>) textHash2 += PRIME2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-14"><a href="#优缺点-14" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-14"><a href="#优点-14" class="headerlink" title="优点"></a>优点</h5><ul><li>平均情况下时间复杂度为O(n+m)，接近线性时间</li><li>在多模式匹配场景下效率高</li><li>可以通过预处理模式串提高效率</li><li>滚动哈希计算使得算法高效移动窗口</li><li>实现相对简单，原理容易理解</li></ul><h5 id="缺点-14"><a href="#缺点-14" class="headerlink" title="缺点"></a>缺点</h5><ul><li>哈希冲突可能导致额外的字符比较</li><li>最坏情况下的时间复杂度为O(n*m)</li><li>哈希函数的选择对算法性能影响很大</li><li>需要注意数值溢出问题</li><li>对于短模式串和文本串，预处理开销可能抵消算法优势</li></ul><h4 id="应用场景-14"><a href="#应用场景-14" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）文档相似度检测和抄袭检测</p><p>2）网络安全中的特征码匹配</p><p>3）多模式字符串搜索引擎</p><p>4）编译器中的词法分析器</p><h4 id="扩展-13"><a href="#扩展-13" class="headerlink" title="扩展"></a>扩展</h4><h5 id="Rabin-Karp指纹算法"><a href="#Rabin-Karp指纹算法" class="headerlink" title="Rabin-Karp指纹算法"></a>Rabin-Karp指纹算法</h5><p>Rabin-Karp算法的一个变种应用于文件相似度比较：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabinKarpFingerprint</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">WINDOW_SIZE</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 指纹窗口大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Long&gt; <span class="title function_">generateFingerprints</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        Set&lt;Long&gt; fingerprints = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (n &lt; WINDOW_SIZE) &#123;</span><br><span class="line">            fingerprints.add(calculateHash(text, n));</span><br><span class="line">            <span class="keyword">return</span> fingerprints;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算第一个窗口的哈希值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">textHash</span> <span class="operator">=</span> calculateHash(text, WINDOW_SIZE);</span><br><span class="line">        fingerprints.add(textHash);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算哈希乘数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; WINDOW_SIZE - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            h = (h * <span class="number">256</span>) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 滑动窗口，计算所有长度为WINDOW_SIZE的子串哈希值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - WINDOW_SIZE - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            textHash = (<span class="number">256</span> * (textHash - text.charAt(i) * h) + text.charAt(i + WINDOW_SIZE)) % PRIME;</span><br><span class="line">            <span class="keyword">if</span> (textHash &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                textHash += PRIME;</span><br><span class="line">            &#125;</span><br><span class="line">            fingerprints.add(textHash);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fingerprints;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">calculateSimilarity</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        Set&lt;Long&gt; fingerprints1 = generateFingerprints(text1);</span><br><span class="line">        Set&lt;Long&gt; fingerprints2 = generateFingerprints(text2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算交集大小</span></span><br><span class="line">        Set&lt;Long&gt; intersection = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(fingerprints1);</span><br><span class="line">        intersection.retainAll(fingerprints2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算并集大小</span></span><br><span class="line">        Set&lt;Long&gt; union = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(fingerprints1);</span><br><span class="line">        union.addAll(fingerprints2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 杰卡德相似度系数</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>) intersection.size() / union.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">calculateHash</span><span class="params">(String str, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            hash = (<span class="number">256</span> * hash + str.charAt(i)) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="子字符串哈希"><a href="#子字符串哈希" class="headerlink" title="子字符串哈希"></a>子字符串哈希</h5><p>一些编程竞赛里也使用Rabin-Karp思想进行高效的子字符串查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubstringHash</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1000000007</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BASE</span> <span class="operator">=</span> <span class="number">256</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>[] hash; <span class="comment">// 前缀哈希值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span>[] pow;  <span class="comment">// BASE的幂</span></span><br><span class="line">    <span class="keyword">private</span> String s;    <span class="comment">// 源字符串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubstringHash</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        hash = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        pow = <span class="keyword">new</span> <span class="title class_">long</span>[n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 预计算BASE的幂</span></span><br><span class="line">        pow[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            pow[i] = (pow[i - <span class="number">1</span>] * BASE) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算所有前缀的哈希值</span></span><br><span class="line">        hash[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash[i + <span class="number">1</span>] = (hash[i] * BASE + s.charAt(i)) % PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算子串s[l..r]的哈希值（0-indexed）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">substringHash</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取s[0...r]的哈希值，减去s[0...l-1]的哈希值（需要进行适当调整）</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> (hash[r + <span class="number">1</span>] - (hash[l] * pow[r - l + <span class="number">1</span>]) % PRIME) % PRIME;</span><br><span class="line">        <span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            result += PRIME;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查两个子串是否相同</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">areSubstringsEqual</span><span class="params">(<span class="type">int</span> l1, <span class="type">int</span> r1, <span class="type">int</span> l2, <span class="type">int</span> r2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (r1 - l1 != r2 - l2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 长度不同</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> substringHash(l1, r1) == substringHash(l2, r2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-14"><a href="#测验-14" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>Rabin-Karp算法的核心思想是什么？它与朴素字符串匹配算法的主要区别是什么？</li><li>滚动哈希的计算过程是怎样的？为什么它能在O(1)时间内计算新的哈希值？</li><li>哈希冲突会对Rabin-Karp算法造成什么影响？如何减少哈希冲突？</li><li>Rabin-Karp算法在多模式匹配上有什么优势？</li><li>在实际应用中，如何选择合适的哈希函数和模数？</li></ol><blockquote><p>测验答案</p><ol><li>用哈希值进行比较。与朴素算法相比，它避免了大量不必要的字符比较，利用哈希快速筛选可能匹配的位置。</li><li>滚动哈希通过从当前哈希值中减去最左侧字符的贡献，然后加上新进入窗口字符的贡献来计算。基于数学上的多项式性质，这种计算可以在O(1)时间完成。</li><li>哈希冲突导致算法需要进行额外的字符比较，降低性能。使用更好的哈希函数、更大的质数模数或多哈希技术来减少冲突。</li><li>在多模式匹配中，Rabin-Karp可以一次性计算文本串的哈希值，然后与多个模式串的哈希值比较，避免重复扫描文本串。</li><li>选择哈希函数时应考虑计算效率和冲突概率。大多数情况下使用多项式哈希与大质数模数（如109+7或109+9）组合，在某些情况下也可以使用双哈希或多哈希技术增强安全性。</li></ol></blockquote><h3 id="二、Boyer-Moore算法"><a href="#二、Boyer-Moore算法" class="headerlink" title="二、Boyer-Moore算法"></a>二、Boyer-Moore算法</h3><h4 id="Boyer-Moore算法"><a href="#Boyer-Moore算法" class="headerlink" title="Boyer-Moore算法"></a>Boyer-Moore算法</h4><p>Boyer-Moore算法是一种高效的字符串搜索算法，它通过从右向左比较并利用坏字符和好后缀两种规则来跳过不必要的比较，实现比朴素算法更快的搜索速度。</p><h4 id="算法讲解-15"><a href="#算法讲解-15" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h5><p>Boyer-Moore算法是一种高效的字符串匹配算法，由 Robert S. Boyer和J Strother Moore 设计于1977年。它<strong>从右向左比较</strong>字符，并利用两个启发式规则（坏字符规则和好后缀规则）在不匹配情况下实现较大跳跃，减少比较次数。Boyer-Moore算法在实际应用中大部分情况下<strong>比朴素算法和KMP算法更高效</strong>。</p><h4 id="算法步骤-15"><a href="#算法步骤-15" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>预处理模式串，构建坏字符表和好后缀表</li><li>将模式串对齐到文本串的开始位置</li><li>从模式串的最右侧字符开始比较，从右向左进行匹配</li><li>如果发生不匹配，通过以下规则计算跳转距离：<ul><li>坏字符规则：根据不匹配字符在模式串中的最右位置决定跳转距离</li><li>好后缀规则：根据已匹配部分在模式串中的重复情况决定跳转距离</li></ul></li><li>选择两个规则中的最大跳转距离，移动模式串</li><li>重复步骤3-5，直到找到匹配或到达文本串末尾</li></ol><h4 id="核心特性-15"><a href="#核心特性-15" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>从右向左比较</strong>：与大多数字符串匹配算法不同，从模式串的末尾开始比较</li><li><strong>双规则跳转</strong>：利用坏字符规则和好后缀规则计算跳转距离</li><li><strong>时间复杂度</strong>：最坏情况O(m*n)，m是模式串长度，n是文本串长度；平均情况接近O(n/m)</li><li><strong>空间复杂度</strong>：O(k+m)，其中k是字符集大小，m是模式串长度</li><li><strong>适用范围</strong>：特别适合长模式串和大字符集场景</li></ul><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoyerMoore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> R; <span class="comment">// 字符集大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] badChar; <span class="comment">// 坏字符表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] goodSuffix; <span class="comment">// 好后缀表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] borderPos; <span class="comment">// 边界位置表</span></span><br><span class="line">    <span class="keyword">private</span> String pattern; <span class="comment">// 模式串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BoyerMoore</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.R = <span class="number">256</span>; <span class="comment">// ASCII字符集</span></span><br><span class="line">        <span class="built_in">this</span>.pattern = pattern;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化坏字符表</span></span><br><span class="line">        badChar = <span class="keyword">new</span> <span class="title class_">int</span>[R];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            badChar[c] = -<span class="number">1</span>; <span class="comment">// 初始化为-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            badChar[pattern.charAt(j)] = j; <span class="comment">// 记录每个字符最右出现位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化好后缀表和边界位置表</span></span><br><span class="line">        goodSuffix = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        borderPos = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        processSuffixes();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 预处理好后缀表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">processSuffixes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m, j = m + <span class="number">1</span>;</span><br><span class="line">        borderPos[i] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算边界位置</span></span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &lt;= m &amp;&amp; pattern.charAt(i - <span class="number">1</span>) != pattern.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (goodSuffix[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    goodSuffix[j] = j - i;</span><br><span class="line">                &#125;</span><br><span class="line">                j = borderPos[j];</span><br><span class="line">            &#125;</span><br><span class="line">            i--; j--;</span><br><span class="line">            borderPos[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算好后缀表</span></span><br><span class="line">        j = borderPos[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (goodSuffix[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                goodSuffix[i] = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">                j = borderPos[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索文本串中的匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> skip;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - m; i += skip) &#123;</span><br><span class="line">            skip = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.charAt(j) != text.charAt(i + j)) &#123;</span><br><span class="line">                    <span class="comment">// 坏字符规则</span></span><br><span class="line">                    skip = Math.max(<span class="number">1</span>, j - badChar[text.charAt(i + j)]);</span><br><span class="line">                    <span class="comment">// 好后缀规则</span></span><br><span class="line">                    <span class="keyword">if</span> (j &lt; m - <span class="number">1</span>) &#123;</span><br><span class="line">                        skip = Math.max(skip, goodSuffix[j + <span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (skip == <span class="number">0</span>) <span class="keyword">return</span> i; <span class="comment">// 找到匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没有找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;HERE IS A SIMPLE EXAMPLE&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;EXAMPLE&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">BoyerMoore</span> <span class="variable">bm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoyerMoore</span>(pattern);</span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> bm.search(text);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (position == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到匹配&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;模式串在位置 &quot;</span> + position + <span class="string">&quot; 处匹配&quot;</span>);</span><br><span class="line">            System.out.println(text);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(pattern);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-9"><a href="#优化策略-9" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="简化好后缀表构建"><a href="#简化好后缀表构建" class="headerlink" title="简化好后缀表构建"></a>简化好后缀表构建</h5><p>对于一些应用场景，可以只使用坏字符规则，简化算法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimplifiedBoyerMoore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> R; <span class="comment">// 字符集大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] badChar; <span class="comment">// 坏字符表</span></span><br><span class="line">    <span class="keyword">private</span> String pattern; <span class="comment">// 模式串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimplifiedBoyerMoore</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.R = <span class="number">256</span>; <span class="comment">// ASCII字符集</span></span><br><span class="line">        <span class="built_in">this</span>.pattern = pattern;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化坏字符表</span></span><br><span class="line">        badChar = <span class="keyword">new</span> <span class="title class_">int</span>[R];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            badChar[c] = -<span class="number">1</span>; <span class="comment">// 初始化为-1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            badChar[pattern.charAt(j)] = j; <span class="comment">// 记录每个字符最右出现位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索文本串中的匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> skip;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - m; i += skip) &#123;</span><br><span class="line">            skip = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern.charAt(j) != text.charAt(i + j)) &#123;</span><br><span class="line">                    <span class="comment">// 仅使用坏字符规则</span></span><br><span class="line">                    skip = Math.max(<span class="number">1</span>, j - badChar[text.charAt(i + j)]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (skip == <span class="number">0</span>) <span class="keyword">return</span> i; <span class="comment">// 找到匹配</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没有找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="缓存预计算结果"><a href="#缓存预计算结果" class="headerlink" title="缓存预计算结果"></a>缓存预计算结果</h5><p>针对需要重复搜索同一模式串的场景，可以预计算并缓存结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachedBoyerMoore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BoyerMoore&gt; cache = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查缓存中是否有预计算的Boyer-Moore对象</span></span><br><span class="line">        <span class="type">BoyerMoore</span> <span class="variable">bm</span> <span class="operator">=</span> cache.get(pattern);</span><br><span class="line">        <span class="keyword">if</span> (bm == <span class="literal">null</span>) &#123;</span><br><span class="line">            bm = <span class="keyword">new</span> <span class="title class_">BoyerMoore</span>(pattern);</span><br><span class="line">            cache.put(pattern, bm);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> bm.search(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-15"><a href="#优缺点-15" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-15"><a href="#优点-15" class="headerlink" title="优点"></a>优点</h5><ul><li>在实际应用中，大部分场景比KMP和朴素算法更高效</li><li>最好情况下可以跳过大量文本，实现亚线性时间复杂度</li><li>对于长模式串和大字符集特别有效</li><li>预处理跟模式串有关，与文本串长度无关</li></ul><h5 id="缺点-15"><a href="#缺点-15" class="headerlink" title="缺点"></a>缺点</h5><ul><li>预处理复杂，特别是好后缀表的构建</li><li>需要额外空间存储坏字符表和好后缀表</li><li>最坏情况下时间复杂度仍为O(m*n)</li><li>对于短模式串，预处理开销可能抵消算法优势</li><li>好后缀规则的实现较复杂，容易出错</li></ul><h4 id="应用场景-15"><a href="#应用场景-15" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）文本编辑器的查找功能</p><p>2）网络安全中的特征码匹配</p><p>3）自然语言处理中的关键词检索</p><p>4）大规模文本数据处理</p><h4 id="扩展-14"><a href="#扩展-14" class="headerlink" title="扩展"></a>扩展</h4><h5 id="Horspool算法"><a href="#Horspool算法" class="headerlink" title="Horspool算法"></a>Horspool算法</h5><p>Horspool算法是Boyer-Moore的简化版本，只使用坏字符规则，但是对坏字符表进行了修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Horspool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> R; <span class="comment">// 字符集大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] badChar; <span class="comment">// 坏字符表</span></span><br><span class="line">    <span class="keyword">private</span> String pattern; <span class="comment">// 模式串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Horspool</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.R = <span class="number">256</span>; <span class="comment">// ASCII字符集</span></span><br><span class="line">        <span class="built_in">this</span>.pattern = pattern;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化坏字符表</span></span><br><span class="line">        badChar = <span class="keyword">new</span> <span class="title class_">int</span>[R];</span><br><span class="line">        <span class="comment">// 所有字符默认移动模式串长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            badChar[c] = m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模式串中的字符（除了最后一个）设置为对应值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            badChar[pattern.charAt(j)] = m - <span class="number">1</span> - j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索文本串中的匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; <span class="comment">// 从模式串最后一个字符对齐开始</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; m &amp;&amp; pattern.charAt(m - <span class="number">1</span> - k) == text.charAt(i - k)) &#123;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (k == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>; <span class="comment">// 找到匹配</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用坏字符规则移动</span></span><br><span class="line">            i += badChar[text.charAt(i)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没有找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Sunday算法"><a href="#Sunday算法" class="headerlink" title="Sunday算法"></a>Sunday算法</h5><p>Sunday算法是另一种Boyer-Moore的变种，它关注的是文本串中模式串后面的字符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sunday</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> R; <span class="comment">// 字符集大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] shift; <span class="comment">// 移动表</span></span><br><span class="line">    <span class="keyword">private</span> String pattern; <span class="comment">// 模式串</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sunday</span><span class="params">(String pattern)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.R = <span class="number">256</span>; <span class="comment">// ASCII字符集</span></span><br><span class="line">        <span class="built_in">this</span>.pattern = pattern;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化移动表</span></span><br><span class="line">        shift = <span class="keyword">new</span> <span class="title class_">int</span>[R];</span><br><span class="line">        <span class="comment">// 所有字符默认移动模式串长度+1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; R; c++) &#123;</span><br><span class="line">            shift[c] = m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模式串中的字符设置为对应值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">            shift[pattern.charAt(j)] = m - j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 搜索文本串中的匹配</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 从文本串开始位置</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= n - m) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; m &amp;&amp; pattern.charAt(j) == text.charAt(i + j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i; <span class="comment">// 找到匹配</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 下一个位置超出文本串长度，返回-1</span></span><br><span class="line">            <span class="keyword">if</span> (i + m &gt;= n) &#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 使用Sunday算法的移动规则</span></span><br><span class="line">            i += shift[text.charAt(i + m)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 没有找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-15"><a href="#测验-15" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>Boyer-Moore算法的两个主要启发式规则是什么？</li><li>为什么Boyer-Moore算法从右向左比较字符？</li><li>在最好情况下，Boyer-Moore算法的时间复杂度是多少？</li><li>坏字符规则和好后缀规则如何协同工作？</li></ol><blockquote><p>测验答案</p><ol><li>坏字符规则和好后缀规则。</li><li>从右向左比较可以更快发现不匹配，然后通过坏字符和好后缀规则计算更大的跳转距离。</li><li>最好情况下Boyer-Moore算法的时间复杂度可以达到O(n/m)。</li><li>分别计算坏字符规则和好后缀规则跳转距离，然后选择两者中的最大值作为实际跳转距离，保证安全、高效的跳转。</li></ol></blockquote><h3 id="三、KMP算法"><a href="#三、KMP算法" class="headerlink" title="三、KMP算法"></a>三、KMP算法</h3><h4 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h4><p>KMP(Knuth-Morris-Pratt)算法是一种高效的字符串匹配算法，通过计算部分匹配表(前缀函数)避免不必要的字符比较，大大提高了字符串匹配的效率。</p><h4 id="算法讲解-16"><a href="#算法讲解-16" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h5><p>KMP（Knuth-Morris-Pratt）算法是一种高效的字符串匹配算法，核心思想是<strong>利用已经部分匹配的信息，避免重复比较</strong>，在文本串中快速查找模式串。KMP算法特别适合<strong>处理长文本和重复性高的模式串</strong>，时间复杂度是O(m+n)，m是模式串长度，n是文本串长度。</p><p>KMP算法的关键在于构建一个部分匹配表（也叫失败函数或者next数组），这个表记录了当匹配失败时，模式串指针应该回退到的位置，让算法跳过已知不可能匹配的位置，提高匹配效率。</p><h4 id="算法步骤-16"><a href="#算法步骤-16" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>KMP算法主要分为两个阶段：</p><ol><li><p>预处理阶段</p><p>：计算模式串的部分匹配表（next数组）</p><ul><li>构建一个数组，记录每个位置的最长相等前后缀长度</li><li>该数组用于在匹配失败时确定模式串指针的回退位置</li></ul></li><li><p>匹配阶段</p><p>：使用部分匹配表在文本串中查找模式串</p><ul><li>从左到右同时遍历文本串和模式串</li><li>当字符不匹配时，根据next数组回退模式串指针</li><li>当模式串完全匹配时，记录匹配位置并继续查找其他匹配</li></ul></li></ol><h4 id="核心特性-16"><a href="#核心特性-16" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>线性时间复杂度</strong>：O(m+n)，其中m是模式串长度，n是文本串长度</li><li><strong>高效利用历史信息</strong>：通过预处理避免了重复比较</li><li><strong>只需一次遍历文本串</strong>：文本串指针不会回退</li><li><strong>空间复杂度</strong>：O(m)，仅需存储模式串的部分匹配表</li><li><strong>适用场景</strong>：特别适合长文本和具有重复性的模式串</li></ul><h4 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NaiveStringMatcher</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 朴素字符串匹配算法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文本串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern 模式串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 匹配成功则返回模式串在文本串中的起始位置，否则返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">naiveSearch</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 特殊情况处理</span></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; m) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试所有可能的匹配位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 从当前位置开始比较模式串和文本串</span></span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text.charAt(i + j) != pattern.charAt(j)) &#123;</span><br><span class="line">                    <span class="keyword">break</span>; <span class="comment">// 发现不匹配字符，终止内层循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果j等于m，说明模式串完全匹配</span></span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i; <span class="comment">// 返回匹配位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;ABABDABACDABABCABAB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> naiveSearch(text, pattern);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (position == -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到匹配&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;模式串在位置 &quot;</span> + position + <span class="string">&quot; 处匹配&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述实现暴力枚举所有可能的匹配位置，逐一比较文本串与模式串的每个字符，直到找到完全匹配或确定不存在匹配。</p><p>接下来展示KMP算法的实现：</p><h5 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    <span class="comment">// 构建部分匹配表（next数组）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] buildNext(String pattern) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 第一个字符的最长相等前后缀长度为0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前字符不匹配，回退j</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前字符匹配，j向前移动</span></span><br><span class="line">            <span class="keyword">if</span> (pattern.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 记录当前位置的最长相等前后缀长度</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// KMP搜索算法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kmpSearch</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pattern == <span class="literal">null</span> || pattern.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.length() &lt; pattern.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建next数组</span></span><br><span class="line">        <span class="type">int</span>[] next = buildNext(pattern);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行匹配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前字符不匹配，根据next数组回退j</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前字符匹配，j向前移动</span></span><br><span class="line">            <span class="keyword">if</span> (text.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 完全匹配，返回起始索引</span></span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 未找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找所有匹配位置</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">kmpSearchAll</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; positions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (pattern == <span class="literal">null</span> || pattern.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> positions;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text == <span class="literal">null</span> || text.length() &lt; pattern.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> positions;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建next数组</span></span><br><span class="line">        <span class="type">int</span>[] next = buildNext(pattern);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行匹配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 当前字符不匹配，回退j</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 当前字符匹配，j向前移动</span></span><br><span class="line">            <span class="keyword">if</span> (text.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 完全匹配，记录位置并继续匹配</span></span><br><span class="line">            <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">                positions.add(i - m + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// 回退j以寻找下一个匹配</span></span><br><span class="line">                j = next[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> positions;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;ABABDABACDABABCABAB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> kmpSearch(text, pattern);</span><br><span class="line">        List&lt;Integer&gt; allPos = kmpSearchAll(text, pattern);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;文本: &quot;</span> + text);</span><br><span class="line">        System.out.println(<span class="string">&quot;模式: &quot;</span> + pattern);</span><br><span class="line">        System.out.println(<span class="string">&quot;首次匹配位置: &quot;</span> + (pos != -<span class="number">1</span> ? pos : <span class="string">&quot;未找到&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;所有匹配位置: &quot;</span> + allPos);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 打印next数组，帮助理解</span></span><br><span class="line">        <span class="type">int</span>[] next = buildNext(pattern);</span><br><span class="line">        System.out.print(<span class="string">&quot;next数组: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : next) &#123;</span><br><span class="line">            System.out.print(val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 当前字符不匹配，回退j</span></span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">    j = next[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是 KMP 算法的核心，在匹配失败时根据预先计算的next数组来确定模式串指针的回退位置。</p><h5 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">function</span> <span class="title function_">buildNext</span>(<span class="params">pattern</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> m = pattern.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> next = <span class="keyword">new</span> <span class="title class_">Array</span>(m).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern[i] !== pattern[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pattern[i] === pattern[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">kmpSearch</span>(<span class="params">text, pattern</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!pattern || pattern.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!text || text.<span class="property">length</span> &lt; pattern.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> n = text.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> m = pattern.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">const</span> next = <span class="title function_">buildNext</span>(pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text[i] !== pattern[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text[i] === pattern[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (j === m) &#123;</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&quot;ABABDABACDABABCABAB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pattern = <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`文本: <span class="subst">$&#123;text&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`模式: <span class="subst">$&#123;pattern&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`匹配位置: <span class="subst">$&#123;kmpSearch(text, pattern)&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`next数组: <span class="subst">$&#123;buildNext(pattern).join(<span class="string">&#x27; &#x27;</span>)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h5 id="C语言实现"><a href="#C语言实现" class="headerlink" title="C语言实现"></a>C语言实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">buildNext</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* pattern, <span class="type">int</span>* next, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern[i] != pattern[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pattern[i] == pattern[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        next[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">kmpSearch</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text, <span class="type">const</span> <span class="type">char</span>* pattern)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="literal">NULL</span> || <span class="built_in">strlen</span>(pattern) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">NULL</span> || <span class="built_in">strlen</span>(text) &lt; <span class="built_in">strlen</span>(pattern)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(text);</span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    <span class="type">int</span>* next = (<span class="type">int</span>*)<span class="built_in">malloc</span>(m * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    </span><br><span class="line">    buildNext(pattern, next, m);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; text[i] != pattern[j]) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (text[i] == pattern[j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">            <span class="built_in">free</span>(next);</span><br><span class="line">            <span class="keyword">return</span> i - m + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* text = <span class="string">&quot;ABABDABACDABABCABAB&quot;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pattern = <span class="string">&quot;ABABCABAB&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;文本: %s</span></span><br><span class="line"><span class="string">&quot;</span>, text);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;模式: %s</span></span><br><span class="line"><span class="string">&quot;</span>, pattern);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> pos = kmpSearch(text, pattern);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;匹配位置: %d</span></span><br><span class="line"><span class="string">&quot;</span>, pos);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印next数组</span></span><br><span class="line">    <span class="type">int</span> m = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    <span class="type">int</span>* next = (<span class="type">int</span>*)<span class="built_in">malloc</span>(m * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    buildNext(pattern, next, m);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;next数组: &quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, next[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">free</span>(next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-10"><a href="#优化策略-10" class="headerlink" title="优化策略"></a>优化策略</h4><p>优化后的 next 数组代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 优化next数组，避免匹配失败后回退到同样会失败的位置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] buildOptimizedNext(String pattern) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; pattern.charAt(i) != pattern.charAt(j)) &#123;</span><br><span class="line">            j = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (pattern.charAt(i) == pattern.charAt(j)) &#123;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 当前位置匹配失败时，如果回退位置的字符与当前位置相同，则继续回退</span></span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m &amp;&amp; pattern.charAt(i + <span class="number">1</span>) == pattern.charAt(j)) &#123;</span><br><span class="line">            next[i] = next[j - <span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预处理减少分支实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 预处理字符映射，减少字符比较的分支</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kmpSearchOptimized</span><span class="params">(String text, String pattern)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pattern == <span class="literal">null</span> || pattern.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">null</span> || text.length() &lt; pattern.length()) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用数组映射来加速字符比较（假设字符集为ASCII）</span></span><br><span class="line">    <span class="comment">// 为每个模式字符的每个位置创建一个状态转移表</span></span><br><span class="line">    <span class="type">int</span>[][] dfa = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">256</span>][m];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化第一个字符的DFA</span></span><br><span class="line">    dfa[pattern.charAt(<span class="number">0</span>)][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">X</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="comment">// 复制匹配失败情况下的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; <span class="number">256</span>; c++) &#123;</span><br><span class="line">            dfa[c][j] = dfa[c][X];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置匹配成功情况下的值</span></span><br><span class="line">        dfa[pattern.charAt(j)][j] = j + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 更新重启状态</span></span><br><span class="line">        X = dfa[pattern.charAt(j)][X];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 模式匹配</span></span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n &amp;&amp; j &lt; m; i++) &#123;</span><br><span class="line">        j = dfa[text.charAt(i)][j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">        <span class="keyword">return</span> i - m; <span class="comment">// 找到匹配</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    <span class="comment">// 未找到匹配</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-16"><a href="#优缺点-16" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-16"><a href="#优点-16" class="headerlink" title="优点"></a>优点</h5><ul><li>时间复杂度为O(m+n)，优于朴素的字符串匹配算法(暴力解法)</li><li>文本串只需扫描一次，不会回退</li><li>对于包含重复模式的字符串会高效</li><li>预处理模式串，可以多次用于不同的文本串</li><li>能快速跳过已知不会匹配的位置</li></ul><h5 id="缺点-16"><a href="#缺点-16" class="headerlink" title="缺点"></a>缺点</h5><ul><li>需要额外的空间存储next数组</li><li>构建next数组的逻辑较为复杂，不易理解</li><li>在模式串较短或无重复模式时，相比简单算法优势不明显</li><li>实现时容易出错，特别是处理边界情况</li></ul><h4 id="应用场景-16"><a href="#应用场景-16" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）生物信息学中的DNA序列匹配</p><p>2）网络入侵检测系统中的模式匹配</p><p>3）搜索引擎的关键词匹配</p><p>4）数据压缩算法中的模式识别</p><h4 id="扩展-15"><a href="#扩展-15" class="headerlink" title="扩展"></a>扩展</h4><h5 id="多模式字符串匹配"><a href="#多模式字符串匹配" class="headerlink" title="多模式字符串匹配"></a>多模式字符串匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Aho-Corasick算法 - KMP的多模式扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">256</span>];</span><br><span class="line">        TrieNode fail;</span><br><span class="line">        List&lt;Integer&gt; patternIndices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">            fail = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line">    <span class="keyword">private</span> String[] patterns;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AhoCorasick</span><span class="params">(String[] patterns)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.patterns = patterns;</span><br><span class="line">        buildTrie();</span><br><span class="line">        buildFailureLinks();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildTrie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patterns.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> patterns[i];</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : pattern.toCharArray()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.children[c] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.children[c];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            node.patternIndices.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildFailureLinks</span><span class="params">()</span> &#123;</span><br><span class="line">        Queue&lt;TrieNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化根节点的子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                root.children[i].fail = root;</span><br><span class="line">                queue.offer(root.children[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root.children[i] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// BFS构建失败链接</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TrieNode</span> <span class="variable">failNode</span> <span class="operator">=</span> node.fail;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">while</span> (failNode != root &amp;&amp; failNode.children[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        failNode = failNode.fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    failNode = failNode.children[i];</span><br><span class="line">                    node.children[i].fail = failNode;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 合并匹配结果</span></span><br><span class="line">                    node.children[i].patternIndices.addAll(failNode.patternIndices);</span><br><span class="line">                    </span><br><span class="line">                    queue.offer(node.children[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Pair&lt;Integer, Integer&gt;&gt; <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        List&lt;Pair&lt;Integer, Integer&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">currentState</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (currentState != root &amp;&amp; currentState.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                currentState = currentState.fail;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            currentState = currentState.children[c];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> patternIndex : currentState.patternIndices) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">endPos</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">startPos</span> <span class="operator">=</span> endPos - patterns[patternIndex].length() + <span class="number">1</span>;</span><br><span class="line">                results.add(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(patternIndex, startPos));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K first;</span><br><span class="line">        V second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(K first, V second)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.first = first;</span><br><span class="line">            <span class="built_in">this</span>.second = second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-16"><a href="#测验-16" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>KMP算法的时间复杂度是多少？它与暴力匹配算法的主要区别是什么？</li><li>KMP算法中next数组的含义是什么？如何利用它避免不必要的比较？</li><li>在KMP算法中，文本指针是否会回退？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>KMP算法的时间复杂度是O(m+n)，其中m是模式串长度，n是文本串长度。与暴力匹配算法O(m*n)相比，KMP算法利用已匹配信息避免重复比较，文本指针不会回退。</li><li>next数组记录了模式串中每个位置的最长相等前后缀长度，表示当匹配失败时，模式串指针应该回退到的位置。通过跳过已知不可能匹配的位置，实现减少不必要的比较次数。</li><li>文本指针不会回退，只有模式串指针会根据next数组回退。因为KMP算法的核心思想就是利用已经部分匹配的信息，避免对文本串的重复扫描。</li></ol></blockquote><h4 id="扩展-16"><a href="#扩展-16" class="headerlink" title="扩展"></a>扩展</h4><h5 id="多模式字符串匹配-1"><a href="#多模式字符串匹配-1" class="headerlink" title="多模式字符串匹配"></a>多模式字符串匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Aho-Corasick算法 - KMP的多模式扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">256</span>];</span><br><span class="line">        TrieNode fail;</span><br><span class="line">        List&lt;Integer&gt; patternIndices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">            fail = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line">    <span class="keyword">private</span> String[] patterns;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AhoCorasick</span><span class="params">(String[] patterns)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.patterns = patterns;</span><br><span class="line">        buildTrie();</span><br><span class="line">        buildFailureLinks();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildTrie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patterns.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> patterns[i];</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : pattern.toCharArray()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.children[c] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.children[c];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            node.patternIndices.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildFailureLinks</span><span class="params">()</span> &#123;</span><br><span class="line">        Queue&lt;TrieNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化根节点的子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                root.children[i].fail = root;</span><br><span class="line">                queue.offer(root.children[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root.children[i] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// BFS构建失败链接</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TrieNode</span> <span class="variable">failNode</span> <span class="operator">=</span> node.fail;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">while</span> (failNode != root &amp;&amp; failNode.children[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        failNode = failNode.fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    failNode = failNode.children[i];</span><br><span class="line">                    node.children[i].fail = failNode;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 合并匹配结果</span></span><br><span class="line">                    node.children[i].patternIndices.addAll(failNode.patternIndices);</span><br><span class="line">                    </span><br><span class="line">                    queue.offer(node.children[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Pair&lt;Integer, Integer&gt;&gt; <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        List&lt;Pair&lt;Integer, Integer&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">currentState</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (currentState != root &amp;&amp; currentState.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                currentState = currentState.fail;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            currentState = currentState.children[c];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> patternIndex : currentState.patternIndices) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">endPos</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">startPos</span> <span class="operator">=</span> endPos - patterns[patternIndex].length() + <span class="number">1</span>;</span><br><span class="line">                results.add(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(patternIndex, startPos));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K first;</span><br><span class="line">        V second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(K first, V second)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.first = first;</span><br><span class="line">            <span class="built_in">this</span>.second = second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-17"><a href="#测验-17" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>KMP算法的时间复杂度是多少？它与暴力匹配算法的主要区别是什么？</li><li>KMP算法中next数组的含义是什么？如何利用它避免不必要的比较？</li><li>在KMP算法中，文本指针是否会回退？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>KMP算法的时间复杂度是O(m+n)，其中m是模式串长度，n是文本串长度。与暴力匹配算法O(m*n)相比，KMP算法利用已匹配信息避免重复比较，文本指针不会回退。</li><li>next数组记录了模式串中每个位置的最长相等前后缀长度，表示当匹配失败时，模式串指针应该回退到的位置。通过跳过已知不可能匹配的位置，实现减少不必要的比较次数。</li><li>文本指针不会回退，只有模式串指针会根据next数组回退。因为KMP算法的核心思想就是利用已经部分匹配的信息，避免对文本串的重复扫描。</li></ol></blockquote><h4 id="扩展-17"><a href="#扩展-17" class="headerlink" title="扩展"></a>扩展</h4><h5 id="多模式字符串匹配-2"><a href="#多模式字符串匹配-2" class="headerlink" title="多模式字符串匹配"></a>多模式字符串匹配</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// Aho-Corasick算法 - KMP的多模式扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        TrieNode[] children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">256</span>];</span><br><span class="line">        TrieNode fail;</span><br><span class="line">        List&lt;Integer&gt; patternIndices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">            fail = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line">    <span class="keyword">private</span> String[] patterns;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AhoCorasick</span><span class="params">(String[] patterns)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.patterns = patterns;</span><br><span class="line">        buildTrie();</span><br><span class="line">        buildFailureLinks();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildTrie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; patterns.length; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> patterns[i];</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> root;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : pattern.toCharArray()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    node.children[c] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.children[c];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            node.patternIndices.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">buildFailureLinks</span><span class="params">()</span> &#123;</span><br><span class="line">        Queue&lt;TrieNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化根节点的子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                root.children[i].fail = root;</span><br><span class="line">                queue.offer(root.children[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root.children[i] = root;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// BFS构建失败链接</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node.children[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">TrieNode</span> <span class="variable">failNode</span> <span class="operator">=</span> node.fail;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">while</span> (failNode != root &amp;&amp; failNode.children[i] == <span class="literal">null</span>) &#123;</span><br><span class="line">                        failNode = failNode.fail;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    failNode = failNode.children[i];</span><br><span class="line">                    node.children[i].fail = failNode;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 合并匹配结果</span></span><br><span class="line">                    node.children[i].patternIndices.addAll(failNode.patternIndices);</span><br><span class="line">                    </span><br><span class="line">                    queue.offer(node.children[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Pair&lt;Integer, Integer&gt;&gt; <span class="title function_">search</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        List&lt;Pair&lt;Integer, Integer&gt;&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">currentState</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> text.charAt(i);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> (currentState != root &amp;&amp; currentState.children[c] == <span class="literal">null</span>) &#123;</span><br><span class="line">                currentState = currentState.fail;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            currentState = currentState.children[c];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> patternIndex : currentState.patternIndices) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">endPos</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">startPos</span> <span class="operator">=</span> endPos - patterns[patternIndex].length() + <span class="number">1</span>;</span><br><span class="line">                results.add(<span class="keyword">new</span> <span class="title class_">Pair</span>&lt;&gt;(patternIndex, startPos));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;K, V&gt; &#123;</span><br><span class="line">        K first;</span><br><span class="line">        V second;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(K first, V second)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.first = first;</span><br><span class="line">            <span class="built_in">this</span>.second = second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-18"><a href="#测验-18" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>KMP算法的时间复杂度是多少？它与暴力匹配算法的主要区别是什么？</li><li>KMP算法中next数组的含义是什么？如何利用它避免不必要的比较？</li><li>在KMP算法中，文本指针是否会回退？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>KMP算法的时间复杂度是O(m+n)，其中m是模式串长度，n是文本串长度。与暴力匹配算法O(m*n)相比，KMP算法利用已匹配信息避免重复比较，文本指针不会回退。</li><li>next数组记录了模式串中每个位置的最长相等前后缀长度，表示当匹配失败时，模式串指针应该回退到的位置。通过跳过已知不可能匹配的位置，实现减少不必要的比较次数。</li><li>文本指针不会回退，只有模式串指针会根据next数组回退。因为KMP算法的核心思想就是利用已经部分匹配的信息，避免对文本串的重复扫描。</li></ol></blockquote><h2 id="递归与分治算法"><a href="#递归与分治算法" class="headerlink" title="递归与分治算法"></a>递归与分治算法</h2><h3 id="一、递归算法"><a href="#一、递归算法" class="headerlink" title="一、递归算法"></a>一、递归算法</h3><h4 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h4><p>递归是一种函数调用自身的编程技术，通过将大问题分解为相同形式的小问题来解决。递归依赖函数调用栈，适用于具有自相似结构的问题，如阶乘计算和树结构遍历。</p><p><code>时间复杂度:最佳 问题相关 | 平均 问题相关 | 最差 问题相关   空间复杂度:O(n)</code></p><blockquote><h5 id="应用场景-前提条件-13"><a href="#应用场景-前提条件-13" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>需要明确的基准情况（终止条件）</li><li>递归调用必须朝着基准情况方向发展</li></ul></blockquote><h4 id="算法讲解-17"><a href="#算法讲解-17" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h5><p>递归算法（Recursion Algorithm）是一种重要的编程方法，核心思想是<strong>函数通过调用自身</strong>来解决问题。在递归中，一个复杂的问题被分解为相同类型但规模更小的子问题，直到达到一个简单到可以直接解决的基本情况（基准情况）。递归算法特别适合<strong>解决具有自相似结构的问题</strong>，时间复杂度跟递归深度和每层处理的复杂度有关。</p><p>递归算法的妙处在于它能用简洁优雅的代码解决看似复杂的问题，但在使用时一定要注意<strong>避免无限递归</strong>和重复计算等问题。</p><h4 id="算法步骤-17"><a href="#算法步骤-17" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>定义递归函数，明确函数的功能和参数</li><li>确定递归的基准情况（终止条件）</li><li>将问题分解为更小的子问题</li><li>调用自身解决子问题</li><li>将子问题的结果组合起来，得到原问题的解</li></ol><p>下图以阶乘为例，展示递归流程：</p><p><img src="https://bu.dusays.com/2025/09/21/68d00225eb1f0.webp" alt="img"></p><h4 id="核心特性-17"><a href="#核心特性-17" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>自我调用</strong>：函数在其定义中直接或间接调用自身</li><li><strong>终止条件</strong>：必须有基准情况使递归能够终止</li><li><strong>问题分解</strong>：将大问题分解为相同类型但规模更小的子问题</li><li><strong>时间复杂度</strong>：与递归深度和每层处理的工作量相关</li><li><strong>空间复杂度</strong>：受函数调用栈深度影响，通常与递归深度成正比</li></ul><h4 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h4><p>通过阶乘（factorial）计算来展示递归算法的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Factorial</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorial</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 基准情况</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归情况：n! = n * (n-1)!</span></span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d! = %d</span></span><br><span class="line"><span class="string">&quot;</span>, i, factorial(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归情况：n! = n * (n-1)!</span></span><br><span class="line"><span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>实现递归的核心思想，将计算 n! 的问题转化为计算 (n-1)! 的子问题。同时设置清晰的终止条件 <code>if (n == 0 || n == 1) return 1;</code> 确保递归能够结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n</span>) &#123;</span><br><span class="line">    <span class="comment">// 基准情况</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归情况</span></span><br><span class="line">    <span class="keyword">return</span> n * <span class="title function_">factorial</span>(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;i&#125;</span>! = <span class="subst">$&#123;factorial(i)&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化策略-11"><a href="#优化策略-11" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="尾递归优化"><a href="#尾递归优化" class="headerlink" title="尾递归优化"></a>尾递归优化</h5><p>通过将递归操作放在函数返回位置，可以被编译器优化，避免额外的栈空间消耗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorialTailRecursive</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> factorialHelper(n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorialHelper</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> accumulator)</span> &#123;</span><br><span class="line">    <span class="comment">// 基准情况</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> accumulator;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 尾递归调用</span></span><br><span class="line">    <span class="keyword">return</span> factorialHelper(n - <span class="number">1</span>, n * accumulator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h5><p>缓存已计算结果，避免重复计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorialMemoization</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> factorialWithMemo(n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">factorialWithMemo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] memo)</span> &#123;</span><br><span class="line">    <span class="comment">// 基准情况</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否已计算</span></span><br><span class="line">    <span class="keyword">if</span> (memo[n] != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算并缓存结果</span></span><br><span class="line">    memo[n] = n * factorialWithMemo(n - <span class="number">1</span>, memo);</span><br><span class="line">    <span class="keyword">return</span> memo[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-17"><a href="#优缺点-17" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-17"><a href="#优点-17" class="headerlink" title="优点"></a>优点</h5><ul><li>代码简洁优雅，易于理解和实现</li><li>适合处理树、图等具有递归结构的数据</li><li>某些问题用递归比迭代更直观（比如树的遍历）</li></ul><h5 id="缺点-17"><a href="#缺点-17" class="headerlink" title="缺点"></a>缺点</h5><ul><li>函数调用开销较大，会影响性能</li><li>递归深度过大时可能导致栈溢出</li><li>重复计算子问题可能导致指数级时间复杂度</li><li>调试和跟踪执行流程较为困难</li><li>资源消耗（特别是栈空间）随递归深度增加</li></ul><h4 id="应用场景-17"><a href="#应用场景-17" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）数学计算：阶乘、斐波那契数列、组合数等</p><p>2）数据结构操作：树的遍历、图的搜索（DFS）</p><p>3）分治算法：归并排序、快速排序</p><p>4）动态规划：子问题的递归求解</p><p>5）回溯算法：排列组合、八皇后、数独求解</p><h4 id="扩展-18"><a href="#扩展-18" class="headerlink" title="扩展"></a>扩展</h4><h5 id="斐波那契数列递归实现"><a href="#斐波那契数列递归实现" class="headerlink" title="斐波那契数列递归实现"></a>斐波那契数列递归实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="comment">// 基准情况</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 递归情况：F(n) = F(n-1) + F(n-2)</span></span><br><span class="line">    <span class="keyword">return</span> fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-19"><a href="#测验-19" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>递归算法必须包含哪两个关键部分？为什么它们很重要？</li><li>尾递归与普通递归有什么区别？它有什么优势？</li></ol><blockquote><p>测验答案</p><ol><li>递归算法必须包含基准情况（终止条件）和递归情况。基准情况确保递归能够终止，避免无限递归；递归情况将问题分解为更小的子问题。</li><li>尾递归是指递归调用是函数体中最后执行的操作。尾递归可以被编译器优化，通过重用当前栈帧降低空间复杂度，避免栈溢出。</li></ol></blockquote><h3 id="二、分治算法"><a href="#二、分治算法" class="headerlink" title="二、分治算法"></a>二、分治算法</h3><h4 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h4><p>分治是一种解决复杂问题的策略，将问题分解为多个相似的子问题，分别解决后再合并结果。这种方法有效降低问题复杂度，常用于排序、搜索等领域，如归并排序和快速排序。</p><p><code>时间复杂度:最佳 O(n log n) | 最差 O(n log n)   空间复杂度:O(n)</code></p><h4 id="算法讲解-18"><a href="#算法讲解-18" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h5><p>分治法(Divide and Conquer)是一种解决复杂问题的重要算法思想，其核心思想是将一个难以直接解决的大问题，分割成若干个规模较小的子问题，以便各个击破，最后将子问题的解组合起来，得到原问题的解。分治法的思想可以追溯到古代，但作为一种系统化的算法策略，它在计算机科学领域得到了极大的发展和应用。</p><h4 id="算法步骤-18"><a href="#算法步骤-18" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>分治算法通常遵循以下三个步骤：</p><ol><li>分解(Divide)：将原问题分解为若干个规模较小、相互独立、与原问题形式相同的子问题。</li><li>解决(Conquer)：若子问题规模较小且容易解决则直接解决，否则递归地解各子问题。</li><li>合并(Combine)：将各子问题的解合并为原问题的解。</li></ol><h4 id="核心特性-18"><a href="#核心特性-18" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>递归结构：分治算法通常使用递归实现，每个子问题继续分解直到达到基本情况</li><li>独立性：各子问题之间相互独立，不存在交叠</li><li>问题等价性：子问题与原问题形式相同，只是规模减小</li><li>合并操作：需要有效的合并子问题解的方法</li><li>基本情况处理：当问题规模小到一定程度，可以直接求解</li></ul><h4 id="优缺点-18"><a href="#优缺点-18" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-18"><a href="#优点-18" class="headerlink" title="优点"></a>优点</h5><ul><li>高效性：对于许多问题，分治算法能提供较高的效率</li><li>并行计算：分治算法天然适合并行计算，各子问题可以独立求解</li><li>模块化：问题划分为相互独立的模块，便于理解和实现</li><li>可复用性：同样的分治模式可以应用于多种问题求解</li></ul><h5 id="缺点-18"><a href="#缺点-18" class="headerlink" title="缺点"></a>缺点</h5><ul><li>递归开销：递归调用会导致额外的函数调用开销和栈空间使用</li><li>内存使用：某些分治算法实现可能需要额外的内存空间</li><li>不适用性：不是所有问题都适合使用分治策略，尤其是子问题不独立的情况</li><li>合并难度：某些问题的子问题解合并起来可能相当复杂</li></ul><h4 id="应用场景-18"><a href="#应用场景-18" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>排序算法：归并排序、快速排序</li><li>搜索算法：二分搜索</li><li>矩阵运算：Strassen矩阵乘法</li><li>傅里叶变换：快速傅里叶变换(FFT)</li><li>最近点对问题：计算几何中的经典问题</li><li>大整数乘法：Karatsuba算法</li><li>棋盘覆盖问题：使用L型骨牌覆盖棋盘</li><li>图算法：最短路径、最小生成树等问题</li></ul><h4 id="测验-20"><a href="#测验-20" class="headerlink" title="测验"></a>测验</h4><ol><li>请简述分治算法的三个基本步骤，并说明每个步骤的目的。</li><li>归并排序是分治算法的典型应用，请分析归并排序算法中”分”和”治”的过程分别体现在哪里，以及合并阶段的主要挑战是什么？</li><li>考虑一个数组中寻找最大子数组和的问题，请描述如何使用分治策略解决这个问题，并分析其时间复杂度。</li><li>分治算法和动态规划都可以解决一些重叠子问题，请解释它们之间的主要区别，并给出一个适合分治但不适合动态规划的问题例子。</li></ol><blockquote><p>测验答案</p><ol><li>(1)分解：将原问题分解为较小的子问题；目的是简化问题难度。(2)解决：递归地解决各个子问题；目的是获取子问题的解。(3)合并：将子问题的解合并成原问题的解；目的是构建完整解决方案。</li><li>在归并排序中，”分”体现在将数组不断二分直到单个元素的过程，”治”体现在递归地对左右子数组排序。合并阶段的主要挑战是如何高效地合并两个已排序的子数组，需要额外的空间来临时存储元素，并通过比较元素大小来合并。</li><li>将数组分成左右两半，递归计算左半部分的最大子数组和、右半部分的最大子数组和，以及跨越中点的最大子数组和（需要从中点向两侧扫描），最后返回三者的最大值。时间复杂度为O(n log n)，因为每层分解需要O(n)时间合并，共有log n层。</li><li>分治算法通常是自顶向下的递归过程，子问题相互独立；而动态规划通常自底向上迭代求解，子问题有重叠且保存子问题解以避免重复计算。适合分治但不适合动态规划的例子是归并排序，因为排序过程中子问题是独立的，没有重叠子问题需要记忆化。</li></ol></blockquote><h3 id="三、汉诺塔问题"><a href="#三、汉诺塔问题" class="headerlink" title="三、汉诺塔问题"></a>三、汉诺塔问题</h3><h4 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h4><p>汉诺塔是一个经典的递归问题，有三根柱子和一系列从大到小叠放的圆盘。目标是将所有圆盘从一根柱子移动到另一根柱子，同时遵循规则：一次只能移动一个圆盘，且不能将大圆盘放在小圆盘上面。</p><p><code>时间复杂度:最佳 O(2^n) | 平均 O(2^n) | 最差 O(2^n)    空间复杂度:O(n)</code></p><blockquote><h5 id="应用场景-前提条件-14"><a href="#应用场景-前提条件-14" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>递归思想</li><li>分治策略</li></ul></blockquote><h4 id="算法讲解-19"><a href="#算法讲解-19" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h5><p>汉诺塔（Tower of Hanoi）是一个源于印度的古老数学智力游戏。这个问题的核心是<strong>将一组按照大小顺序叠放的圆盘从一根柱子移动到另一根柱子</strong>，过程中必须遵循特定规则。汉诺塔问题是<strong>递归算法的经典应用</strong>，也是计算机科学中讲解递归思想的标准案例之一。</p><p>这个问题背后隐藏着数学原理，最优解的移动次数是2^n-1（n为圆盘数量），呈指数级增长，所以也常被用来解释为什么某些问题在规模增长时处理难度为陡增。</p><h4 id="算法步骤-19"><a href="#算法步骤-19" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>汉诺塔问题的规则如下：</p><ol><li>有三根柱子（通常称为A、B、C），开始时所有圆盘都按照从大到小的顺序叠放在A柱上</li><li>每次只能移动一个圆盘，且只能移动最顶端的圆盘</li><li>任何时刻都不能将大圆盘放在小圆盘上面</li><li>目标是将所有圆盘从A柱按照原有顺序移动到C柱</li></ol><p>递归解决汉诺塔问题的思路：</p><ol><li><p><strong>基准情况</strong>：当n=1时，直接将圆盘从源柱(A)移动到目标柱(C)</p></li><li><p>递归情况</p><p>：当n&gt;1时</p><ul><li>将n-1个圆盘从源柱(A)移动到辅助柱(B)，此时可将目标柱(C)作为辅助</li><li>将最大的圆盘(第n个)从源柱(A)移动到目标柱(C)</li><li>将n-1个圆盘从辅助柱(B)移动到目标柱(C)，此时可将源柱(A)作为辅助</li></ul></li></ol><p>这种递归策略将问题不断分解为更小规模的相同问题，直到达到易于解决的基准情况。每个移动步骤都保证遵循问题规则，最终完成所有圆盘的移动。</p><p>总移动次数满足公式：T(n) = 2^n - 1，其中n为圆盘数量。</p><p><img src="https://bu.dusays.com/2025/09/21/68d003c06123a.webp" alt="img"></p><h4 id="核心特性-19"><a href="#核心特性-19" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>递归结构</strong>：问题可以分解为更小规模的相同问题</li><li><strong>时间复杂度</strong>：O(2^n)，n是圆盘数量</li><li><strong>空间复杂度</strong>：O(n)，递归栈的深度</li><li><strong>确定性</strong>：无论如何操作，最少需要2^n-1步才能完成</li></ul><h4 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h4><h6 id="Java实现-1"><a href="#Java实现-1" class="headerlink" title="Java实现"></a>Java实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TowerOfHanoi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">hanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> source, <span class="type">char</span> auxiliary, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">        <span class="comment">// 基准情况：只有一个圆盘</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;移动圆盘 1 从 &quot;</span> + source + <span class="string">&quot; 到 &quot;</span> + target);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将n-1个圆盘从源柱移动到辅助柱</span></span><br><span class="line">        hanoi(n - <span class="number">1</span>, source, target, auxiliary);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将第n个圆盘从源柱移动到目标柱</span></span><br><span class="line">        System.out.println(<span class="string">&quot;移动圆盘 &quot;</span> + n + <span class="string">&quot; 从 &quot;</span> + source + <span class="string">&quot; 到 &quot;</span> + target);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将n-1个圆盘从辅助柱移动到目标柱</span></span><br><span class="line">        hanoi(n - <span class="number">1</span>, auxiliary, source, target);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">// 圆盘数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;汉诺塔问题 - &quot;</span> + n + <span class="string">&quot; 个圆盘:&quot;</span>);</span><br><span class="line">        hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;完成移动，共需要 &quot;</span> + ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>) + <span class="string">&quot; 步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码hanoi(n - <span class="number">1</span>, source, target, auxiliary);</span><br><span class="line">System.out.println(<span class="string">&quot;移动圆盘 &quot;</span> + n + <span class="string">&quot; 从 &quot;</span> + source + <span class="string">&quot; 到 &quot;</span> + target);</span><br><span class="line">hanoi(n - <span class="number">1</span>, auxiliary, source, target);</span><br></pre></td></tr></table></figure><p>实现了汉诺塔问题的递归解法。先将n-1个圆盘从源柱移动到辅助柱，然后将最大的圆盘从源柱移动到目标柱，最后将n-1个圆盘从辅助柱移动到目标柱。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">function</span> <span class="title function_">hanoi</span>(<span class="params">n, source, auxiliary, target</span>) &#123;</span><br><span class="line">    <span class="comment">// 基准情况：只有一个圆盘</span></span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`移动圆盘 1 从 <span class="subst">$&#123;source&#125;</span> 到 <span class="subst">$&#123;target&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将n-1个圆盘从源柱移动到辅助柱</span></span><br><span class="line">    <span class="title function_">hanoi</span>(n - <span class="number">1</span>, source, target, auxiliary);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将第n个圆盘从源柱移动到目标柱</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`移动圆盘 <span class="subst">$&#123;n&#125;</span> 从 <span class="subst">$&#123;source&#125;</span> 到 <span class="subst">$&#123;target&#125;</span>`</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将n-1个圆盘从辅助柱移动到目标柱</span></span><br><span class="line">    <span class="title function_">hanoi</span>(n - <span class="number">1</span>, auxiliary, source, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`汉诺塔问题 - <span class="subst">$&#123;n&#125;</span> 个圆盘:`</span>);</span><br><span class="line"><span class="title function_">hanoi</span>(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`完成移动，共需要 <span class="subst">$&#123;(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>&#125;</span> 步`</span>);</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="应用场景-19"><a href="#应用场景-19" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）递归算法教学与演示</p><p>2）计算机科学基础理论研究</p><p>3）游戏开发（益智游戏、智力挑战）</p><p>4）问题分解策略的示例</p><p>5）类似问题的解决思路参考</p><h4 id="扩展-19"><a href="#扩展-19" class="headerlink" title="扩展"></a>扩展</h4><h5 id="广义汉诺塔问题"><a href="#广义汉诺塔问题" class="headerlink" title="广义汉诺塔问题"></a>广义汉诺塔问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 广义汉诺塔：有四根柱子的情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fourPegHanoi</span><span class="params">(<span class="type">int</span> n, <span class="type">char</span> source, <span class="type">char</span> auxiliary1, <span class="type">char</span> auxiliary2, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;移动圆盘 1 从 &quot;</span> + source + <span class="string">&quot; 到 &quot;</span> + target);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算最优划分点k</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> (<span class="type">int</span>)Math.sqrt(<span class="number">2</span> * n + <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将上面的n-k个圆盘从源柱移动到第一个辅助柱</span></span><br><span class="line">    fourPegHanoi(n - k, source, auxiliary2, target, auxiliary1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将下面的k个圆盘从源柱移动到目标柱（使用经典三柱汉诺塔算法）</span></span><br><span class="line">    hanoi(k, source, auxiliary2, target);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将之前移到第一个辅助柱的n-k个圆盘移动到目标柱</span></span><br><span class="line">    fourPegHanoi(n - k, auxiliary1, source, auxiliary2, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-21"><a href="#测验-21" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>对于n个圆盘的汉诺塔问题，最少需要多少步才能完成？请给出数学表达式。</li><li>如果有四根柱子，求解汉诺塔问题的最少步数是否仍然是2^n-1？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>最少需要2^n-1步才能完成，可以通过递归关系式T(n) = 2T(n-1) + 1得到，其中T(1) = 1。</li><li>不再是2n-1。四柱汉诺塔问题（也称为Reve’s puzzle）的最优解法仍是一个开放问题，但已知最少步数小于2n-1。一种算法将n个圆盘分成k和n-k两部分，然后使用额外的柱子优化移动过程。</li></ol></blockquote><h3 id="四、最大子数组问题"><a href="#四、最大子数组问题" class="headerlink" title="四、最大子数组问题"></a>四、最大子数组问题</h3><h4 id="最大子数组问题"><a href="#最大子数组问题" class="headerlink" title="最大子数组问题"></a>最大子数组问题</h4><p>最大子数组问题是寻找数组中具有最大和的连续子数组。分治法通过将数组分成两半，分别求解左右子数组的最大子数组和跨越中点的最大子数组，然后选择三者中的最大值。</p><p><code>时间复杂度:最佳 O(n) | 平均 O(n log n) | 最差 O(n log n)   空间复杂度:O(log n)</code></p><blockquote><h5 id="应用场景-前提条件-15"><a href="#应用场景-前提条件-15" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>递归</li><li>分治策略</li></ul></blockquote><h4 id="算法讲解-20"><a href="#算法讲解-20" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h5><p>最大子数组问题（Maximum Subarray Problem）是算法设计中的一个经典问题，核心目标是<strong>在一个整数数组中找到一个具有最大和的连续子数组</strong>。最大子数组问题在计算机科学、金融分析、图像处理等多个领域有着广泛应用。</p><p>这个问题看似简单，但包含了丰富的算法思想，可以用暴力法、分治法、动态规划等多种方法求解，是理解算法设计范式的绝佳案例。</p><h4 id="算法步骤-20"><a href="#算法步骤-20" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>根据不同的思路，这个问题有不同的解法：</p><h5 id="1-动态规划"><a href="#1-动态规划" class="headerlink" title="1. 动态规划"></a>1. 动态规划</h5><ol><li>初始化两个变量：<code>maxSoFar</code>（全局最大和）和 <code>maxEndingHere</code>（以当前位置结尾的最大和）</li><li>遍历数组，对每个元素:<ul><li>更新 <code>maxEndingHere = max(nums[i], maxEndingHere + nums[i])</code></li><li>更新 <code>maxSoFar = max(maxSoFar, maxEndingHere)</code></li></ul></li><li>返回 <code>maxSoFar</code> 作为结果</li></ol><p><img src="https://bu.dusays.com/2025/09/21/68d0052c775bf.webp" alt="img"></p><h5 id="2-分治法"><a href="#2-分治法" class="headerlink" title="2. 分治法"></a>2. 分治法</h5><ol><li>把数组分成左右两半</li><li>递归计算左半部分的最大子数组和</li><li>递归计算右半部分的最大子数组和</li><li>计算跨越中点的最大子数组和</li><li>返回三者中的最大值</li></ol><h5 id="3-暴力法"><a href="#3-暴力法" class="headerlink" title="3. 暴力法"></a>3. 暴力法</h5><ol><li>枚举所有可能的子数组（两层循环）</li><li>计算每个子数组的和</li><li>追踪并返回最大和</li></ol><h4 id="核心特性-20"><a href="#核心特性-20" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>连续性</strong>：要求子数组必须是原数组中的连续元素</li><li><strong>最优子结构</strong>：当前位置的最优解可以由前一位置的最优解推导</li><li><strong>时间复杂度</strong>：最优为 O(n)</li><li><strong>适用条件</strong>：适用于整数数组（包含正负数）</li></ul><h4 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxSubArray</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSoFar</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxEndingHere</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 选择当前元素，或将当前元素加入到现有子数组</span></span><br><span class="line">            maxEndingHere = Math.max(nums[i], maxEndingHere + nums[i]);</span><br><span class="line">            <span class="comment">// 更新全局最大和</span></span><br><span class="line">            maxSoFar = Math.max(maxSoFar, maxEndingHere);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSoFar;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大子数组和: &quot;</span> + maxSubArray(arr1)); <span class="comment">// 输出: 6 (子数组 [4, -1, 2, 1])</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大子数组和: &quot;</span> + maxSubArray(arr2)); <span class="comment">// 输出: 1</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] arr3 = &#123;<span class="number">5</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大子数组和: &quot;</span> + maxSubArray(arr3)); <span class="comment">// 输出: 23 (整个数组)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码maxEndingHere = Math.max(nums[i], maxEndingHere + nums[i]);</span><br><span class="line">maxSoFar = Math.max(maxSoFar, maxEndingHere);</span><br></pre></td></tr></table></figure><p>实现了动态规划的状态转移方程，每次决定是重新开始一个子数组还是将当前元素加入已有子数组。</p><p>▼</p><p>JavaJavascriptPythonGoCC++JavaJava</p><p>复制代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MaxSubArrayDivideConquer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxSubArrayHelper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubArrayHelper</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本情况</span></span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[left];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 分解问题</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算左半部分的最大子数组和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> maxSubArrayHelper(nums, left, mid);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算右半部分的最大子数组和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> maxSubArrayHelper(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算跨中点的最大子数组和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">crossMax</span> <span class="operator">=</span> maxCrossingSubArray(nums, left, mid, right);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回三者中的最大值</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(leftMax, rightMax), crossMax);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxCrossingSubArray</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算包含mid的左半部分最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLeftSum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid; i &gt;= left; i--) &#123;</span><br><span class="line">            leftSum += nums[i];</span><br><span class="line">            maxLeftSum = Math.max(maxLeftSum, leftSum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算包含mid+1的右半部分最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxRightSum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            rightSum += nums[i];</span><br><span class="line">            maxRightSum = Math.max(maxRightSum, rightSum);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回跨中点的最大子数组和</span></span><br><span class="line">        <span class="keyword">return</span> maxLeftSum + maxRightSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;-<span class="number">2</span>, <span class="number">1</span>, -<span class="number">3</span>, <span class="number">4</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">5</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大子数组和: &quot;</span> + maxSubArray(arr)); <span class="comment">// 输出: 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-19"><a href="#优缺点-19" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="不同方法的优缺点"><a href="#不同方法的优缺点" class="headerlink" title="不同方法的优缺点"></a>不同方法的优缺点</h5><h5 id="Kadane算法（动态规划）"><a href="#Kadane算法（动态规划）" class="headerlink" title="Kadane算法（动态规划）"></a>Kadane算法（动态规划）</h5><p><strong>优点</strong>：</p><ul><li>时间复杂度为O(n)，最优解法</li><li>空间复杂度为O(1)，只需要常数额外空间</li><li>只需要一次遍历数组</li><li>实现简单，代码简洁</li></ul><p><strong>缺点</strong>：</p><ul><li>不容易扩展，比如扩展到二维数组的情况</li><li>原始版本不能处理”最大子数组必须非空”的约束</li></ul><h5 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h5><p><strong>优点</strong>：</p><ul><li>思路清晰，容易推广到类似的问题</li><li>可以并行计算，提高效率</li></ul><p><strong>缺点</strong>：</p><ul><li>时间复杂度为O(n log n)，不如动态规划</li><li>需要递归调用，空间复杂度为O(log n)</li><li>实现相对复杂</li></ul><h5 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h5><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点</strong>：</h6><ul><li>直观易懂</li><li>容易实现和调试</li><li>适用于小规模数据</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点</strong>：</h6><ul><li>时间复杂度为O(n²)或O(n³)（取决于实现方式）</li><li>在大规模数据上效率极低</li><li>不适合实际应用</li></ul><h4 id="应用场景-20"><a href="#应用场景-20" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）股票交易分析：寻找最大收益区间</p><p>2）图像处理：识别图像中的特定区域</p><p>3）数据分析：查找数据序列中的显著模式</p><p>4）生物信息学：DNA序列分析</p><p>5）信号处理：检测信号中的重要片段</p><p>6）路径规划：寻找最优路径段</p><h4 id="扩展-20"><a href="#扩展-20" class="headerlink" title="扩展"></a>扩展</h4><h5 id="二维最大子矩阵和问题"><a href="#二维最大子矩阵和问题" class="headerlink" title="二维最大子矩阵和问题"></a>二维最大子矩阵和问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxSubMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">cols</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSum</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 固定上下边界，计算这些行的列和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>; top &lt; rows; top++) &#123;</span><br><span class="line">        <span class="type">int</span>[] temp = <span class="keyword">new</span> <span class="title class_">int</span>[cols];  <span class="comment">// 存储从top行到bottom行的每列的和</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">bottom</span> <span class="operator">=</span> top; bottom &lt; rows; bottom++) &#123;</span><br><span class="line">            <span class="comment">// 更新列和</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; cols; col++) &#123;</span><br><span class="line">                temp[col] += matrix[bottom][col];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对列和数组应用1D最大子数组算法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">currentMaxSum</span> <span class="operator">=</span> kadane(temp);</span><br><span class="line">            maxSum = Math.max(maxSum, currentMaxSum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一维Kadane算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">kadane</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSoFar</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxEndingHere</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]);</span><br><span class="line">        maxSoFar = Math.max(maxSoFar, maxEndingHere);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxSoFar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-22"><a href="#测验-22" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>Kadane算法的时间复杂度和空间复杂度分别是多少？</li><li>当数组中全是负数时，最大子数组和是什么？如何处理这种特殊情况？</li><li>分治法解决最大子数组问题的时间复杂度为什么是O(n log n)？</li></ol><blockquote><p>测验答案</p><ol><li>时间复杂度 O(n)，空间复杂度 O(1)。</li><li>当数组中全是负数时，最大子数组是数组中的最大值（单个元素）。可以通过先检查是否所有元素都是负数来处理。</li><li>分治法的时间复杂度可以用递归式表示：T(n) = 2T(n/2) + O(n)，其中2T(n/2)表示处理左右两个子问题，O(n)表示计算跨中点的最大子数组。根据主定理，这个递归式的解为O(n log n)。</li></ol></blockquote><h3 id="五、最近点对问题"><a href="#五、最近点对问题" class="headerlink" title="五、最近点对问题"></a>五、最近点对问题</h3><h4 id="最近点对问题"><a href="#最近点对问题" class="headerlink" title="最近点对问题"></a>最近点对问题</h4><p>最近点对问题是在二维平面上找到距离最近的两个点。分治算法通过将点集按x坐标排序，递归地在左右两半部分寻找最近点对，最后考虑跨越中线的点对。</p><p><code>时间复杂度:最佳 O(n log n) | 最差 O(n log n)  空间复杂度:O(n)</code></p><h4 id="算法讲解-21"><a href="#算法讲解-21" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h5><p>最近点对问题(Closest Pair of Points Problem)是计算几何学中的一个经典问题：给定平面上的n个点，找出其中的一对点，使得它们之间的距离最小。这个问题看似简单，暴力解法可以通过计算所有点对的距离在O(n²)时间内解决，但使用分治策略可以将时间复杂度优化至O(n log n)。该问题在空间索引、聚类分析、碰撞检测等领域有广泛应用。</p><h4 id="算法步骤-21"><a href="#算法步骤-21" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>分治法解决最近点对问题的关键步骤如下：</p><ol><li>分解：<ul><li>将所有点按照x坐标排序</li><li>找到中间点，将点集分为左右两部分</li></ul></li><li>解决：<ul><li>递归求解左半部分的最近点对，距离记为δ₁</li><li>递归求解右半部分的最近点对，距离记为δ₂</li><li>取δ = min(δ₁, δ₂)</li></ul></li><li>合并：<ul><li>考虑跨越中线的点对，即一个点在左半部分，一个点在右半部分</li><li>只需考虑中线左右各δ距离内的点</li><li>对这些点按y坐标排序，对每个点只需与其后最多6个点比较距离</li><li>更新最小距离</li></ul></li></ol><h4 id="核心特性-21"><a href="#核心特性-21" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>高效性：时间复杂度O(n log n)，优于暴力法的O(n²)</li><li>排序预处理：需要按x坐标和y坐标分别排序</li><li>空间划分：通过垂直线将平面分为左右两部分</li><li>剪枝技术：合并阶段通过几何性质大幅减少比较次数</li><li>递归调用：采用递归结构实现分治过程</li></ul><h4 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="type">double</span> x, y;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算两点间的欧几里得距离</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">distance</span><span class="params">(Point p)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosestPairOfPoints</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 暴力方法找最近点对</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">bruteForce</span><span class="params">(Point[] points, <span class="type">int</span> start, <span class="type">int</span> end, Point[] closestPair)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDist</span> <span class="operator">=</span> Double.POSITIVE_INFINITY;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; end; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">dist</span> <span class="operator">=</span> points[i].distance(points[j]);</span><br><span class="line">                <span class="keyword">if</span> (dist &lt; minDist) &#123;</span><br><span class="line">                    minDist = dist;</span><br><span class="line">                    <span class="keyword">if</span> (closestPair != <span class="literal">null</span>) &#123;</span><br><span class="line">                        closestPair[<span class="number">0</span>] = points[i];</span><br><span class="line">                        closestPair[<span class="number">1</span>] = points[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> minDist;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并步骤，检查跨越中线的点对</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">stripClosest</span><span class="params">(Point[] strip, <span class="type">int</span> size, <span class="type">double</span> delta, Point[] closestPair)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">minDist</span> <span class="operator">=</span> delta;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按y坐标排序</span></span><br><span class="line">        Arrays.sort(strip, <span class="number">0</span>, size, (a, b) -&gt; Double.compare(a.y, b.y));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对每个点，只需检查后面y坐标相差小于delta的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="comment">// 根据几何性质，只需检查最多6个点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; size &amp;&amp; (strip[j].y - strip[i].y) &lt; minDist; j++) &#123;</span><br><span class="line">                <span class="type">double</span> <span class="variable">dist</span> <span class="operator">=</span> strip[i].distance(strip[j]);</span><br><span class="line">                <span class="keyword">if</span> (dist &lt; minDist) &#123;</span><br><span class="line">                    minDist = dist;</span><br><span class="line">                    <span class="keyword">if</span> (closestPair != <span class="literal">null</span>) &#123;</span><br><span class="line">                        closestPair[<span class="number">0</span>] = strip[i];</span><br><span class="line">                        closestPair[<span class="number">1</span>] = strip[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> minDist;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分治法主函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">closestUtil</span><span class="params">(Point[] points, <span class="type">int</span> start, <span class="type">int</span> end, Point[] closestPair)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> end - start;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果点数少于等于3，使用暴力法</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bruteForce(points, start, end, closestPair);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到中间点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + n/<span class="number">2</span>;</span><br><span class="line">        <span class="type">Point</span> <span class="variable">midPoint</span> <span class="operator">=</span> points[mid];</span><br><span class="line">        </span><br><span class="line">        Point[] leftClosestPair = <span class="keyword">new</span> <span class="title class_">Point</span>[<span class="number">2</span>];</span><br><span class="line">        Point[] rightClosestPair = <span class="keyword">new</span> <span class="title class_">Point</span>[<span class="number">2</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归解决左右两部分</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">leftDist</span> <span class="operator">=</span> closestUtil(points, start, mid, leftClosestPair);</span><br><span class="line">        <span class="type">double</span> <span class="variable">rightDist</span> <span class="operator">=</span> closestUtil(points, mid, end, rightClosestPair);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取左右两部分的最小距离</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">delta</span> <span class="operator">=</span> Math.min(leftDist, rightDist);</span><br><span class="line">        Point[] currentClosestPair = (leftDist &lt;= rightDist) ? leftClosestPair : rightClosestPair;</span><br><span class="line">        <span class="keyword">if</span> (closestPair != <span class="literal">null</span>) &#123;</span><br><span class="line">            closestPair[<span class="number">0</span>] = currentClosestPair[<span class="number">0</span>];</span><br><span class="line">            closestPair[<span class="number">1</span>] = currentClosestPair[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建strip数组，存储中线附近的点</span></span><br><span class="line">        Point[] strip = <span class="keyword">new</span> <span class="title class_">Point</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Math.abs(points[i].x - midPoint.x) &lt; delta) &#123;</span><br><span class="line">                strip[j++] = points[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查strip中是否有更近的点对</span></span><br><span class="line">        Point[] stripClosestPair = <span class="keyword">new</span> <span class="title class_">Point</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">double</span> <span class="variable">stripDist</span> <span class="operator">=</span> stripClosest(strip, j, delta, stripClosestPair);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新最终结果</span></span><br><span class="line">        <span class="keyword">if</span> (stripDist &lt; delta) &#123;</span><br><span class="line">            delta = stripDist;</span><br><span class="line">            <span class="keyword">if</span> (closestPair != <span class="literal">null</span>) &#123;</span><br><span class="line">                closestPair[<span class="number">0</span>] = stripClosestPair[<span class="number">0</span>];</span><br><span class="line">                closestPair[<span class="number">1</span>] = stripClosestPair[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> delta;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找最近点对的主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">closest</span><span class="params">(Point[] points, Point[] closestPair)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> points.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按x坐标排序</span></span><br><span class="line">        Arrays.sort(points, (a, b) -&gt; Double.compare(a.x, b.x));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 调用递归函数</span></span><br><span class="line">        <span class="keyword">return</span> closestUtil(points, <span class="number">0</span>, n, closestPair);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优缺点-20"><a href="#优缺点-20" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-19"><a href="#优点-19" class="headerlink" title="优点"></a>优点</h5><ul><li>高效性：O(n log n)的时间复杂度，适合处理大规模点集</li><li>精确性：能够精确找到最近点对，不是近似算法</li><li>可扩展性：可以扩展到三维空间和高维空间</li><li>稳定性：算法结果稳定，不依赖于输入点的顺序</li></ul><h5 id="缺点-19"><a href="#缺点-19" class="headerlink" title="缺点"></a>缺点</h5><ul><li>实现复杂：相比暴力法，实现更为复杂</li><li>内存消耗：需要额外的空间来存储排序结果和合并阶段的点</li><li>递归开销：递归调用带来的额外开销</li><li>不易并行化：合并阶段依赖于之前的计算结果，不容易并行处理</li></ul><h4 id="应用场景-21"><a href="#应用场景-21" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>空间数据库：用于空间索引和最近邻查询</li><li>计算几何学：作为基础算法用于解决其他几何问题</li><li>聚类分析：用于确定数据点之间的相似性</li><li>图像处理：用于特征点匹配和目标识别</li><li>碰撞检测：在物理模拟和游戏中检测物体间的碰撞</li><li>无线网络：优化节点间的通信距离</li></ul><h4 id="扩展-21"><a href="#扩展-21" class="headerlink" title="扩展"></a>扩展</h4><h5 id="三维空间中的最近点对问题"><a href="#三维空间中的最近点对问题" class="headerlink" title="三维空间中的最近点对问题"></a>三维空间中的最近点对问题</h5><p>在三维空间中，最近点对问题的分治算法核心思想与上述相似，但实现更为复杂：</p><ol><li>按x坐标排序并分割点集</li><li>递归计算左右两部分的最近点对</li><li>合并阶段考虑位于中间平面附近的点</li><li>使用三维的剪枝技术减少比较次数</li></ol><p>三维空间中，剪枝技术变得更为复杂，需要使用格子或八叉树等空间数据结构来优化。时间复杂度在最坏情况下仍为O(n log n)。</p><h5 id="近似算法和概率算法"><a href="#近似算法和概率算法" class="headerlink" title="近似算法和概率算法"></a>近似算法和概率算法</h5><p>对于高维空间或对性能要求极高的应用，可以使用近似算法：</p><ol><li>网格方法：将空间划分为网格，只比较同一网格和相邻网格中的点</li><li>KD树索引：使用KD树存储点，能在平均O(log n)时间内找到近似最近点</li><li>随机采样：使用随机抽样技术，以牺牲一定精度换取更高效率</li></ol><h5 id="流数据处理"><a href="#流数据处理" class="headerlink" title="流数据处理"></a>流数据处理</h5><p>在流数据环境中，点是动态添加的，需要维护当前的最近点对：</p><ol><li>使用平衡二叉树维护点的x和y坐标排序</li><li>对新加入的点，只需检查其与附近点的距离</li><li>维护一个候选点集合，保持其大小在O(log n)级别</li></ol><h5 id="并行化实现"><a href="#并行化实现" class="headerlink" title="并行化实现"></a>并行化实现</h5><p>对于大规模数据，可以采用并行化策略：</p><ol><li>将点集分成多个子集，并行计算每个子集的最近点对</li><li>合并阶段需要考虑跨越不同子集边界的点对</li><li>使用区域重叠技术减少子集边界问题</li></ol><p>实际测试表明，在多核环境下，并行实现可以获得接近线性的加速比。</p><h5 id="最远点对问题"><a href="#最远点对问题" class="headerlink" title="最远点对问题"></a>最远点对问题</h5><p>与最近点对问题相关的是最远点对问题，即找出点集中相距最远的一对点。这个问题可以使用凸包算法解决：</p><ol><li>计算点集的凸包</li><li>在凸包顶点中找出距离最远的点对（可以使用旋转卡尺算法）</li></ol><p>最远点对问题的时间复杂度也是O(n log n)，主要受限于凸包计算的复杂度。</p><h4 id="测验-23"><a href="#测验-23" class="headerlink" title="测验"></a>测验</h4><ol><li>解释为什么在最近点对问题的合并阶段，对于跨越中线的每个点，只需检查y坐标差小于δ的有限个点？</li><li>最近点对算法的合并阶段中，为什么我们可以断言每个点只需与其后最多6个点比较距离？请从几何角度证明。</li><li>如果二维平面上有n个点，其中存在m对相同的点(m &lt; n/2)，最近点对算法的时间复杂度会发生什么变化？如何优化？</li><li>分析最近点对算法在最坏情况下的空间复杂度，并思考如何减少空间消耗。</li></ol><blockquote><p>测验答案</p><ol><li>在合并阶段，我们已经知道左右两部分的最小距离δ，对于跨越中线的点对，如果两点的y坐标差大于δ，那么它们之间的距离一定大于δ（毕竟欧几里得距离公式中，y坐标差的平方是总距离平方的一部分）。因此，我们只需检查y坐标差小于δ的点对，这大大减少了需要比较的点对数量。</li><li>考虑跨越中线的点集，每个点左右δ距离内的区域形成宽度为2δ、高度为2δ的正方形区域。根据鸽巢原理，如果在这个区域中放置超过8个点，必然有两点间距离小于δ（可以将正方形划分为4个边长为δ的小正方形，每个小正方形最多容纳1个点，否则两点距离小于δ）。但这与我们已知的左右两部分最小距离为δ矛盾。更精确的分析表明，每个点实际上最多需要与其后6个点比较距离。</li><li>如果存在相同的点，最小距离为0。算法可以在初始排序后检测相邻点是否重合，如发现重合点立即返回0距离。时间复杂度仍为O(n log n)，主要由排序决定，但实际运行时间会因提前终止而减少。可以使用哈希表预处理，以O(n)时间检测重合点。</li><li>最坏情况下，空间复杂度为O(n)，主要用于递归调用栈(O(log n))和合并阶段的strip数组(O(n))。可以通过迭代实现替代递归，或使用原地排序算法减少辅助数组空间，但这会增加实现复杂度。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2024/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2024/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><h3 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h3><p>数组是最基础的数据结构，在内存中连续存储，支持随机访问。适用于需要频繁按索引访问元素的场景。</p><p><code>空间复杂度:O(n)</code></p><h4 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h4><h4 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组(Array)"></a>数组(Array)</h4><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>数组是计算机科学中最基础的数据结构之一，由相同类型的元素按顺序存储在连续的内存空间中。每个元素通过其索引值（数组下标）来进行唯一标识和访问。</p><p><img src="https://bu.dusays.com/2025/09/26/68d69dd170eb4.webp" alt="img"></p><p>在大多数编程语言中，数组的索引都是从0开始的，所以一个长度为n的数组，其索引范围是0到n-1。</p><h4 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>固定大小：在大多数语言中，数组创建后大小固定不变</li><li>连续内存：元素在内存中顺序存储，无额外开销</li><li>随机访问：O(1)时间复杂度直接访问任意元素</li><li>同质性：同一数组中所有元素类型相同</li><li>索引访问：通过数字索引访问元素</li></ol><h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-访问元素"><a href="#1-访问元素" class="headerlink" title="1. 访问元素"></a>1. 访问元素</h5><ul><li>时间复杂度：O(1)</li><li>基本语法：<code>array[index]</code></li></ul><h5 id="2-更新元素"><a href="#2-更新元素" class="headerlink" title="2. 更新元素"></a>2. 更新元素</h5><ul><li>时间复杂度：O(1)</li><li>基本语法：<code>array[index] = value</code></li></ul><h5 id="3-遍历数组"><a href="#3-遍历数组" class="headerlink" title="3. 遍历数组"></a>3. 遍历数组</h5><ul><li>时间复杂度：O(n)</li></ul><h5 id="4-搜索元素"><a href="#4-搜索元素" class="headerlink" title="4. 搜索元素"></a>4. 搜索元素</h5><ul><li>无序数组：O(n)</li><li>有序数组：O(log n)（使用二分查找）</li></ul><h5 id="5-插入-删除元素"><a href="#5-插入-删除元素" class="headerlink" title="5. 插入/删除元素"></a>5. 插入/删除元素</h5><ul><li>在数组末尾：O(1)</li><li>在数组指定位置：O(n)（需要移动元素）</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 声明和初始化</span></span><br><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>]; <span class="comment">// 创建一个长度为5的int数组，默认值都是0</span></span><br><span class="line"><span class="type">int</span>[] primes = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>&#125;; <span class="comment">// 直接使用初始值创建数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">firstPrime</span> <span class="operator">=</span> primes[<span class="number">0</span>]; <span class="comment">// 得到2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新元素</span></span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> numbers.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; primes.length; i++) &#123;</span><br><span class="line">    System.out.println(primes[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用增强for循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> prime : primes) &#123;</span><br><span class="line">    System.out.println(prime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li><strong>快速访问</strong>：O(1)时间复杂度随机访问任意元素</li><li><strong>空间效率高</strong>：元素紧密排列，内存利用率高</li><li><strong>CPU缓存友好</strong>：连续内存布局有利于缓存命中率</li><li><strong>下标访问直观</strong>：使用自然数字索引访问简单直观</li></ol><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol><li><strong>固定大小</strong>：创建后大小不可变（Java的原生数组）</li><li><strong>插入删除低效</strong>：非尾部操作需要移动元素，时间复杂度O(n)</li><li><strong>内存浪费</strong>：预分配过大容量可能造成内存浪费</li><li><strong>空间要求</strong>：要求内存中有足够的连续空间</li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>需要快速随机访问</strong>的场景，如图像处理、矩阵运算</li><li><strong>大小已知且固定</strong>的数据集合</li><li><strong>需要高性能的数值计算</strong>或科学计算</li><li><strong>查询频繁但修改较少</strong>的数据结构</li><li><strong>作为底层数据结构</strong>，许多高级数据结构内部使用数组实现</li></ol><h4 id="扩展：动态数组"><a href="#扩展：动态数组" class="headerlink" title="扩展：动态数组"></a>扩展：动态数组</h4><p>由于原生数组大小固定的限制，很多编程语言提供了动态数组的实现，比如Java中的ArrayList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建动态数组</span></span><br><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">list.add(<span class="number">10</span>);</span><br><span class="line">list.add(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定位置添加元素</span></span><br><span class="line">list.add(<span class="number">1</span>, <span class="number">15</span>); <span class="comment">// [10, 15, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问元素</span></span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> list.get(<span class="number">0</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素</span></span><br><span class="line">list.set(<span class="number">1</span>, <span class="number">25</span>); <span class="comment">// [10, 25, 20]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line">list.remove(<span class="number">2</span>); <span class="comment">// [10, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取大小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> list.size(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>具体扩容机制和原理参考：<a href="https://www.mianshiya.com/question/1839515038747066370">Java ArrayList 的扩容机制是什么？ - 面试鸭 - 程序员求职面试刷题神器</a></p><h4 id="扩展：多维数组"><a href="#扩展：多维数组" class="headerlink" title="扩展：多维数组"></a>扩展：多维数组</h4><p>多维数组是数组的扩展形式，可以看作是”数组的数组”。最常见的是二维数组，它可以用来表示表格、矩阵等结构。</p><h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><p>二维数组可以想象成一个表格，有行和列，每个元素需要两个索引来定位：一个表示行，一个表示列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 创建一个3行4列的二维数组</span></span><br><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并初始化二维数组</span></span><br><span class="line"><span class="type">int</span>[][] gameBoard = &#123;</span><br><span class="line">    &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">    &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h5 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h5><p>在Java中，二维数组实际上是”数组的数组”，即第一维存储的是指向第二维数组的引用。因此，Java中的二维数组可以是不规则的（每行的长度可以不同）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 创建不规则二维数组</span></span><br><span class="line"><span class="type">int</span>[][] irregular = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">irregular[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">irregular[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">irregular[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h5 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h5><p>Java支持两维以上的多维数组，如三维数组（可以想象成多层二维表格）或更高维度的数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 创建三维数组</span></span><br><span class="line"><span class="type">int</span>[][][] cube = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>][<span class="number">5</span>];  <span class="comment">// 3层，每层4行5列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问三维数组的元素</span></span><br><span class="line">cube[<span class="number">1</span>][<span class="number">2</span>][<span class="number">3</span>] = <span class="number">100</span>;  <span class="comment">// 第2层，第3行，第4列</span></span><br></pre></td></tr></table></figure><h5 id="多维数组的应用"><a href="#多维数组的应用" class="headerlink" title="多维数组的应用"></a>多维数组的应用</h5><ol><li><strong>游戏开发</strong>：使用二维数组表示游戏地图、棋盘等。</li><li><strong>图像处理</strong>：使用二维数组表示像素矩阵。</li><li><strong>矩阵运算</strong>：科学计算和线性代数中的矩阵运算。</li><li><strong>数据分析</strong>：处理表格数据和多维数据集。</li><li><strong>3D建模</strong>：使用三维数组表示空间中的体素数据。</li></ol><h4 id="测验"><a href="#测验" class="headerlink" title="测验"></a>测验</h4><p>1）在Java中，声明一个长度为10的整型数组，初始值为0到9，正确的代码是什么？</p><p>2）如果有一个大小为n的数组，要在索引为k的位置插入一个新元素，最坏情况下的时间复杂度是多少？</p><p>3）二维数组<code>int[][] arr = new int[5][4]</code>中共有多少个元素？</p><p>4）如何在不使用额外空间的情况下反转一个数组？</p><h5 id="测验答案"><a href="#测验答案" class="headerlink" title="测验答案"></a>测验答案</h5><p>1）在Java中，声明一个长度为10的整型数组，初始值为0到9，正确的代码是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    arr[i] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼Java</span><br><span class="line"></span><br><span class="line">复制代码<span class="type">int</span>[] arr = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure><p>2）最坏情况时间复杂度为O(n)。发生在需要在数组头部(k=0)插入元素时，这需要将所有现有元素向后移动一位。</p><p>3）二维数组<code>int[][] arr = new int[5][4]</code>中共有多少个元素？共有20个元素。这是一个5行4列的二维数组，总元素个数 = 5 × 4 = 20。</p><p>4）如何在不使用额外空间的情况下反转一个数组？使用双指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 交换元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">        arr[left] = arr[right];</span><br><span class="line">        arr[right] = temp;</span><br><span class="line">        <span class="comment">// 移动指针</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h3><p>字符串是由字符组成的有限序列，在计算机中通常以字符数组形式存储，支持拼接、查找、替换等操作。</p><h5 id="算法讲解-1"><a href="#算法讲解-1" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>字符串是计算机科学中最常用的数据类型之一，它是由一系列字符组成的有限序列。在大多数编程语言中，字符串被作为基本数据类型或对象提供，用于表示文本。</p><p>从本质上讲，字符串可以看作是一个数组，但与普通数组不同，字符串有特殊的属性和操作方法，更适合处理文本数据。在Java等现代编程语言中，字符串是不可变的对象，这意味着一旦创建，其内容不能被修改。</p><h4 id="核心特性-1"><a href="#核心特性-1" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>不可变性：在Java中，字符串对象一旦创建，其值不能被更改</li><li>字符序列：由多个字符按顺序排列组成</li><li>索引访问：可以通过索引访问单个字符，索引从0开始</li><li>字符串池：Java中常量字符串会被存储在字符串池中以节省内存</li><li>Unicode支持：可以包含任何Unicode字符，支持多语言文本</li></ol><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 创建字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="string">&quot;你好，世界！&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Java编程&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串长度</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> greeting.length();  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> greeting + <span class="string">&quot; 欢迎学习&quot;</span> + name;</span><br><span class="line"><span class="type">String</span> <span class="variable">sameMassage</span> <span class="operator">=</span> greeting.concat(<span class="string">&quot; 欢迎学习&quot;</span>).concat(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">firstChar</span> <span class="operator">=</span> greeting.charAt(<span class="number">0</span>);  <span class="comment">// &#x27;你&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">subStr</span> <span class="operator">=</span> greeting.substring(<span class="number">0</span>, <span class="number">2</span>);  <span class="comment">// &quot;你好&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEqual</span> <span class="operator">=</span> greeting.equals(<span class="string">&quot;你好，世界！&quot;</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">ignoreCase</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>.equalsIgnoreCase(<span class="string">&quot;java&quot;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> message.indexOf(<span class="string">&quot;欢迎&quot;</span>);  <span class="comment">// 返回&quot;欢迎&quot;在字符串中首次出现的索引</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> message.contains(<span class="string">&quot;Java&quot;</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> greeting.replace(<span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;我&#x27;</span>);  <span class="comment">// &quot;我好，世界！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割</span></span><br><span class="line">String[] parts = <span class="string">&quot;苹果,香蕉,橙子&quot;</span>.split(<span class="string">&quot;,&quot;</span>);  <span class="comment">// [&quot;苹果&quot;, &quot;香蕉&quot;, &quot;橙子&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换大小写（仅适用于拉丁字母）</span></span><br><span class="line"><span class="type">String</span> <span class="variable">upper</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>.toUpperCase();  <span class="comment">// &quot;HELLO&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lower</span> <span class="operator">=</span> <span class="string">&quot;HELLO&quot;</span>.toLowerCase();  <span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 去除首尾空白</span></span><br><span class="line"><span class="type">String</span> <span class="variable">trimmed</span> <span class="operator">=</span> <span class="string">&quot;  hello  &quot;</span>.trim();  <span class="comment">// &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ol><li><strong>易用性</strong>：提供了丰富的API和操作方法，处理文本更简单</li><li><strong>国际化支持</strong>：支持Unicode字符集，可以处理各种语言的文本</li><li><strong>内存优化</strong>：字符串池机制减少内存使用</li></ol><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>文本处理</strong>：处理用户输入、配置文件、日志等</li><li><strong>数据解析</strong>：解析JSON、XML、CSV等格式的数据</li><li><strong>自然语言处理</strong>：文本分析、情感分析、机器翻译等</li><li><strong>网络通信</strong>：HTTP请求参数、URL处理、网络协议等</li><li><strong>用户界面</strong>：显示文本、多语言支持等</li></ol><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="StringBuilder-vs-StringBuffer-vs-String"><a href="#StringBuilder-vs-StringBuffer-vs-String" class="headerlink" title="StringBuilder vs StringBuffer vs String"></a>StringBuilder vs StringBuffer vs String</h5><ul><li><strong>String</strong>：不可变，适合作为常量使用</li><li><strong>StringBuilder</strong>：可变，非线程安全，适合在单线程环境中频繁修改字符串</li><li><strong>StringBuffer</strong>：可变，线程安全，适合在多线程环境中使用，但性能略低于StringBuilder</li></ul><h5 id="字符串编码"><a href="#字符串编码" class="headerlink" title="字符串编码"></a>字符串编码</h5><p>字符串在内存中存储和在文件中保存时需要特定的编码方式，常见的编码包括ASCII、UTF-8、UTF-16等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串与字节数组转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;你好，世界&quot;</span>;</span><br><span class="line"><span class="comment">// 将字符串转换为UTF-8编码的字节数组</span></span><br><span class="line"><span class="type">byte</span>[] bytes = str.getBytes(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// 将字节数组转回字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查编码是否支持</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">supported</span> <span class="operator">=</span> Charset.isSupported(<span class="string">&quot;UTF-8&quot;</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h5 id="常见编码比较"><a href="#常见编码比较" class="headerlink" title="常见编码比较"></a>常见编码比较</h5><ol><li><strong>ASCII</strong>：只能表示128个字符，主要是英文字母、数字和符号</li><li><strong>ISO-8859-1</strong>：扩展ASCII，可表示西欧语言字符</li><li><strong>UTF-8</strong>：变长编码，英文占1字节，中文通常占3字节，兼容ASCII</li><li><strong>UTF-16</strong>：Java内部使用的编码，所有字符占2或4字节</li><li><strong>GBK/GB2312</strong>：中文编码标准，主要用于表示中文字符</li></ol><h4 id="测验-1"><a href="#测验-1" class="headerlink" title="测验"></a>测验</h4><p>在Java中，<code>String s1 = &quot;hello&quot;;</code> 和 <code>String s2 = new String(&quot;hello&quot;);</code> 创建的字符串有什么区别？</p><blockquote><p>测验答案</p><ul><li><code>s1</code>使用字符串字面量创建，会首先在字符串常量池中查找”hello”，如果存在则直接引用，不存在则在池中创建并引用。</li><li><code>s2</code>使用构造函数创建，会在堆内存中创建一个新的String对象，即使常量池中已有相同内容的字符串。</li><li>所以<code>s1 == s2</code>返回false（比较引用），但<code>s1.equals(s2)</code>返回true（比较内容）。</li></ul></blockquote><h3 id="三、单向链表"><a href="#三、单向链表" class="headerlink" title="三、单向链表"></a>三、单向链表</h3><p>单向链表是一种线性数据结构，其中每个节点包含数据和指向下一个节点的指针。适用于频繁插入和删除操作的场景。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-2"><a href="#算法讲解-2" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><p>单向链表是一种线性数据结构，它由一系列节点组成，每个节点包含两部分：数据域和指针域。数据域用于存储实际数据，指针域存储指向下一个节点的引用。链表中的最后一个节点指向空（null），表示链表的结束。</p><p><img src="https://bu.dusays.com/2025/09/26/68d69ee6a3bd9.png" alt="img"></p><p>与数组不同，链表中的元素在内存中不是连续存储的，而是通过指针连接在一起。这种特性让链表在某些操作上比数组更灵活，特别是在频繁进行插入和删除操作的场景下。</p><h4 id="核心特性-2"><a href="#核心特性-2" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>动态大小：链表可以动态增长和缩小，无需预先定义大小</li><li>非连续存储：节点在内存中分散存储，通过指针相连</li><li>单向性：每个节点只知道下一个节点在哪里，不知道上一个节点</li><li>顺序访问：必须从头节点开始，沿着指针逐个访问节点</li><li>无索引访问：不能像数组那样通过索引直接访问元素</li></ol><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-访问元素-1"><a href="#1-访问元素-1" class="headerlink" title="1. 访问元素"></a>1. 访问元素</h5><ul><li>时间复杂度：O(n)</li><li>说明：必须从头节点开始，沿链表遍历直到找到目标节点</li></ul><h5 id="2-在头部插入"><a href="#2-在头部插入" class="headerlink" title="2. 在头部插入"></a>2. 在头部插入</h5><ul><li>时间复杂度：O(1)</li><li>说明：创建新节点并指向当前头节点，然后更新头节点</li></ul><h5 id="3-在尾部插入"><a href="#3-在尾部插入" class="headerlink" title="3. 在尾部插入"></a>3. 在尾部插入</h5><ul><li>时间复杂度：O(n)或O(1)<ul><li>O(n)：如果只有头指针，需要遍历到尾部</li><li>O(1)：如果维护了尾指针，可以直接在尾部操作</li></ul></li></ul><h5 id="4-在中间插入"><a href="#4-在中间插入" class="headerlink" title="4. 在中间插入"></a>4. 在中间插入</h5><ul><li>时间复杂度：O(n)</li><li>说明：先找到目标位置的前一个节点，再执行插入操作</li></ul><h5 id="5-删除节点"><a href="#5-删除节点" class="headerlink" title="5. 删除节点"></a>5. 删除节点</h5><ul><li>时间复杂度：<ul><li>删除头节点：O(1)</li><li>删除其他节点：O(n)，因为需要找到待删除节点的前一个节点</li></ul></li></ul><h5 id="6-查找元素"><a href="#6-查找元素" class="headerlink" title="6. 查找元素"></a>6. 查找元素</h5><ul><li>时间复杂度：O(n)</li><li>说明：从头节点开始遍历链表查找目标元素</li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 定义节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;       <span class="comment">// 数据域</span></span><br><span class="line">    Node next;      <span class="comment">// 指针域，指向下一个节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单向链表类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SinglyLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;  <span class="comment">// 头节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数，创建一个空链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SinglyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表头部插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtHead</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表尾部插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtTail</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        current.next = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在指定位置插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtPosition</span><span class="params">(<span class="type">int</span> data, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 位置无效</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;位置无效&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入位置为0，相当于在头部插入</span></span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">            insertAtHead(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">previous</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到要插入位置的前一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; count &lt; position) &#123;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果position超出链表长度，则插入到尾部</span></span><br><span class="line">        previous.next = newNode;</span><br><span class="line">        newNode.next = current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除第一个值为data的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="comment">// 链表为空</span></span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span> (head.data == data) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除的不是头节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">previous</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找要删除的节点</span></span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current.data != data) &#123;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果找到了要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            previous.next = current.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;未找到要删除的元素&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(current.data + <span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取链表长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SinglyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SinglyLinkedList</span>();</span><br><span class="line">        </span><br><span class="line">        list.insertAtTail(<span class="number">10</span>);</span><br><span class="line">        list.insertAtTail(<span class="number">20</span>);</span><br><span class="line">        list.insertAtTail(<span class="number">30</span>);</span><br><span class="line">        list.insertAtHead(<span class="number">5</span>);</span><br><span class="line">        list.display();  <span class="comment">// 输出: 5 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        list.insertAtPosition(<span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line">        list.display();  <span class="comment">// 输出: 5 -&gt; 10 -&gt; 15 -&gt; 20 -&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        list.delete(<span class="number">15</span>);</span><br><span class="line">        list.display();  <span class="comment">// 输出: 5 -&gt; 10 -&gt; 20 -&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;查找结果: &quot;</span> + list.search(<span class="number">20</span>));  <span class="comment">// 输出: 查找结果: true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度: &quot;</span> + list.size());      <span class="comment">// 输出: 链表长度: 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ol><li><strong>动态大小</strong>：链表可以根据需要动态分配内存，不需要预先定义大小</li><li><strong>插入和删除高效</strong>：在已知位置插入或删除节点的时间复杂度为O(1)</li><li><strong>内存利用灵活</strong>：不需要连续的内存空间，可以充分利用可用内存</li><li><strong>实现简单</strong>：基本操作实现相对简单直观</li></ol><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol><li><strong>随机访问低效</strong>：无法像数组那样通过索引直接访问元素，必须从头开始遍历</li><li><strong>额外内存开销</strong>：每个节点除了存储数据外，还需要存储指针，增加了内存消耗</li><li><strong>缓存不友好</strong>：由于内存不连续，不能有效利用CPU缓存，可能导致性能下降</li><li><strong>反向遍历困难</strong>：单向链表不支持反向遍历</li></ol><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>历史记录</strong></li><li><strong>撤销功能</strong>：编辑器的撤销操作实现</li><li><strong>合适的插入/删除场景</strong>：需要频繁在数据结构中间插入或删除元素的场景</li><li><strong>作为其他数据结构的基础</strong></li></ol><h4 id="扩展：双向链表和循环链表"><a href="#扩展：双向链表和循环链表" class="headerlink" title="扩展：双向链表和循环链表"></a>扩展：双向链表和循环链表</h4><p>单向链表的一个主要缺点是只能从头到尾遍历。为了克服这个限制，有两种常见的链表变种：</p><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p>双向链表中的每个节点有两个指针：一个指向下一个节点，一个指向前一个节点。这使得链表可以双向遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublyNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    DoublyNode next;</span><br><span class="line">    DoublyNode prev;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoublyNode</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h5><p>循环链表是一种特殊的链表，其最后一个节点的指针不是null，而是指向头节点，形成一个环。循环链表可以是单向的或双向的。</p><h4 id="测验-2"><a href="#测验-2" class="headerlink" title="测验"></a>测验</h4><p>1）如果要在单向链表中找到倒数第k个节点，最简单的方法是什么？需要几次遍历？</p><p>2）如何判断一个单向链表中是否包含环（循环）？</p><p>3）编写一个算法反转单向链表。</p><p>4）如果有两个单链表，如何找到它们的交点（如果存在）？</p><h5 id="测验答案-1"><a href="#测验答案-1" class="headerlink" title="测验答案"></a>测验答案</h5><p>1）找到倒数第k个节点的方法：</p><ul><li>先遍历一次链表，获取链表长度n</li><li>再遍历一次，找到第(n-k+1)个节点</li><li>需要两次遍历</li></ul><p>另一种优化方法是使用快慢指针：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">findKthFromEnd</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || k &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Node</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快指针先走k步</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// k大于链表长度</span></span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快慢指针同时走，当快指针到达末尾时，慢指针指向倒数第k个节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）判断链表是否包含环，可以使用快慢指针（Floyd’s Cycle-Finding Algorithm）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Node</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;       <span class="comment">// 慢指针每次走一步</span></span><br><span class="line">        fast = fast.next.next;  <span class="comment">// 快指针每次走两步</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果存在环，快慢指针最终会相遇</span></span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）反转单向链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        next = current.next;  <span class="comment">// 暂存下一个节点</span></span><br><span class="line">        current.next = prev;  <span class="comment">// 反转当前节点的指针</span></span><br><span class="line">        prev = current;       <span class="comment">// 向前移动prev</span></span><br><span class="line">        current = next;       <span class="comment">// 向前移动current</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    head = prev;  <span class="comment">// 更新头节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、双端队列"><a href="#四、双端队列" class="headerlink" title="四、双端队列"></a>四、双端队列</h3><p>一种特殊的队列，允许在两端（前端和后端）进行元素的插入和删除操作，它结合了栈和队列的特性</p><h5 id="算法讲解-3"><a href="#算法讲解-3" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="双端队列-Deque"><a href="#双端队列-Deque" class="headerlink" title="双端队列(Deque)"></a>双端队列(Deque)</h4><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>双端队列（Double-ended queue，简称Deque）是一种特殊的队列，它允许在队列的两端（前端和后端）进行元素的插入和删除操作。与普通队列（只允许在一端插入，另一端删除）和栈（只允许在同一端插入和删除）不同，双端队列提供了更高的灵活性。</p><p><img src="https://bu.dusays.com/2025/09/26/68d69f9e3b20d.webp" alt="img"></p><p>双端队列可以被视为同时结合了栈和队列特性的数据结构，既可以作为栈使用（后进先出），也可以作为队列使用（先进先出）。</p><h4 id="核心特性-3"><a href="#核心特性-3" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>双向操作：可以在队列的两端执行插入和删除操作</li><li>灵活性：可以同时实现栈和队列的功能</li><li>动态大小：大多数实现允许大小动态增长</li><li>高效的首尾操作：在两端进行的操作通常具有O(1)的时间复杂度</li><li>中间访问受限：通常不支持高效的随机访问</li></ol><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-在前端添加元素-addFirst-offerFirst"><a href="#1-在前端添加元素-addFirst-offerFirst" class="headerlink" title="1. 在前端添加元素(addFirst/offerFirst)"></a>1. 在前端添加元素(addFirst/offerFirst)</h5><ul><li>时间复杂度：O(1)</li><li>描述：将元素添加到双端队列的前端</li></ul><h5 id="2-在后端添加元素-addLast-offerLast"><a href="#2-在后端添加元素-addLast-offerLast" class="headerlink" title="2. 在后端添加元素(addLast/offerLast)"></a>2. 在后端添加元素(addLast/offerLast)</h5><ul><li>时间复杂度：O(1)</li><li>描述：将元素添加到双端队列的后端</li></ul><h5 id="3-从前端删除元素-removeFirst-pollFirst"><a href="#3-从前端删除元素-removeFirst-pollFirst" class="headerlink" title="3. 从前端删除元素(removeFirst/pollFirst)"></a>3. 从前端删除元素(removeFirst/pollFirst)</h5><ul><li>时间复杂度：O(1)</li><li>描述：移除并返回双端队列前端的元素</li></ul><h5 id="4-从后端删除元素-removeLast-pollLast"><a href="#4-从后端删除元素-removeLast-pollLast" class="headerlink" title="4. 从后端删除元素(removeLast/pollLast)"></a>4. 从后端删除元素(removeLast/pollLast)</h5><ul><li>时间复杂度：O(1)</li><li>描述：移除并返回双端队列后端的元素</li></ul><h5 id="5-查看前端元素-getFirst-peekFirst"><a href="#5-查看前端元素-getFirst-peekFirst" class="headerlink" title="5. 查看前端元素(getFirst/peekFirst)"></a>5. 查看前端元素(getFirst/peekFirst)</h5><ul><li>时间复杂度：O(1)</li><li>描述：获取但不移除双端队列前端的元素</li></ul><h5 id="6-查看后端元素-getLast-peekLast"><a href="#6-查看后端元素-getLast-peekLast" class="headerlink" title="6. 查看后端元素(getLast/peekLast)"></a>6. 查看后端元素(getLast/peekLast)</h5><ul><li>时间复杂度：O(1)</li><li>描述：获取但不移除双端队列后端的元素</li></ul><h5 id="7-检查队列是否为空-isEmpty"><a href="#7-检查队列是否为空-isEmpty" class="headerlink" title="7. 检查队列是否为空(isEmpty)"></a>7. 检查队列是否为空(isEmpty)</h5><ul><li>时间复杂度：O(1)</li><li>描述：判断双端队列是否不包含元素</li></ul><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DequeExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建双端队列</span></span><br><span class="line">        Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在前端添加元素</span></span><br><span class="line">        deque.addFirst(<span class="number">10</span>);</span><br><span class="line">        deque.offerFirst(<span class="number">20</span>);  <span class="comment">// 优先使用offer方法，不会抛异常</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在后端添加元素</span></span><br><span class="line">        deque.addLast(<span class="number">30</span>);</span><br><span class="line">        deque.offerLast(<span class="number">40</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;双端队列: &quot;</span> + deque);  <span class="comment">// 输出: [20, 10, 30, 40]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看前端元素（不移除）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> deque.peekFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;前端元素: &quot;</span> + first);  <span class="comment">// 输出: 20</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看后端元素（不移除）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> deque.peekLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;后端元素: &quot;</span> + last);  <span class="comment">// 输出: 40</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从前端移除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedFirst</span> <span class="operator">=</span> deque.pollFirst();</span><br><span class="line">        System.out.println(<span class="string">&quot;从前端移除: &quot;</span> + removedFirst);  <span class="comment">// 输出: 20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从后端移除元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removedLast</span> <span class="operator">=</span> deque.pollLast();</span><br><span class="line">        System.out.println(<span class="string">&quot;从后端移除: &quot;</span> + removedLast);  <span class="comment">// 输出: 40</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最终双端队列: &quot;</span> + deque);  <span class="comment">// 输出: [10, 30]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用双端队列作为栈</span></span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        stack.push(<span class="number">50</span>);  <span class="comment">// 等同于addFirst()</span></span><br><span class="line">        stack.push(<span class="number">60</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;栈顶元素: &quot;</span> + stack.peek());  <span class="comment">// 输出: 60</span></span><br><span class="line">        System.out.println(<span class="string">&quot;弹出元素: &quot;</span> + stack.pop());  <span class="comment">// 输出: 60</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ol><li><strong>灵活性高</strong>：可以同时进行栈和队列的操作</li><li><strong>两端操作高效</strong>：在两端的添加和删除操作时间复杂度为O(1)</li><li><strong>动态适应不同场景</strong>：可以根据需求作为栈或队列使用</li><li><strong>实现滑动窗口</strong>：特别适合需要从两端操作的滑动窗口算法</li></ol><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ol><li><strong>实现复杂</strong>：比普通队列或栈的实现更复杂</li><li><strong>中间操作低效</strong>：随机访问或中间位置的操作效率较低</li><li><strong>内存占用</strong>：某些实现（如链表实现）需要额外的存储空间</li><li><strong>不适合随机访问</strong>：不支持高效的随机访问，只擅长两端操作</li></ol><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>工作窃取算法</strong>：多线程任务调度中的工作窃取</li><li><strong>浏览器历史</strong>：前进和后退功能</li><li><strong>撤销/重做功能</strong>：编辑器中的操作历史</li><li><strong>输入缓冲</strong>：用于字符流处理</li><li><strong>滑动窗口问题</strong>：维护固定大小的窗口</li><li><strong>算法优化</strong>：BFS、图算法等中的辅助数据结构</li><li><strong>缓存实现</strong>：特定类型的缓存策略</li></ol><h4 id="扩展：双端队列的实现方式"><a href="#扩展：双端队列的实现方式" class="headerlink" title="扩展：双端队列的实现方式"></a>扩展：双端队列的实现方式</h4><h5 id="1-基于数组的实现"><a href="#1-基于数组的实现" class="headerlink" title="1. 基于数组的实现"></a>1. 基于数组的实现</h5><p>使用循环数组实现双端队列，需要维护前端和后端两个指针，并在边界条件下进行循环操作。优点是空间利用率高，缺点是需要预先分配固定大小的空间。</p><h5 id="2-基于链表的实现"><a href="#2-基于链表的实现" class="headerlink" title="2. 基于链表的实现"></a>2. 基于链表的实现</h5><p>使用双向链表实现双端队列，每个节点包含前驱和后继指针。这种实现的优点是可以动态调整大小，不需要预先分配空间；缺点是每个元素需要额外空间存储指针，且内存不连续。</p><h5 id="3-混合实现"><a href="#3-混合实现" class="headerlink" title="3. 混合实现"></a>3. 混合实现</h5><p>有些实现，如Java的ArrayDeque，使用分段数组等技术优化性能，结合了数组和链表的优点。</p><h4 id="测验-3"><a href="#测验-3" class="headerlink" title="测验"></a>测验</h4><p>1）双端队列与普通队列的主要区别是什么？</p><p>2）若使用双端队列实现栈，应该使用哪些操作方法？</p><p>3）双端队列在两端操作的时间复杂度是多少？</p><blockquote><p>测验答案</p><p>1）双端队列允许在队列的两端（前端和后端）进行元素的插入和删除操作，而普通队列只允许在一端（后端）插入元素，在另一端（前端）删除元素。双端队列更加灵活，既可以用作栈，也可以用作队列。</p><p>2）使用双端队列实现栈只使用前端（或只使用后端）的操作方法，即：</p><ul><li>压栈：addFirst()/offerFirst()或addLast()/offerLast()</li><li>出栈：removeFirst()/pollFirst()或removeLast()/pollLast()</li><li>查看栈顶：peekFirst()或peekLast()</li></ul><p>3）时间复杂度为O(1)。</p></blockquote><h3 id="五、双向链表"><a href="#五、双向链表" class="headerlink" title="五、双向链表"></a>五、双向链表</h3><p>双向链表是一种线性数据结构，其中每个节点包含数据和指向前一个与后一个节点的指针。支持双向遍历，适用于需要双向操作的场景。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-4"><a href="#算法讲解-4" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="双向链表-Doubly-Linked-List"><a href="#双向链表-Doubly-Linked-List" class="headerlink" title="双向链表(Doubly Linked List)"></a>双向链表(Doubly Linked List)</h4><h5 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h5><p>双向链表是链表的一种变体，其中每个节点包含三个部分：数据域、前向指针和后向指针。前向指针指向前一个节点，后向指针指向后一个节点。这种结构使得链表可以从两个方向进行遍历，增加了灵活性。</p><p><img src="https://bu.dusays.com/2025/09/26/68d6a02c587ed.webp" alt="img"></p><p>与单向链表相比，双向链表支持双向遍历，并且在某些操作上更高效，例如删除给定节点或在特定节点前插入新节点。双向链表的头结点的前向指针和尾节点的后向指针通常指向null，表示链表的边界。</p><h4 id="核心特性-4"><a href="#核心特性-4" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>双向遍历：可以从前向后或从后向前遍历链表</li><li>两个指针：每个节点有指向前一个和后一个节点的指针</li><li>动态大小：可以根据需要动态增长和缩小</li><li>非连续存储：节点在内存中分散存储，通过指针相连</li></ol><h4 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-访问元素-2"><a href="#1-访问元素-2" class="headerlink" title="1. 访问元素"></a>1. 访问元素</h5><ul><li>时间复杂度：O(n)</li><li>说明：必须从头节点或尾节点开始遍历直到找到目标节点</li></ul><h5 id="2-插入操作"><a href="#2-插入操作" class="headerlink" title="2. 插入操作"></a>2. 插入操作</h5><ul><li>头部插入：O(1)</li><li>尾部插入：O(1)</li><li>中间插入：O(n)查找位置 + O(1)插入操作</li></ul><h5 id="3-删除操作"><a href="#3-删除操作" class="headerlink" title="3. 删除操作"></a>3. 删除操作</h5><ul><li>头部删除：O(1)</li><li>尾部删除：O(1)（如果维护了尾指针）</li><li>中间删除：O(n)查找位置 + O(1)删除操作</li><li>给定节点删除：O(1)，无需查找其前驱节点</li></ul><h5 id="4-查找元素"><a href="#4-查找元素" class="headerlink" title="4. 查找元素"></a>4. 查找元素</h5><ul><li>时间复杂度：O(n)</li><li>可以根据查找目标的位置选择从头部或尾部开始查找</li></ul><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 定义节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> data;       <span class="comment">// 数据域</span></span><br><span class="line">    Node next;      <span class="comment">// 指向下一个节点的指针</span></span><br><span class="line">    Node prev;      <span class="comment">// 指向前一个节点的指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向链表类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoublyLinkedList</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Node head;  <span class="comment">// 头节点</span></span><br><span class="line">    <span class="keyword">private</span> Node tail;  <span class="comment">// 尾节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;   <span class="comment">// 链表大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数，创建一个空链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoublyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断链表是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取链表大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表头部插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtHead</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode.next = head;</span><br><span class="line">            head.prev = newNode;</span><br><span class="line">            head = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表尾部插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtTail</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            head = newNode;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = newNode;</span><br><span class="line">            newNode.prev = tail;</span><br><span class="line">            tail = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在指定位置插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtPosition</span><span class="params">(<span class="type">int</span> data, <span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 位置无效</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; size) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;位置无效&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入位置为0，相当于在头部插入</span></span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">            insertAtHead(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入位置为size，相当于在尾部插入</span></span><br><span class="line">        <span class="keyword">if</span> (position == size) &#123;</span><br><span class="line">            insertAtTail(data);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入到中间位置</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">        <span class="comment">// 判断从头部还是尾部遍历更快</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt;= size / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 从头部遍历</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在current之前插入新节点</span></span><br><span class="line">            newNode.prev = current.prev;</span><br><span class="line">            newNode.next = current;</span><br><span class="line">            current.prev.next = newNode;</span><br><span class="line">            current.prev = newNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 从尾部遍历</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> tail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; position; i--) &#123;</span><br><span class="line">                current = current.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在current之前插入新节点</span></span><br><span class="line">            newNode.prev = current.prev;</span><br><span class="line">            newNode.next = current;</span><br><span class="line">            current.prev.next = newNode;</span><br><span class="line">            current.prev = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除头节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            <span class="comment">// 只有一个节点</span></span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">            head.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除尾节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">            <span class="comment">// 只有一个节点</span></span><br><span class="line">            head = <span class="literal">null</span>;</span><br><span class="line">            tail = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail = tail.prev;</span><br><span class="line">            tail.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除指定位置的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtPosition</span><span class="params">(<span class="type">int</span> position)</span> &#123;</span><br><span class="line">        <span class="comment">// 位置无效</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt;= size) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;位置无效&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除头节点</span></span><br><span class="line">        <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</span><br><span class="line">            deleteHead();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (position == size - <span class="number">1</span>) &#123;</span><br><span class="line">            deleteTail();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除中间节点</span></span><br><span class="line">        <span class="comment">// 判断从头部还是尾部遍历更快</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt;= size / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 从头部遍历</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; position; i++) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.prev.next = current.next;</span><br><span class="line">            current.next.prev = current.prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 从尾部遍历</span></span><br><span class="line">            <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> tail;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; position; i--) &#123;</span><br><span class="line">                current = current.prev;</span><br><span class="line">            &#125;</span><br><span class="line">            current.prev.next = current.next;</span><br><span class="line">            current.next.prev = current.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除第一个值为data的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空，无法删除&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除的是头节点</span></span><br><span class="line">        <span class="keyword">if</span> (head.data == data) &#123;</span><br><span class="line">            deleteHead();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除的是尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (tail.data == data) &#123;</span><br><span class="line">            deleteTail();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除的是中间节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span> &amp;&amp; current != tail) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">                current.prev.next = current.next;</span><br><span class="line">                current.next.prev = current.prev;</span><br><span class="line">                size--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;未找到要删除的元素&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (current.data == data) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从头到尾打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayForward</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">        System.out.print(<span class="string">&quot;null &lt;- &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(current.data);</span><br><span class="line">            <span class="keyword">if</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &lt;-&gt; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从尾到头打印链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">displayBackward</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> tail;</span><br><span class="line">        System.out.print(<span class="string">&quot;null &lt;- &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(current.data);</span><br><span class="line">            <span class="keyword">if</span> (current.prev != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &lt;-&gt; &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoublyLinkedListDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DoublyLinkedList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>();</span><br><span class="line">        </span><br><span class="line">        list.insertAtTail(<span class="number">10</span>);</span><br><span class="line">        list.insertAtTail(<span class="number">20</span>);</span><br><span class="line">        list.insertAtTail(<span class="number">30</span>);</span><br><span class="line">        list.insertAtHead(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;从头到尾打印：&quot;</span>);</span><br><span class="line">        list.displayForward();  <span class="comment">// 输出: null &lt;- 5 &lt;-&gt; 10 &lt;-&gt; 20 &lt;-&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;从尾到头打印：&quot;</span>);</span><br><span class="line">        list.displayBackward(); <span class="comment">// 输出: null &lt;- 30 &lt;-&gt; 20 &lt;-&gt; 10 &lt;-&gt; 5 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        list.insertAtPosition(<span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;插入15到位置2后：&quot;</span>);</span><br><span class="line">        list.displayForward();  <span class="comment">// 输出: null &lt;- 5 &lt;-&gt; 10 &lt;-&gt; 15 &lt;-&gt; 20 &lt;-&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        list.delete(<span class="number">15</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除15后：&quot;</span>);</span><br><span class="line">        list.displayForward();  <span class="comment">// 输出: null &lt;- 5 &lt;-&gt; 10 &lt;-&gt; 20 &lt;-&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;查找结果: &quot;</span> + list.search(<span class="number">20</span>));  <span class="comment">// 输出: 查找结果: true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;链表长度: &quot;</span> + list.size());      <span class="comment">// 输出: 链表长度: 4</span></span><br><span class="line">        </span><br><span class="line">        list.deleteHead();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除头节点后：&quot;</span>);</span><br><span class="line">        list.displayForward();  <span class="comment">// 输出: null &lt;- 10 &lt;-&gt; 20 &lt;-&gt; 30 -&gt; null</span></span><br><span class="line">        </span><br><span class="line">        list.deleteTail();</span><br><span class="line">        System.out.println(<span class="string">&quot;删除尾节点后：&quot;</span>);</span><br><span class="line">        list.displayForward();  <span class="comment">// 输出: null &lt;- 10 &lt;-&gt; 20 -&gt; null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h5><ol><li><strong>双向遍历</strong>：可以从前向后或从后向前遍历，增加了灵活性</li><li><strong>某些操作更快</strong>：如果位置靠近尾部，可以从尾部开始遍历，提高效率</li><li><strong>实现更多操作</strong>：如反向遍历、直接访问前驱节点等单向链表难以实现的操作</li></ol><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ol><li><strong>内存开销大</strong>：每个节点需要额外存储一个指针，增加了内存消耗</li><li><strong>实现复杂</strong>：相比单向链表，实现和维护更复杂</li><li><strong>操作更慢</strong>：插入和删除需要处理更多的指针关系，稍微增加了操作的复杂度</li><li><strong>不适合内存受限环境</strong>：因为每个节点占用更多内存</li></ol><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>浏览器历史记录</strong>：前进和后退功能</li><li><strong>双向迭代器</strong>：需要双向遍历的集合数据结构</li><li><strong>文本编辑器</strong>：光标移动和文本编辑</li><li><strong>撤销/重做功能</strong>：应用中的操作历史管理</li><li><strong>音乐播放器</strong>：上一首/下一首歌曲导航</li></ol><h4 id="扩展：循环双向链表"><a href="#扩展：循环双向链表" class="headerlink" title="扩展：循环双向链表"></a>扩展：循环双向链表</h4><p>循环双向链表是双向链表的变种，尾节点的后向指针指向头节点，头节点的前向指针指向尾节点，形成一个环。这种结构的链表没有明确的开始和结束点，可以从任何节点开始遍历整个链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环双向链表的实现修改</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertAtHead</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        head = newNode;</span><br><span class="line">        tail = newNode;</span><br><span class="line">        <span class="comment">// 形成循环</span></span><br><span class="line">        head.next = head;</span><br><span class="line">        head.prev = head;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newNode.next = head;</span><br><span class="line">        newNode.prev = tail;</span><br><span class="line">        head.prev = newNode;</span><br><span class="line">        tail.next = newNode;</span><br><span class="line">        head = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他方法也需要相应调整...</span></span><br></pre></td></tr></table></figure><h4 id="测验-4"><a href="#测验-4" class="headerlink" title="测验"></a>测验</h4><p>1）如何检测双向链表中是否存在环（循环）？</p><p>2）如何在不使用额外空间的情况下翻转一个双向链表？</p><p>3）如何合并两个已排序的双向链表，且保证结果仍然有序？</p><p>4）如何实现一个双向链表的中间节点查找，要求只遍历一次链表？</p><h5 id="测验答案-2"><a href="#测验答案-2" class="headerlink" title="测验答案"></a>测验答案</h5><p>1）检测双向链表中是否存在环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty() || size &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在正确的双向链表中，每个节点的next.prev应该等于自己</span></span><br><span class="line">    <span class="comment">// 如果存在环，可能会出现不一致</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current.next != <span class="literal">null</span> &amp;&amp; current.next.prev != current) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current = current.next;</span><br><span class="line">        <span class="comment">// 如果回到了头节点，说明存在循环</span></span><br><span class="line">        <span class="keyword">if</span> (current == head) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）翻转双向链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty() || size == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换每个节点的前向和后向指针</span></span><br><span class="line">    <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 保存下一个节点</span></span><br><span class="line">        temp = current.next;</span><br><span class="line">        <span class="comment">// 交换当前节点的前向和后向指针</span></span><br><span class="line">        current.next = current.prev;</span><br><span class="line">        current.prev = temp;</span><br><span class="line">        <span class="comment">// 如果前一个节点为null，当前节点将成为新的尾节点</span></span><br><span class="line">        <span class="keyword">if</span> (current.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            tail = current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 移动到下一个节点</span></span><br><span class="line">        current = temp;</span><br><span class="line">        <span class="comment">// 如果到达原始链表的头部，当前节点将成为新的头节点</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span> &amp;&amp; temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            head = temp.prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换头尾节点</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">oldHead</span> <span class="operator">=</span> head;</span><br><span class="line">    head = tail;</span><br><span class="line">    tail = oldHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）合并两个有序双向链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> DoublyLinkedList <span class="title function_">mergeSortedLists</span><span class="params">(DoublyLinkedList list1, DoublyLinkedList list2)</span> &#123;</span><br><span class="line">    <span class="type">DoublyLinkedList</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoublyLinkedList</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="type">Node</span> <span class="variable">current1</span> <span class="operator">=</span> list1.head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">current2</span> <span class="operator">=</span> list2.head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 比较两个链表的节点，将较小的加入结果链表</span></span><br><span class="line">    <span class="keyword">while</span> (current1 != <span class="literal">null</span> &amp;&amp; current2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (current1.data &lt;= current2.data) &#123;</span><br><span class="line">            result.insertAtTail(current1.data);</span><br><span class="line">            current1 = current1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.insertAtTail(current2.data);</span><br><span class="line">            current2 = current2.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将剩余节点加入结果链表</span></span><br><span class="line">    <span class="keyword">while</span> (current1 != <span class="literal">null</span>) &#123;</span><br><span class="line">        result.insertAtTail(current1.data);</span><br><span class="line">        current1 = current1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (current2 != <span class="literal">null</span>) &#123;</span><br><span class="line">        result.insertAtTail(current2.data);</span><br><span class="line">        current2 = current2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）查找中间节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node <span class="title function_">findMiddleNode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (head == tail) &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用快慢指针</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快指针每次走两步，慢指针每次走一步</span></span><br><span class="line">    <span class="comment">// 当快指针到达尾部时，慢指针就在中间</span></span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、栈"><a href="#六、栈" class="headerlink" title="六、栈"></a>六、栈</h3><p>栈是一种遵循后进先出(LIFO)原则的线性数据结构。只允许在一端（栈顶）进行插入和删除操作。适用于需要回溯的问题解决过程。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-5"><a href="#算法讲解-5" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h4><h5 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h5><p>栈是一种特殊的线性数据结构，遵循后进先出（Last-In-First-Out，LIFO）的原则。最后添加到栈中的元素将是第一个被移除的元素。可以将栈想象为一叠盘子，我们只能从顶部添加或移除盘子。</p><p><img src="https://bu.dusays.com/2025/09/26/68d6a0b33638d.webp" alt="img"></p><p>栈的操作仅限于栈顶，即只能在一端进行插入和删除操作。</p><h4 id="核心特性-5"><a href="#核心特性-5" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>后进先出(LIFO)：最后入栈的元素最先出栈</li><li>只允许在栈顶操作：只能在一端进行插入（压栈）和删除（弹栈）</li><li>快速访问栈顶元素：O(1)时间复杂度访问、添加和删除栈顶元素</li><li>元素访问受限：无法直接访问栈中间元素</li></ol><h4 id="基本操作-4"><a href="#基本操作-4" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-入栈-push"><a href="#1-入栈-push" class="headerlink" title="1. 入栈(push)"></a>1. 入栈(push)</h5><ul><li>时间复杂度：O(1)</li><li>描述：将元素添加到栈顶</li></ul><h5 id="2-出栈-pop"><a href="#2-出栈-pop" class="headerlink" title="2. 出栈(pop)"></a>2. 出栈(pop)</h5><ul><li>时间复杂度：O(1)</li><li>描述：移除并返回栈顶元素</li></ul><h5 id="3-查看栈顶-peek"><a href="#3-查看栈顶-peek" class="headerlink" title="3. 查看栈顶(peek)"></a>3. 查看栈顶(peek)</h5><ul><li>时间复杂度：O(1)</li><li>描述：查看栈顶元素但不移除</li></ul><h5 id="4-判断栈是否为空-isEmpty"><a href="#4-判断栈是否为空-isEmpty" class="headerlink" title="4. 判断栈是否为空(isEmpty)"></a>4. 判断栈是否为空(isEmpty)</h5><ul><li>时间复杂度：O(1)</li><li>描述：检查栈中是否有元素</li></ul><h5 id="5-获取栈大小-size"><a href="#5-获取栈大小-size" class="headerlink" title="5. 获取栈大小(size)"></a>5. 获取栈大小(size)</h5><ul><li>时间复杂度：O(1)</li><li>描述：获取栈中元素的数量</li></ul><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建栈</span></span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 入栈</span></span><br><span class="line">        stack.push(<span class="number">10</span>);</span><br><span class="line">        stack.push(<span class="number">20</span>);</span><br><span class="line">        stack.push(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;栈: &quot;</span> + stack); <span class="comment">// 输出: [10, 20, 30]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看栈顶元素（不移除）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">topElement</span> <span class="operator">=</span> stack.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;栈顶元素: &quot;</span> + topElement); <span class="comment">// 输出: 30</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 出栈</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">poppedElement</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;弹出的元素: &quot;</span> + poppedElement); <span class="comment">// 输出: 30</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查栈是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> stack.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;栈是否为空: &quot;</span> + isEmpty); <span class="comment">// 输出: false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取栈大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;栈大小: &quot;</span> + size); <span class="comment">// 输出: 2</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最终栈: &quot;</span> + stack); <span class="comment">// 输出: [10, 20]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h5><ol><li>实现简单：栈的概念和实现都很简单直观</li><li>操作高效：所有基本操作的时间复杂度都是O(1)</li><li>内存管理：对于某些语言，会用于管理内存和跟踪函数调用</li></ol><h5 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h5><ol><li>访问限制：只能访问栈顶元素，无法直接访问中间元素</li><li>没有随机访问：获取中间元素需要先弹出上面所有元素</li><li>不适合频繁搜索：查找特定值的时间复杂度为O(n)</li></ol><h4 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>函数调用和递归：存储函数调用的返回地址和局部变量</li><li>表达式求值：处理中缀、前缀和后缀表达式</li><li>撤销操作：实现程序中的撤销功能</li><li>浏览器历史：实现浏览器的”后退”功能</li><li>深度优先搜索(DFS)：使用栈记录访问路径</li><li>内存分配：某些系统中使用栈来分配内存</li></ol><h4 id="扩展：单调栈"><a href="#扩展：单调栈" class="headerlink" title="扩展：单调栈"></a>扩展：单调栈</h4><p>单调栈是特殊的栈结构，保持栈中元素单调递增或递减。当新元素破坏栈的单调性时，会弹出栈顶元素直到满足单调性。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>以数组 [3,6,4,6,9,2] 构建单调递增栈的过程：</p><ol><li>初始栈为空 []</li><li>遇到3：入栈 → [3]</li><li>遇到6：大于栈顶，入栈 → [3,6]</li><li>遇到4：小于栈顶6，弹出6；4大于新栈顶3，入栈 → [3,4]</li><li>遇到6：大于栈顶，入栈 → [3,4,6]</li><li>遇到9：大于栈顶，入栈 → [3,4,6,9]</li><li>遇到2：小于栈顶，弹出9,6,4,3直至栈空；入栈 → [2]</li></ol><h4 id="测验-5"><a href="#测验-5" class="headerlink" title="测验"></a>测验</h4><ol><li>栈的主要特点是什么？</li><li>栈的push和pop操作的时间复杂度是多少？为什么？</li><li>栈和队列的主要区别是什么？</li><li>在Java中，Stack类继承自哪个类？这种设计有什么问题？</li></ol><blockquote><p>测验答案</p><ol><li>栈的主要特点是后进先出(LIFO)，即最后入栈的元素最先出栈。</li><li>都是O(1)。因为这些操作只在栈顶进行，不需要访问或移动其他元素。</li><li>栈遵循后进先出(LIFO)原则，而队列遵循先进先出(FIFO)原则。即，栈只允许在一端（栈顶）进行操作，而队列允许在一端（队尾）插入，另一端（队头）删除。</li><li>在Java中，Stack类继承自Vector类。Vector是一个列表实现，提供了随机访问等与栈原则不符的操作，破坏了栈的封装性。</li></ol></blockquote><h3 id="七、队列"><a href="#七、队列" class="headerlink" title="七、队列"></a>七、队列</h3><p>队列是一种遵循先进先出(FIFO)原则的线性数据结构。只允许在队尾进行插入操作，在队首进行删除操作。适用于需要按照到达顺序处理的问题。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-6"><a href="#算法讲解-6" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h4><h5 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h5><p>队列是一种特殊的线性数据结构，遵循先进先出（First-In-First-Out，FIFO）的原则。最先添加到队列中的元素将是第一个被移除的元素。可以将队列想象为排队购票的人群，先到的人先办理业务，后到的人排在队尾等待。</p><p><img src="https://bu.dusays.com/2025/09/26/68d6a12f93403.webp" alt="img"></p><p>队列的操作通常在两端进行：一端（队尾）只用来添加元素，另一端（队头）只用来删除元素。</p><h4 id="核心特性-6"><a href="#核心特性-6" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>先进先出(FIFO)：最先入队的元素最先出队</li><li>两端操作：在队尾添加元素，在队头删除元素</li><li>快速访问首尾元素：O(1)时间复杂度访问队头和队尾元素</li><li>元素访问受限：无法直接访问队列中间元素</li></ol><h4 id="基本操作-5"><a href="#基本操作-5" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-入队-enqueue"><a href="#1-入队-enqueue" class="headerlink" title="1. 入队(enqueue)"></a>1. 入队(enqueue)</h5><ul><li>时间复杂度：O(1)</li><li>描述：将元素添加到队列尾部</li></ul><h5 id="2-出队-dequeue"><a href="#2-出队-dequeue" class="headerlink" title="2. 出队(dequeue)"></a>2. 出队(dequeue)</h5><ul><li>时间复杂度：O(1)</li><li>描述：移除并返回队列头部元素</li></ul><h5 id="3-查看队头-peek-front"><a href="#3-查看队头-peek-front" class="headerlink" title="3. 查看队头(peek/front)"></a>3. 查看队头(peek/front)</h5><ul><li>时间复杂度：O(1)</li><li>描述：查看队头元素但不移除</li></ul><h5 id="4-判断队列是否为空-isEmpty"><a href="#4-判断队列是否为空-isEmpty" class="headerlink" title="4. 判断队列是否为空(isEmpty)"></a>4. 判断队列是否为空(isEmpty)</h5><ul><li>时间复杂度：O(1)</li><li>描述：检查队列中是否有元素</li></ul><h5 id="5-获取队列大小-size"><a href="#5-获取队列大小-size" class="headerlink" title="5. 获取队列大小(size)"></a>5. 获取队列大小(size)</h5><ul><li>时间复杂度：O(1)</li><li>描述：获取队列中元素的数量</li></ul><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">        #### 使用Java内置的Queue接口</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建队列（使用LinkedList实现）</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 入队</span></span><br><span class="line">        queue.offer(<span class="number">10</span>);</span><br><span class="line">        queue.offer(<span class="number">20</span>);</span><br><span class="line">        queue.offer(<span class="number">30</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;队列: &quot;</span> + queue); <span class="comment">// 输出: [10, 20, 30]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看队头元素（不移除）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">frontElement</span> <span class="operator">=</span> queue.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;队头元素: &quot;</span> + frontElement); <span class="comment">// 输出: 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 出队</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">dequeuedElement</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;出队的元素: &quot;</span> + dequeuedElement); <span class="comment">// 输出: 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查队列是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> queue.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">&quot;队列是否为空: &quot;</span> + isEmpty); <span class="comment">// 输出: false</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取队列大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;队列大小: &quot;</span> + size); <span class="comment">// 输出: 2</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最终队列: &quot;</span> + queue); <span class="comment">// 输出: [20, 30]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h5><ol><li>实现简单：队列的概念和实现都很简单直观</li><li>操作高效：基本操作的时间复杂度都是O(1)</li><li>有序处理：保证元素按照添加的顺序处理</li><li>适合数据流处理：适用于需要按顺序处理数据的场景</li></ol><h5 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h5><ol><li>访问限制：只能访问队头和队尾元素，无法直接访问中间元素</li><li>移除元素受限：只能按先进先出的顺序移除元素</li><li>不适合随机访问：获取中间元素需要先出队前面所有元素</li></ol><h4 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>任务调度：操作系统中的进程调度</li><li>消息队列：分布式系统中的消息传递</li><li>缓冲区管理：I/O操作中的数据缓冲</li><li>广度优先搜索(BFS)：图算法中使用队列存储待访问的节点</li><li>打印任务管理：打印机任务队列</li><li>网络数据包处理：网络设备中数据包的处理顺序</li></ol><h4 id="测验-6"><a href="#测验-6" class="headerlink" title="测验"></a>测验</h4><ol><li>队列的主要特点是什么？</li><li>队列的enqueue和dequeue操作的时间复杂度是多少？</li><li>与栈相比，队列的主要区别是什么？</li></ol><blockquote><p>测验答案</p><ol><li><h4 id="队列的主要特点是先进先出-FIFO-，即最先入队的元素最先出队。"><a href="#队列的主要特点是先进先出-FIFO-，即最先入队的元素最先出队。" class="headerlink" title="队列的主要特点是先进先出(FIFO)，即最先入队的元素最先出队。"></a>队列的主要特点是先进先出(FIFO)，即最先入队的元素最先出队。</h4></li><li><p>都是O(1)。在使用链表或正确实现的数组（循环队列）的情况下，这些操作都是常数时间的。</p></li><li><p>队列遵循先进先出(FIFO)原则，而栈遵循后进先出(LIFO)原则。队列在两端操作（一端入队，另一端出队），而栈只在一端（栈顶）操作。</p></li></ol></blockquote><h3 id="八、循环队列"><a href="#八、循环队列" class="headerlink" title="八、循环队列"></a>八、循环队列</h3><p>循环队列是一种特殊的队列，它的首尾相连，形成一个环。通过使用固定大小的数组和两个指针（front和rear）来实现。当队尾指针到达数组末尾时，它会绕回到数组开始位置，从而有效利用空间。</p><p><code>空间复杂度:O(n) - 固定大小</code></p><h5 id="算法讲解-7"><a href="#算法讲解-7" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="循环队列-Circular-Queue"><a href="#循环队列-Circular-Queue" class="headerlink" title="循环队列(Circular Queue)"></a>循环队列(Circular Queue)</h4><h5 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h5><p>循环队列是队列的一种变体，采用环形结构设计，解决了普通队列在数组实现中的”假溢出”问题。在普通队列中，随着元素的入队和出队，队头指针不断后移，会导致队列前部空间无法重复利用。而循环队列通过将队列的头尾相连，形成一个环形结构，可以重复利用这些空间。</p><p><img src="https://bu.dusays.com/2025/09/26/68d6a18e165ec.webp" alt="img"></p><p>循环队列一般用数组实现，通过两个指针（队头和队尾）和一些简单的计算来模拟循环结构。</p><h4 id="核心特性-7"><a href="#核心特性-7" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>环形结构：当到达数组末尾时，下一个位置回到数组开头</li><li>空间重用：出队后的空间可以在后续入队操作中重复使用</li><li>高效的内存利用：避免了普通队列实现中的”假溢出”问题</li><li>固定大小：初始化时指定容量，一般不支持动态扩容</li><li>双指针管理：用front和rear指针跟踪队列状态</li></ul><h4 id="基本操作-6"><a href="#基本操作-6" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-入队-enqueue-1"><a href="#1-入队-enqueue-1" class="headerlink" title="1. 入队(enqueue)"></a>1. 入队(enqueue)</h5><ul><li>时间复杂度：O(1)</li><li>描述：将元素添加到队列尾部，并更新尾指针</li></ul><h5 id="2-出队-dequeue-1"><a href="#2-出队-dequeue-1" class="headerlink" title="2. 出队(dequeue)"></a>2. 出队(dequeue)</h5><ul><li>时间复杂度：O(1)</li><li>描述：移除并返回队列头部元素，并更新头指针</li></ul><h5 id="3-查看队头-peek-front-1"><a href="#3-查看队头-peek-front-1" class="headerlink" title="3. 查看队头(peek/front)"></a>3. 查看队头(peek/front)</h5><ul><li>时间复杂度：O(1)</li><li>描述：查看队头元素但不移除</li></ul><h5 id="4-判断队列是否为空-isEmpty-1"><a href="#4-判断队列是否为空-isEmpty-1" class="headerlink" title="4. 判断队列是否为空(isEmpty)"></a>4. 判断队列是否为空(isEmpty)</h5><ul><li>时间复杂度：O(1)</li><li>描述：检查队列中是否有元素</li></ul><h5 id="5-判断队列是否已满-isFull"><a href="#5-判断队列是否已满-isFull" class="headerlink" title="5. 判断队列是否已满(isFull)"></a>5. 判断队列是否已满(isFull)</h5><ul><li>时间复杂度：O(1)</li><li>描述：检查队列是否已达到最大容量</li></ul><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CircularQueue</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front; <span class="comment">// 队头指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rear;  <span class="comment">// 队尾指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;  <span class="comment">// 当前元素数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CircularQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.array = <span class="keyword">new</span> <span class="title class_">Object</span>[capacity];</span><br><span class="line">        <span class="built_in">this</span>.front = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.rear = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">enqueue</span><span class="params">(T item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 队列已满</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        array[rear] = item;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % capacity; <span class="comment">// 循环更新尾指针</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">dequeue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 队列为空</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">T</span> <span class="variable">item</span> <span class="operator">=</span> (T) array[front];</span><br><span class="line">        array[front] = <span class="literal">null</span>; <span class="comment">// 避免内存泄漏</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % capacity; <span class="comment">// 循环更新头指针</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查看队头元素</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> (T) array[front];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断队列是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断队列是否已满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == capacity;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队列当前大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CircularQueue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">CircularQueue</span>&lt;&gt;(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 入队操作</span></span><br><span class="line">        queue.enqueue(<span class="number">10</span>);</span><br><span class="line">        queue.enqueue(<span class="number">20</span>);</span><br><span class="line">        queue.enqueue(<span class="number">30</span>);</span><br><span class="line">        queue.enqueue(<span class="number">40</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;队列大小: &quot;</span> + queue.size()); <span class="comment">// 输出: 4</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队头元素: &quot;</span> + queue.peek());  <span class="comment">// 输出: 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 出队操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;出队元素: &quot;</span> + queue.dequeue()); <span class="comment">// 输出: 10</span></span><br><span class="line">        System.out.println(<span class="string">&quot;出队元素: &quot;</span> + queue.dequeue()); <span class="comment">// 输出: 20</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 继续入队，演示循环利用空间</span></span><br><span class="line">        queue.enqueue(<span class="number">50</span>);</span><br><span class="line">        queue.enqueue(<span class="number">60</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;队列是否已满: &quot;</span> + queue.isFull()); <span class="comment">// 输出: true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;队列大小: &quot;</span> + queue.size());      <span class="comment">// 输出: 4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-6"><a href="#优缺点-6" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-7"><a href="#优点-7" class="headerlink" title="优点"></a>优点</h5><ol><li>高效空间利用：可以重用已出队的空间，避免”假溢出”问题</li><li>固定内存开销：内存使用量可预测，适合内存受限环境</li><li>操作高效：所有基本操作都是O(1)时间复杂度</li><li>实现简单：比链表实现的队列更简单，内存布局更紧凑</li></ol><h5 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h5><ol><li>固定大小：初始化后容量固定，不易动态调整</li><li>空间判断复杂：需要额外的计数或标记来区分队列满和空的状态</li><li>不支持随机访问：只能访问队头和队尾元素</li><li>内存分配低效：若设置过大可能造成内存浪费，过小则频繁溢出</li></ol><h4 id="应用场景-7"><a href="#应用场景-7" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>缓冲区实现：键盘缓冲、打印机队列等I/O操作</li><li>内存管理：操作系统中的内存页面置换算法</li><li>任务调度：嵌入式系统中的任务调度器</li><li>数据流处理：有界的生产者消费者模式</li><li>CPU调度：操作系统中的进程调度</li></ol><h4 id="测验-7"><a href="#测验-7" class="headerlink" title="测验"></a>测验</h4><ol><li>循环队列与普通队列的主要区别是什么？</li><li>在循环队列中，怎么判断队列是空还是满？</li><li>当循环队列的rear指针到达数组末尾时，下一个元素应该被放在哪里？</li><li>循环队列解决了什么问题？</li><li>在实现循环队列时，如何计算下一个位置的索引？</li></ol><blockquote><p>测验答案</p><ol><li>循环队列采用环形结构设计，可以重复利用出队后的空间，解决了普通队列在数组实现中的”假溢出”问题。</li><li>有多种方法：(1)使用一个额外的计数变量size来记录元素数量；(2)保持一个空位，当(rear+1)%capacity==front时队列满；(3)使用一个标志变量来区分。</li><li>应该被放在数组的开头(索引0)，这就是循环队列的环形特性。</li><li>循环队列解决了普通数组实现队列时的”假溢出”问题，即队列前部有空间但无法使用的情况。</li><li>使用取模运算：(current_index + 1) % capacity。这样当索引到达数组末尾时，会自动回到开头。</li></ol></blockquote><h3 id="九、优先队列"><a href="#九、优先队列" class="headerlink" title="九、优先队列"></a>九、优先队列</h3><p>优先队列是一种特殊的队列，其中每个元素都有一个优先级。高优先级的元素会比低优先级的元素先被处理。</p><h5 id="算法讲解-8"><a href="#算法讲解-8" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="优先队列-Priority-Queue"><a href="#优先队列-Priority-Queue" class="headerlink" title="优先队列(Priority Queue)"></a>优先队列(Priority Queue)</h4><h5 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h5><p>优先队列是一种特殊的队列，它不遵循先进先出的原则，而是根据元素的优先级来决定出队顺序。在优先队列中，不管元素的入队顺序如何，优先级高的元素会优先出队。</p><p>优先队列内部一般使用堆（二叉堆）来实现，方便高效地维护元素的优先级顺序。</p><p><img src="https://bu.dusays.com/2025/09/26/68d6a1e4375c3.webp" alt="img"></p><h4 id="核心特性-8"><a href="#核心特性-8" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>基于优先级出队：元素的出队顺序由优先级决定</li><li>自动排序：插入新元素后，队列会自动调整来维持优先级顺序</li><li>快速获取最高优先级元素：O(1)时间复杂度访问最高优先级元素</li><li>支持两种堆结构：最大堆（最大值优先）和最小堆（最小值优先）</li><li>动态维护：插入和删除操作后都会保持优先级有序</li></ul><h4 id="基本操作-7"><a href="#基本操作-7" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="入队-enqueue-insert"><a href="#入队-enqueue-insert" class="headerlink" title="入队(enqueue/insert)"></a>入队(enqueue/insert)</h5><ul><li>时间复杂度：O(log n)</li><li>描述：将元素添加到优先队列中，并根据优先级调整位置</li></ul><h5 id="出队-dequeue-extractMax-extractMin"><a href="#出队-dequeue-extractMax-extractMin" class="headerlink" title="出队(dequeue/extractMax/extractMin)"></a>出队(dequeue/extractMax/extractMin)</h5><ul><li>时间复杂度：O(log n)</li><li>描述：移除并返回优先级最高的元素</li></ul><h5 id="查看顶部元素-peek-top"><a href="#查看顶部元素-peek-top" class="headerlink" title="查看顶部元素(peek/top)"></a>查看顶部元素(peek/top)</h5><ul><li>时间复杂度：O(1)</li><li>描述：查看优先级最高的元素但不移除</li></ul><h5 id="判断队列是否为空-isEmpty"><a href="#判断队列是否为空-isEmpty" class="headerlink" title="判断队列是否为空(isEmpty)"></a>判断队列是否为空(isEmpty)</h5><ul><li>时间复杂度：O(1)</li><li>描述：检查优先队列中是否有元素</li></ul><h5 id="获取队列大小-size"><a href="#获取队列大小-size" class="headerlink" title="获取队列大小(size)"></a>获取队列大小(size)</h5><ul><li>时间复杂度：O(1)</li><li>描述：获取优先队列中元素的数量</li></ul><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建最小堆（默认）</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        minHeap.offer(<span class="number">30</span>);</span><br><span class="line">        minHeap.offer(<span class="number">10</span>);</span><br><span class="line">        minHeap.offer(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;优先队列: &quot;</span> + minHeap); <span class="comment">// 注意：打印顺序可能不是实际的优先级顺序</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查看最高优先级元素（最小值）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">highestPriority</span> <span class="operator">=</span> minHeap.peek();</span><br><span class="line">        System.out.println(<span class="string">&quot;最高优先级元素: &quot;</span> + highestPriority); <span class="comment">// 输出: 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 移除最高优先级元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">removed</span> <span class="operator">=</span> minHeap.poll();</span><br><span class="line">        System.out.println(<span class="string">&quot;移除的元素: &quot;</span> + removed); <span class="comment">// 输出: 10</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建最大堆（通过比较器）</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line">        </span><br><span class="line">        maxHeap.offer(<span class="number">30</span>);</span><br><span class="line">        maxHeap.offer(<span class="number">10</span>);</span><br><span class="line">        maxHeap.offer(<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最大堆顶部元素: &quot;</span> + maxHeap.peek()); <span class="comment">// 输出: 30</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-7"><a href="#优缺点-7" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-8"><a href="#优点-8" class="headerlink" title="优点"></a>优点</h5><ol><li>基于优先级处理：支持根据元素重要性决定处理顺序</li><li>高效的优先级维护：入队和出队操作的时间复杂度为O(log n)</li><li>灵活的优先级定义：可以通过比较器自定义元素的优先级规则</li><li>实现简单：基于堆的实现相对简单，比较容易理解</li></ol><h5 id="缺点-7"><a href="#缺点-7" class="headerlink" title="缺点"></a>缺点</h5><ol><li>操作复杂度较高：比普通队列的O(1)操作复杂度高</li><li>不保证FIFO顺序：相同优先级的元素不保证按照入队顺序出队</li><li>更新优先级困难：大多数实现不支持直接更新已存在元素的优先级</li><li>内存开销：通常比简单队列需要更多内存来维护堆结构</li></ol><h4 id="应用场景-8"><a href="#应用场景-8" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>任务调度：操作系统中基于优先级的进程调度</li><li>图算法：Dijkstra最短路径、Prim最小生成树等算法</li><li>贪心算法：需要每次选择最优元素的场景</li><li>事件驱动模拟：基于时间顺序处理事件</li><li>医疗急诊系统：病人分级处理</li><li>网络流量管理：QoS（服务质量）保证</li></ol><h4 id="测验-8"><a href="#测验-8" class="headerlink" title="测验"></a>测验</h4><ol><li>优先队列与普通队列的主要区别是什么？</li><li>基于二叉堆实现的优先队列中，入队操作的时间复杂度是多少？</li><li>在Java中，PriorityQueue默认是最小堆还是最大堆？如何创建最大堆？</li><li>什么是二叉堆？它有什么特性？</li></ol><blockquote><p>测验答案</p><ol><li>优先队列按照元素的优先级决定出队顺序.</li><li>入队操作的时间复杂度是O(log n)，因为需要进行上浮操作来维护堆。</li><li>Java中的PriorityQueue默认是最小堆。可以通过提供一个自定义的Comparator来创建最大堆，例如：<code>PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;&gt;(Comparator.reverseOrder());</code></li><li>二叉堆是一种特殊的完全二叉树，它有两种类型：最小堆（父节点值小于等于子节点）和最大堆（父节点值大于等于子节点）。它的特性包括：完全二叉树结构、父子节点间的大小关系、可以高效地找到最大/最小元素。</li></ol></blockquote><h2 id="树形结构"><a href="#树形结构" class="headerlink" title="树形结构"></a>树形结构</h2><h3 id="一、二叉树"><a href="#一、二叉树" class="headerlink" title="一、二叉树"></a>一、二叉树</h3><p>二叉树是一种树形数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。二叉树广泛应用于计算机科学中，用于实现搜索算法、排序算法和数据压缩等。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-9"><a href="#算法讲解-9" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="二叉树-Binary-Tree"><a href="#二叉树-Binary-Tree" class="headerlink" title="二叉树(Binary Tree)"></a>二叉树(Binary Tree)</h4><h5 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h5><p>二叉树是一种层次化的数据结构，每个节点最多有两个子节点，通常称为”左子节点”和”右子节点”。二叉树的这种特性使其成为表示层次关系的理想结构。与线性数据结构（如数组、链表）不同，二叉树是非线性的，能够更高效地表示和处理具有层次特性的数据。</p><p>二叉树中的核心概念包括：</p><ul><li>节点(Node): 树的基本单位，包含数据和指向子节点的引用</li><li>根节点(Root): 树的顶部节点，是整棵树的入口点</li><li>叶节点(Leaf): 没有子节点的节点</li><li>父节点(Parent): 有子节点的节点</li><li>子节点(Child): 某节点的直接后代</li><li>深度(Depth): 从根节点到特定节点的路径长度</li><li>高度(Height): 从特定节点到其最远叶节点的路径长度，空树的高度通常定义为 -1（有时也定义为0，取决于教材）。</li></ul><p><img src="https://bu.dusays.com/2025/09/26/68d6a27a0c767.webp" alt="img"></p><h4 id="核心特性-9"><a href="#核心特性-9" class="headerlink" title="核心特性"></a>核心特性</h4><p>二叉树的核心特性体现在结构和操作方式上。</p><p>每个节点最多拥有两个子节点，这使二叉树的结构清晰且易于操作。二叉树可以是空的，也可以只包含一个根节点，甚至可以发展成复杂的多层次结构。</p><p>二叉树还有多种特殊形式，比如满二叉树（每个节点都有0个或2个子节点）、完全二叉树（除最后一层外都被填满，且最后一层从左到右填充）、平衡二叉树（任意节点的左右子树高度差不超过1）等，这些特殊形式各有其应用场景和优势。</p><p>二叉树的遍历方式一般有四种：前序、中序、后序和层序遍历，这些方式能够按照不同的顺序访问树中的节点，满足不同的数据处理需求。</p><h4 id="基本操作-8"><a href="#基本操作-8" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-创建二叉树"><a href="#1-创建二叉树" class="headerlink" title="1. 创建二叉树"></a>1. 创建二叉树</h5><p>创建二叉树可以通过多种方式，比如逐个插入节点构建，或者通过预定义的数组转换为二叉树。创建过程涉及节点的实例化和连接，是二叉树操作的基础。</p><h5 id="2-遍历二叉树"><a href="#2-遍历二叉树" class="headerlink" title="2. 遍历二叉树"></a>2. 遍历二叉树</h5><p>二叉树的遍历是指按照特定顺序访问树中的每个节点。常见的遍历方式有四种：</p><ul><li>前序遍历(Preorder): 先访问根节点，然后遍历左子树，最后遍历右子树，遵循”根-左-右”的访问顺序。</li><li>中序遍历(Inorder): 先遍历左子树，然后访问根节点，最后遍历右子树，遵循”左-根-右”的访问顺序。</li><li>后序遍历(Postorder): 先遍历左子树，然后遍历右子树，最后访问根节点，遵循”左-右-根”的访问顺序。</li><li>层序遍历(Level-order): 按照从上到下、从左到右的顺序逐层访问节点。</li></ul><h5 id="3-查找节点"><a href="#3-查找节点" class="headerlink" title="3. 查找节点"></a>3. 查找节点</h5><p>在二叉树中查找特定值的节点，通常是遍历二叉树来实现。根据树的特性（如是否为二叉搜索树），查找的效率会有所不同。</p><h5 id="4-插入节点"><a href="#4-插入节点" class="headerlink" title="4. 插入节点"></a>4. 插入节点</h5><p>向二叉树中添加新节点，具体插入位置取决于树的类型和规则。在二叉搜索树中，新节点会根据值与现有节点的比较结果来确定位置。</p><h5 id="5-删除节点-1"><a href="#5-删除节点-1" class="headerlink" title="5. 删除节点"></a>5. 删除节点</h5><p>从二叉树中移除节点，同时保持树的结构完整。删除操作可能涉及节点的替换和子树的重新链接，属于复杂操作。</p><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="Java-实现"><a href="#Java-实现" class="headerlink" title="Java 实现"></a>Java 实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TreeNode root;  <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造空二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造带根节点的二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(<span class="type">int</span> rootValue)</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断树是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入节点（简单实现：若树为空则作为根节点，否则作为左子节点，若左子节点存在则作为右子节点）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            root = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用队列进行层序遍历，找到第一个没有左子节点或右子节点的节点</span></span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果没有左子节点，将新节点作为左子节点</span></span><br><span class="line">            <span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                current.left = newNode;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 如果没有右子节点，将新节点作为右子节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                current.right = newNode;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将子节点加入队列</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                queue.add(current.left);</span><br><span class="line">                queue.add(current.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preorderTraversal</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        preorderTraversal(node.left);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        preorderTraversal(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        inorderTraversal(node.left);</span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        inorderTraversal(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postorderTraversal</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        postorderTraversal(node.left);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        postorderTraversal(node.right);</span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 层序遍历</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">levelOrderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            System.out.print(current.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(current.left);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.add(current.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算树的高度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> height(node.left);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> height(node.right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取节点数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + countNodes(node.left) + countNodes(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找值为value的节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(TreeNode node, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.val == value) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在左右子树中查找</span></span><br><span class="line">        <span class="keyword">return</span> search(node.left, value) || search(node.right, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用示例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BinaryTree</span> <span class="variable">tree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入节点</span></span><br><span class="line">        tree.insert(<span class="number">1</span>);</span><br><span class="line">        tree.insert(<span class="number">2</span>);</span><br><span class="line">        tree.insert(<span class="number">3</span>);</span><br><span class="line">        tree.insert(<span class="number">4</span>);</span><br><span class="line">        tree.insert(<span class="number">5</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;前序遍历:&quot;</span>);</span><br><span class="line">        tree.preorderTraversal(tree.getRoot());  <span class="comment">// 输出: 1 2 4 5 3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">中序遍历:&quot;</span>);</span><br><span class="line">        tree.inorderTraversal(tree.getRoot());   <span class="comment">// 输出: 4 2 5 1 3</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">后序遍历:&quot;</span>);</span><br><span class="line">        tree.postorderTraversal(tree.getRoot()); <span class="comment">// 输出: 4 5 2 3 1</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">层序遍历:&quot;</span>);</span><br><span class="line">        tree.levelOrderTraversal();              <span class="comment">// 输出: 1 2 3 4 5</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">树的高度: &quot;</span> + tree.height(tree.getRoot()));</span><br><span class="line">        System.out.println(<span class="string">&quot;节点数量: &quot;</span> + tree.countNodes(tree.getRoot()));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含值为3的节点: &quot;</span> + tree.search(tree.getRoot(), <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;是否包含值为6的节点: &quot;</span> + tree.search(tree.getRoot(), <span class="number">6</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;           <span class="comment">// 节点值</span></span><br><span class="line">    TreeNode left;     <span class="comment">// 左子节点</span></span><br><span class="line">    TreeNode right;    <span class="comment">// 右子节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">        <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我将为您提供JavaScript和Python版本的二叉树实现，保持与Java版本相同的功能和结构。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 定义树节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">val</span> = val;        <span class="comment">// 节点值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span>;      <span class="comment">// 左子节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span>;     <span class="comment">// 右子节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义二叉树类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinaryTree</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">rootValue = <span class="literal">null</span></span>) &#123;</span><br><span class="line">        <span class="comment">// 构造空二叉树或带根节点的二叉树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">root</span> = rootValue !== <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">TreeNode</span>(rootValue) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取根节点</span></span><br><span class="line">    <span class="title function_">getRoot</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">root</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断树是否为空</span></span><br><span class="line">    <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newNode = <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">root</span> = newNode;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用队列进行层序遍历，找到第一个没有左子节点或右子节点的节点</span></span><br><span class="line">        <span class="keyword">const</span> queue = [<span class="variable language_">this</span>.<span class="property">root</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> current = queue.<span class="title function_">shift</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果没有左子节点，将新节点作为左子节点</span></span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">left</span> = newNode;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// 如果没有右子节点，将新节点作为右子节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">                current.<span class="property">right</span> = newNode;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将子节点加入队列</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="title function_">preorderTraversal</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        process.<span class="property">stdout</span>.<span class="title function_">write</span>(node.<span class="property">val</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">preorderTraversal</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">preorderTraversal</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="title function_">inorderTraversal</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">inorderTraversal</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        process.<span class="property">stdout</span>.<span class="title function_">write</span>(node.<span class="property">val</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">inorderTraversal</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="title function_">postorderTraversal</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历左子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">postorderTraversal</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="comment">// 遍历右子树</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">postorderTraversal</span>(node.<span class="property">right</span>);</span><br><span class="line">        <span class="comment">// 访问根节点</span></span><br><span class="line">        process.<span class="property">stdout</span>.<span class="title function_">write</span>(node.<span class="property">val</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 层序遍历</span></span><br><span class="line">    <span class="title function_">levelOrderTraversal</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> queue = [<span class="variable language_">this</span>.<span class="property">root</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (queue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> current = queue.<span class="title function_">shift</span>();</span><br><span class="line">            process.<span class="property">stdout</span>.<span class="title function_">write</span>(current.<span class="property">val</span> + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">left</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">left</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current.<span class="property">right</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.<span class="title function_">push</span>(current.<span class="property">right</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算树的高度</span></span><br><span class="line">    <span class="title function_">height</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> leftHeight = <span class="variable language_">this</span>.<span class="title function_">height</span>(node.<span class="property">left</span>);</span><br><span class="line">        <span class="keyword">const</span> rightHeight = <span class="variable language_">this</span>.<span class="title function_">height</span>(node.<span class="property">right</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(leftHeight, rightHeight) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取节点数量</span></span><br><span class="line">    <span class="title function_">countNodes</span>(<span class="params">node</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="variable language_">this</span>.<span class="title function_">countNodes</span>(node.<span class="property">left</span>) + <span class="variable language_">this</span>.<span class="title function_">countNodes</span>(node.<span class="property">right</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找值为value的节点</span></span><br><span class="line">    <span class="title function_">search</span>(<span class="params">node, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.<span class="property">val</span> === value) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在左右子树中查找</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">search</span>(node.<span class="property">left</span>, value) || <span class="variable language_">this</span>.<span class="title function_">search</span>(node.<span class="property">right</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> tree = <span class="keyword">new</span> <span class="title class_">BinaryTree</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    tree.<span class="title function_">insert</span>(<span class="number">1</span>);</span><br><span class="line">    tree.<span class="title function_">insert</span>(<span class="number">2</span>);</span><br><span class="line">    tree.<span class="title function_">insert</span>(<span class="number">3</span>);</span><br><span class="line">    tree.<span class="title function_">insert</span>(<span class="number">4</span>);</span><br><span class="line">    tree.<span class="title function_">insert</span>(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;前序遍历:&quot;</span>);</span><br><span class="line">    tree.<span class="title function_">preorderTraversal</span>(tree.<span class="title function_">getRoot</span>());  <span class="comment">// 输出: 1 2 4 5 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">中序遍历:&quot;</span>);</span><br><span class="line">    tree.<span class="title function_">inorderTraversal</span>(tree.<span class="title function_">getRoot</span>());   <span class="comment">// 输出: 4 2 5 1 3</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">后序遍历:&quot;</span>);</span><br><span class="line">    tree.<span class="title function_">postorderTraversal</span>(tree.<span class="title function_">getRoot</span>()); <span class="comment">// 输出: 4 5 2 3 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">层序遍历:&quot;</span>);</span><br><span class="line">    tree.<span class="title function_">levelOrderTraversal</span>();              <span class="comment">// 输出: 1 2 3 4 5</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">树的高度: &quot;</span> + tree.<span class="title function_">height</span>(tree.<span class="title function_">getRoot</span>()));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;节点数量: &quot;</span> + tree.<span class="title function_">countNodes</span>(tree.<span class="title function_">getRoot</span>()));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是否包含值为3的节点: &quot;</span> + tree.<span class="title function_">search</span>(tree.<span class="title function_">getRoot</span>(), <span class="number">3</span>));</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;是否包含值为6的节点: &quot;</span> + tree.<span class="title function_">search</span>(tree.<span class="title function_">getRoot</span>(), <span class="number">6</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>我将为您提供Go和C++版本的二叉树实现，保持与之前版本相同的功能和结构。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;container/list&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// TreeNode 定义树节点结构</span></span><br><span class="line"><span class="keyword">type</span> TreeNode <span class="keyword">struct</span> &#123;</span><br><span class="line">Val   <span class="type">int</span>       <span class="comment">// 节点值</span></span><br><span class="line">Left  *TreeNode <span class="comment">// 左子节点</span></span><br><span class="line">Right *TreeNode <span class="comment">// 右子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// BinaryTree 定义二叉树结构</span></span><br><span class="line"><span class="keyword">type</span> BinaryTree <span class="keyword">struct</span> &#123;</span><br><span class="line">root *TreeNode <span class="comment">// 根节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBinaryTree 创建空二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBinaryTree</span><span class="params">()</span></span> *BinaryTree &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;BinaryTree&#123;root: <span class="literal">nil</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewBinaryTreeWithRoot 创建带根节点的二叉树</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBinaryTreeWithRoot</span><span class="params">(rootValue <span class="type">int</span>)</span></span> *BinaryTree &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;BinaryTree&#123;root: &amp;TreeNode&#123;Val: rootValue&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetRoot 获取根节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> GetRoot() *TreeNode &#123;</span><br><span class="line"><span class="keyword">return</span> bt.root</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsEmpty 判断树是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> IsEmpty() <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> bt.root == <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert 插入节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> Insert(value <span class="type">int</span>) &#123;</span><br><span class="line">newNode := &amp;TreeNode&#123;Val: value&#125;</span><br><span class="line"><span class="keyword">if</span> bt.IsEmpty() &#123;</span><br><span class="line">bt.root = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用队列进行层序遍历，找到第一个没有左子节点或右子节点的节点</span></span><br><span class="line">queue := list.New()</span><br><span class="line">queue.PushBack(bt.root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> queue.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">current := queue.Front().Value.(*TreeNode)</span><br><span class="line">queue.Remove(queue.Front())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有左子节点，将新节点作为左子节点</span></span><br><span class="line"><span class="keyword">if</span> current.Left == <span class="literal">nil</span> &#123;</span><br><span class="line">current.Left = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果没有右子节点，将新节点作为右子节点</span></span><br><span class="line"><span class="keyword">if</span> current.Right == <span class="literal">nil</span> &#123;</span><br><span class="line">current.Right = newNode</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将子节点加入队列</span></span><br><span class="line">queue.PushBack(current.Left)</span><br><span class="line">queue.PushBack(current.Right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PreorderTraversal 前序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> PreorderTraversal(node *TreeNode) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根节点</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, node.Val)</span><br><span class="line"><span class="comment">// 遍历左子树</span></span><br><span class="line">bt.PreorderTraversal(node.Left)</span><br><span class="line"><span class="comment">// 遍历右子树</span></span><br><span class="line">bt.PreorderTraversal(node.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InorderTraversal 中序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> InorderTraversal(node *TreeNode) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历左子树</span></span><br><span class="line">bt.InorderTraversal(node.Left)</span><br><span class="line"><span class="comment">// 访问根节点</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, node.Val)</span><br><span class="line"><span class="comment">// 遍历右子树</span></span><br><span class="line">bt.InorderTraversal(node.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PostorderTraversal 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> PostorderTraversal(node *TreeNode) &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历左子树</span></span><br><span class="line">bt.PostorderTraversal(node.Left)</span><br><span class="line"><span class="comment">// 遍历右子树</span></span><br><span class="line">bt.PostorderTraversal(node.Right)</span><br><span class="line"><span class="comment">// 访问根节点</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, node.Val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LevelOrderTraversal 层序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> LevelOrderTraversal() &#123;</span><br><span class="line"><span class="keyword">if</span> bt.IsEmpty() &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">queue := list.New()</span><br><span class="line">queue.PushBack(bt.root)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> queue.Len() &gt; <span class="number">0</span> &#123;</span><br><span class="line">current := queue.Front().Value.(*TreeNode)</span><br><span class="line">queue.Remove(queue.Front())</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d &quot;</span>, current.Val)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> current.Left != <span class="literal">nil</span> &#123;</span><br><span class="line">queue.PushBack(current.Left)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> current.Right != <span class="literal">nil</span> &#123;</span><br><span class="line">queue.PushBack(current.Right)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Height 计算树的高度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> Height(node *TreeNode) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">leftHeight := bt.Height(node.Left)</span><br><span class="line">rightHeight := bt.Height(node.Right)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> leftHeight &gt; rightHeight &#123;</span><br><span class="line"><span class="keyword">return</span> leftHeight + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rightHeight + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// CountNodes 获取节点数量</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> CountNodes(node *TreeNode) <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + bt.CountNodes(node.Left) + bt.CountNodes(node.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Search 查找值为value的节点</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bt *BinaryTree)</span></span> Search(node *TreeNode, value <span class="type">int</span>) <span class="type">bool</span> &#123;</span><br><span class="line"><span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> node.Val == value &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在左右子树中查找</span></span><br><span class="line"><span class="keyword">return</span> bt.Search(node.Left, value) || bt.Search(node.Right, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := NewBinaryTree()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">tree.Insert(<span class="number">1</span>)</span><br><span class="line">tree.Insert(<span class="number">2</span>)</span><br><span class="line">tree.Insert(<span class="number">3</span>)</span><br><span class="line">tree.Insert(<span class="number">4</span>)</span><br><span class="line">tree.Insert(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;前序遍历:&quot;</span>)</span><br><span class="line">tree.PreorderTraversal(tree.GetRoot()) <span class="comment">// 输出: 1 2 4 5 3</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">中序遍历:&quot;</span>)</span><br><span class="line">tree.InorderTraversal(tree.GetRoot()) <span class="comment">// 输出: 4 2 5 1 3</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">后序遍历:&quot;</span>)</span><br><span class="line">tree.PostorderTraversal(tree.GetRoot()) <span class="comment">// 输出: 4 5 2 3 1</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">层序遍历:&quot;</span>)</span><br><span class="line">tree.LevelOrderTraversal() <span class="comment">// 输出: 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">树的高度:&quot;</span>, tree.Height(tree.GetRoot()))</span><br><span class="line">fmt.Println(<span class="string">&quot;节点数量:&quot;</span>, tree.CountNodes(tree.GetRoot()))</span><br><span class="line">fmt.Println(<span class="string">&quot;是否包含值为3的节点:&quot;</span>, tree.Search(tree.GetRoot(), <span class="number">3</span>))</span><br><span class="line">fmt.Println(<span class="string">&quot;是否包含值为6的节点:&quot;</span>, tree.Search(tree.GetRoot(), <span class="number">6</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-8"><a href="#优缺点-8" class="headerlink" title="优缺点"></a>优缺点</h4><p>优势方面，二叉树能够高效地组织和检索数据。特别是在二叉搜索树中，查找、插入和删除操作的平均时间复杂度为O(log n)，比线性数据结构（如链表）的O(n)要好得多。二叉树的层次结构非常适合表示具有层次关系的数据，比如文件系统、组织结构。二叉树还支持多种遍历方式，数据处理非常灵活。</p><p>缺陷方便，普通二叉树可能会出现不平衡的情况，导致树的高度增加，降低操作效率。在最坏情况下（如链状树），操作的时间复杂度会退化到O(n)。相比于数组和哈希表，二叉树的实现和维护更复杂，需要管理节点之间的引用关系，比如红黑树、AVL树，实现和维护更加复杂。</p><h4 id="应用场景-9"><a href="#应用场景-9" class="headerlink" title="应用场景"></a>应用场景</h4><p>二叉树在计算机科学和实际应用中有着广泛的用途。</p><p>比如在表达式求值和编译器设计中，二叉树可以表示和计算表达式。通过构建语法树，编译器能够解析和执行复杂的编程语言结构。二叉树也常用于实现数据库索引，特别是B树和B+树这类二叉树的变种，能够支持高效的数据检索和范围查询。</p><p>再比如在计算机图形学领域，二叉树的变种如四叉树和八叉树用于空间分割和碰撞检测。二叉树在搜索算法中也有重要应用，如二分查找树可以高效地查找、插入和删除数据，而堆（一种特殊的二叉树）可以被用于实现优先队列和堆排序算法。</p><p>在文件系统组织和网络路由算法中，二叉树也很重要。通过树状结构，系统能够高效地管理文件和目录，找到网络中的最佳路径。</p><h4 id="扩展：二叉搜索树"><a href="#扩展：二叉搜索树" class="headerlink" title="扩展：二叉搜索树"></a>扩展：二叉搜索树</h4><p>二叉搜索树（Binary Search Tree, BST）是二叉树的一种特殊形式，它的特性：对于树中的每个节点，左子树中所有节点的值都小于该节点的值，右子树中所有节点的值都大于该节点的值。这种特性让二叉搜索树在查找、插入和删除操作上非常高效。</p><p>在二叉搜索树中，查找特定值的过程可以通过比较目标值与当前节点值的大小来确定搜索方向。如果目标值小于当前节点值，则在左子树中查找；如果大于当前节点值，则在右子树中查找；如果相等，则找到目标节点。查找操作的平均时间复杂度为O(log n)，远优于在普通二叉树中的O(n)。</p><p>不过当输入数据按照特定顺序插入时（如已排序的数据），二叉搜索树可能会退化成链表，导致操作效率降低。为了解决这个问题，出现了自平衡的二叉搜索树变种，比如AVL树和红黑树，它们通过旋转操作保持树的平衡，保证操作效率稳定在O(log n)。</p><h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉搜索树节点类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">TreeNode left;</span><br><span class="line">TreeNode right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.val = val;</span><br><span class="line"><span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">()</span> &#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">root = insertRecursive(root, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">insertRecursive</span><span class="params">(TreeNode node, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">// 如果树为空，创建新节点</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果值小于当前节点，插入左子树</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; node.val) &#123;</span><br><span class="line">node.left = insertRecursive(node.left, value);</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 如果值大于当前节点，插入右子树</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value &gt; node.val) &#123;</span><br><span class="line">node.right = insertRecursive(node.right, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果值相等，不做任何改变（BST通常不允许重复值）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> searchRecursive(root, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">searchRecursive</span><span class="params">(TreeNode node, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">// 基本情况：树为空或找到目标值</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.val == value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果值小于当前节点，搜索左子树</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; node.val) &#123;</span><br><span class="line"><span class="keyword">return</span> searchRecursive(node.left, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果值大于当前节点，搜索右子树</span></span><br><span class="line"><span class="keyword">return</span> searchRecursive(node.right, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历（得到排序结果）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">inorderTraversalRecursive(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inorderTraversalRecursive</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">inorderTraversalRecursive(node.left);</span><br><span class="line">System.out.print(node.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">inorderTraversalRecursive(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">root = deleteRecursive(root, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> TreeNode <span class="title function_">deleteRecursive</span><span class="params">(TreeNode node, <span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="comment">// 树为空</span></span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 搜索要删除的节点</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; node.val) &#123;</span><br><span class="line">node.left = deleteRecursive(node.left, value);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; node.val) &#123;</span><br><span class="line">node.right = deleteRecursive(node.right, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 找到要删除的节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1：叶节点（没有子节点）</span></span><br><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2：只有一个子节点</span></span><br><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> node.right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> node.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况3：有两个子节点</span></span><br><span class="line"><span class="comment">// 找到右子树中的最小值作为替代</span></span><br><span class="line">node.val = findMin(node.right);</span><br><span class="line"><span class="comment">// 删除右子树中的最小值节点</span></span><br><span class="line">node.right = deleteRecursive(node.right, node.val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找树中的最小值</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">minValue</span> <span class="operator">=</span> node.val;</span><br><span class="line"><span class="keyword">while</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">minValue = node.left.val;</span><br><span class="line">node = node.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">BinarySearchTree</span> <span class="variable">bst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">bst.insert(<span class="number">50</span>);</span><br><span class="line">bst.insert(<span class="number">30</span>);</span><br><span class="line">bst.insert(<span class="number">70</span>);</span><br><span class="line">bst.insert(<span class="number">20</span>);</span><br><span class="line">bst.insert(<span class="number">40</span>);</span><br><span class="line">bst.insert(<span class="number">60</span>);</span><br><span class="line">bst.insert(<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;中序遍历 BST（应该是排序的）:&quot;</span>);</span><br><span class="line">bst.inorderTraversal(); <span class="comment">// 输出: 20 30 40 50 60 70 80</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">查找值 40: &quot;</span> + bst.search(<span class="number">40</span>)); <span class="comment">// 输出: true</span></span><br><span class="line">System.out.println(<span class="string">&quot;查找值 90: &quot;</span> + bst.search(<span class="number">90</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;删除节点 30 后的中序遍历:&quot;</span>);</span><br><span class="line">bst.delete(<span class="number">30</span>);</span><br><span class="line">bst.inorderTraversal(); <span class="comment">// 输出: 20 40 50 60 70 80</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-9"><a href="#测验-9" class="headerlink" title="测验"></a>测验</h4><ol><li>什么是二叉树？它与其他树结构的主要区别是什么？</li><li>二叉树的前序、中序和后序遍历分别是什么顺序？请解释这三种遍历方式的区别。</li><li>完全二叉树和满二叉树有什么区别？给出它们的定义。</li><li>二叉搜索树的特点是什么？与普通二叉树相比，它在查找操作上有什么优势？</li></ol><blockquote><p>测验答案</p><ol><li>二叉树是一种每个节点最多有两个子节点的树结构。与一般的树结构相比，二叉树限制了每个节点的子节点数量不超过两个，明确区分了左子节点和右子节点。</li><li>前序遍历：根节点-左子树-右子树。中序遍历：左子树-根节点-右子树。后序遍历：左子树-右子树-根节点。它们的区别在于访问根节点的时机：前序是最先访问根节点，中序是访问完左子树后访问根节点，后序是最后访问根节点。</li><li>满二叉树：除叶节点外的每个节点都有两个子节点，所有叶节点都在同一层。完全二叉树：除最后一层外的其他层都被填满，且最后一层的节点都集中在左侧。区别在于，满二叉树的所有叶节点必须在同一层，完全二叉树允许最后一层不满，但必须从左到右填充。</li><li>二叉搜索树的特点是对于任何节点，其左子树中所有节点的值都小于该节点的值，右子树中所有节点的值都大于该节点的值。与普通二叉树相比，二叉搜索树在查找操作上具有显著优势，平均时间复杂度为O(log n)，而普通二叉树需要O(n)时间进行线性搜索。</li></ol></blockquote><h3 id="二、AVL树"><a href="#二、AVL树" class="headerlink" title="二、AVL树"></a>二、AVL树</h3><p>AVL树是一种自平衡二叉搜索树，其中任何节点的两个子树的高度差最多为1。通过旋转操作保持树的平衡，确保操作的最坏时间复杂度为O(log n)。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-10"><a href="#算法讲解-10" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="AVL树-AVL-Tree"><a href="#AVL树-AVL-Tree" class="headerlink" title="AVL树(AVL Tree)"></a>AVL树(AVL Tree)</h4><h5 id="介绍-10"><a href="#介绍-10" class="headerlink" title="介绍"></a>介绍</h5><p>AVL树是一种自平衡二叉搜索树，它在普通二叉搜索树的基础上增加了平衡因子的概念，保证树的任何节点的左右子树高度差不超过1，保证查找、插入和删除操作的时间复杂度稳定在O(log n)。</p><p>AVL树中的几个关键概念：</p><ul><li>节点（Node）：树的基本组成单元，包含数据、左右子节点指针及高度信息</li><li>平衡因子（Balance Factor）：节点左子树高度减去右子树高度的差值</li><li>高度（Height）：从节点到其最远叶子节点的路径长度</li><li>旋转（Rotation）：保持平衡的核心操作，包括左旋、右旋、左右旋和右左旋</li></ul><h4 id="核心特性-10"><a href="#核心特性-10" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>自平衡性：任何节点的左右子树高度差不超过1</li><li>二叉搜索性质：左子树所有节点值小于父节点，右子树所有节点值大于父节点</li><li>平衡因子：每个节点都有-1、0或1的平衡因子</li><li>高度为O(log n)：由于严格的平衡要求，树的高度被限制在O(log n)</li><li>旋转操作：通过四种旋转操作维持树的平衡性</li></ol><h4 id="基本操作-9"><a href="#基本操作-9" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-查找元素"><a href="#1-查找元素" class="headerlink" title="1. 查找元素"></a>1. 查找元素</h5><ul><li>时间复杂度：O(log n)</li><li>方法：与普通二叉搜索树相同</li></ul><h5 id="2-插入元素"><a href="#2-插入元素" class="headerlink" title="2. 插入元素"></a>2. 插入元素</h5><ul><li>时间复杂度：O(log n)</li><li>步骤：<ol><li>执行标准二叉搜索树插入</li><li>更新受影响节点的高度</li><li>计算平衡因子</li><li>如失衡，执行旋转操作恢复平衡</li></ol></li></ul><h5 id="3-删除元素"><a href="#3-删除元素" class="headerlink" title="3. 删除元素"></a>3. 删除元素</h5><ul><li>时间复杂度：O(log n)</li><li>步骤：<ol><li>执行标准二叉搜索树删除</li><li>更新受影响节点的高度</li><li>计算平衡因子</li><li>如失衡，执行旋转操作恢复平衡</li></ol></li></ul><h5 id="4-旋转操作"><a href="#4-旋转操作" class="headerlink" title="4. 旋转操作"></a>4. 旋转操作</h5><ul><li>左旋（LL）：针对右子树高于左子树过多</li><li>右旋（RR）：针对左子树高于右子树过多</li><li>左右旋（LR）：先对左子树进行左旋，再对节点进行右旋</li><li>右左旋（RL）：先对右子树进行右旋，再对节点进行左旋</li></ul><h4 id="代码实现-10"><a href="#代码实现-10" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AVL树的Java实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVLTree</span> &#123;</span><br><span class="line">    <span class="comment">// 树节点定义</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> key;        <span class="comment">// 节点值</span></span><br><span class="line">        Node left;      <span class="comment">// 左子节点</span></span><br><span class="line">        Node right;     <span class="comment">// 右子节点</span></span><br><span class="line">        <span class="type">int</span> height;     <span class="comment">// 节点高度</span></span><br><span class="line">        </span><br><span class="line">        Node(<span class="type">int</span> key) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.height = <span class="number">1</span>; <span class="comment">// 新节点高度初始为1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Node root; <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取节点高度，空节点高度为0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node.height;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取节点的平衡因子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getBalanceFactor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height(node.left) - height(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新节点高度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateHeight</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        node.height = Math.max(height(node.left), height(node.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 右旋转（处理左左情况）</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">rotateRight</span><span class="params">(Node y)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> y.left;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">T2</span> <span class="operator">=</span> x.right;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行旋转</span></span><br><span class="line">        x.right = y;</span><br><span class="line">        y.left = T2;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新高度</span></span><br><span class="line">        updateHeight(y);</span><br><span class="line">        updateHeight(x);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x; <span class="comment">// 返回新的根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 左旋转（处理右右情况）</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">rotateLeft</span><span class="params">(Node x)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">y</span> <span class="operator">=</span> x.right;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">T2</span> <span class="operator">=</span> y.left;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 执行旋转</span></span><br><span class="line">        y.left = x;</span><br><span class="line">        x.right = T2;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新高度</span></span><br><span class="line">        updateHeight(x);</span><br><span class="line">        updateHeight(y);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> y; <span class="comment">// 返回新的根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        root = insertNode(root, key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">insertNode</span><span class="params">(Node node, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 执行标准BST插入</span></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key &lt; node.key) &#123;</span><br><span class="line">            node.left = insertNode(node.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; node.key) &#123;</span><br><span class="line">            node.right = insertNode(node.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 相同键值不做处理，或根据需求更新节点</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 更新节点高度</span></span><br><span class="line">        updateHeight(node);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 获取平衡因子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> getBalanceFactor(node);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 如果节点失衡，进行旋转调整</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左左情况 - 右旋</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalanceFactor(node.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rotateRight(node);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右右情况 - 左旋</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; -<span class="number">1</span> &amp;&amp; getBalanceFactor(node.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rotateLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左右情况 - 左右双旋</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalanceFactor(node.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.left = rotateLeft(node.left);</span><br><span class="line">            <span class="keyword">return</span> rotateRight(node);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右左情况 - 右左双旋</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; -<span class="number">1</span> &amp;&amp; getBalanceFactor(node.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            node.right = rotateRight(node.right);</span><br><span class="line">            <span class="keyword">return</span> rotateLeft(node);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回未变化的节点引用</span></span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找最小值节点</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">findMinNode</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> node;</span><br><span class="line">        <span class="keyword">while</span> (current.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            current = current.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        root = deleteNode(root, key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">deleteNode</span><span class="params">(Node root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 执行标准BST删除</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key &lt; root.key) &#123;</span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.key) &#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到要删除的节点</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 情况1：叶子节点或只有一个子节点</span></span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="literal">null</span> || root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> (root.left != <span class="literal">null</span>) ? root.left : root.right;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 没有子节点</span></span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="literal">null</span>) &#123;</span><br><span class="line">                    root = <span class="literal">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 一个子节点</span></span><br><span class="line">                    root = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 情况2：有两个子节点</span></span><br><span class="line">                <span class="comment">// 找到右子树的最小节点（中序后继）</span></span><br><span class="line">                <span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> findMinNode(root.right);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 复制中序后继的值到当前节点</span></span><br><span class="line">                root.key = temp.key;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 删除中序后继</span></span><br><span class="line">                root.right = deleteNode(root.right, temp.key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果树只有一个节点，删除后直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 更新高度</span></span><br><span class="line">        updateHeight(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 获取平衡因子</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">balance</span> <span class="operator">=</span> getBalanceFactor(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4. 进行旋转操作保持平衡</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左左情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalanceFactor(root.left) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rotateRight(root);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 左右情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &gt; <span class="number">1</span> &amp;&amp; getBalanceFactor(root.left) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            root.left = rotateLeft(root.left);</span><br><span class="line">            <span class="keyword">return</span> rotateRight(root);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右右情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; -<span class="number">1</span> &amp;&amp; getBalanceFactor(root.right) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rotateLeft(root);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右左情况</span></span><br><span class="line">        <span class="keyword">if</span> (balance &lt; -<span class="number">1</span> &amp;&amp; getBalanceFactor(root.right) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            root.right = rotateRight(root.right);</span><br><span class="line">            <span class="keyword">return</span> rotateLeft(root);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchNode(root, key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">searchNode</span><span class="params">(Node root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key == root.key) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (key &lt; root.key) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchNode(root.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-9"><a href="#优缺点-9" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-9"><a href="#优点-9" class="headerlink" title="优点"></a>优点</h5><ol><li>查找效率高：保证O(log n)的查找、插入和删除操作时间复杂度</li><li>自平衡：自动调整树的结构，防止最坏情况出现</li><li>稳定性：所有操作都有稳定的性能表现</li><li>可预测性：树高被严格限制，便于分析性能</li></ol><h5 id="缺点-8"><a href="#缺点-8" class="headerlink" title="缺点"></a>缺点</h5><ol><li>实现复杂：相比普通二叉搜索树，实现复杂度高</li><li>额外空间：每个节点需要存储高度信息</li><li>旋转开销：插入删除过程中的旋转操作增加了额外计算开销</li><li>频繁平衡调整：对于高频插入删除的场景，频繁的平衡调整可能影响性能</li></ol><h4 id="应用场景-10"><a href="#应用场景-10" class="headerlink" title="应用场景"></a>应用场景</h4><p>AVL树是最早被发明的自平衡二叉搜索树之一，适用于许多需要高效查找和维持数据有序性的场景。</p><p>比如内存管理器经常使用AVL树跟踪内存块的分配与释放。</p><p>在需要频繁执行范围查询的应用中，AVL树也比较适用，常用于实现区间查询功能。</p><h4 id="测验-10"><a href="#测验-10" class="headerlink" title="测验"></a>测验</h4><p>1）AVL树的平衡因子是如何定义的？平衡因子的有效范围是什么？</p><p>2）在AVL树中，当插入节点导致失衡时，需要几种不同类型的旋转操作来维持平衡？它们分别应对什么情况？</p><blockquote><p>测验答案</p><p>1）AVL树的平衡因子定义为节点的左子树高度减去右子树高度。在一棵合法的AVL树中，每个节点的平衡因子只能是-1、0或1，表示左右子树高度差不超过1。</p><p>2）AVL树中有四种旋转操作：</p><ul><li>左旋（LL旋转）：处理右子树过重的情况</li><li>右旋（RR旋转）：处理左子树过重的情况</li><li>左右旋（LR旋转）：先对左子节点进行左旋，再对当前节点进行右旋</li><li>右左旋（RL旋转）：先对右子节点进行右旋，再对当前节点进行左旋</li></ul></blockquote><h3 id="三、红黑树"><a href="#三、红黑树" class="headerlink" title="三、红黑树"></a>三、红黑树</h3><p>红黑树是一种自平衡的二叉搜索树，通过节点颜色和旋转操作保持树的平衡。它通过确保没有一条路径会比其他路径长两倍来保证查找、插入和删除操作的时间复杂度为O(log n)。</p><h5 id="算法讲解-11"><a href="#算法讲解-11" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="红黑树-Red-Black-Tree"><a href="#红黑树-Red-Black-Tree" class="headerlink" title="红黑树(Red-Black Tree)"></a>红黑树(Red-Black Tree)</h4><h5 id="介绍-11"><a href="#介绍-11" class="headerlink" title="介绍"></a>介绍</h5><p>红黑树是一种自平衡二叉搜索树，最初被称为”对称二叉B树”，后来改名为红黑树。因为在每个节点上都增加了一个表示颜色的属性，可以是红色或黑色。红黑树通过着色规则和特定的重新平衡操作（旋转和重新着色）来保持树的平衡。</p><p>红黑树中的几个关键概念：</p><ul><li>节点（Node）：包含数据、左右子节点指针、父节点指针及颜色标记（红/黑）</li><li>着色规则：每个节点被标记为红色或黑色，以满足特定的平衡条件</li><li>黑高（Black Height）：从任一节点到其后代叶节点的路径上黑色节点的数量</li><li>旋转（Rotation）：与AVL树类似的结构调整操作</li><li>重新着色（Recoloring）：改变节点颜色，配合旋转实现平衡</li></ul><h4 id="核心特性-11"><a href="#核心特性-11" class="headerlink" title="核心特性"></a>核心特性</h4><p>红黑树必须满足以下五个性质：</p><ol><li>每个节点或是红色，或是黑色</li><li>根节点必须是黑色</li><li>所有叶子节点（NIL节点）都是黑色</li><li>如果一个节点是红色，则其两个子节点都是黑色（不能有连续的红色节点）</li><li>对于每个节点，从该节点到其所有后代叶子节点的路径上，包含相同数量的黑色节点</li></ol><p>这些规则保证了红黑树的关键特性：</p><ol><li>高度平衡：从根到叶子的最长路径不会超过最短路径的两倍</li><li>O(log n)性能：查找、插入和删除操作都保证O(log n)时间复杂度</li><li>自平衡：通过颜色变换和旋转操作自动调整结构</li><li>相对宽松的平衡：比AVL树允许更多的不平衡，减少重新平衡操作</li></ol><h4 id="基本操作-10"><a href="#基本操作-10" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-查找元素-1"><a href="#1-查找元素-1" class="headerlink" title="1. 查找元素"></a>1. 查找元素</h5><ul><li>时间复杂度：O(log n)</li><li>方法：与普通二叉搜索树相同</li></ul><h5 id="2-插入元素-1"><a href="#2-插入元素-1" class="headerlink" title="2. 插入元素"></a>2. 插入元素</h5><ul><li>时间复杂度：O(log n)</li><li>步骤：</li></ul><ol><li>执行标准二叉搜索树插入</li><li>将新插入的节点着色为红色</li><li>如违反了红黑树性质，进行修复操作</li></ol><ul><li>重新着色</li><li>旋转（左旋、右旋）</li></ul><h5 id="3-删除元素-1"><a href="#3-删除元素-1" class="headerlink" title="3. 删除元素"></a>3. 删除元素</h5><ul><li>时间复杂度：O(log n)</li><li>步骤：</li></ul><ol><li>执行标准二叉搜索树删除</li><li>如被删除节点的替代节点违反红黑树性质，进行修复操作</li></ol><ul><li>重新着色</li><li>旋转（左旋、右旋）</li></ul><h5 id="4-修复操作"><a href="#4-修复操作" class="headerlink" title="4. 修复操作"></a>4. 修复操作</h5><ul><li>颜色翻转：更改节点和其子节点的颜色</li><li>左旋：右子树过重时使用</li><li>右旋：左子树过重时使用</li></ul><h4 id="代码实现-11"><a href="#代码实现-11" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 红黑树的Java实现</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBlackTree</span> &#123;</span><br><span class="line"><span class="comment">// 颜色常量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 树节点定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line"><span class="type">int</span> key; <span class="comment">// 节点值</span></span><br><span class="line">Node left; <span class="comment">// 左子节点</span></span><br><span class="line">Node right; <span class="comment">// 右子节点</span></span><br><span class="line">Node parent; <span class="comment">// 父节点</span></span><br><span class="line"><span class="type">boolean</span> color; <span class="comment">// 节点颜色（true为红，false为黑）</span></span><br><span class="line"></span><br><span class="line">Node(<span class="type">int</span> key) &#123;</span><br><span class="line"><span class="built_in">this</span>.key = key;</span><br><span class="line"><span class="built_in">this</span>.color = RED; <span class="comment">// 新节点默认为红色</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node root; <span class="comment">// 根节点</span></span><br><span class="line"><span class="keyword">private</span> Node NIL; <span class="comment">// 哨兵节点（表示叶子节点）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RedBlackTree</span><span class="params">()</span> &#123;</span><br><span class="line">NIL = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">NIL.color = BLACK;</span><br><span class="line">NIL.left = <span class="literal">null</span>;</span><br><span class="line">NIL.right = <span class="literal">null</span>;</span><br><span class="line">root = NIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取节点颜色，空节点视为黑色</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">colorOf</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node == NIL ? BLACK : node.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断节点是否为红色</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isRed</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> colorOf(node) == RED;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断节点是否为黑色</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isBlack</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> colorOf(node) == BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置节点颜色</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(Node node, <span class="type">boolean</span> color)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node != NIL) &#123;</span><br><span class="line">node.color = color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 左旋操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">leftRotate</span><span class="params">(Node x)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">y</span> <span class="operator">=</span> x.right; <span class="comment">// 设置y为x的右子节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将y的左子树设为x的右子树</span></span><br><span class="line">x.right = y.left;</span><br><span class="line"><span class="keyword">if</span> (y.left != NIL) &#123;</span><br><span class="line">y.left.parent = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置y的父节点</span></span><br><span class="line">y.parent = x.parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的父节点关系</span></span><br><span class="line"><span class="keyword">if</span> (x.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">root = y;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x == x.parent.left) &#123;</span><br><span class="line">x.parent.left = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x.parent.right = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成旋转</span></span><br><span class="line">y.left = x;</span><br><span class="line">x.parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右旋操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rightRotate</span><span class="params">(Node y)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> y.left; <span class="comment">// 设置x为y的左子节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将x的右子树设为y的左子树</span></span><br><span class="line">y.left = x.right;</span><br><span class="line"><span class="keyword">if</span> (x.right != NIL) &#123;</span><br><span class="line">x.right.parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的父节点</span></span><br><span class="line">x.parent = y.parent;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置y的父节点关系</span></span><br><span class="line"><span class="keyword">if</span> (y.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">root = x;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (y == y.parent.left) &#123;</span><br><span class="line">y.parent.left = x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y.parent.right = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成旋转</span></span><br><span class="line">x.right = y;</span><br><span class="line">y.parent = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(key);</span><br><span class="line">node.left = NIL;</span><br><span class="line">node.right = NIL;</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">y</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">Node</span> <span class="variable">x</span> <span class="operator">=</span> <span class="built_in">this</span>.root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到插入位置</span></span><br><span class="line"><span class="keyword">while</span> (x != NIL) &#123;</span><br><span class="line">y = x;</span><br><span class="line"><span class="keyword">if</span> (node.key &lt; x.key) &#123;</span><br><span class="line">x = x.left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = x.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置node的父节点</span></span><br><span class="line">node.parent = y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置node为根节点或者是父节点的左/右孩子</span></span><br><span class="line"><span class="keyword">if</span> (y == <span class="literal">null</span>) &#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.key &lt; y.key) &#123;</span><br><span class="line">y.left = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y.right = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果新节点是根节点，则将其设为黑色</span></span><br><span class="line"><span class="keyword">if</span> (node.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">node.color = BLACK;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果新节点的祖父节点为空，则不需要修复</span></span><br><span class="line"><span class="keyword">if</span> (node.parent.parent == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修复红黑树性质</span></span><br><span class="line">fixInsert(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修复插入后的红黑树性质</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixInsert</span><span class="params">(Node k)</span> &#123;</span><br><span class="line">Node u;</span><br><span class="line"><span class="keyword">while</span> (isRed(k.parent)) &#123;</span><br><span class="line"><span class="comment">// 父节点是祖父节点的右子节点</span></span><br><span class="line"><span class="keyword">if</span> (k.parent == k.parent.parent.right) &#123;</span><br><span class="line">u = k.parent.parent.left; <span class="comment">// 叔叔节点</span></span><br><span class="line"><span class="comment">// 情况1：叔叔节点是红色</span></span><br><span class="line"><span class="keyword">if</span> (isRed(u)) &#123;</span><br><span class="line">u.color = BLACK;</span><br><span class="line">k.parent.color = BLACK;</span><br><span class="line">k.parent.parent.color = RED;</span><br><span class="line">k = k.parent.parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 情况2：叔叔节点是黑色，当前节点是左子节点</span></span><br><span class="line"><span class="keyword">if</span> (k == k.parent.left) &#123;</span><br><span class="line">k = k.parent;</span><br><span class="line">rightRotate(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 情况3：叔叔节点是黑色，当前节点是右子节点</span></span><br><span class="line">k.parent.color = BLACK;</span><br><span class="line">k.parent.parent.color = RED;</span><br><span class="line">leftRotate(k.parent.parent);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 父节点是祖父节点的左子节点</span></span><br><span class="line">u = k.parent.parent.right; <span class="comment">// 叔叔节点</span></span><br><span class="line"><span class="comment">// 情况1：叔叔节点是红色</span></span><br><span class="line"><span class="keyword">if</span> (isRed(u)) &#123;</span><br><span class="line">u.color = BLACK;</span><br><span class="line">k.parent.color = BLACK;</span><br><span class="line">k.parent.parent.color = RED;</span><br><span class="line">k = k.parent.parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 情况2：叔叔节点是黑色，当前节点是右子节点</span></span><br><span class="line"><span class="keyword">if</span> (k == k.parent.right) &#123;</span><br><span class="line">k = k.parent;</span><br><span class="line">leftRotate(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 情况3：叔叔节点是黑色，当前节点是左子节点</span></span><br><span class="line">k.parent.color = BLACK;</span><br><span class="line">k.parent.parent.color = RED;</span><br><span class="line">rightRotate(k.parent.parent);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果k是根节点，退出循环</span></span><br><span class="line"><span class="keyword">if</span> (k == root) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 确保根节点是黑色</span></span><br><span class="line">root.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找最小值节点</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">minimum</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (node.left != NIL) &#123;</span><br><span class="line">node = node.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用v替换u</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">transplant</span><span class="params">(Node u, Node v)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (u.parent == <span class="literal">null</span>) &#123;</span><br><span class="line">root = v;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (u === u.parent.left) &#123;</span><br><span class="line">u.parent.left = v;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">u.parent.right = v;</span><br><span class="line">&#125;</span><br><span class="line">v.parent = u.parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">z</span> <span class="operator">=</span> search(root, key);</span><br><span class="line"><span class="keyword">if</span> (z == NIL) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Key &quot;</span> + key + <span class="string">&quot; not found in the tree&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Node</span> <span class="variable">y</span> <span class="operator">=</span> z;</span><br><span class="line">Node x;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">yOriginalColor</span> <span class="operator">=</span> y.color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (z.left == NIL) &#123;</span><br><span class="line">x = z.right;</span><br><span class="line">transplant(z, z.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (z.right == NIL) &#123;</span><br><span class="line">x = z.left;</span><br><span class="line">transplant(z, z.left);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y = minimum(z.right);</span><br><span class="line">yOriginalColor = y.color;</span><br><span class="line">x = y.right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (y.parent === z) &#123;</span><br><span class="line">x.parent = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">transplant(y, y.right);</span><br><span class="line">y.right = z.right;</span><br><span class="line">y.right.parent = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">transplant(z, y);</span><br><span class="line">y.left = z.left;</span><br><span class="line">y.left.parent = y;</span><br><span class="line">y.color = z.color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果原始颜色是黑色，需要修复</span></span><br><span class="line"><span class="keyword">if</span> (yOriginalColor == BLACK) &#123;</span><br><span class="line">fixDelete(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修复删除后的红黑树性质</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixDelete</span><span class="params">(Node x)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (x != root &amp;&amp; isBlack(x)) &#123;</span><br><span class="line"><span class="keyword">if</span> (x == x.parent.left) &#123;</span><br><span class="line"><span class="type">Node</span> <span class="variable">w</span> <span class="operator">=</span> x.parent.right;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1：兄弟节点是红色</span></span><br><span class="line"><span class="keyword">if</span> (isRed(w)) &#123;</span><br><span class="line">w.color = BLACK;</span><br><span class="line">x.parent.color = RED;</span><br><span class="line">leftRotate(x.parent);</span><br><span class="line">w = x.parent.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2：兄弟节点是黑色，且两个子节点都是黑色</span></span><br><span class="line"><span class="keyword">if</span> (isBlack(w.left) &amp;&amp; isBlack(w.right)) &#123;</span><br><span class="line">w.color = RED;</span><br><span class="line">x = x.parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 情况3：兄弟节点是黑色，左子节点是红色，右子节点是黑色</span></span><br><span class="line"><span class="keyword">if</span> (isBlack(w.right)) &#123;</span><br><span class="line">w.left.color = BLACK;</span><br><span class="line">w.color = RED;</span><br><span class="line">rightRotate(w);</span><br><span class="line">w = x.parent.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况4：兄弟节点是黑色，右子节点是红色</span></span><br><span class="line">w.color = x.parent.color;</span><br><span class="line">x.parent.color = BLACK;</span><br><span class="line">w.right.color = BLACK;</span><br><span class="line">leftRotate(x.parent);</span><br><span class="line">x = root;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// x是右子节点</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">w</span> <span class="operator">=</span> x.parent.left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况1：兄弟节点是红色</span></span><br><span class="line"><span class="keyword">if</span> (isRed(w)) &#123;</span><br><span class="line">w.color = BLACK;</span><br><span class="line">x.parent.color = RED;</span><br><span class="line">rightRotate(x.parent);</span><br><span class="line">w = x.parent.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2：兄弟节点是黑色，且两个子节点都是黑色</span></span><br><span class="line"><span class="keyword">if</span> (isBlack(w.right) &amp;&amp; isBlack(w.left)) &#123;</span><br><span class="line">w.color = RED;</span><br><span class="line">x = x.parent;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 情况3：兄弟节点是黑色，右子节点是红色，左子节点是黑色</span></span><br><span class="line"><span class="keyword">if</span> (isBlack(w.left)) &#123;</span><br><span class="line">w.right.color = BLACK;</span><br><span class="line">w.color = RED;</span><br><span class="line">leftRotate(w);</span><br><span class="line">w = x.parent.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况4：兄弟节点是黑色，左子节点是红色</span></span><br><span class="line">w.color = x.parent.color;</span><br><span class="line">x.parent.color = BLACK;</span><br><span class="line">w.left.color = BLACK;</span><br><span class="line">rightRotate(x.parent);</span><br><span class="line">x = root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将x设为黑色</span></span><br><span class="line">x.color = BLACK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找节点</span></span><br><span class="line"><span class="keyword">private</span> Node <span class="title function_">search</span><span class="params">(Node root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == NIL || key == root.key) &#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (key &lt; root.key) &#123;</span><br><span class="line"><span class="keyword">return</span> search(root.left, key);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> search(root.right, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公开的查找方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> search(root, key) != NIL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inorderTraversal</span><span class="params">()</span> &#123;</span><br><span class="line">inorder(root);</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inorder</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node != NIL) &#123;</span><br><span class="line">inorder(node.left);</span><br><span class="line">System.out.print(node.key +</span><br><span class="line">(node.color == RED ? <span class="string">&quot;(R) &quot;</span> : <span class="string">&quot;(B) &quot;</span>));</span><br><span class="line">inorder(node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取树的黑高</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">blackHeight</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> calculateBlackHeight(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">calculateBlackHeight</span><span class="params">(Node node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node == NIL) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">leftHeight</span> <span class="operator">=</span> calculateBlackHeight(node.left);</span><br><span class="line"><span class="type">int</span> <span class="variable">rightHeight</span> <span class="operator">=</span> calculateBlackHeight(node.right);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证左右子树黑高是否相同</span></span><br><span class="line"><span class="keyword">if</span> (leftHeight != rightHeight) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Red-Black Tree property violation: Unequal black heights&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算当前节点到叶子节点的黑色节点数</span></span><br><span class="line"><span class="keyword">return</span> isBlack(node) ? leftHeight + <span class="number">1</span> : leftHeight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>这两个实现与Java版本保持一致的功能：</p><ul><li>均包含插入、删除、查找操作</li><li>插入和删除后的红黑树性质修复</li><li>左旋和右旋操作</li><li>中序遍历</li><li>黑高计算</li></ul><p>Go版本使用了更符合Go语言习惯的结构，包括导出方法的大写命名和返回错误而非抛出异常。C++版本增加了内存管理（析构函数）以避免内存泄漏。两个实现都遵循了对应语言的代码风格和习惯。</p><h4 id="优缺点-10"><a href="#优缺点-10" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-10"><a href="#优点-10" class="headerlink" title="优点"></a>优点</h5><ol><li>查找效率高：O(log n)的查找、插入和删除操作时间复杂度</li><li>自平衡：通过颜色规则和旋转操作自动维持平衡</li><li>插入删除效率：比AVL树需要更少的旋转操作，平均性能更好</li><li>内存占用少：每个节点只需额外一个比特存储颜色信息</li><li>实际应用广泛：被广泛用于实际系统中，比如Java TreeMap、C++ STL中的map/set等</li></ol><h5 id="缺点-9"><a href="#缺点-9" class="headerlink" title="缺点"></a>缺点</h5><ol><li>实现复杂：规则多，调整操作复杂，实现难度大</li><li>删除操作尤其复杂：需要处理多种情况的平衡修复</li><li>不严格平衡：虽然路径长度不会超过最短路径的两倍，但比AVL树的平衡性稍差</li><li>旋转操作开销：虽然比AVL树少，但仍有调整开销</li></ol><h4 id="应用场景-11"><a href="#应用场景-11" class="headerlink" title="应用场景"></a>应用场景</h4><p>红黑树在众多系统和场景中有广泛应用，其平衡性能和实现效率使其成为许多高性能应用的首选数据结构。</p><p>在操作系统内核中，红黑树经常被用于实现各种调度器和资源管理器。例如，Linux内核使用红黑树来管理进程调度、内存管理和文件系统中的目录结构，它能在保持较好平衡的同时减少重新平衡操作的频率。</p><p>许多高级编程语言的标准库也选择红黑树作为有序映射和集合的底层实现。Java中的TreeMap和TreeSet，C++的std::map和std::set，以及C#的SortedDictionary等，都基于红黑树实现。这些数据结构需要保持元素的有序性，同时又要求高效的查找、插入和删除操作，这些需求红黑树都满足。</p><h4 id="扩展：与AVL树的比较"><a href="#扩展：与AVL树的比较" class="headerlink" title="扩展：与AVL树的比较"></a>扩展：与AVL树的比较</h4><ol><li>平衡性：AVL树的平衡条件更严格，要求任何节点的左右子树高度差不超过1，而红黑树允许左右子树的”黑高度”相同，但整体高度可能相差两倍。</li><li>旋转频率：AVL树为了维持严格平衡，在插入和删除操作中可能需要更多的旋转操作，而红黑树由于平衡条件较为宽松，通常需要的旋转次数更少。</li><li>使用场景：</li></ol><ul><li>AVL树更适合读操作频繁、写操作较少的场景</li><li>红黑树更适合写操作频繁的场景，如频繁的插入、删除操作</li></ul><ol><li>实际应用：</li></ol><ul><li>大多数语言的标准库实现（如Java的TreeMap、C++的map）采用红黑树</li><li>数据库索引通常偏向使用B树或B+树，这些是AVL树和红黑树思想的多路扩展</li></ul><h4 id="测验-11"><a href="#测验-11" class="headerlink" title="测验"></a>测验</h4><p>1）红黑树的五个基本性质是什么？哪一条保证了树的高度是O(log n)？</p><p>2）在红黑树中插入一个新节点后，可能会违反哪些红黑树性质？初始默认将新节点设置为什么颜色？</p><p>3）在红黑树中，如果一个节点的叔叔节点是红色，在插入修复过程中通常采取什么操作？</p><p>4）红黑树相比AVL树，在执行插入操作时平均需要的旋转次数更多还是更少？为什么？</p><blockquote><p>测验答案</p><p>1）红黑树的五个基本性质是：</p><ul><li>每个节点或是红色，或是黑色</li><li>根节点必须是黑色</li><li>所有叶子节点（NIL节点）都是黑色</li><li>如果一个节点是红色，则其两个子节点都是黑色</li><li>对于每个节点，从该节点到其所有后代叶子节点的路径上，包含相同数量的黑色节点</li></ul><p>第五条性质结合第四条性质保证了树的高度是O(log n)，因为它限制了任何路径上黑色节点数量相同，且不能有连续的红色节点，因此最长路径不会超过最短路径的两倍。</p><p>2）插入新节点后可能违反的性质主要是：</p><ul><li>性质2：如果新节点成为根，但它是红色</li><li>性质4：如果新节点是红色，且其父节点也是红色</li></ul><p>在红黑树中，新插入的节点默认设置为红色，这样可以减少违反性质5的可能性。</p><p>3）当一个节点的叔叔节点是红色时，插入修复过程通常采取颜色翻转操作：</p><ul><li>将父节点设为黑色</li><li>将叔叔节点设为黑色</li><li>将祖父节点设为红色（如果祖父是根节点，则最后重新设为黑色）</li></ul><p>4）更少。AVL树要求更严格的平衡（左右子树高度差不超过1），因此在插入时可能需要多次旋转来维持平衡。而红黑树的平衡条件较为宽松，允许树有一定程度的不平衡，所以在插入和删除时需要的旋转操作通常更少，这也是红黑树在实际应用中更常用的原因之一。</p></blockquote><h3 id="四、二叉搜索树"><a href="#四、二叉搜索树" class="headerlink" title="四、二叉搜索树"></a>四、二叉搜索树</h3><p>二叉搜索树是一种二叉树，其中每个节点的左子树中的值都小于该节点的值，右子树中的值都大于该节点的值。这种特性使得二叉搜索树在查找、插入和删除操作上具有较高的效率。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-12"><a href="#算法讲解-12" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><h5 id="介绍-12"><a href="#介绍-12" class="headerlink" title="介绍"></a>介绍</h5><p>二叉搜索树（Binary Search Tree，简称BST）是一种特殊的二叉树数据结构，它具有以下特点：对于树中的每个节点，其左子树中所有节点的值都小于该节点的值，右子树中所有节点的值都大于该节点的值。</p><h4 id="核心特性-12"><a href="#核心特性-12" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>有序性：左子树上所有节点的值都小于根节点的值，右子树上所有节点的值都大于根节点的值</li><li>唯一性：树中不存在值相同的节点（标准实现中）</li><li>平均时间复杂度：查找、插入和删除操作的平均时间复杂度为O(log n)，n是节点数量</li><li>最坏时间复杂度：如果树不平衡（比如形成链表），最坏情况下时间复杂度为O(n)</li><li>递归定义：每个子树也是一个二叉搜索树</li></ol><h4 id="基本操作-11"><a href="#基本操作-11" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="查找操作"><a href="#查找操作" class="headerlink" title="查找操作"></a>查找操作</h5><ol><li>从根节点开始</li><li>如果目标值等于当前节点值，则找到目标</li><li>如果目标值小于当前节点值，则在左子树中继续查找</li><li>如果目标值大于当前节点值，则在右子树中继续查找</li><li>如果到达叶节点仍未找到，则目标不存在</li></ol><h5 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h5><ol><li>从根节点开始</li><li>如果树为空，创建新节点作为根节点</li><li>如果新值小于当前节点值，则在左子树中继续（如果左子树为空，则创建新节点）</li><li>如果新值大于当前节点值，则在右子树中继续（如果右子树为空，则创建新节点）</li><li>如果新值等于当前节点值，根据实现可以选择忽略或更新节点</li></ol><h5 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h5><p>删除操作较为复杂，需要考虑三种情况：</p><ol><li>删除叶节点：直接移除</li><li>删除有一个子节点的节点：用子节点替换被删除的节点</li><li>删除有两个子节点的节点：<ul><li>找到右子树中的最小值节点（中序后继）</li><li>用该节点的值替换要删除的节点值</li><li>删除中序后继节点</li></ul></li></ol><h4 id="代码实现-12"><a href="#代码实现-12" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">    <span class="comment">// 定义节点类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> value;      <span class="comment">// 节点值</span></span><br><span class="line">        Node left;      <span class="comment">// 左子节点</span></span><br><span class="line">        Node right;     <span class="comment">// 右子节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node root;  <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        root = insertRecursive(root, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">insertRecursive</span><span class="params">(Node current, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点为空，创建新节点</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归插入到合适位置</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt; current.value) &#123;</span><br><span class="line">            current.left = insertRecursive(current.left, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; current.value) &#123;</span><br><span class="line">            current.right = insertRecursive(current.right, value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 值已存在，不做任何操作</span></span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> searchRecursive(root, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">searchRecursive</span><span class="params">(Node current, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 空树或到达叶节点</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到目标值</span></span><br><span class="line">        <span class="keyword">if</span> (value == current.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在左子树或右子树中查找</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt; current.value) &#123;</span><br><span class="line">            <span class="keyword">return</span> searchRecursive(current.left, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> searchRecursive(current.right, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        root = deleteRecursive(root, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">deleteRecursive</span><span class="params">(Node current, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="comment">// 树为空或未找到要删除的值</span></span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 找到要删除的节点</span></span><br><span class="line">        <span class="keyword">if</span> (value == current.value) &#123;</span><br><span class="line">            <span class="comment">// 情况1：叶节点</span></span><br><span class="line">            <span class="keyword">if</span> (current.left == <span class="literal">null</span> &amp;&amp; current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 情况2：只有一个子节点</span></span><br><span class="line">            <span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> current.right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> current.left;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 情况3：有两个子节点</span></span><br><span class="line">            <span class="comment">// 查找右子树中的最小值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">smallestValue</span> <span class="operator">=</span> findSmallestValue(current.right);</span><br><span class="line">            current.value = smallestValue;</span><br><span class="line">            <span class="comment">// 删除右子树中的最小值节点</span></span><br><span class="line">            current.right = deleteRecursive(current.right, smallestValue);</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 继续在左子树或右子树中查找</span></span><br><span class="line">        <span class="keyword">if</span> (value &lt; current.value) &#123;</span><br><span class="line">            current.left = deleteRecursive(current.left, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            current.right = deleteRecursive(current.right, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找子树中的最小值（最左侧节点）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">findSmallestValue</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findSmallestValue(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-11"><a href="#优缺点-11" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-11"><a href="#优点-11" class="headerlink" title="优点"></a>优点</h5><ol><li>查找效率高：在平衡状态下，查找、插入和删除的时间复杂度为O(log n)</li><li>有序性：中序遍历可以得到有序序列</li><li>范围查询：支持高效的范围查询操作</li><li>实现简单：相比其他高级树结构，实现较为简单直观</li><li>动态性：支持动态添加和删除元素</li></ol><h5 id="缺点-10"><a href="#缺点-10" class="headerlink" title="缺点"></a>缺点</h5><ol><li>不自平衡：在最坏情况下（如顺序插入），可能退化为链表，性能下降到O(n)</li><li>空间开销：每个节点需要额外的指针空间</li><li>实际应用受限：在需要保证最坏情况性能的场景下，需要使用自平衡树变种（如AVL树、红黑树）</li><li>不适合频繁修改：频繁增删节点可能导致树失去平衡</li></ol><h4 id="扩展：自平衡二叉搜索树"><a href="#扩展：自平衡二叉搜索树" class="headerlink" title="扩展：自平衡二叉搜索树"></a>扩展：自平衡二叉搜索树</h4><p>为了解决普通二叉搜索树可能失衡的问题，人们实现了多种自平衡二叉搜索树：</p><ol><li>AVL树：通过旋转操作保持树的平衡，每个节点的左右子树高度差不超过1</li><li>红黑树：通过颜色标记和旋转操作保持近似平衡，广泛应用于许多编程语言的标准库中</li><li>伸展树（Splay Tree）：在访问节点后通过旋转将其移至根部，适合有访问局部性的应用</li><li>B树和B+树：多路搜索树，主要用于数据库和文件系统</li></ol><h4 id="测验-12"><a href="#测验-12" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个包含1000个节点的平衡二叉搜索树中，最多需要多少次比较才能找到一个特定的值？在最坏情况下呢？</li><li>如果按照升序插入元素 1, 2, 3, 4, 5, 6, 7 到一个空的二叉搜索树中，会形成什么样的树结构？这种结构有什么问题？</li><li>当删除一个有两个子节点的节点时，为什么要用后继节点（右子树中的最小值）来替换？是否可以使用前驱节点（左子树中的最大值）？</li></ol><blockquote><p>测验答案</p><ol><li>最多需要约log₂1000 ≈ 10次比较就能找到目标值。在最坏情况下（如果树完全失衡成为链表），需要1000次比较。</li><li>按照升序插入元素会形成一个右斜树（实际上是一个链表），这种结构失去了二叉搜索树的查找效率优势，所有操作的时间复杂度都退化为O(n)。</li><li>使用后继节点替换是为了保持二叉搜索树的性质。后继节点是大于当前节点的最小节点，它保证比当前节点的左子树中的所有节点大，同时比右子树中其他节点小。前驱节点（左子树中的最大值）也可以用来替换，因为它比当前节点的左子树中其他节点大，同时比当前节点的右子树中所有节点小。两种方法都能维持二叉搜索树的特性。选择使用哪一种通常取决于实现偏好或特定应用需求。</li></ol></blockquote><h3 id="五、二叉堆"><a href="#五、二叉堆" class="headerlink" title="五、二叉堆"></a>五、二叉堆</h3><p>二叉堆是一种特殊的完全二叉树，常用于实现优先队列。最小堆的每个节点的值都小于或等于其子节点的值，最大堆的每个节点的值都大于或等于其子节点的值。二叉堆支持高效的插入、删除最值和构建操作。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-13"><a href="#算法讲解-13" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h4><h5 id="介绍-13"><a href="#介绍-13" class="headerlink" title="介绍"></a>介绍</h5><p>二叉堆是一种特殊的完全二叉树数据结构，它满足堆属性。完全二叉树是指除了最后一层外，其他层的节点都是满的，而最后一层的节点都靠左排列。二叉堆主要有两种类型：</p><ul><li>最大堆：每个父节点的值都大于或等于其子节点的值</li><li>最小堆：每个父节点的值都小于或等于其子节点的值</li></ul><p>二叉堆的这种特殊结构使得它可以高效地找到最大值或最小值，所以也常被用来实现优先队列。</p><h4 id="核心特性-13"><a href="#核心特性-13" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>完全二叉树结构：除最底层外，每层都填满，且最底层从左到右填充</li><li>堆序性质：<ul><li>最大堆：父节点值 ≥ 子节点值</li><li>最小堆：父节点值 ≤ 子节点值</li></ul></li><li>高效的顶部元素访问：可以在O(1)时间内获取最大/最小元素</li><li>数组表示：虽然概念上是树结构，但通常用数组实现，这样可以节省指针开销并提高内存局部性</li></ol><h4 id="基本操作-12"><a href="#基本操作-12" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="插入元素（Insert）"><a href="#插入元素（Insert）" class="headerlink" title="插入元素（Insert）"></a>插入元素（Insert）</h5><p>向堆中添加一个新元素：</p><ul><li>首先将新元素添加到堆的末尾</li><li>然后通过”上浮”操作调整堆，直到满足堆性质</li></ul><h5 id="删除顶部元素（Extract-Max-Min）"><a href="#删除顶部元素（Extract-Max-Min）" class="headerlink" title="删除顶部元素（Extract-Max/Min）"></a>删除顶部元素（Extract-Max/Min）</h5><p>移除并返回堆顶元素（最大/最小值）：</p><ul><li>取出堆顶元素</li><li>将堆的最后一个元素移到堆顶</li><li>通过”下沉”操作调整堆，直到满足堆性质</li></ul><h5 id="上浮（Heapify-Up）"><a href="#上浮（Heapify-Up）" class="headerlink" title="上浮（Heapify-Up）"></a>上浮（Heapify-Up）</h5><p>将一个元素向上移动到合适位置的过程：</p><ul><li>比较当前元素与其父节点</li><li>如果不满足堆性质，则交换它们</li><li>重复此过程直到满足堆性质</li></ul><h5 id="下沉（Heapify-Down）"><a href="#下沉（Heapify-Down）" class="headerlink" title="下沉（Heapify-Down）"></a>下沉（Heapify-Down）</h5><p>将一个元素向下移动到合适位置的过程：</p><ul><li>比较当前元素与其最大（或最小）的子节点</li><li>如果不满足堆性质，则交换它们</li><li>重复此过程直到满足堆性质</li></ul><h4 id="代码实现-13"><a href="#代码实现-13" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] heap;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinHeap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.heap = <span class="keyword">new</span> <span class="title class_">int</span>[capacity];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取父节点索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">parent</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取左子节点索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">leftChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取右子节点索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">rightChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换两个节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap[i];</span><br><span class="line">        heap[i] = heap[j];</span><br><span class="line">        heap[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;堆已满，无法插入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先将新元素插入到堆的末尾</span></span><br><span class="line">        heap[size] = key;</span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> size;</span><br><span class="line">        size++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上浮操作：将元素向上移动到合适位置</span></span><br><span class="line">        <span class="keyword">while</span> (current &gt; <span class="number">0</span> &amp;&amp; heap[current] &lt; heap[parent(current)]) &#123;</span><br><span class="line">            swap(current, parent(current));</span><br><span class="line">            current = parent(current);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取最小元素（不删除）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;堆为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除并返回最小元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">extractMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;堆为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">return</span> heap[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储根节点（最小值）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">root</span> <span class="operator">=</span> heap[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将最后一个元素放到根位置</span></span><br><span class="line">        heap[<span class="number">0</span>] = heap[size - <span class="number">1</span>];</span><br><span class="line">        size--;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下沉操作：将根元素向下移动到合适位置</span></span><br><span class="line">        heapifyDown(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下沉操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapifyDown</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">smallest</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> leftChild(i);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> rightChild(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找出当前节点、左子节点和右子节点中的最小值</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; size &amp;&amp; heap[left] &lt; heap[smallest]) &#123;</span><br><span class="line">            smallest = left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; heap[right] &lt; heap[smallest]) &#123;</span><br><span class="line">            smallest = right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果最小值不是当前节点，则交换并继续下沉</span></span><br><span class="line">        <span class="keyword">if</span> (smallest != i) &#123;</span><br><span class="line">            swap(i, smallest);</span><br><span class="line">            heapifyDown(smallest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印堆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHeap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            System.out.print(heap[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MinHeap</span> <span class="variable">minHeap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MinHeap</span>(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        minHeap.insert(<span class="number">5</span>);</span><br><span class="line">        minHeap.insert(<span class="number">3</span>);</span><br><span class="line">        minHeap.insert(<span class="number">8</span>);</span><br><span class="line">        minHeap.insert(<span class="number">1</span>);</span><br><span class="line">        minHeap.insert(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;构建的堆：&quot;</span>);</span><br><span class="line">        minHeap.printHeap();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最小元素：&quot;</span> + minHeap.peek());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;提取最小元素：&quot;</span> + minHeap.extractMin());</span><br><span class="line">        System.out.println(<span class="string">&quot;提取后的堆：&quot;</span>);</span><br><span class="line">        minHeap.printHeap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>这两个实现都保持了二叉堆的基本操作和性能特性，但分别采用了Go和C++语言的特定语法和风格。</p><p>Go实现使用了Go语言的特性，如方法接收器和多返回值交换，而C++实现则利用了面向对象特性和STL容器（vector）来存储堆元素。两者都实现了相同的功能：创建堆、插入元素、获取最小元素、提取最小元素等操作。</p><h4 id="优缺点-12"><a href="#优缺点-12" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-12"><a href="#优点-12" class="headerlink" title="优点"></a>优点</h5><ol><li>高效的优先级操作：O(1) 时间复杂度查找最大/最小元素</li><li>相对较快的插入和删除：O(log n) 时间复杂度</li><li>空间效率高：数组实现不需要额外的指针开销</li><li>实现简单：相比其他高级数据结构，二叉堆实现相对简单</li><li>内存局部性好：连续内存存储提高缓存命中率</li></ol><h5 id="缺点-11"><a href="#缺点-11" class="headerlink" title="缺点"></a>缺点</h5><ol><li>有限的操作集：只支持查找最值，不支持高效的搜索、删除任意元素等操作</li><li>不支持快速合并：合并两个堆的操作较为复杂</li><li>不稳定性：相同优先级的元素，其相对顺序可能改变</li><li>对缓存不友好的访问模式：特别是在堆较大时，父子节点间的跳跃访问可能导致缓存未命中</li></ol><h4 id="应用场景-12"><a href="#应用场景-12" class="headerlink" title="应用场景"></a>应用场景</h4><p>二叉堆广泛应用于各种算法和系统中：</p><ol><li>优先队列实现：当需要频繁获取最大或最小元素时，二叉堆是最常用的数据结构。操作系统中的进程调度、网络路由算法都会使用优先队列来确定下一个处理的任务。</li><li>排序算法：堆排序利用二叉堆的特性，能够以O(n log n)的时间复杂度对数据进行排序，且空间复杂度为O(1)，适合大数据排序。</li><li>图算法：许多图算法如Dijkstra最短路径、Prim最小生成树算法都使用优先队列来选择下一个处理的节点，二叉堆是其高效实现。</li><li>中位数和百分位数计算：通过维护两个堆（最大堆和最小堆），可以高效地跟踪数据流的中位数和其他统计值。</li><li>事件模拟：在离散事件模拟中，事件按时间顺序处理，优先队列可以确保按正确顺序处理事件。</li><li>数据流处理：在处理大量数据流时，如果只需要关注”最重要”的k个元素，可以维护一个大小为k的堆。</li></ol><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><h5 id="Java标准库中的堆实现"><a href="#Java标准库中的堆实现" class="headerlink" title="Java标准库中的堆实现"></a>Java标准库中的堆实现</h5><p>Java 提供了 <code>PriorityQueue</code> 类，它基于二叉堆实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriorityQueueExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 默认是最小堆</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; minHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        minHeap.add(<span class="number">5</span>);</span><br><span class="line">        minHeap.add(<span class="number">3</span>);</span><br><span class="line">        minHeap.add(<span class="number">8</span>);</span><br><span class="line">        minHeap.add(<span class="number">1</span>);</span><br><span class="line">        minHeap.add(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;优先队列内容：&quot;</span> + minHeap);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小元素：&quot;</span> + minHeap.peek());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;提取最小元素：&quot;</span> + minHeap.poll());</span><br><span class="line">        System.out.println(<span class="string">&quot;提取后的优先队列：&quot;</span> + minHeap);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建最大堆（通过自定义比较器）</span></span><br><span class="line">        PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((a, b) -&gt; b - a);</span><br><span class="line">        </span><br><span class="line">        maxHeap.add(<span class="number">5</span>);</span><br><span class="line">        maxHeap.add(<span class="number">3</span>);</span><br><span class="line">        maxHeap.add(<span class="number">8</span>);</span><br><span class="line">        maxHeap.add(<span class="number">1</span>);</span><br><span class="line">        maxHeap.add(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最大堆内容：&quot;</span> + maxHeap);</span><br><span class="line">        System.out.println(<span class="string">&quot;最大元素：&quot;</span> + maxHeap.peek());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="堆的变种"><a href="#堆的变种" class="headerlink" title="堆的变种"></a>堆的变种</h5><p>除了基本的二叉堆，还有几种重要的堆变种：</p><ol><li>d叉堆（d-ary Heap）：每个节点最多有d个子节点，而不是2个。增加d值可以减少堆的高度，在某些应用中可以提高性能。</li><li>斐波那契堆（Fibonacci Heap）：一种更复杂的堆结构，提供了更高效的合并操作和摊销时间复杂度。许多高级图算法使用斐波那契堆来提高性能。</li><li>左偏树（Leftist Heap）：一种支持高效合并操作的堆，常用于并行计算和分布式系统。</li><li>配对堆（Pairing Heap）：结构简单但性能优异的堆实现，特别适合需要频繁合并和减小键值的应用。</li></ol><h4 id="测验-13"><a href="#测验-13" class="headerlink" title="测验"></a>测验</h4><ol><li>二叉堆是一种什么样的数据结构？它有哪两种主要类型？</li><li>如果一个最小堆的数组表示为 [3, 5, 8, 6, 9, 10, 12]，那么元素5的左右子节点分别是什么？</li><li>在一个包含n个元素的二叉堆中，查找最大/最小元素、插入新元素和删除堆顶元素的时间复杂度分别是多少？</li><li>如果要将一个无序数组转换为堆，最坏情况下的时间复杂度是多少？</li><li>为什么二叉堆通常使用数组而不是链表来实现？</li></ol><blockquote><h5 id="测验答案-3"><a href="#测验答案-3" class="headerlink" title="测验答案"></a>测验答案</h5><ol><li>二叉堆是一种特殊的完全二叉树数据结构，它满足堆属性。主要有两种类型：最大堆（父节点值大于等于子节点值）和最小堆（父节点值小于等于子节点值）。</li><li>在数组表示的堆中，如果一个节点的索引是i，那么它的左子节点索引是2i+1，右子节点索引是2i+2。元素5的索引是1，所以它的左子节点是索引为3的元素6，右子节点是索引为4的元素9。</li><li>1）查找最大/最小元素：O(1) 2）插入新元素：O(log n) 3）删除堆顶元素：O(log n)</li><li>将无序数组转换为堆的时间复杂度是O(n)，这比直观预期的O(n log n)要好。因为使用了自底向上的建堆方法，对大多数节点只需要很少的下沉操作。</li><li>二叉堆使用数组实现有几个优点：1) 不需要额外的指针开销，节省内存；2) 利用索引公式可以直接计算父子节点位置，无需存储额外引用；3) 数组的连续内存分配提供了更好的内存局部性，有利于缓存性能；4) 实现简单，易于理解和维护。</li></ol></blockquote><h3 id="六、B树"><a href="#六、B树" class="headerlink" title="六、B树"></a>六、B树</h3><p>B树是一种自平衡的多路搜索树，常用于数据库和文件系统中的索引结构。它可以在内部节点和叶子节点存储数据，并且所有节点的高度保持平衡，有效减少了访问次数。</p><h5 id="算法讲解-14"><a href="#算法讲解-14" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="B树教程"><a href="#B树教程" class="headerlink" title="B树教程"></a>B树教程</h4><h5 id="介绍-14"><a href="#介绍-14" class="headerlink" title="介绍"></a>介绍</h5><p>B树是一种自平衡的多路搜索树，它是二叉搜索树的扩展，专为磁盘或其他外部存储设备设计。B树的每个节点拥有更多的子节点，这使树的高度更低，减少访问磁盘的次数。</p><p>B树中的几个关键概念：</p><ul><li>阶（Order）：定义了一个B树节点最多可以有多少个子节点。具有阶为m的B树也称为m阶B树。</li><li>内部节点（Internal Node）：除根节点和叶节点外的所有节点。</li><li>叶节点（Leaf Node）：没有子节点的节点。</li><li>键（Key）：存储在节点中的值，用于指导搜索过程。</li><li>子节点（Child）：节点的直接后代。</li></ul><p>一个阶为m的B树满足以下性质：</p><ol><li>每个节点最多有m个子节点</li><li>除了根节点和叶节点，每个节点至少有⌈m/2⌉个子节点</li><li>如果根节点不是叶节点，则至少有两个子节点</li><li>所有叶节点都在同一层</li><li>具有k个子节点的非叶节点包含k-1个键</li></ol><h4 id="核心特性-14"><a href="#核心特性-14" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>自平衡性：B树通过分裂和合并操作保持平衡，确保所有操作的对数时间复杂度。</li><li>多路分支：每个节点可以有多个子节点，而不仅仅是二叉树的两个，这降低了树的高度。</li><li>有序特性：B树中的键是有序存储的，使得搜索、插入和删除操作高效。</li><li>适合外部存储：B树的设计是为了最小化磁盘访问次数，特别适合处理大量数据时。</li><li>分块存储：键和指针组织在块中，这种结构与磁盘页面或数据块的物理特性匹配。</li></ol><h4 id="基本操作-13"><a href="#基本操作-13" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="搜索操作"><a href="#搜索操作" class="headerlink" title="搜索操作"></a>搜索操作</h5><p>搜索B树中的键与搜索二叉搜索树类似，但需要在每个节点中遍历多个键：</p><ul><li>从根节点开始</li><li>在当前节点内部按顺序查找目标键</li><li>如果找到，返回结果</li><li>如果未找到且节点是叶节点，则键不存在</li><li>否则，根据键的大小选择合适的子树继续搜索</li></ul><h5 id="插入操作-1"><a href="#插入操作-1" class="headerlink" title="插入操作"></a>插入操作</h5><ul><li>找到合适的叶节点位置</li><li>将键插入到叶节点中</li><li>如果插入导致节点超出最大容量，则分裂节点：<ul><li>选择中间键</li><li>将中间键上移到父节点</li><li>将原节点分为两个节点</li><li>如果父节点也超出容量，则继续向上分裂</li></ul></li></ul><h5 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h5><ul><li>找到包含要删除键的节点</li><li>如果节点是叶节点，直接删除</li><li>如果节点是内部节点，用前驱或后继替换要删除的键</li><li>如果删除导致节点键数量少于最小要求：<ul><li>尝试从兄弟节点借一个键</li><li>如果无法借用，则合并节点</li></ul></li></ul><h4 id="优缺点-13"><a href="#优缺点-13" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-13"><a href="#优点-13" class="headerlink" title="优点"></a>优点</h5><ol><li>减少磁盘访问：B树的高度通常很低，即使存储大量数据也只需要少量磁盘访问。</li><li>适合大数据量：因为每个节点可以包含多个键，B树可以有效地存储和检索大量数据。</li><li>平衡性保证：B树始终保持平衡，没有最坏情况性能下降的问题。</li><li>高效的范围查询：由于键是有序的，B树支持高效的范围查询操作。</li><li>适合外部存储：B树的结构非常适合磁盘等外部存储系统，使其成为数据库索引的理想选择。</li></ol><h5 id="缺点-12"><a href="#缺点-12" class="headerlink" title="缺点"></a>缺点</h5><ol><li>实现复杂：与二叉树相比，B树的实现更为复杂，特别是删除操作。</li><li>空间利用率：B树节点可能未被完全填充，导致一定程度的空间浪费。</li><li>不适合内存操作：对于完全在内存中的数据结构，B树的优势不明显，可能比其他平衡树（如红黑树）效率低。</li><li>更新开销：插入和删除操作可能导致级联的节点分裂或合并，增加了操作的复杂性。</li></ol><h4 id="应用场景-13"><a href="#应用场景-13" class="headerlink" title="应用场景"></a>应用场景</h4><p>数据库系统是B树最主要的应用领域。几乎所有主流关系数据库都使用B树或其变种来实现索引。数据库引擎通过B树索引可以快速定位到数据所在的页面，极大提升查询性能。例如，MySQL的InnoDB存储引擎使用B+树（B树的变种）来构建其索引结构。</p><p>文件系统也广泛采用B树来组织文件和目录。如NTFS、HFS+等文件系统都使用B树或其变种来管理文件分配表和目录结构，有效地支持大型存储系统中的文件检索。</p><p>时间序列数据库或地理信息系统中，经常需要检索特定范围内的数据点，B树的有序特性使这类操作变得高效。</p><p>键值存储系统如Redis、LevelDB等也借鉴了B树的设计理念。虽然它们可能使用了不同的变种或混合结构，但基本思想源自B树的高效查找和范围操作特性。</p><h4 id="扩展：B树的变种"><a href="#扩展：B树的变种" class="headerlink" title="扩展：B树的变种"></a>扩展：B树的变种</h4><h5 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h5><p>B+树是B树的一个重要变种，它在数据库系统中更为常用：</p><ul><li>所有数据都存储在叶节点</li><li>内部节点仅包含键，不包含数据</li><li>叶节点通过链表连接，支持更高效的顺序访问</li><li>适合范围查询和顺序扫描</li></ul><h5 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B*树"></a>B*树</h5><p>B*树对B树进行了进一步优化：</p><ul><li>非根节点至少2/3满（而不是1/2）</li><li>在节点分裂前先尝试与兄弟节点重新分配</li><li>分裂时涉及两个节点变为三个节点</li><li>提高了空间利用率</li></ul><h4 id="测验-14"><a href="#测验-14" class="headerlink" title="测验"></a>测验</h4><ol><li>什么是B树的阶（Order）？一个5阶B树的节点最多能有多少个键和多少个子节点？</li><li>B树和二叉搜索树的主要区别是什么？为什么B树更适合磁盘存储？</li></ol><blockquote><p>测验答案</p><ol><li>B树的阶（Order）定义了一个节点最多可以有多少个子节点。一个5阶B树的节点最多可以有5个子节点和4个键（一般来说，m阶B树节点最多有m个子节点和m-1个键）。</li><li>B树与二叉搜索树的主要区别是：B树每个节点可以有多个键和子节点（不仅仅是两个）。这使B树的高度显著降低，减少访问磁盘的次数。B树特别适合磁盘存储是因为它的结构设计考虑了磁盘的访问特性，通过减少I/O操作次数来提高性能。每个节点的大小通常设计为与磁盘块的大小匹配，这样一次磁盘读取就可以获取一个完整节点。</li></ol></blockquote><h3 id="七、B-树"><a href="#七、B-树" class="headerlink" title="七、B+树"></a>七、B+树</h3><p>B+树是一种平衡的多路搜索树，常用于数据库和文件系统中的索引结构。它的所有数据记录都存储在叶子节点，叶子节点之间通过指针连接形成有序链表，非叶子节点仅用于索引。</p><h5 id="算法讲解-15"><a href="#算法讲解-15" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="B-树-2"><a href="#B-树-2" class="headerlink" title="B+树"></a>B+树</h4><h5 id="介绍-15"><a href="#介绍-15" class="headerlink" title="介绍"></a>介绍</h5><p>B+树是一种平衡树数据结构，是B树的变种，被广泛应用于数据库索引和文件系统中。B+树保持数据有序，而且能够高效地进行查找、顺序访问、插入和删除操作。</p><p>B+树的主要组成部分包括：</p><ul><li>节点：B+树中的基本单元，分为内部节点和叶子节点</li><li>内部节点：只存储键值和指向子节点的指针，不存储数据</li><li>叶子节点：存储键值和真实数据（或指向数据的指针）</li><li>阶数（order）：表示一个节点最多可以有多少个子节点，通常用m表示</li><li>链表：所有叶子节点形成一个有序链表，方便范围查询</li></ul><blockquote><p>面试鸭上也有很多关于 B+ 树的内容：<a href="https://www.mianshiya.com/search/all?searchText=B%2B树">https://www.mianshiya.com/search/all?searchText=B%2B%E6%A0%91</a></p></blockquote><h4 id="核心特性-15"><a href="#核心特性-15" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>所有数据都存储在叶子节点上：内部节点只存储键值和指针，不存储实际数据</li><li>所有叶子节点通过指针连接成有序链表：便于范围查询和顺序遍历</li><li>平衡树结构：所有叶子节点到根节点的距离相同</li><li>高扇出性（High Fan-out）：每个节点可以包含多个键值和指针，减少树的高度</li><li>自平衡：在插入和删除操作后自动调整以保持平衡</li></ol><h4 id="基本操作-14"><a href="#基本操作-14" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="查找操作-1"><a href="#查找操作-1" class="headerlink" title="查找操作"></a>查找操作</h5><ol><li>从根节点开始，根据键值比较确定应该查找哪个子节点</li><li>递归向下查找，直到到达叶子节点</li><li>在叶子节点中查找目标数据</li></ol><h5 id="插入操作-2"><a href="#插入操作-2" class="headerlink" title="插入操作"></a>插入操作</h5><ol><li>找到应插入的叶子节点</li><li>将数据插入到该叶子节点</li><li>如果叶子节点溢出（超过最大容量）：<ul><li>分裂节点为两部分</li><li>选择一个键值上升到父节点</li><li>如有必要，递归向上分裂</li></ul></li></ol><h5 id="删除操作-2"><a href="#删除操作-2" class="headerlink" title="删除操作"></a>删除操作</h5><ol><li>找到包含目标数据的叶子节点</li><li>从叶子节点中删除数据</li><li>如果节点下溢（低于最小容量要求）：<ul><li>尝试从相邻节点借用数据</li><li>如果无法借用，则合并节点</li><li>如有必要，递归向上调整</li></ul></li></ol><h4 id="优缺点-14"><a href="#优缺点-14" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-14"><a href="#优点-14" class="headerlink" title="优点"></a>优点</h5><ol><li>高效的范围查询：叶子节点构成链表，可以快速进行范围查询</li><li>更少的IO操作：高扇出性使树高度较低，减少磁盘访问次数</li><li>适合外部存储：节点可以映射到磁盘块，优化磁盘IO</li><li>动态平衡：插入删除后自动维持平衡状态</li><li>较大的分支因子：每个节点可以存储更多键值，减少树的高度</li></ol><h5 id="缺点-13"><a href="#缺点-13" class="headerlink" title="缺点"></a>缺点</h5><ol><li>实现复杂：相比简单的树结构，实现较为复杂</li><li>修改开销大：插入和删除操作可能导致节点分裂或合并，级联影响多个节点</li><li>空间利用率：内部节点不存储数据，可能导致空间利用率不如其他结构</li><li>不适合频繁更新的场景：频繁的插入删除操作会导致频繁的树结构调整</li></ol><h4 id="应用场景-14"><a href="#应用场景-14" class="headerlink" title="应用场景"></a>应用场景</h4><p>B+树在数据库系统和文件系统中得到了广泛应用。在数据库领域，几乎所有主流关系型数据库的索引结构都采用了B+树或其变种。MySQL的InnoDB存储引擎使用B+树作为其主要索引结构，通过将数据按主键顺序组织在叶子节点中，实现了高效的查询和范围扫描操作。</p><p>在文件系统中，B+树被用于管理文件的目录结构和索引，比如NTFS、ext4等现代文件系统。由于B+树能够高效地处理大量数据，同时保持较低的树高度，使文件系统能够快速定位和访问文件。</p><p>B+树还被广泛应用于地理信息系统(GIS)中的空间索引，快速查找特定地理区域内的对象。</p><h4 id="测验-15"><a href="#测验-15" class="headerlink" title="测验"></a>测验</h4><ol><li>B+树与普通B树的主要区别是什么？</li><li>为什么数据库索引普遍使用B+树而不是其他平衡树结构（如红黑树）？</li><li>一个阶为5的B+树，其内部节点最多可以有多少个键和多少个子节点？叶子节点最多可以存储多少对键值对？</li><li>在B+树中进行范围查询（如查找10-50之间的所有值）的基本过程是什么？</li></ol><blockquote><h5 id="测验答案-4"><a href="#测验答案-4" class="headerlink" title="测验答案"></a>测验答案</h5><ol><li>B+树与普通B树的主要区别：<ul><li>B+树所有数据记录都存储在叶子节点，内部节点只存储键值</li><li>B+树所有叶子节点通过指针连接形成有序链表</li><li>B+树内部节点的键值在叶子节点中也会重复出现</li></ul></li><li>数据库索引使用B+树的原因：<ul><li>B+树高扇出性能导致树高度低，减少磁盘IO次数</li><li>所有叶子节点形成链表，支持高效的范围查询</li><li>节点设计能够很好地映射到磁盘块，优化物理存储</li><li>相比红黑树等二叉树，B+树的多路分支特性使其在外存环境下性能更优</li></ul></li><li>阶为5的B+树：<ul><li>内部节点最多有4个键（m-1）和5个子节点（m）</li><li>叶子节点最多可以存储4对键值对（m-1）</li></ul></li><li>B+树范围查询过程：<ul><li>首先通过树的查找操作找到包含起始值（这里是10）的叶子节点</li><li>在该叶子节点中找到起始值的位置</li><li>从该位置开始，沿着叶子节点链表顺序访问后续元素</li><li>持续收集满足条件的值（10-50之间的值），直到找到大于结束值（50）的元素或遍历完所有叶子节点</li></ul></li></ol></blockquote><h3 id="八、Trie树（字典树）"><a href="#八、Trie树（字典树）" class="headerlink" title="八、Trie树（字典树）"></a>八、Trie树（字典树）</h3><p>Trie树是一种特殊的前缀树结构，常用于字符串检索和匹配。每个节点代表一个字符，从根节点到任意节点的路径表示一个字符串。它特别适合用于实现字典查找、自动补全和拼写检查等功能。</p><h5 id="算法讲解-16"><a href="#算法讲解-16" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h4><h5 id="介绍-16"><a href="#介绍-16" class="headerlink" title="介绍"></a>介绍</h5><p>Trie树，也称为前缀树或字典树，是一种树形数据结构，专门用于高效存储和检索字符串集合。Trie这个名字来源于”retrieval”（检索）一词，反映了它的主要用途。</p><p>在Trie树中，每个节点代表一个字符，从根节点到某一节点的路径上经过的字符连接起来，就是该节点对应的字符串。Trie树的关键特点是，所有拥有相同前缀的字符串，在树中共享这个前缀的存储空间。</p><h4 id="核心特性-16"><a href="#核心特性-16" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>前缀共享: 具有相同前缀的字符串在Trie树中共享存储空间，大大节省了内存</li><li>快速查找: 查找一个长度为k的字符串的时间复杂度为O(k)，与Trie树中存储的字符串总数无关</li><li>词汇关联: 通过前缀可以轻松找到所有具有该前缀的单词</li><li>有序性: Trie树天然地保持了字典序</li></ol><h4 id="基本操作-15"><a href="#基本操作-15" class="headerlink" title="基本操作"></a>基本操作</h4><p>Trie树支持以下基本操作：</p><ol><li>插入(Insert): 将一个字符串添加到Trie树中</li><li>查找(Search): 检查一个完整的字符串是否存在于Trie树中</li><li>前缀查找(StartsWith): 检查Trie树中是否有以给定前缀开头的字符串</li><li>删除(Delete): 从Trie树中删除一个字符串（相对复杂）</li></ol><h4 id="代码实现-14"><a href="#代码实现-14" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trie树的节点结构</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        <span class="comment">// 子节点，使用数组实现（假设只包含小写字母a-z）</span></span><br><span class="line">        <span class="keyword">private</span> TrieNode[] children;</span><br><span class="line">        <span class="comment">// 标记该节点是否为某个单词的结尾</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> isEndOfWord;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TrieNode</span><span class="params">()</span> &#123;</span><br><span class="line">            children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>]; <span class="comment">// 26个英文字母</span></span><br><span class="line">            isEndOfWord = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化Trie树 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 向Trie树中插入单词 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">current</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 将字符转换为索引</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果当前字符的节点不存在，创建一个新节点</span></span><br><span class="line">            <span class="keyword">if</span> (current.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                current.children[index] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 移动到下一个节点</span></span><br><span class="line">            current = current.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 标记单词结束</span></span><br><span class="line">        current.isEndOfWord = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 查找Trie树中是否存在完整单词 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">node</span> <span class="operator">=</span> searchPrefix(word);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 节点存在且是单词结尾</span></span><br><span class="line">        <span class="keyword">return</span> node != <span class="literal">null</span> &amp;&amp; node.isEndOfWord;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 查找Trie树中是否存在指定前缀 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="comment">// 只需要节点存在即可</span></span><br><span class="line">        <span class="keyword">return</span> searchPrefix(prefix) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 查找前缀对应的节点 */</span></span><br><span class="line">    <span class="keyword">private</span> TrieNode <span class="title function_">searchPrefix</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">current</span> <span class="operator">=</span> root;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; prefix.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果当前字符的节点不存在，返回null</span></span><br><span class="line">            <span class="keyword">if</span> (current.children[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            current = current.children[index];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 从Trie树中删除单词（较复杂的操作） */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        delete(root, word, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(TrieNode current, String word, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 已经处理完所有字符</span></span><br><span class="line">        <span class="keyword">if</span> (index == word.length()) &#123;</span><br><span class="line">            <span class="comment">// 如果不是单词结尾，单词不存在</span></span><br><span class="line">            <span class="keyword">if</span> (!current.isEndOfWord) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 取消标记单词结尾</span></span><br><span class="line">            current.isEndOfWord = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果节点没有子节点，可以删除</span></span><br><span class="line">            <span class="keyword">return</span> hasNoChildren(current);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> word.charAt(index);</span><br><span class="line">        <span class="type">int</span> <span class="variable">childIndex</span> <span class="operator">=</span> ch - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">child</span> <span class="operator">=</span> current.children[childIndex];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果字符对应的节点不存在，单词不存在</span></span><br><span class="line">        <span class="keyword">if</span> (child == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归删除子节点</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">shouldDeleteChild</span> <span class="operator">=</span> delete(child, word, index + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果子节点应该被删除</span></span><br><span class="line">        <span class="keyword">if</span> (shouldDeleteChild) &#123;</span><br><span class="line">            current.children[childIndex] = <span class="literal">null</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果当前节点不是单词结尾且没有其他子节点，则它也可以被删除</span></span><br><span class="line">            <span class="keyword">return</span> !current.isEndOfWord &amp;&amp; hasNoChildren(current);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasNoChildren</span><span class="params">(TrieNode node)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (TrieNode child : node.children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-15"><a href="#优缺点-15" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-15"><a href="#优点-15" class="headerlink" title="优点"></a>优点</h5><ol><li>高效的字符串检索：查找、插入和删除操作的时间复杂度与字符串长度成正比(O(k))，而与存储的字符串总数无关</li><li>节省空间：通过共享前缀，减少了重复存储</li><li>支持按字典序遍历：可以方便地按字典序输出所有字符串</li><li>前缀匹配高效：特别适合前缀查询和自动补全功能</li></ol><h5 id="缺点-14"><a href="#缺点-14" class="headerlink" title="缺点"></a>缺点</h5><ol><li>内存消耗：对于不共享前缀的字符串集合，Trie树可能消耗大量内存</li><li>空间复杂度高：每个节点需要存储所有可能字符的引用（如上例中每个节点存储26个子节点引用）</li><li>不适合单次查询：如果只需要进行单次的精确字符串查询，哈希表可能是更好的选择</li><li>实现较为复杂：特别是删除操作，需要额外的逻辑来处理节点的清理</li></ol><h4 id="应用场景-15"><a href="#应用场景-15" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>自动补全和拼写检查：当用户在搜索框中输入时，Trie树可以快速找到所有以当前输入为前缀的单词，提供智能提示。输入法和文本编辑器通常利用这一特性实现单词补全功能。</li><li>IP路由表：网络路由器使用类似Trie的结构来存储IP地址，实现高效的最长前缀匹配。</li><li>字典和词汇表：电子字典应用可以使用Trie树来存储词汇，支持快速查找和前缀搜索。</li><li>文本分析：在自然语言处理中，Trie树可以用于单词频率统计、关键词提取等任务。</li><li>电话号码簿：通讯录应用可以使用Trie树来存储联系人信息，支持按号码前缀搜索。</li></ul><h4 id="测验-16"><a href="#测验-16" class="headerlink" title="测验"></a>测验</h4><p>1）一个包含10000个单词的Trie树，查找一个长度为15的单词的时间复杂度是多少？为什么？</p><p>2）Trie树与哈希表相比，在字符串存储和检索方面有什么优势和劣势？</p><p>3）如果要在Trie树中存储的不是26个小写英文字母，而是所有ASCII字符（共128个），应该如何修改Trie节点的实现？这种修改会带来什么问题？</p><p>4）描述在Trie树中删除一个单词的过程中可能遇到的复杂情况，以及如何处理这些情况。</p><blockquote><p>测验答案</p><p>1）时间复杂度是O(15)，即O(k)，其中k是单词长度。因为在Trie树中查找一个单词的时间复杂度只与单词长度有关，与树中存储的单词总数无关。查找过程就是沿着单词的每个字符在树中遍历，共需要15步。</p><p>2）</p><ul><li>优势：Trie树支持按前缀查找；保持字符串的有序性；对于有共同前缀的字符串集合更节省空间；查找时间与字符串总数无关。</li><li>劣势：Trie树的空间消耗可能较大，特别是当字符集较大时；实现更复杂；对于单次精确查询，哈希表通常更快。</li></ul><p>3）需要将TrieNode类中的children数组大小从26改为128，即<code>children = new TrieNode[128]</code>，并且修改索引计算逻辑为<code>int index = ch</code>，不再需要减去’a’。这种修改会使每个节点占用更多内存，因为即使只用到少数几个字符，每个节点仍需要为所有128个可能的字符分配空间，导致内存使用效率降低。</p><p>4）</p><ul><li>要删除的单词是另一个单词的前缀：这种情况下，只需将该单词的终止标记设为false，而不删除任何节点。</li><li>要删除的单词包含其他单词的前缀：需要仅删除不影响其他单词的节点。删除应从单词末尾向上进行，当遇到被标记为单词结尾的节点或有多个子节点的节点时停止。</li><li>需要使用递归或自底向上的方法，确保只删除不再需要的节点，保留其他单词所需的节点。</li></ul></blockquote><h3 id="九、树状数组"><a href="#九、树状数组" class="headerlink" title="九、树状数组"></a>九、树状数组</h3><p>树状数组(Binary Indexed Tree或Fenwick Tree)是一种用于高效处理数组前缀和的数据结构，利用二进制特性支持O(log n)时间的单点更新和区间查询操作。</p><h5 id="算法讲解-17"><a href="#算法讲解-17" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="树状数组（Binary-Indexed-Tree）数据结构"><a href="#树状数组（Binary-Indexed-Tree）数据结构" class="headerlink" title="树状数组（Binary Indexed Tree）数据结构"></a>树状数组（Binary Indexed Tree）数据结构</h4><p>树状数组（Binary Indexed Tree），也称为Fenwick Tree，是一种支持高效的前缀和计算和单点更新的数据结构。它的核心思想是利用二进制的性质来维护数据间的层级关系，从而在O(log n)的时间内完成查询和更新操作。</p><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>树状数组的关键概念是”父子关系”，这种关系是通过二进制表示中的最低位1来确定的。对于任意一个节点i，它的父节点是i + (i &amp; -i)，它的子节点是i - (i &amp; -i)。</p><ul><li>i &amp; -i 表达式计算的是i的二进制表示中的最低位1对应的值</li><li>例如：6的二进制是110，6&amp;(-6) = 6&amp;(010) = 2</li></ul><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>树状数组通常使用一个一维数组表示，采用1-indexed（即从索引1开始存储有效数据）的方式：</p><ul><li>BIT[i]存储了原始数组中某个区间的和</li><li>每个BIT[i]负责管理的区间长度由i &amp; -i决定</li><li>例如，BIT[6]管理的区间长度是2，包含原始数组中的A[5]和A[6]</li></ul><h4 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h4><h5 id="1-更新操作（update）"><a href="#1-更新操作（update）" class="headerlink" title="1. 更新操作（update）"></a>1. 更新操作（update）</h5><p>更新原始数组中索引i的值时，需要更新树状数组中所有包含该索引的节点。</p><p>更新步骤：</p><ol><li>从索引i开始</li><li>不断地加上i &amp; -i，直到超出数组范围</li><li>在每一步都更新对应的树状数组值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼<span class="title class_">Javascript</span>复制代码<span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">i, delta</span>) &#123;</span><br><span class="line">  i = i + <span class="number">1</span>; <span class="comment">// 转为1-indexed</span></span><br><span class="line">  <span class="keyword">while</span> (i &lt; n) &#123;</span><br><span class="line">    bit[i] += delta;</span><br><span class="line">    i += i &amp; -i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-查询前缀和（query）"><a href="#2-查询前缀和（query）" class="headerlink" title="2. 查询前缀和（query）"></a>2. 查询前缀和（query）</h5><p>查询从1到i的所有元素的和。</p><p>查询步骤：</p><ol><li>从索引i开始</li><li>不断地减去i &amp; -i，直到i变为0</li><li>在每一步都累加对应的树状数组值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">▼<span class="title class_">Javascript</span>复制代码<span class="keyword">function</span> <span class="title function_">query</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  i = i + <span class="number">1</span>; <span class="comment">// 转为1-indexed</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sum += bit[i];</span><br><span class="line">    i -= i &amp; -i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><ul><li>初始化：O(n log n)</li><li>单点更新：O(log n)</li><li>前缀和查询：O(log n)</li><li>区间查询：O(log n)</li></ul><h4 id="应用场景-16"><a href="#应用场景-16" class="headerlink" title="应用场景"></a>应用场景</h4><p>树状数组在以下场景中特别有用：</p><ol><li><strong>频繁的区间查询和单点更新</strong>：如果需要经常计算前缀和并且数组中的值会频繁变化，树状数组是一个很好的选择。</li><li><strong>计数应用</strong>：如逆序对计数、区间统计等。</li><li><strong>2D/多维前缀和</strong>：树状数组可以很容易地扩展到多维空间，处理二维甚至多维的前缀和查询。</li><li><strong>动态排名统计</strong>：通过树状数组可以维护一个动态的排名统计。</li></ol><h5 id="树状数组的优势"><a href="#树状数组的优势" class="headerlink" title="树状数组的优势"></a>树状数组的优势</h5><ul><li><strong>实现简单</strong>：相比于线段树，树状数组的代码更加简洁。</li><li><strong>常数因子小</strong>：在实际应用中，树状数组通常比线段树更快，因为它的常数因子更小。</li><li><strong>空间效率高</strong>：树状数组只需要与原始数组相同大小的空间。</li></ul><h4 id="扩展：区间更新"><a href="#扩展：区间更新" class="headerlink" title="扩展：区间更新"></a>扩展：区间更新</h4><p>通过差分数组技术，树状数组可以支持区间更新，但查询变为单点查询，这样就能在O(log n)时间内完成区间更新操作。</p><h5 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个树状数组</span></span><br><span class="line"><span class="keyword">const</span> bit = <span class="keyword">new</span> <span class="title class_">BinaryIndexedTree</span>([<span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询前缀和</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bit.<span class="title function_">query</span>(<span class="number">2</span>)); <span class="comment">// 索引0到2的和: 2+1+4=7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新元素值</span></span><br><span class="line">bit.<span class="title function_">update</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 将索引1的元素增加2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bit.<span class="title function_">query</span>(<span class="number">2</span>)); <span class="comment">// 现在索引0到2的和: 2+(1+2)+4=9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间查询</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bit.<span class="title function_">rangeQuery</span>(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">// 索引1到3的和: (1+2)+4+3=10</span></span><br></pre></td></tr></table></figure><p>树状数组是一种优雅而高效的数据结构，尤其在需要频繁执行前缀和操作和单点更新的场景中，它比简单数组更高效，比线段树更简洁。理解了其背后的二进制原理，可以帮助我们写出更高效的算法。</p><h3 id="十、线段树"><a href="#十、线段树" class="headerlink" title="十、线段树"></a>十、线段树</h3><p>线段树是一种树形数据结构，用于存储区间或线段，并且允许快速查询区间信息（如求和、最大值、最小值等）以及进行区间更新。线段树特别适合解决区间查询问题，其查询和更新操作的时间复杂度都是O(log n)。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-18"><a href="#算法讲解-18" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="线段树（Segment-Tree）"><a href="#线段树（Segment-Tree）" class="headerlink" title="线段树（Segment Tree）"></a>线段树（Segment Tree）</h4><h5 id="介绍-17"><a href="#介绍-17" class="headerlink" title="介绍"></a>介绍</h5><p>线段树（Segment Tree）是一种高效的数据结构，专门用于解决区间查询和区间修改问题。与树状数组相比，线段树功能更加强大，可以支持更多种类的区间操作。</p><p>线段树的核心思想是通过分治法将一个区间划分为多个子区间，并用树的形式组织这些区间的信息。在这棵树中，每个节点代表一个区间，根节点代表整个数组区间，叶子节点代表单个元素。</p><p>核心概念解释：</p><ul><li>区间查询：查询数组中某个区间的聚合信息（如区间和、最大值、最小值等）</li><li>区间修改：修改数组中某个区间内所有元素的值</li><li>懒惰标记（Lazy Propagation）：延迟更新策略，用于提高区间修改的效率</li><li>树节点：每个节点存储其对应区间的信息，如区间和、最大值等</li></ul><h4 id="核心特性-17"><a href="#核心特性-17" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>灵活的区间操作：支持各种区间查询（和、最大值、最小值、异或和等）和区间修改</li><li>高效的时间复杂度：查询和修改的时间复杂度均为O(log n)</li><li>强大的扩展性：可以根据需求自定义区间操作的类型</li><li>适应动态变化：能够处理数组内容频繁变化的情况</li></ol><h4 id="基本操作-16"><a href="#基本操作-16" class="headerlink" title="基本操作"></a>基本操作</h4><ol><li>构建（build）：根据初始数组构建线段树</li><li>区间查询（query）：查询某个区间的聚合信息</li><li>单点修改（update）：修改单个元素的值</li><li>区间修改（updateRange）：修改一段区间内所有元素的值（通常使用懒惰标记实现）</li></ol><p>下面是线段树的基础实现（以区间和为例）：</p><h4 id="代码实现-15"><a href="#代码实现-15" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] tree;   <span class="comment">// 存储线段树节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] lazy;   <span class="comment">// 懒惰标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] nums;   <span class="comment">// 原始数组的副本</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;        <span class="comment">// 原始数组长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        n = array.length;</span><br><span class="line">        <span class="comment">// 线段树数组大小一般为原数组大小的4倍</span></span><br><span class="line">        tree = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span> * n];</span><br><span class="line">        lazy = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span> * n];</span><br><span class="line">        nums = array.clone();</span><br><span class="line">        build(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建线段树</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="comment">// 叶子节点，存储单个元素</span></span><br><span class="line">            tree[node] = nums[start];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归构建左右子树</span></span><br><span class="line">        build(leftNode, start, mid);</span><br><span class="line">        build(rightNode, mid + <span class="number">1</span>, end);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并子节点的信息</span></span><br><span class="line">        tree[node] = tree[leftNode] + tree[rightNode];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单点修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 计算与原值的差值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> val - nums[index];</span><br><span class="line">        nums[index] = val;</span><br><span class="line">        updateSingle(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, index, diff);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateSingle</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> index, <span class="type">int</span> diff)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查索引是否在当前节点范围内</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; start || index &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新当前节点的值</span></span><br><span class="line">        tree[node] += diff;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">leftNode</span> <span class="operator">=</span> <span class="number">2</span> * node + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightNode</span> <span class="operator">=</span> <span class="number">2</span> * node + <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 递归更新子节点</span></span><br><span class="line">            updateSingle(leftNode, start, mid, index, diff);</span><br><span class="line">            updateSingle(rightNode, mid + <span class="number">1</span>, end, index, diff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 区间查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queryRange(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">queryRange</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前节点的区间完全在查询区间外</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; start || left &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果当前节点的区间完全在查询区间内</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= start &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> tree[node];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理懒惰标记</span></span><br><span class="line">        <span class="keyword">if</span> (lazy[node] != <span class="number">0</span>) &#123;</span><br><span class="line">            tree[node] += (end - start + <span class="number">1</span>) * lazy[node];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">1</span>] += lazy[node];</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">2</span>] += lazy[node];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            lazy[node] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查询范围部分覆盖当前节点的区间，需要分别查询左右子节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> queryRange(<span class="number">2</span> * node + <span class="number">1</span>, start, mid, left, right);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSum</span> <span class="operator">=</span> queryRange(<span class="number">2</span> * node + <span class="number">2</span>, mid + <span class="number">1</span>, end, left, right);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> leftSum + rightSum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 区间修改</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        updateRangeTree(<span class="number">0</span>, <span class="number">0</span>, n - <span class="number">1</span>, left, right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateRangeTree</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理当前节点的懒惰标记</span></span><br><span class="line">        <span class="keyword">if</span> (lazy[node] != <span class="number">0</span>) &#123;</span><br><span class="line">            tree[node] += (end - start + <span class="number">1</span>) * lazy[node];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">1</span>] += lazy[node];</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">2</span>] += lazy[node];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            lazy[node] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果当前节点的区间完全在修改区间外</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; start || left &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果当前节点的区间完全在修改区间内</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt;= start &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">            tree[node] += (end - start + <span class="number">1</span>) * val;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (start != end) &#123;</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">1</span>] += val;</span><br><span class="line">                lazy[<span class="number">2</span> * node + <span class="number">2</span>] += val;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改范围部分覆盖当前节点的区间，需要分别修改左右子节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        updateRangeTree(<span class="number">2</span> * node + <span class="number">1</span>, start, mid, left, right, val);</span><br><span class="line">        updateRangeTree(<span class="number">2</span> * node + <span class="number">2</span>, mid + <span class="number">1</span>, end, left, right, val);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新当前节点的值</span></span><br><span class="line">        tree[node] = tree[<span class="number">2</span> * node + <span class="number">1</span>] + tree[<span class="number">2</span> * node + <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="线段树的工作原理"><a href="#线段树的工作原理" class="headerlink" title="线段树的工作原理"></a>线段树的工作原理</h4><p>线段树的结构：</p><p>线段树是一棵完全二叉树，其中：</p><ul><li>根节点代表整个数组区间[0, n-1]</li><li>每个非叶节点的左子节点代表区间的左半部分，右子节点代表右半部分</li><li>叶子节点代表单个元素（长度为1的区间）</li></ul><p>懒惰标记（Lazy Propagation）：</p><p>懒惰标记是一种优化技术，用于延迟区间修改的传播。当一个节点的所有子节点都需要被修改时，我们不立即修改这些子节点，而是在节点上标记修改信息，只有在需要访问子节点时才将修改下推，提高区间修改的效率。</p><h4 id="优缺点-16"><a href="#优缺点-16" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-16"><a href="#优点-16" class="headerlink" title="优点"></a>优点</h5><ol><li>功能强大：支持多种区间操作，包括区间求和、最大值、最小值等</li><li>操作灵活：同时支持区间查询和区间修改</li><li>时间效率高：所有操作的时间复杂度均为O(log n)</li><li>可扩展性好：可以根据具体问题自定义节点存储的信息和操作方式</li></ol><h5 id="缺点-15"><a href="#缺点-15" class="headerlink" title="缺点"></a>缺点</h5><ol><li>内存消耗较大：需要额外的内存来存储线段树结构，通常为原数组大小的4倍</li><li>代码实现复杂：相比其他数据结构（如树状数组），实现和调试更加复杂</li><li>常数因子较大：虽然时间复杂度是O(log n)，但实际运行时间可能比树状数组等结构略长</li></ol><h4 id="应用场景-17"><a href="#应用场景-17" class="headerlink" title="应用场景"></a>应用场景</h4><p>线段树在许多实际问题中有广泛应用，特别是在需要同时支持区间查询和区间修改的情况下：</p><ol><li>范围检索系统：在数据库和信息检索系统中，线段树可用于快速查询满足特定条件的数据范围。例如，在时间序列数据库中，快速查找某一时间段内的最大/最小值或平均值。</li><li>图像处理：在处理大型图像数据时，线段树可用于快速计算图像某一区域的统计信息或实现区域性的图像编辑操作。</li><li>计算几何：在处理二维空间中的点、线或矩形等几何对象时，线段树可以高效地解决区间查询问题，如找出与给定区域相交的所有对象。</li><li>在线算法竞赛：线段树是解决动态范围查询问题的标准工具，如区间最大值、区间和等问题。</li><li>游戏开发：在大型多人在线游戏中，线段树可用于地图数据的管理和快速查询，如找出某区域内的所有游戏对象。</li></ol><h4 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h4><h5 id="动态线段树"><a href="#动态线段树" class="headerlink" title="动态线段树"></a>动态线段树</h5><p>当区间范围非常大，但实际有值的点比较稀疏时，可以使用动态线段树（通常使用指针实现）来节省空间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicSegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;      <span class="comment">// 节点值</span></span><br><span class="line">        <span class="type">int</span> lazy;     <span class="comment">// 懒惰标记</span></span><br><span class="line">        Node left;    <span class="comment">// 左子节点</span></span><br><span class="line">        Node right;   <span class="comment">// 右子节点</span></span><br><span class="line">        <span class="type">int</span> start;    <span class="comment">// 区间起点</span></span><br><span class="line">        <span class="type">int</span> end;      <span class="comment">// 区间终点</span></span><br><span class="line">        </span><br><span class="line">        Node(<span class="type">int</span> start, <span class="type">int</span> end) &#123;</span><br><span class="line">            <span class="built_in">this</span>.start = start;</span><br><span class="line">            <span class="built_in">this</span>.end = end;</span><br><span class="line">            <span class="built_in">this</span>.val = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.lazy = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node root;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicSegmentTree</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Node</span>(start, end);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 区间更新</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        update(root, left, right, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Node node, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果区间完全在更新范围外</span></span><br><span class="line">        <span class="keyword">if</span> (node.end &lt; left || node.start &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果区间完全在更新范围内</span></span><br><span class="line">        <span class="keyword">if</span> (node.start &gt;= left &amp;&amp; node.end &lt;= right) &#123;</span><br><span class="line">            node.val += (node.end - node.start + <span class="number">1</span>) * val;</span><br><span class="line">            <span class="keyword">if</span> (node.start != node.end) &#123;</span><br><span class="line">                node.lazy += val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下推懒惰标记</span></span><br><span class="line">        pushDown(node);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新左右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            update(node.left, left, right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            update(node.right, left, right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新当前节点的值</span></span><br><span class="line">        node.val = (node.left != <span class="literal">null</span> ? node.left.val : <span class="number">0</span>) + </span><br><span class="line">                   (node.right != <span class="literal">null</span> ? node.right.val : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 区间查询</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> query(root, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node node, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果区间完全在查询范围外</span></span><br><span class="line">        <span class="keyword">if</span> (node.end &lt; left || node.start &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果区间完全在查询范围内</span></span><br><span class="line">        <span class="keyword">if</span> (node.start &gt;= left &amp;&amp; node.end &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.val;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 下推懒惰标记</span></span><br><span class="line">        pushDown(node);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            sum += query(node.left, left, right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            sum += query(node.right, left, right);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 下推懒惰标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushDown</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.lazy == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (node.start + node.end) / <span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建左子节点（如果不存在）</span></span><br><span class="line">        <span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.left = <span class="keyword">new</span> <span class="title class_">Node</span>(node.start, mid);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建右子节点（如果不存在）</span></span><br><span class="line">        <span class="keyword">if</span> (node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            node.right = <span class="keyword">new</span> <span class="title class_">Node</span>(mid + <span class="number">1</span>, node.end);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新子节点的值和懒惰标记</span></span><br><span class="line">        node.left.val += (node.left.end - node.left.start + <span class="number">1</span>) * node.lazy;</span><br><span class="line">        node.right.val += (node.right.end - node.right.start + <span class="number">1</span>) * node.lazy;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node.left.start != node.left.end) &#123;</span><br><span class="line">            node.left.lazy += node.lazy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right.start != node.right.end) &#123;</span><br><span class="line">            node.right.lazy += node.lazy;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清除当前节点的懒惰标记</span></span><br><span class="line">        node.lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="可持久化线段树（Persistent-Segment-Tree）"><a href="#可持久化线段树（Persistent-Segment-Tree）" class="headerlink" title="可持久化线段树（Persistent Segment Tree）"></a>可持久化线段树（Persistent Segment Tree）</h5><p>可持久化线段树是线段树的一种变体，它可以保存历史版本，允许查询任意历史状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersistentSegmentTree</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> val;      <span class="comment">// 节点值</span></span><br><span class="line">        Node left;    <span class="comment">// 左子节点</span></span><br><span class="line">        Node right;   <span class="comment">// 右子节点</span></span><br><span class="line">        </span><br><span class="line">        Node(<span class="type">int</span> val) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = val;</span><br><span class="line">            <span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        Node(Node other) &#123;</span><br><span class="line">            <span class="built_in">this</span>.val = other.val;</span><br><span class="line">            <span class="built_in">this</span>.left = other.left;</span><br><span class="line">            <span class="built_in">this</span>.right = other.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node[] roots;  <span class="comment">// 存储历史版本的根节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> n;         <span class="comment">// 数组大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> versionCount; <span class="comment">// 版本数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersistentSegmentTree</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> maxVersions)</span> &#123;</span><br><span class="line">        n = array.length;</span><br><span class="line">        roots = <span class="keyword">new</span> <span class="title class_">Node</span>[maxVersions];</span><br><span class="line">        versionCount = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建初始版本</span></span><br><span class="line">        roots[versionCount++] = build(<span class="number">0</span>, n - <span class="number">1</span>, array);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构建线段树</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">build</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>(array[start]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line">        node.left = build(start, mid, array);</span><br><span class="line">        node.right = build(mid + <span class="number">1</span>, end, array);</span><br><span class="line">        node.val = node.left.val + node.right.val;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建新版本并更新单个元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        roots[versionCount] = update(roots[versionCount - <span class="number">1</span>], <span class="number">0</span>, n - <span class="number">1</span>, index, val);</span><br><span class="line">        versionCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">update</span><span class="params">(Node node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; start || index &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建新节点（路径复制）</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(node);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            newNode.val = val;</span><br><span class="line">            <span class="keyword">return</span> newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (index &lt;= mid) &#123;</span><br><span class="line">            newNode.left = update(node.left, start, mid, index, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newNode.right = update(node.right, mid + <span class="number">1</span>, end, index, val);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        newNode.val = newNode.left.val + newNode.right.val;</span><br><span class="line">        <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询特定版本的区间和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> version, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (version &gt;= versionCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;版本不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> query(roots[version], <span class="number">0</span>, n - <span class="number">1</span>, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">query</span><span class="params">(Node node, <span class="type">int</span> start, <span class="type">int</span> end, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; start || left &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (left &lt;= start &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.val;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> query(node.left, start, mid, left, right) + </span><br><span class="line">               query(node.right, mid + <span class="number">1</span>, end, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-17"><a href="#测验-17" class="headerlink" title="测验"></a>测验</h4><ol><li>线段树的每个节点代表什么？与二叉搜索树相比，它的节点组织方式有什么不同？</li><li>懒惰标记（Lazy Propagation）的作用是什么？它是如何提高区间修改操作效率的？</li><li>一个长度为n的数组，构建其线段树需要多少个节点？为什么？</li><li>在线段树中执行区间查询的时间复杂度是多少？请简要说明原因。</li><li>线段树和树状数组各有什么优缺点？在什么情况下应该选择线段树而非树状数组？</li></ol><blockquote><p>测验答案</p><ol><li>线段树的每个节点代表一个区间[start, end]，存储该区间的聚合信息（如区间和、最大值等）。与二叉搜索树不同，线段树的组织方式不是基于节点值的大小比较，而是基于区间的划分：每个非叶节点的左子节点代表区间的左半部分，右子节点代表右半部分。</li><li>懒惰标记是一种延迟更新的技术，用于优化区间修改操作。当需要对一个节点的所有子孙节点进行同样的修改时，不会立即递归地修改所有子节点，而是在当前节点上标记修改信息，只在需要访问子节点时才将修改信息下推。这样可以将区间修改的时间复杂度从O(n)优化到O(log n)。</li><li>一个长度为n的数组，构建其线段树需要至多4n个节点。这是因为线段树是一个近似的完全二叉树，对于一个有n个叶子的完全二叉树，一共有2n-1个节点。考虑到数组长度n可能不是2的幂，为了保险起见，通常分配4n的空间来确保足够。</li><li>线段树中执行区间查询的时间复杂度是O(log n)。这是因为在最坏情况下，一个区间查询需要访问O(log n)个节点：当查询区间与线段树的区间部分重叠时，需要分别查询左右子树；但由于树的高度是log n，因此最多需要访问O(log n)个节点。</li><li>线段树和树状数组的比较：<ul><li>线段树的优点：功能更强大，可以支持区间修改和多种区间查询（最大值、最小值等），适用范围更广。</li><li>线段树的缺点：实现复杂，内存消耗大，常数因子较大。</li><li>树状数组的优点：实现简单，内存消耗小，常数因子小，更加高效。</li><li>树状数组的缺点：功能有限，主要支持区间和查询和单点修改。</li><li>应选择线段树的情况：需要支持区间修改操作，或需要查询区间最大值/最小值等非可加性质的聚合信息时。</li></ul></li></ol></blockquote><h2 id="图结构"><a href="#图结构" class="headerlink" title="图结构"></a>图结构</h2><h3 id="一、边列表"><a href="#一、边列表" class="headerlink" title="一、边列表"></a>一、边列表</h3><p>边列表是表示图的一种简单方式，通过存储所有边的信息（起点、终点和权重）来表示图结构。适用于边数较少的稀疏图，特别适合需要频繁查询和操作边的应用场景。</p><p><code>空间复杂度:O(E)</code></p><h5 id="算法讲解-19"><a href="#算法讲解-19" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="边列表"><a href="#边列表" class="headerlink" title="边列表"></a>边列表</h4><h5 id="介绍-18"><a href="#介绍-18" class="headerlink" title="介绍"></a>介绍</h5><p>边列表是图论中最基础的图表示方式之一，它通过存储图中的每条边来描述整个图的结构。对于无权图，每条边表示为一个顶点对(u, v)；对于有权图，则表示为三元组(u, v, weight)。</p><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>边列表（Edge List）是表示图的一种简单数据结构，在理解它之前，我们需要先了解一些基础图论概念：</p><p>图（Graph）：由顶点（Vertex）和连接顶点的边（Edge）组成的数据结构。图可以用来表示现实世界中的各种关系，如社交网络、交通路线等。</p><p>顶点（Vertex）：图中的节点，通常用数字或字母标识，如 0, 1, 2… 或 A, B, C…</p><p>边（Edge）：连接两个顶点的线段，表示它们之间存在某种关系。</p><p>度（Degree）：指与该顶点相连的边的总数。</p><p>图根据不同特性可以分为几种类型：</p><p>无向图 vs 有向图：</p><ul><li>无向图：边没有方向，如果顶点 A 和 B 之间有边，则可以从 A 到 B，也可以从 B 到 A。</li><li>有向图：边有明确的方向，如果有一条从 A 到 B 的边，不代表一定有从 B 到 A 的边。比如社交系统中的”关注”。</li></ul><p>在有向图中，度分为入度和出度：</p><p>入度（In-degree）：指向该顶点的边的数量。</p><p>出度（Out-degree）：从该顶点指出的边的数量。</p><p>无权图 vs 有权图：</p><ul><li>无权图：边没有权重值，只表示两个顶点之间是否连接。</li><li>有权图：每条边带有一个权重值，表示两个顶点之间连接的某种度量（如距离、成本等）。例如城市间的公路网络，边的权重可以表示距离或行驶时间。</li></ul><p>边列表的存储方式：</p><ul><li>对于无权图：边列表中的每个元素是一个二元组 (u, v)，表示从顶点 u 到顶点 v 的一条边</li><li>对于有权图：边列表中的每个元素是一个三元组 (u, v, w)，其中 w 表示这条边的权重</li></ul><p>示例：<br> 假设有一个包含 4 个顶点 (0, 1, 2, 3) 的有权图，边的信息如下：</p><ul><li>0 连接到 1，权重为 5</li><li>0 连接到 2，权重为 3</li><li>1 连接到 2，权重为 2</li><li>2 连接到 3，权重为 7</li></ul><p>则其边列表表示为：[(0,1,5), (0,2,3), (1,2,2), (2,3,7)]</p><p>边列表虽然概念简单，但在某些算法（如 Kruskal 最小生成树算法）中具有明显优势，因为这些算法需要对所有边进行排序并逐一处理。</p><h4 id="核心特性-18"><a href="#核心特性-18" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>简单直观：直接存储边的信息，概念简单</li><li>空间效率：对于稀疏图（边数远小于|V|²的图）较为节省空间</li><li>添加边方便：只需在列表末尾添加新边</li><li>查找特定边效率低：需要遍历整个列表</li></ul><h4 id="基本操作-17"><a href="#基本操作-17" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加边：将新的边添加到列表中</li><li>删除边：遍历列表找到对应边并删除</li><li>查找边：遍历列表查找特定边</li><li>遍历所有边：直接遍历列表</li></ul><h4 id="代码实现-16"><a href="#代码实现-16" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 无权图的边列表表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> source;      <span class="comment">// 边的起点</span></span><br><span class="line">    <span class="type">int</span> destination; <span class="comment">// 边的终点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.destination = destination;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有权图的边列表表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> source;      <span class="comment">// 边的起点</span></span><br><span class="line">    <span class="type">int</span> destination; <span class="comment">// 边的终点</span></span><br><span class="line">    <span class="type">int</span> weight;      <span class="comment">// 边的权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.destination = destination;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用边列表表示的图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="type">int</span> V; <span class="comment">// 顶点数</span></span><br><span class="line">    List&lt;Edge&gt; edges; <span class="comment">// 边列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">Edge</span>(source, destination));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印所有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Edge edge : edges) &#123;</span><br><span class="line">            System.out.println(edge.source + <span class="string">&quot; -&gt; &quot;</span> + edge.destination);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-17"><a href="#优缺点-17" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>实现简单，容易理解</li><li>对于稀疏图，空间占用较小</li><li>非常适合某些算法（如Kruskal最小生成树算法）</li></ul><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>查找从某个顶点出发的所有边效率较低</li><li>判断两个顶点之间是否有边需要遍历整个列表</li><li>对于密集图，不如邻接矩阵或邻接表高效</li></ul><h4 id="应用场景-18"><a href="#应用场景-18" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>执行基于边的图算法，如Kruskal最小生成树算法</li><li>需要频繁遍历所有边的场景</li><li>存储稀疏图且不需要频繁查询特定边的情况</li><li>图的序列化和反序列化</li></ul><h4 id="测验-18"><a href="#测验-18" class="headerlink" title="测验"></a>测验</h4><ol><li>对于一个有5个顶点，7条边的无向图，如果使用边列表表示，边列表的长度是多少？</li><li>使用边列表表示一个有权图时，每条边通常需要存储哪些信息？</li><li>在边列表中，要判断图中是否存在环（cycle），需要怎样的算法复杂度？</li></ol><blockquote><p>测验答案</p><ol><li>7条边。边列表直接存储每条边，所以列表长度等于边数。</li><li>起点、终点和权重三个信息，通常表示为三元组(u, v, weight)。</li><li>至少需要O(V+E)的复杂度，因为需要遍历所有边并使用额外算法（如并查集或DFS）来检测环。</li></ol></blockquote><h3 id="二、有向图"><a href="#二、有向图" class="headerlink" title="二、有向图"></a>二、有向图</h3><p>有向图是一种边具有方向性的图结构，图中的边从一个顶点指向另一个顶点。有向图广泛应用于网络流量分析、社交网络关系建模、任务依赖关系等场景。</p><h5 id="算法讲解-20"><a href="#算法讲解-20" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h4><h5 id="介绍-19"><a href="#介绍-19" class="headerlink" title="介绍"></a>介绍</h5><p>有向图(Directed Graph，也称为Digraph)是图论中的一种基本图类型，其中每条边都有明确的方向。在有向图中，边由一个顶点（称为起点或源点）指向另一个顶点（称为终点或目标点）。这种有方向性的连接让有向图特别适合表示具有单向关系的各种现实问题。</p><p>有向图中的关键概念：</p><ul><li>顶点(Vertex)：图中的节点，通常用数字或字母标识。</li><li>有向边(Directed Edge)：从一个顶点指向另一个顶点的带方向连接，通常表示为有序对(u,v)，表示从顶点u到顶点v的边。</li><li>入度(In-degree)：指向某个顶点的边的数量。例如，如果有3条边指向顶点v，则顶点v的入度为3。</li><li>出度(Out-degree)：从某个顶点出发的边的数量。例如，如果从顶点u出发有2条边，则顶点u的出度为2。</li><li>路径(Path)：从一个顶点到另一个顶点经过的边的序列。</li><li>环(Cycle)：一条起点和终点相同的路径，表示可以从某顶点出发最终回到同一顶点。</li></ul><h4 id="核心特性-19"><a href="#核心特性-19" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>方向性：每条边都有明确的方向，从一个顶点指向另一个顶点</li><li>入度和出度：顶点的连接关系分为指入和指出两种</li><li>可能存在环：有向图中可能存在从一个顶点出发最终回到该顶点的路径</li><li>可达性：从一个顶点到另一个顶点可能存在路径，也可能不存在</li><li>强连通性：在强连通的有向图中，任意两点之间都存在相互可达的路径</li><li>拓扑排序：对于无环有向图(DAG)，可以将所有顶点排列成一个线性序列，使得所有边都从序列的前面指向后面</li></ul><h4 id="基本操作-18"><a href="#基本操作-18" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加顶点：向图中添加新的顶点</li><li>添加有向边：在两个顶点之间添加一条有向边</li><li>删除顶点：从图中删除顶点及其相关的所有边</li><li>删除边：移除图中的某条有向边</li><li>判断可达性：判断从一个顶点到另一个顶点是否存在路径</li><li>查找入边/出边：获取指向某顶点的所有边或从某顶点出发的所有边</li><li>图的遍历：通过深度优先搜索(DFS)或广度优先搜索(BFS)遍历图中的所有顶点</li></ul><h4 id="代码实现-17"><a href="#代码实现-17" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有向图的边表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> source;      <span class="comment">// 边的起点</span></span><br><span class="line">    <span class="type">int</span> destination; <span class="comment">// 边的终点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.destination = destination;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source + <span class="string">&quot; -&gt; &quot;</span> + destination;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带权重的有向边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedDirectedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> source;      <span class="comment">// 边的起点</span></span><br><span class="line">    <span class="type">int</span> destination; <span class="comment">// 边的终点</span></span><br><span class="line">    <span class="type">int</span> weight;      <span class="comment">// 边的权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedDirectedEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.destination = destination;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source + <span class="string">&quot; -&gt; &quot;</span> + destination + <span class="string">&quot; (&quot;</span> + weight + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用边列表实现的有向图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DirectedGraph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;                      <span class="comment">// 顶点数量</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;DirectedEdge&gt; edges;   <span class="comment">// 边列表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; outEdges;  <span class="comment">// 每个顶点的出边列表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; inEdges;   <span class="comment">// 每个顶点的入边列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedGraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.outEdges = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.inEdges = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            outEdges.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            inEdges.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加有向边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        <span class="keyword">if</span> (source &lt; <span class="number">0</span> || source &gt;= V || destination &lt; <span class="number">0</span> || destination &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点索引无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加到边列表</span></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">DirectedEdge</span>(source, destination));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新出边和入边列表</span></span><br><span class="line">        outEdges.get(source).add(destination);</span><br><span class="line">        inEdges.get(destination).add(source);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的顶点数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVertexCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的边数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEdgeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> edges.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取顶点的出度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOutDegree</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> outEdges.get(vertex).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取顶点的入度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInDegree</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> inEdges.get(vertex).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取从指定顶点出发的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getOutEdges</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(outEdges.get(vertex));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指向指定顶点的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getInEdges</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(inEdges.get(vertex));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断从顶点u到顶点v是否存在有向边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        validateVertex(u);</span><br><span class="line">        validateVertex(v);</span><br><span class="line">        <span class="keyword">return</span> outEdges.get(u).contains(v);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查顶点是否有效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateVertex</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点 &quot;</span> + v + <span class="string">&quot; 不在有效范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印图的所有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图中的所有有向边：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (DirectedEdge edge : edges) &#123;</span><br><span class="line">            System.out.println(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用DFS判断从顶点source到顶点target是否可达</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReachable</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(target);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        stack.push(source);</span><br><span class="line">        visited[source] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (current == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : outEdges.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                    visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                    stack.push(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-18"><a href="#优缺点-18" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul><li>能够表示单向关系，更贴近许多现实问题的本质</li><li>可以精确描述方向性约束的系统和流程</li><li>支持入度和出度的概念，更好地分析节点的影响力和依赖性</li><li>能够处理复杂的有向路径问题，如最短路径、拓扑排序等</li></ul><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>比无向图实现更复杂，需要额外维护入边和出边信息</li><li>在某些操作（如判断连通性）上需要更复杂的算法</li><li>对于双向关系的场景，需要维护两条边，增加了存储和维护成本</li><li>有向环的检测和处理比无向图更复杂</li></ul><h4 id="应用场景-19"><a href="#应用场景-19" class="headerlink" title="应用场景"></a>应用场景</h4><p>有向图在现实中有着广泛的应用，它能够准确地表示具有方向性的关系。</p><p>比如在网络流量分析中，数据包的传输方向是单向的，通过有向图可以更精确地表示和分析网络拓扑。在社交网络中，”关注”关系通常是单向的，例如A关注B并不意味着B也关注A，这种关系很自然地用有向图表示。</p><p>软件工程领域的依赖关系管理也是有向图的典型应用。模块A依赖模块B，但B可能不依赖A，这种依赖关系可以通过有向图进行建模和分析，帮助开发人员理解代码结构并识别潜在的循环依赖问题。</p><p>在任务调度系统中，任务之间的前后顺序关系形成了一个有向无环图(DAG)，通过对这个图进行拓扑排序，可以得到一个合理的任务执行顺序。GPS导航系统中的道路网络也常用有向图表示，因为许多道路是单行道，只能按一个方向行驶。</p><p>在状态机设计、工作流引擎、资源分配算法等领域有向图都发挥着不可替代的作用。</p><h4 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h4><h5 id="有向无环图-DAG"><a href="#有向无环图-DAG" class="headerlink" title="有向无环图(DAG)"></a>有向无环图(DAG)</h5><p>有向无环图(Directed Acyclic Graph, DAG)是一种没有环的有向图。DAG具有许多特殊性质，在计算机科学中有广泛应用：</p><ul><li>拓扑排序：DAG可以进行拓扑排序，即将所有顶点排列成一个线性序列，使得图中任何一条边的起点在序列中都出现在终点之前</li><li>依赖关系：可以用来表示各种依赖关系，如软件包依赖、任务调度等</li><li>动态规划：许多动态规划问题可以被表示为DAG上的最长/最短路径问题</li></ul><p>DAG的Java实现可以扩展基本的有向图实现，添加环检测和拓扑排序功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有向无环图(DAG)的实现扩展</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectedAcyclicGraph</span> <span class="keyword">extends</span> <span class="title class_">DirectedGraph</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedAcyclicGraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(V);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重写添加边的方法，确保不会形成环</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查添加此边是否会形成环</span></span><br><span class="line">        <span class="keyword">if</span> (isReachable(destination, source)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;添加此边将形成环，DAG不允许有环&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">super</span>.addEdge(source, destination);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 拓扑排序 - Kahn算法</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">topologicalSort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> getVertexCount();</span><br><span class="line">        <span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[V];</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算每个顶点的入度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            inDegree[v] = getInDegree(v);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建一个队列，将所有入度为0的顶点加入队列</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理队列中的顶点</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 从队列中取出一个顶点并添加到结果中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            result.add(u);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对于从u出发的每条边(u,v)，将v的入度减1</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> v : getOutEdges(u)) &#123;</span><br><span class="line">                <span class="comment">// 将v的入度减1</span></span><br><span class="line">                inDegree[v]--;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果v的入度变为0，则将其加入队列</span></span><br><span class="line">                <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果结果中的顶点数小于图中的顶点数，说明图中有环</span></span><br><span class="line">        <span class="keyword">if</span> (result.size() != V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;图中存在环，无法进行拓扑排序&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h5><p>在有向图中，强连通分量(Strongly Connected Component, SCC)是指图中的一个子图，其中任意两个顶点之间都存在相互可达的路径。强连通分量是理解有向图结构的重要概念，也是许多图算法的基础。</p><p>Kosaraju算法和Tarjan算法是寻找有向图中强连通分量的经典算法。这些算法可以在线性时间内找出所有强连通分量，为有向图分析提供了强大工具。</p><h4 id="测验-19"><a href="#测验-19" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个有向图中，如果顶点A的出度为3，入度为2，这意味着什么？</li><li>一个有5个顶点的有向图最多可以有多少条边？这种情况下图的特点是什么？</li><li>什么是有向图中的”汇点”(sink)和”源点”(source)？它们各自具有什么特征？</li><li>拓扑排序只能应用于什么类型的有向图？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>A可以直接到达3个其他顶点，有2个顶点可以直接到达A。</li><li>一个有n个顶点的有向图最多可以有n(n-1)条边，对于5个顶点就是5×4=20条边。这种情况下，图中任意两个不同顶点之间都有一条有向边，称为完全有向图。</li><li>源点(source)是指入度为0的顶点，即没有边指向该顶点；汇点(sink)是指出度为0的顶点，即没有从该顶点出发的边。它们分别代表了信息流的起点和终点。</li><li>拓扑排序只能应用于有向无环图(DAG)。因为如果图中存在环，那么环上的顶点之间存在循环依赖关系，无法确定它们的先后顺序，因此无法得到一个有效的拓扑序列。</li></ol></blockquote><h3 id="三、无向图"><a href="#三、无向图" class="headerlink" title="三、无向图"></a>三、无向图</h3><p>无向图是一种边没有方向的图结构，图中的边表示两个顶点之间的双向连接。无向图广泛应用于社交网络、地图导航、电路设计等场景。</p><h5 id="算法讲解-21"><a href="#算法讲解-21" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h4><h5 id="介绍-20"><a href="#介绍-20" class="headerlink" title="介绍"></a>介绍</h5><p>无向图(Undirected Graph)是图论中最基础的图结构之一，其中的边没有方向性，表示节点之间的双向连接关系。在无向图中，如果顶点A和顶点B之间有一条边，那么可以从A到达B，也可以从B到达A。这种对称的连接关系使无向图成为表示许多现实世界中双向关系的理想模型。</p><p>无向图中的关键概念包括：</p><ul><li>顶点(Vertex)：图中的节点，通常用数字或字母标识。</li><li>边(Edge)：连接两个顶点的线段，表示它们之间存在某种关系。在无向图中，边用无序对{u,v}表示，表明顶点u和v之间有连接。</li><li>度(Degree)：与某个顶点相连的边的数量。例如，如果顶点v连接了3条边，则顶点v的度为3。</li><li>路径(Path)：从一个顶点到另一个顶点经过的边的序列。</li><li>连通图(Connected Graph)：任意两个顶点之间都存在路径的图。</li><li>连通分量(Connected Component)：图中的极大连通子图。</li></ul><h4 id="核心特性-20"><a href="#核心特性-20" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>双向连接：任何边都可以双向通行，从一个顶点可以到达相邻的任何顶点</li><li>对称性：如果顶点A与顶点B相连，那么顶点B也与顶点A相连</li><li>度的概念：顶点的度表示与该顶点相连的边的数量</li><li>连通性：无向图的连通性比有向图更为简单，只需考虑是否存在路径，不需要考虑方向</li><li>树与环：无环的连通无向图是一棵树；含有环的图至少有一条路径可以从一个顶点出发最终回到该顶点</li></ul><h4 id="基本操作-19"><a href="#基本操作-19" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加顶点：向图中添加新的顶点</li><li>添加边：在两个顶点之间添加一条无向边</li><li>删除顶点：从图中删除顶点及其相关的所有边</li><li>删除边：移除连接两个顶点的边</li><li>判断连通性：判断两个顶点之间是否存在路径</li><li>查找相邻顶点：获取与指定顶点相邻的所有顶点</li><li>图的遍历：通过深度优先搜索(DFS)或广度优先搜索(BFS)遍历图中的所有顶点</li></ul><blockquote><p>出于篇幅考虑，Java之外的语言实现删掉了遍历方法，需要的小伙伴可以参考Java实现自行补充。</p></blockquote><h4 id="代码实现-18"><a href="#代码实现-18" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无向图的边表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndirectedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> vertex1;  <span class="comment">// 边的一个顶点</span></span><br><span class="line">    <span class="type">int</span> vertex2;  <span class="comment">// 边的另一个顶点</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UndirectedEdge</span><span class="params">(<span class="type">int</span> vertex1, <span class="type">int</span> vertex2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertex1 = vertex1;</span><br><span class="line">        <span class="built_in">this</span>.vertex2 = vertex2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vertex1 + <span class="string">&quot; -- &quot;</span> + vertex2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带权重的无向边</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedUndirectedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> vertex1;  <span class="comment">// 边的一个顶点</span></span><br><span class="line">    <span class="type">int</span> vertex2;  <span class="comment">// 边的另一个顶点</span></span><br><span class="line">    <span class="type">int</span> weight;   <span class="comment">// 边的权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedUndirectedEdge</span><span class="params">(<span class="type">int</span> vertex1, <span class="type">int</span> vertex2, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertex1 = vertex1;</span><br><span class="line">        <span class="built_in">this</span>.vertex2 = vertex2;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vertex1 + <span class="string">&quot; -- &quot;</span> + vertex2 + <span class="string">&quot; (&quot;</span> + weight + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用边列表实现的无向图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UndirectedGraph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;                      <span class="comment">// 顶点数量</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;UndirectedEdge&gt; edges; <span class="comment">// 边列表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; adjacencyList; <span class="comment">// 邻接表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UndirectedGraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.adjacencyList = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            adjacencyList.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加无向边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> vertex1, <span class="type">int</span> vertex2)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        <span class="keyword">if</span> (vertex1 &lt; <span class="number">0</span> || vertex1 &gt;= V || vertex2 &lt; <span class="number">0</span> || vertex2 &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点索引无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加到边列表</span></span><br><span class="line">        edges.add(<span class="keyword">new</span> <span class="title class_">UndirectedEdge</span>(vertex1, vertex2));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新邻接表（无向图需要双向添加）</span></span><br><span class="line">        adjacencyList.get(vertex1).add(vertex2);</span><br><span class="line">        adjacencyList.get(vertex2).add(vertex1);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的顶点数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVertexCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的边数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEdgeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> edges.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取顶点的度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDegree</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> adjacencyList.get(vertex).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取与指定顶点相邻的所有顶点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getNeighbors</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(adjacencyList.get(vertex));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两个顶点之间是否存在边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEdge</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> &#123;</span><br><span class="line">        validateVertex(v1);</span><br><span class="line">        validateVertex(v2);</span><br><span class="line">        <span class="keyword">return</span> adjacencyList.get(v1).contains(v2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查顶点是否有效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateVertex</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点 &quot;</span> + v + <span class="string">&quot; 不在有效范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印图的所有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图中的所有无向边：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (UndirectedEdge edge : edges) &#123;</span><br><span class="line">            System.out.println(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用BFS判断两个顶点之间是否存在路径（检查连通性）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        validateVertex(start);</span><br><span class="line">        validateVertex(end);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (start == end) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        visited[start] = <span class="literal">true</span>;</span><br><span class="line">        queue.offer(start);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjacencyList.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (neighbor == end) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                    visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                    queue.offer(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用DFS遍历图（从指定顶点开始）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start)</span> &#123;</span><br><span class="line">        validateVertex(start);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        System.out.print(<span class="string">&quot;DFS遍历（从顶点&quot;</span> + start + <span class="string">&quot;开始）：&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        dfsUtil(start, visited);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfsUtil</span><span class="params">(<span class="type">int</span> vertex, <span class="type">boolean</span>[] visited)</span> &#123;</span><br><span class="line">        <span class="comment">// 标记当前顶点为已访问并打印</span></span><br><span class="line">        visited[vertex] = <span class="literal">true</span>;</span><br><span class="line">        System.out.print(vertex + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归处理所有未访问的邻居</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjacencyList.get(vertex)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                dfsUtil(neighbor, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用BFS遍历图（从指定顶点开始）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> start)</span> &#123;</span><br><span class="line">        validateVertex(start);</span><br><span class="line">        </span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        visited[start] = <span class="literal">true</span>;</span><br><span class="line">        queue.offer(start);</span><br><span class="line">        </span><br><span class="line">        System.out.print(<span class="string">&quot;BFS遍历（从顶点&quot;</span> + start + <span class="string">&quot;开始）：&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            System.out.print(current + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjacencyList.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                    visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                    queue.offer(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算图中的连通分量数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countConnectedComponents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[v]) &#123;</span><br><span class="line">                <span class="comment">// 对未访问的顶点执行DFS</span></span><br><span class="line">                dfsForComponents(v, visited);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfsForComponents</span><span class="params">(<span class="type">int</span> vertex, <span class="type">boolean</span>[] visited)</span> &#123;</span><br><span class="line">        visited[vertex] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adjacencyList.get(vertex)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                dfsForComponents(neighbor, visited);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-19"><a href="#优缺点-19" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h5><ul><li>表示双向关系的直观模型，容易理解和使用</li><li>实现相对简单，不需要考虑方向性</li><li>许多图算法在无向图上的实现更为简洁</li><li>连通性判断更加直观，不需要考虑方向限制</li><li>适合表示”对等”关系，如社交网络中的”朋友”关系</li></ul><h5 id="缺点：-2"><a href="#缺点：-2" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>无法表示单向或不对称的关系</li><li>在某些需要方向性的应用场景下表达能力有限</li><li>对于需要区分入度和出度的应用场景不适用</li><li>不能直接表示有向流网络中的流量问题</li></ul><h4 id="应用场景-20"><a href="#应用场景-20" class="headerlink" title="应用场景"></a>应用场景</h4><p>无向图特别适合表示双向或对等的关系：</p><p>社交网络中的”朋友”关系常用无向图建模，因为朋友关系通常是双向的。如果A是B的朋友，那么B也是A的朋友。</p><p>道路网络中，如果没有单行道限制，车辆可以在同一条道路上双向通行，这种情况下使用无向图建模更为自然。同样，电信网络中的通信链路、电力网络中的电力线路等，如果允许双向传输，也适合用无向图表示。</p><p>计算机网络拓扑中，如果两台设备之间可以互相通信，则它们之间的连接可以用无向边表示。互联网骨干网络的结构通常被建模为无向图，以便分析路由和连通性问题。</p><p>分子结构和化学键也常用无向图表示，其中原子是顶点，化学键是边。这种表示方法帮助化学家分析分子的结构特性和性质。</p><h4 id="扩展-4"><a href="#扩展-4" class="headerlink" title="扩展"></a>扩展</h4><h5 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h5><p>最小生成树(Minimum Spanning Tree, MST)是无向图中的一个重要概念，指连接图中所有顶点的一棵权重最小的树。对于带权无向图，最小生成树有着重要的应用价值：</p><ul><li>网络设计：设计成本最低的通信网络</li><li>电路设计：最小化电路中的连线长度</li><li>集群分析：在数据挖掘中用于对象分组</li></ul><p>求解最小生成树的两个经典算法是Kruskal算法和Prim算法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Kruskal算法实现最小生成树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KruskalMST</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;WeightedUndirectedEdge&gt; mst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); <span class="comment">// 最小生成树的边</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">weight</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 最小生成树的总权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">KruskalMST</span><span class="params">(UndirectedWeightedGraph G)</span> &#123;</span><br><span class="line">        <span class="comment">// 边列表</span></span><br><span class="line">        List&lt;WeightedUndirectedEdge&gt; edges = G.getAllEdges();</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> G.getVertexCount();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按权重排序</span></span><br><span class="line">        Collections.sort(edges, Comparator.comparingInt(e -&gt; e.weight));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 并查集，用于检测环</span></span><br><span class="line">        <span class="type">UnionFind</span> <span class="variable">uf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnionFind</span>(V);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 贪心选择边</span></span><br><span class="line">        <span class="keyword">for</span> (WeightedUndirectedEdge edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge.vertex1;</span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> edge.vertex2;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果添加此边不会形成环</span></span><br><span class="line">            <span class="keyword">if</span> (uf.find(v) != uf.find(w)) &#123;</span><br><span class="line">                uf.union(v, w); <span class="comment">// 合并集合</span></span><br><span class="line">                mst.add(edge);  <span class="comment">// 添加到最小生成树</span></span><br><span class="line">                weight += edge.weight; <span class="comment">// 更新总权重</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果已经有V-1条边，MST构建完成</span></span><br><span class="line">                <span class="keyword">if</span> (mst.size() == V - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取最小生成树的边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;WeightedUndirectedEdge&gt; <span class="title function_">edges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mst;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取最小生成树的总权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">weight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并查集实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span>[] rank;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">            parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                parent[i] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">                parent[x] = find(parent[x]); <span class="comment">// 路径压缩</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> parent[x];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 合并</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootX</span> <span class="operator">=</span> find(x);</span><br><span class="line">            <span class="type">int</span> <span class="variable">rootY</span> <span class="operator">=</span> find(y);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (rootX == rootY) <span class="keyword">return</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 按秩合并</span></span><br><span class="line">            <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootX] = rootY;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent[rootY] = rootX;</span><br><span class="line">                rank[rootX]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="无向图的连通分量"><a href="#无向图的连通分量" class="headerlink" title="无向图的连通分量"></a>无向图的连通分量</h5><p>在无向图中，连通分量(Connected Component)是指图中的一个极大连通子图，其中任意两个顶点之间都存在路径。寻找图中的连通分量对于分析网络结构和数据聚类有重要意义。</p><h4 id="测验-20"><a href="#测验-20" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个拥有10个顶点的无向图中，最多可以有多少条边？这样的图被称为什么？</li><li>如果一个无向图有n个顶点和m条边，要使该图连通，m至少需要是多少？这种情况下图的结构是什么？</li><li>什么是无向图的桥(Bridge)？移除桥会对图的连通性产生什么影响？</li><li>与有向图相比，无向图表示的边列表长度有什么特点？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>最多可以有10×(10-1)/2 = 45条边。这样的图被称为完全图(Complete Graph)，其中任意两个顶点之间都有一条边连接。</li><li>至少需要n-1条边。这种情况下，图的结构是一棵树(Tree)，即恰好连通且没有环的无向图。</li><li>桥是指图中的一条边，如果删除这条边，会导致图中的连通分量数量增加。换句话说，桥是连接图中两个连通分量的唯一边，移除桥会导致这两个部分不再连通。</li><li>如果用边列表表示，无向图的边列表长度与有向图表示相同连接关系时的边列表长度相比，通常会更短。这是因为在有向图中，两个顶点之间的双向连接需要用两条有向边表示，而在无向图中只需要一条无向边。</li></ol></blockquote><h3 id="四、加权图"><a href="#四、加权图" class="headerlink" title="四、加权图"></a>四、加权图</h3><p>加权图是每条边都有一个与之关联的数值（权重）的图结构。权重可以表示距离、成本、容量等概念，广泛应用于路径规划、网络流量分析等场景。算法讲解</p><h4 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h4><h5 id="介绍-21"><a href="#介绍-21" class="headerlink" title="介绍"></a>介绍</h5><p>加权图(Weighted Graph)是图论中的一种重要图类型，特点是每条边都有一个与之关联的数值，称为权重(Weight)或成本(Cost)。这些权重可以表示各种现实世界中的量化关系，如距离、时间、费用、容量等。加权图广泛应用于网络分析、路径规划、资源分配等领域，是解决许多优化问题的基础数据结构。</p><p>加权图中的关键概念包括：</p><ul><li>顶点(Vertex)：图中的节点，通常用数字或字母标识。</li><li>带权边(Weighted Edge)：连接两个顶点的边，附带一个表示某种度量的权重值。例如在表示交通网络的图中，边的权重可能代表路径长度或通行时间。</li><li>权重(Weight)：分配给边的数值，根据应用场景可以是正数、负数或零。</li><li>路径权重(Path Weight)：路径上所有边的权重总和，也称为路径长度或路径成本。</li><li>最短路径(Shortest Path)：两个顶点之间权重总和最小的路径。</li><li>最小生成树(Minimum Spanning Tree)：连接图中所有顶点且总权重最小的子图。</li></ul><h4 id="核心特性-21"><a href="#核心特性-21" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>边权重：每条边都有一个关联的数值，表示某种度量或成本</li><li>路径评估：可以根据边的权重计算路径的总成本或效率</li><li>最优路径选择：支持寻找最短路径、最小生成树等优化问题</li><li>类型多样性：可以是有向的或无向的，根据关系的性质决定</li><li>权重特性：权重可以是正数、负数或零，表示不同的约束条件</li><li>算法基础：是Dijkstra算法、Bellman-Ford算法、Kruskal算法、Prim算法等经典算法的应用对象</li></ul><h4 id="基本操作-20"><a href="#基本操作-20" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加带权边：在两个顶点之间添加一条带有特定权重的边</li><li>获取边权重：查询连接两个顶点的边的权重</li><li>查找相邻顶点及其权重：获取与指定顶点相邻的所有顶点及对应的边权重</li><li>更新边权重：修改已存在边的权重值</li><li>计算路径总权重：累加路径上所有边的权重</li><li>最短路径查找：找到两点间权重和最小的路径</li><li>最小生成树构建：构建连接所有顶点的最小权重子图</li></ul><h4 id="代码实现-19"><a href="#代码实现-19" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带权边表示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedEdge</span> &#123;</span><br><span class="line">    <span class="type">int</span> source;      <span class="comment">// 边的起点</span></span><br><span class="line">    <span class="type">int</span> destination; <span class="comment">// 边的终点</span></span><br><span class="line">    <span class="type">double</span> weight;   <span class="comment">// 边的权重</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.source = source;</span><br><span class="line">        <span class="built_in">this</span>.destination = destination;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> source + <span class="string">&quot; -&gt; &quot;</span> + destination + <span class="string">&quot; (&quot;</span> + weight + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用邻接表实现的加权图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedGraph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;                                  <span class="comment">// 顶点数量</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;WeightedEdge&gt; edges;               <span class="comment">// 边列表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;WeightedEdge&gt;&gt; adj;   <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> directed;                       <span class="comment">// 是否为有向图</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedGraph</span><span class="params">(<span class="type">int</span> V, <span class="type">boolean</span> directed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        <span class="built_in">this</span>.directed = directed;</span><br><span class="line">        <span class="built_in">this</span>.edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.adj = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            adj.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加带权边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">double</span> weight)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        <span class="keyword">if</span> (source &lt; <span class="number">0</span> || source &gt;= V || destination &lt; <span class="number">0</span> || destination &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点索引无效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">WeightedEdge</span> <span class="variable">edge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeightedEdge</span>(source, destination, weight);</span><br><span class="line">        edges.add(edge);</span><br><span class="line">        adj.get(source).add(edge);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是无向图，还需要添加反方向的边</span></span><br><span class="line">        <span class="keyword">if</span> (!directed) &#123;</span><br><span class="line">            <span class="type">WeightedEdge</span> <span class="variable">reverseEdge</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeightedEdge</span>(destination, source, weight);</span><br><span class="line">            adj.get(destination).add(reverseEdge);</span><br><span class="line">            <span class="comment">// 注意：不需要将反向边添加到边列表中，否则会重复计数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的顶点数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVertexCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的边数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEdgeCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> edges.size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取从指定顶点出发的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;WeightedEdge&gt; <span class="title function_">getEdges</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(adj.get(vertex));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取图中的所有边</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;WeightedEdge&gt; <span class="title function_">getAllEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(edges);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取两个顶点之间边的权重，如果不存在则返回Double.POSITIVE_INFINITY</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWeight</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(destination);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : adj.get(source)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.destination == destination) &#123;</span><br><span class="line">                <span class="keyword">return</span> edge.weight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Double.POSITIVE_INFINITY;  <span class="comment">// 表示不存在这条边</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断从顶点source到顶点destination是否存在边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(destination);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : adj.get(source)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.destination == destination) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新边的权重，如果边不存在则返回false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateEdgeWeight</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">double</span> newWeight)</span> &#123;</span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(destination);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新邻接表中的权重</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : adj.get(source)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.destination == destination) &#123;</span><br><span class="line">                edge.weight = newWeight;</span><br><span class="line">                found = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是无向图，还需要更新反方向的边</span></span><br><span class="line">        <span class="keyword">if</span> (!directed) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WeightedEdge edge : adj.get(destination)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge.destination == source) &#123;</span><br><span class="line">                    edge.weight = newWeight;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新边列表中的权重</span></span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span> (edge.source == source &amp;&amp; edge.destination == destination) &#123;</span><br><span class="line">                edge.weight = newWeight;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查顶点是否有效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateVertex</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v &lt; <span class="number">0</span> || v &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点 &quot;</span> + v + <span class="string">&quot; 不在有效范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印图的所有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printEdges</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;图中的所有&quot;</span> + (directed ? <span class="string">&quot;有向&quot;</span> : <span class="string">&quot;无向&quot;</span>) + <span class="string">&quot;边：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : edges) &#123;</span><br><span class="line">            System.out.println(edge);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-20"><a href="#优缺点-20" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-3"><a href="#优点：-3" class="headerlink" title="优点："></a>优点：</h5><ul><li>能够模拟和解决现实世界中的加权关系问题</li><li>支持寻找最优路径，如最短路径、最小生成树等</li><li>可以表示复杂的网络结构和优化约束</li><li>适合解决资源分配、网络流等优化问题</li><li>为多种经典算法提供了应用场景</li></ul><h5 id="缺点：-3"><a href="#缺点：-3" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>比无权图实现更复杂，需要额外存储和管理权重信息</li><li>算法时间复杂度通常较高，特别是在大规模图上</li><li>负权重循环可能导致某些算法（如Dijkstra）失效</li><li>实际应用中可能需要处理权重的动态变化</li><li>对于某些特殊情况（如含负权重环的图），问题可能无解或难以求解</li></ul><h4 id="应用场景-21"><a href="#应用场景-21" class="headerlink" title="应用场景"></a>应用场景</h4><p>道路网络可以表示为加权图，其中边的权重可以是距离、预计行驶时间或燃油消耗等因素。通过Dijkstra或A*算法，系统可以为用户找到最短或最快的路线。</p><p>在电信网络中，连接不同节点的线路有不同的容量和成本，通过加权图建模可以设计出高效且经济的网络布局。最小生成树算法如Kruskal和Prim可以用来确定最经济的连接方式。</p><p>资源调度和分配问题，如作业调度、网络流量管理等，也经常使用加权图建模。通过最大流或最小成本流算法，可以解决复杂的资源分配优化问题。</p><h4 id="扩展-5"><a href="#扩展-5" class="headerlink" title="扩展"></a>扩展</h4><p>在上述基础实现的基础上，可以补充 最短路径查找 和 最小生成树构建 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用Dijkstra算法计算从源点到所有其他顶点的最短路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span>[] dijkstra(<span class="type">int</span> source) &#123;</span><br><span class="line">    validateVertex(source);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 距离数组，存储源点到每个顶点的最短距离</span></span><br><span class="line">    <span class="type">double</span>[] dist = <span class="keyword">new</span> <span class="title class_">double</span>[V];</span><br><span class="line">    Arrays.fill(dist, Double.POSITIVE_INFINITY);</span><br><span class="line">    dist[source] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标记数组，标记顶点是否已经处理</span></span><br><span class="line">    <span class="type">boolean</span>[] processed = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用优先队列选择当前最短距离的顶点</span></span><br><span class="line">    PriorityQueue&lt;Node&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(Comparator.comparingDouble(node -&gt; node.distance));</span><br><span class="line">    pq.add(<span class="keyword">new</span> <span class="title class_">Node</span>(source, <span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!pq.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 取出距离最小的顶点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">current</span> <span class="operator">=</span> pq.poll();</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> current.vertex;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果这个顶点已经处理过，则跳过</span></span><br><span class="line">        <span class="keyword">if</span> (processed[u]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 标记为已处理</span></span><br><span class="line">        processed[u] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新所有相邻顶点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (WeightedEdge edge : adj.get(u)) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge.destination;</span><br><span class="line">            <span class="type">double</span> <span class="variable">weight</span> <span class="operator">=</span> edge.weight;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果找到更短的路径，更新距离并添加到优先队列</span></span><br><span class="line">            <span class="keyword">if</span> (!processed[v] &amp;&amp; dist[u] + weight &lt; dist[v]) &#123;</span><br><span class="line">                dist[v] = dist[u] + weight;</span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">Node</span>(v, dist[v]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dist;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于Dijkstra算法的辅助类</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> vertex;</span><br><span class="line">    <span class="type">double</span> distance;</span><br><span class="line">    </span><br><span class="line">    Node(<span class="type">int</span> vertex, <span class="type">double</span> distance) &#123;</span><br><span class="line">        <span class="built_in">this</span>.vertex = vertex;</span><br><span class="line">        <span class="built_in">this</span>.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Kruskal算法计算最小生成树（仅适用于无向图）</span></span><br><span class="line"><span class="keyword">public</span> List&lt;WeightedEdge&gt; <span class="title function_">kruskalMST</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (directed) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;Kruskal算法只适用于无向图&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 最小生成树的边</span></span><br><span class="line">    List&lt;WeightedEdge&gt; mst = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按权重排序所有边</span></span><br><span class="line">    List&lt;WeightedEdge&gt; sortedEdges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(edges);</span><br><span class="line">    sortedEdges.sort(Comparator.comparingDouble(e -&gt; e.weight));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 并查集用于检测环</span></span><br><span class="line">    <span class="type">DisjointSet</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisjointSet</span>(V);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理每条边</span></span><br><span class="line">    <span class="keyword">for</span> (WeightedEdge edge : sortedEdges) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> edge.source;</span><br><span class="line">        <span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> edge.destination;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果这条边不会形成环，则添加到MST</span></span><br><span class="line">        <span class="keyword">if</span> (ds.find(u) != ds.find(v)) &#123;</span><br><span class="line">            mst.add(edge);</span><br><span class="line">            ds.union(u, v);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果MST已经有V-1条边，则完成</span></span><br><span class="line">            <span class="keyword">if</span> (mst.size() == V - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> mst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并查集实现，用于Kruskal算法</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DisjointSet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] rank;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DisjointSet</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化：每个元素是自己的父节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找元素所属的集合（带路径压缩）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            parent[x] = find(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并两个集合（按秩合并）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootX</span> <span class="operator">=</span> find(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootY</span> <span class="operator">=</span> find(y);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">            rank[rootX]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h5><p>最短路径问题是加权图中最经典的问题之一，指在加权图中找到从一个顶点到另一个顶点的总权重最小的路径。主要的算法包括：</p><ol><li>Dijkstra算法：适用于所有边权重为非负数的图，是求解单源最短路径的高效算法</li><li>Bellman-Ford算法：可以处理含有负权边的图，但不能处理负权环</li><li>Floyd-Warshall算法：计算图中所有顶点对之间的最短路径</li></ol><h5 id="最小生成树算法"><a href="#最小生成树算法" class="headerlink" title="最小生成树算法"></a>最小生成树算法</h5><p>最小生成树(MST)是连接加权无向图中所有顶点且总权重最小的子图。常用的算法有：</p><ol><li>Kruskal算法：按权重递增顺序处理边，使用并查集避免环的形成</li><li>Prim算法：从一个顶点开始，逐步添加连接当前树与未访问顶点的最小权重边</li></ol><h4 id="测验-21"><a href="#测验-21" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个加权图中，最短路径是指什么？它与最小生成树有什么区别？</li><li>Dijkstra算法不适用于哪种类型的加权图？为什么？</li><li>在一个有10个顶点的加权无向图中，其最小生成树有多少条边？为什么？</li><li>如果一个加权图中存在负权环，会对寻找最短路径产生什么影响？</li></ol><blockquote><p>测验答案</p><ol><li>最短路径是指从起点到终点的路径中，边权重之和最小的路径。最短路径是两点之间的问题，而最小生成树是连接整个图所有顶点且总权重最小的子图。最短路径关注的是两点间的最优连接，最小生成树关注的是整体网络的最优连接。</li><li>Dijkstra算法不适用于含有负权边的加权图。因为Dijkstra算法基于贪心策略，假设一旦处理了某个顶点，就已经找到了到该顶点的最短路径。但负权边可能导致后续发现更短的路径，违背了这一假设。</li><li>在有n个顶点的图中，其最小生成树恰好有n-1条边。因此，10个顶点的图的最小生成树有9条边。这是因为最小生成树是一棵树，而树的特性是有n个顶点就有n-1条边。</li><li>如果存在负权环，则最短路径问题在理论上没有明确的解，因为可以通过反复经过负权环来无限减小路径的总权重。这种情况下，标准的最短路径算法如Dijkstra会失效，而Bellman-Ford算法可以检测负权环的存在。</li></ol></blockquote><h3 id="五、-有向无环图"><a href="#五、-有向无环图" class="headerlink" title="五、 有向无环图"></a>五、 有向无环图</h3><p>有向无环图(DAG)是一种边有方向且不包含环的图结构，常用于表示任务的依赖关系、工作流程、以及系统中的资源调度等问题。</p><h5 id="算法讲解-22"><a href="#算法讲解-22" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="有向无环图"><a href="#有向无环图" class="headerlink" title="有向无环图"></a>有向无环图</h4><h5 id="介绍-22"><a href="#介绍-22" class="headerlink" title="介绍"></a>介绍</h5><p>有向无环图(Directed Acyclic Graph，简称DAG)是一种没有环的有向图。在DAG中，如果从顶点A出发沿着有向边行走，永远不可能回到顶点A，也就是说图中不存在环路。DAG在计算机科学中有着广泛的应用，尤其是在表示依赖关系、任务调度和执行顺序等场景中。</p><p>有向无环图中的关键概念包括：</p><ul><li>顶点(Vertex)：图中的节点，通常用数字或字母标识。</li><li>有向边(Directed Edge)：从一个顶点指向另一个顶点的带方向连接，通常表示为有序对(u,v)。</li><li>路径(Path)：从一个顶点到另一个顶点经过的边的序列。</li><li>拓扑排序(Topological Sort)：将DAG中的所有顶点排列成一个线性序列，使得图中任何一条边(u,v)对应的顶点u在序列中都出现在v之前。</li><li>源点(Source)：入度为0的顶点，即没有边指向该顶点。</li><li>汇点(Sink)：出度为0的顶点，即没有从该顶点出发的边。</li></ul><h4 id="核心特性-22"><a href="#核心特性-22" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>无环性：DAG中不存在环路，从任意顶点出发无法回到该顶点</li><li>拓扑排序：总是可以将DAG的顶点排列成一个线性序列，使得所有边都从序列的前面指向后面</li><li>依赖表示：非常适合表示依赖关系，如软件包依赖、任务调度的先后顺序</li><li>可预测性：由于没有循环依赖，DAG的行为更加可预测</li><li>单向流动：信息在DAG中只能沿一个方向流动，没有反馈循环</li><li>层次结构：可以组织成层次结构，每一层的节点只依赖于更低层的节点</li></ul><h4 id="基本操作-21"><a href="#基本操作-21" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加顶点：向图中添加新的顶点</li><li>添加有向边：在两个顶点之间添加一条有向边（需要确保不会形成环）</li><li>检测环：验证添加新边后是否会形成环</li><li>拓扑排序：生成符合依赖关系的顶点排序</li><li>查找源点和汇点：找出图中的源点（入度为0）和汇点（出度为0）</li><li>计算路径：找出从一个顶点到另一个顶点的路径</li><li>查找前驱和后继：获取指定顶点的所有前驱或后继顶点</li></ul><h4 id="代码实现-20"><a href="#代码实现-20" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有向无环图(DAG)的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectedAcyclicGraph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;                          <span class="comment">// 顶点数量</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; adj;  <span class="comment">// 邻接表</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, List&lt;Integer&gt;&gt; incoming;  <span class="comment">// 反向邻接表（用于快速查找入边）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个具有指定顶点数的有向无环图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> V 顶点数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DirectedAcyclicGraph</span><span class="params">(<span class="type">int</span> V)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = V;</span><br><span class="line">        adj = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        incoming = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            adj.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            incoming.put(i, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加有向边，在添加前会检查是否会形成环</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 边的起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destination 边的终点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否成功添加边</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果顶点索引无效或添加边会形成环</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(destination);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否会形成环</span></span><br><span class="line">        <span class="keyword">if</span> (hasPath(destination, source)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;添加此边将形成环，DAG不允许有环&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加边</span></span><br><span class="line">        adj.get(source).add(destination);</span><br><span class="line">        incoming.get(destination).add(source);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断从source到destination是否存在路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 起点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destination 终点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否存在路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPath</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        validateVertex(source);</span><br><span class="line">        validateVertex(destination);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 特殊情况：起点等于终点</span></span><br><span class="line">        <span class="keyword">if</span> (source == destination) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用BFS检查是否存在路径</span></span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        visited[source] = <span class="literal">true</span>;</span><br><span class="line">        queue.offer(source);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adj.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (neighbor == destination) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                    visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                    queue.offer(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Kahn算法进行拓扑排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拓扑排序结果（如果存在环，则返回null）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">topologicalSort</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 计算每个顶点的入度</span></span><br><span class="line">        <span class="type">int</span>[] inDegree = <span class="keyword">new</span> <span class="title class_">int</span>[V];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adj.get(v)) &#123;</span><br><span class="line">                inDegree[neighbor]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将所有入度为0的顶点加入队列</span></span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (inDegree[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.offer(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 拓扑排序结果</span></span><br><span class="line">        List&lt;Integer&gt; topologicalOrder = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 处理队列</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            topologicalOrder.add(current);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 删除所有从current出发的边</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adj.get(current)) &#123;</span><br><span class="line">                <span class="comment">// 减少neighbor的入度</span></span><br><span class="line">                inDegree[neighbor]--;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果入度变为0，则加入队列</span></span><br><span class="line">                <span class="keyword">if</span> (inDegree[neighbor] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.offer(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果不是所有顶点都加入了拓扑排序，则存在环</span></span><br><span class="line">        <span class="keyword">if</span> (topologicalOrder.size() != V) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  <span class="comment">// 图中存在环</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> topologicalOrder;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DFS方法的拓扑排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 拓扑排序结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">topologicalSortDFS</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        LinkedList&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        Set&lt;Integer&gt; recursionStack = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对每个未访问的顶点进行DFS</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!topologicalSortDFSUtil(i, visited, recursionStack, result)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;  <span class="comment">// 检测到环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">topologicalSortDFSUtil</span><span class="params">(<span class="type">int</span> v, <span class="type">boolean</span>[] visited, Set&lt;Integer&gt; recursionStack, LinkedList&lt;Integer&gt; result)</span> &#123;</span><br><span class="line">        <span class="comment">// 标记当前节点为已访问</span></span><br><span class="line">        visited[v] = <span class="literal">true</span>;</span><br><span class="line">        recursionStack.add(v);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归处理所有邻接顶点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> neighbor : adj.get(v)) &#123;</span><br><span class="line">            <span class="comment">// 如果邻居在递归栈中，则存在环</span></span><br><span class="line">            <span class="keyword">if</span> (recursionStack.contains(neighbor)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果邻居尚未访问，则递归访问</span></span><br><span class="line">            <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!topologicalSortDFSUtil(neighbor, visited, recursionStack, result)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 将当前顶点添加到结果的前面（这就是拓扑排序的关键）</span></span><br><span class="line">        recursionStack.remove(v);</span><br><span class="line">        result.addFirst(v);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取图中的所有源点（入度为0的顶点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 源点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getSources</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; sources = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (incoming.get(v).isEmpty()) &#123;</span><br><span class="line">                sources.add(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sources;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取图中的所有汇点（出度为0的顶点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 汇点列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getSinks</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; sinks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (adj.get(v).isEmpty()) &#123;</span><br><span class="line">                sinks.add(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sinks;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶点的出度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 出度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOutDegree</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> adj.get(vertex).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶点的入度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 入度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInDegree</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        <span class="keyword">return</span> incoming.get(vertex).size();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶点的所有后继（能够到达的顶点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 后继列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getSuccessors</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用BFS找出所有可达顶点</span></span><br><span class="line">        Set&lt;Integer&gt; successors = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        queue.offer(vertex);</span><br><span class="line">        visited[vertex] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> neighbor : adj.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[neighbor]) &#123;</span><br><span class="line">                    visited[neighbor] = <span class="literal">true</span>;</span><br><span class="line">                    queue.offer(neighbor);</span><br><span class="line">                    successors.add(neighbor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(successors);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取顶点的所有前驱（能够到达该顶点的顶点）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 前驱列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getPredecessors</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        validateVertex(vertex);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用BFS找出所有能到达此顶点的顶点</span></span><br><span class="line">        Set&lt;Integer&gt; predecessors = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[V];</span><br><span class="line">        Queue&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 反向搜索，从incoming开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : incoming.get(vertex)) &#123;</span><br><span class="line">            queue.offer(v);</span><br><span class="line">            visited[v] = <span class="literal">true</span>;</span><br><span class="line">            predecessors.add(v);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> prev : incoming.get(current)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visited[prev]) &#123;</span><br><span class="line">                    visited[prev] = <span class="literal">true</span>;</span><br><span class="line">                    queue.offer(prev);</span><br><span class="line">                    predecessors.add(prev);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(predecessors);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查顶点是否有效</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vertex 顶点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException 如果顶点无效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">validateVertex</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (vertex &lt; <span class="number">0</span> || vertex &gt;= V) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;顶点 &quot;</span> + vertex + <span class="string">&quot; 不在有效范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取图中的顶点数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 顶点数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVertexCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> V;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印图的结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printGraph</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有向无环图结构：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> <span class="number">0</span>; v &lt; V; v++) &#123;</span><br><span class="line">            System.out.print(v + <span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (adj.get(v).isEmpty()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;(无出边)&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(adj.get(v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-21"><a href="#优缺点-21" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-4"><a href="#优点：-4" class="headerlink" title="优点："></a>优点：</h5><ul><li>能够表示复杂的依赖关系和优先级顺序</li><li>通过拓扑排序可以获得满足依赖关系的执行序列</li><li>没有环意味着没有循环依赖，更易于分析和理解</li><li>适合表示作业调度、程序执行流、数据处理管线等场景</li><li>保证了可达性和终止性，不会出现无限循环</li></ul><h5 id="缺点：-4"><a href="#缺点：-4" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>不能表示需要循环或反馈的关系</li><li>添加新边时需要验证是否会形成环，增加了操作复杂度</li><li>对于动态变化的依赖关系，可能需要频繁地重建图结构</li><li>在某些应用场景中，环路检测的开销可能较大</li><li>实现较为复杂，尤其是需要高效的环检测算法</li></ul><h4 id="应用场景-22"><a href="#应用场景-22" class="headerlink" title="应用场景"></a>应用场景</h4><p>在构建系统中，软件包之间的依赖关系形成了一个典型的DAG。例如，在Maven、Gradle等构建工具中，项目依赖的各个模块和库之间的关系可以表示为DAG，从而确定正确的编译和打包顺序。</p><p>在工作流引擎或批处理系统中，任务之间的前后依赖关系形成DAG，系统根据拓扑排序结果安排任务执行顺序，保证依赖任务先于被依赖任务执行。</p><p>在编译器设计中，程序的控制流图通常是DAG形式。编译器根据这个图进行代码优化，如指令重排序、公共子表达式消除等，以提高程序性能。</p><p>数据处理管线，特别是ETL(Extract-Transform-Load)过程，也常表示为DAG。数据从源头经过一系列转换节点，最终到达目标存储，整个流程可以建模为有向无环图。</p><p>论文引用网络、事件调度、项目规划等领域也经常使用DAG进行建模和分析。</p><h4 id="测验-22"><a href="#测验-22" class="headerlink" title="测验"></a>测验</h4><ol><li>如果一个有向无环图有n个顶点，最多可以有多少条边？为什么？</li><li>拓扑排序的结果是唯一的吗？如果不是，试举一个有多种拓扑排序结果的DAG例子。</li><li>如何判断一个有向图是否为有向无环图？请简述算法思路。</li><li>在DAG中，所有顶点是否总能通过一条路径连接？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>最多可以有n(n-1)/2条边。因为在有向无环图中，如果存在从顶点i到顶点j的边，就不能存在从j到i的边（否则会形成环）。对于n个顶点，最多可以有n(n-1)/2对顶点之间有边。</li><li>拓扑排序的结果通常不是唯一的。例如，考虑一个有4个顶点的DAG，边为(0,2)、(0,3)、(1,3)。这个图有两种可能的拓扑排序：[0,1,2,3]和[1,0,2,3]。</li><li>判断有向图是否为DAG可以使用DFS算法：在DFS遍历过程中维护一个”访问栈”，记录当前递归路径上的所有顶点。如果在DFS过程中发现一个已经在访问栈中的顶点，说明存在环；如果DFS结束后没有发现环，则图是DAG。另一种方法是尝试进行拓扑排序，如果能够得到包含所有顶点的排序结果，则图是DAG。</li><li>在DAG中，并非所有顶点对之间都能通过路径连接。DAG可能包含多个不相连的部分。例如，一个有两个顶点0和1但没有边的图就是DAG，但0和1之间没有路径。</li></ol></blockquote><h3 id="六、邻接矩阵"><a href="#六、邻接矩阵" class="headerlink" title="六、邻接矩阵"></a>六、邻接矩阵</h3><p>邻接矩阵使用二维数组表示图，matrix[i][j]的值表示顶点i和顶点j之间是否存在边（以及边的权重）。</p><p><code>空间复杂度:O(V^2)</code></p><h5 id="算法讲解-23"><a href="#算法讲解-23" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><h5 id="介绍-23"><a href="#介绍-23" class="headerlink" title="介绍"></a>介绍</h5><p>邻接矩阵（Adjacency Matrix）是图论中常用的图表示方式之一，它使用二维数组来表示图中顶点之间的连接关系。对于有 n 个顶点的图，我们使用一个 n×n 的矩阵，如果顶点 i 和顶点 j 之间有边，则矩阵中对应位置的元素值为 1（无权图）或者权重值（有权图），否则为 0 或无穷大。</p><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><p>在理解邻接矩阵之前，我们需要了解一些基础图论概念：</p><p>图（Graph）：由顶点（Vertex）和连接顶点的边（Edge）组成的数据结构。</p><p>顶点（Vertex）：图中的节点，通常用数字标识，如 0, 1, 2… 或字母 A, B, C…</p><p>边（Edge）：连接两个顶点的线段，表示它们之间存在某种关系。</p><h6 id="在邻接矩阵中："><a href="#在邻接矩阵中：" class="headerlink" title="在邻接矩阵中："></a>在邻接矩阵中：</h6><ul><li>矩阵的行和列分别代表图中的顶点</li><li>矩阵元素 M[i][j] 表示从顶点 i 到顶点 j 的边的信息</li></ul><p>根据图的类型，邻接矩阵有不同的表示方式：</p><h6 id="无向图中："><a href="#无向图中：" class="headerlink" title="无向图中："></a>无向图中：</h6><ul><li>如果顶点 i 和 j 之间有边，则 M[i][j] = M[j][i] = 1（无权图）或权重值（有权图）</li><li>如果没有边，则 M[i][j] = M[j][i] = 0 或无穷大</li><li>矩阵是对称的，即 M[i][j] = M[j][i]</li></ul><h6 id="有向图中："><a href="#有向图中：" class="headerlink" title="有向图中："></a>有向图中：</h6><ul><li>如果从顶点 i 到 j 有一条边，则 M[i][j] = 1 或权重值</li><li>如果没有边，则 M[i][j] = 0 或无穷大</li><li>矩阵通常不是对称的</li></ul><p>示例：<br> 假设有一个包含 4 个顶点 (0, 1, 2, 3) 的无权无向图，边的信息如下：</p><ul><li>0 连接到 1</li><li>0 连接到 2</li><li>1 连接到 2</li><li>2 连接到 3</li></ul><p>则其邻接矩阵表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0  1  2  3</span><br><span class="line">0 [ 0  1  1  0 ]</span><br><span class="line">1 [ 1  0  1  0 ]</span><br><span class="line">2 [ 1  1  0  1 ]</span><br><span class="line">3 [ 0  0  1  0 ]</span><br></pre></td></tr></table></figure><p>如果是有权图，矩阵中存储的就是对应边的权重，没有边的位置通常用无穷大（实际编程中可能用一个特殊值如 -1 或 Integer.MAX_VALUE）表示。</p><h4 id="核心特性-23"><a href="#核心特性-23" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>直观表示：通过矩阵可以直观地看出任意两个顶点之间是否有连接</li><li>快速查询：O(1) 时间复杂度即可确定两个顶点之间是否有边</li><li>适合密集图：当图中边的数量接近顶点数的平方时，邻接矩阵较为高效</li><li>矩阵运算：可以利用矩阵运算解决图论问题，如求最短路径</li></ul><h4 id="基本操作-22"><a href="#基本操作-22" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加边：设置矩阵中对应位置的值</li><li>删除边：重置矩阵中对应位置的值</li><li>查询边：直接访问矩阵中对应位置</li><li>获取顶点的所有邻接点：遍历该顶点对应的行或列</li></ul><h4 id="代码实现-21"><a href="#代码实现-21" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">        <span class="comment">// 邻接矩阵表示的图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;           <span class="comment">// 顶点数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[][] adjMatrix; <span class="comment">// 邻接矩阵</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = v;</span><br><span class="line">        adjMatrix = <span class="keyword">new</span> <span class="title class_">int</span>[v][v];</span><br><span class="line">        <span class="comment">// 初始化矩阵，所有边的值都为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; v; j++) &#123;</span><br><span class="line">                adjMatrix[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加边（无向图）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjMatrix[source][destination] = <span class="number">1</span>;</span><br><span class="line">            adjMatrix[destination][source] = <span class="number">1</span>; <span class="comment">// 对于无向图，两个方向都要设置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加带权重的边（有权图）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjMatrix[source][destination] = weight;</span><br><span class="line">            adjMatrix[destination][source] = weight; <span class="comment">// 对于无向图，两个方向都要设置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjMatrix[source][destination] = <span class="number">0</span>;</span><br><span class="line">            adjMatrix[destination][source] = <span class="number">0</span>; <span class="comment">// 对于无向图，两个方向都要重置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两个顶点之间是否有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            <span class="keyword">return</span> adjMatrix[source][destination] != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取边的权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEdgeWeight</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            <span class="keyword">return</span> adjMatrix[source][destination];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 表示没有边或顶点无效</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印邻接矩阵</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMatrix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; V; j++) &#123;</span><br><span class="line">                System.out.print(adjMatrix[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取顶点的所有邻接点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getAdjacentVertices</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; adjacentVertices = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (vertex &gt;= <span class="number">0</span> &amp;&amp; vertex &lt; V) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; V; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (adjMatrix[vertex][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    adjacentVertices.add(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adjacentVertices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-22"><a href="#优缺点-22" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-5"><a href="#优点：-5" class="headerlink" title="优点："></a>优点：</h5><ul><li>实现简单，易于理解</li><li>查询两个顶点之间是否有边的时间复杂度为 O(1)</li><li>添加和删除边的操作非常高效，时间复杂度为 O(1)</li><li>适合表示密集图（边数接近顶点数平方的图）</li><li>可以直接应用矩阵运算来解决一些图论问题</li></ul><h5 id="缺点：-5"><a href="#缺点：-5" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>空间复杂度为 O(V²)，对于大型稀疏图会浪费大量空间</li><li>添加或删除顶点的操作复杂，需要重新分配并复制整个矩阵</li><li>遍历所有边的时间复杂度为 O(V²)，对于稀疏图效率较低</li><li>不能表示平行边（两个顶点之间的多条边）</li></ul><h4 id="应用场景-23"><a href="#应用场景-23" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>表示较小规模的图，尤其是边较密集的图</li><li>需要频繁查询两个顶点之间是否存在边的场景</li><li>实现图的算法时，特别是那些需要快速判断顶点间连接性的算法</li><li>图的分析算法，如Floyd-Warshall算法寻找所有点对之间的最短路径</li><li>社交网络分析中的连接关系表示</li><li>网络路由算法中的连接性分析</li></ul><h4 id="扩展-6"><a href="#扩展-6" class="headerlink" title="扩展"></a>扩展</h4><h5 id="邻接矩阵的优化"><a href="#邻接矩阵的优化" class="headerlink" title="邻接矩阵的优化"></a>邻接矩阵的优化</h5><p>对于无向图，由于邻接矩阵是对称的，我们可以只存储上三角或下三角部分，从而将空间需求降低约一半。这种优化在实际应用中可以通过一维数组加索引转换公式实现。</p><h5 id="变种：关联矩阵"><a href="#变种：关联矩阵" class="headerlink" title="变种：关联矩阵"></a>变种：关联矩阵</h5><p>除了邻接矩阵外，还有一种称为关联矩阵（Incidence Matrix）的表示方法。在 n 个顶点、m 条边的图中，关联矩阵是一个 n×m 的矩阵：</p><ul><li>对于无向图，如果边 j 连接顶点 i，则矩阵元素 M[i][j] = 1，否则为 0</li><li>对于有向图，如果边 j 从顶点 i 出发，则 M[i][j] = 1；如果边 j 指向顶点 i，则 M[i][j] = -1；否则为 0</li></ul><h4 id="测验-23"><a href="#测验-23" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个包含 100 个顶点的无向图中，如果使用邻接矩阵表示，矩阵的大小是多少？存储这个矩阵最少需要多少比特？</li><li>如果一个邻接矩阵是对称的（即 M[i][j] = M[j][i] 对所有 i, j 成立），这说明这个图是什么类型？</li><li>在邻接矩阵中，一个顶点的度（与之相连的边数）如何计算？</li></ol><blockquote><p>测验答案</p><ol><li>矩阵大小为 100×100 = 10000 个元素。如果使用布尔值（1 比特）表示边的存在，则至少需要 10000 比特。</li><li>对称的邻接矩阵表示的是无向图，因为无向图中的边没有方向，从 i 到 j 有边意味着从 j 到 i 也有边。</li><li>对于无向图，顶点的度等于该顶点对应行（或列）中非零元素的数量；对于有向图，顶点的出度等于对应行中非零元素的数量，入度等于对应列中非零元素的数量。</li></ol></blockquote><h3 id="七、邻接表"><a href="#七、邻接表" class="headerlink" title="七、邻接表"></a>七、邻接表</h3><p>邻接表使用哈希表或数组存储每个顶点及其相邻顶点的列表。</p><p><code>空间复杂度:O(V + E)</code></p><h5 id="算法讲解-24"><a href="#算法讲解-24" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><h4 id="介绍-24"><a href="#介绍-24" class="headerlink" title="介绍"></a>介绍</h4><p>邻接表是图论中最常用的图表示方式之一，它为每个顶点维护一个列表，存储与该顶点相邻的所有顶点。这种表示方法特别适合表示稀疏图（边数远小于顶点数平方的图），能有效节省空间，保持较高的操作效率。</p><h4 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h4><p>邻接表（Adjacency List）是一种通过链表或数组表示图的数据结构。在理解它之前，我们需要掌握一些基础图论概念：</p><p>图（Graph）：由顶点（Vertex）和连接顶点的边（Edge）组成的数据结构。图可以用来表示现实世界中的各种关系，如社交网络、交通系统等。</p><p>顶点（Vertex）：图中的节点，通常用数字或字母标识，如 0, 1, 2… 或 A, B, C…</p><p>边（Edge）：连接两个顶点的线段，表示它们之间存在某种关系。</p><p>在邻接表中：</p><ul><li>每个顶点对应一个列表（可以是链表、数组或其他集合类型）</li><li>列表中存储与该顶点直接相连的所有顶点</li><li>对于有权图，还需要存储边的权重信息</li></ul><p>邻接表的表示方式根据图的类型有所不同：</p><p>无向图中：</p><ul><li>如果顶点 i 和 j 之间有边，则 j 会出现在 i 的邻接表中，i 也会出现在 j 的邻接表中</li><li>每条边在两个不同的列表中各出现一次</li></ul><p>有向图中：</p><ul><li>如果从顶点 i 到 j 有一条边，则 j 只会出现在 i 的邻接表中</li><li>每条边只在一个列表中出现一次</li></ul><p>示例：<br> 假设有一个包含 4 个顶点 (0, 1, 2, 3) 的无向图，边的信息如下：</p><ul><li>0 连接到 1</li><li>0 连接到 2</li><li>1 连接到 2</li><li>2 连接到 3</li></ul><p>则其邻接表表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; [1, 2]</span><br><span class="line">1 -&gt; [0, 2]</span><br><span class="line">2 -&gt; [0, 1, 3]</span><br><span class="line">3 -&gt; [2]</span><br></pre></td></tr></table></figure><p>对于有权图，每个邻接表项通常包含顶点索引和边的权重。</p><h4 id="核心特性-24"><a href="#核心特性-24" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>空间效率高：只需存储实际存在的边，特别适合稀疏图</li><li>快速访问某个顶点的所有邻接点</li><li>灵活：容易添加和删除边，同时支持添加额外的边信息（如权重）</li><li>适用于各种图算法，如广度优先搜索（BFS）和深度优先搜索（DFS）</li></ul><h4 id="基本操作-23"><a href="#基本操作-23" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>添加边：将目标顶点添加到源顶点的邻接列表中</li><li>删除边：从源顶点的邻接列表中删除目标顶点</li><li>查询边：检查目标顶点是否在源顶点的邻接列表中</li><li>获取顶点的所有邻接点：直接访问该顶点的邻接列表</li></ul><h4 id="代码实现-22"><a href="#代码实现-22" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邻接表表示的图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;                 <span class="comment">// 顶点数</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Integer&gt;&gt; adjList; <span class="comment">// 邻接表（无权图）</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Graph</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = v;</span><br><span class="line">        adjList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v; i++) &#123;</span><br><span class="line">            adjList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加边（无向图）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保顶点有效</span></span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjList.get(source).add(destination);</span><br><span class="line">            adjList.get(destination).add(source); <span class="comment">// 对于无向图，两个方向都要添加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjList.get(source).remove(Integer.valueOf(destination));</span><br><span class="line">            adjList.get(destination).remove(Integer.valueOf(source)); <span class="comment">// 对于无向图，两个方向都要删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两个顶点之间是否有边</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            <span class="keyword">return</span> adjList.get(source).contains(destination);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取顶点的所有邻接点</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">getAdjacentVertices</span><span class="params">(<span class="type">int</span> vertex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (vertex &gt;= <span class="number">0</span> &amp;&amp; vertex &lt; V) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(adjList.get(vertex));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印邻接表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printGraph</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : adjList.get(i)) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有权图的邻接表实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeightedGraph</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> V;</span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Edge&gt;&gt; adjList;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 内部类表示有权边</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">        <span class="type">int</span> destination;</span><br><span class="line">        <span class="type">int</span> weight;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Edge</span><span class="params">(<span class="type">int</span> destination, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.destination = destination;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeightedGraph</span><span class="params">(<span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.V = v;</span><br><span class="line">        adjList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(v);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; v; i++) &#123;</span><br><span class="line">            adjList.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加边（有权图）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addEdge</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination, <span class="type">int</span> weight)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            adjList.get(source).add(<span class="keyword">new</span> <span class="title class_">Edge</span>(destination, weight));</span><br><span class="line">            adjList.get(destination).add(<span class="keyword">new</span> <span class="title class_">Edge</span>(source, weight)); <span class="comment">// 对于无向图</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取边的权重</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEdgeWeight</span><span class="params">(<span class="type">int</span> source, <span class="type">int</span> destination)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source &gt;= <span class="number">0</span> &amp;&amp; source &lt; V &amp;&amp; destination &gt;= <span class="number">0</span> &amp;&amp; destination &lt; V) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Edge edge : adjList.get(source)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (edge.destination == destination) &#123;</span><br><span class="line">                    <span class="keyword">return</span> edge.weight;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 表示没有边或顶点无效</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印有权图</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printGraph</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; V; i++) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot; -&gt; &quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (Edge edge : adjList.get(i)) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;(&quot;</span> + edge.destination + <span class="string">&quot;,&quot;</span> + edge.weight + <span class="string">&quot;) &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-23"><a href="#优缺点-23" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-6"><a href="#优点：-6" class="headerlink" title="优点："></a>优点：</h5><ul><li>空间效率高：对于稀疏图，只需存储实际存在的边</li><li>添加顶点操作简单：只需添加一个新的空列表</li><li>遍历顶点的所有邻接点高效：直接访问对应列表</li><li>适合与大多数图算法结合使用，如 BFS、DFS、Dijkstra 等</li><li>内存使用灵活：随着边的增加，动态分配内存</li></ul><h5 id="缺点：-6"><a href="#缺点：-6" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>查询特定边的存在性需要遍历列表，时间复杂度为 O(度)</li><li>删除边操作较慢，需要遍历列表查找目标顶点</li><li>对于完全图或近似完全图，内存消耗与邻接矩阵相当甚至更多</li><li>对于无向图，每条边需要存储两次，可能导致不一致性</li></ul><h4 id="应用场景-24"><a href="#应用场景-24" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>表示大多数实际应用中的稀疏图</li><li>社交网络的关系表示（如朋友关系、关注关系）</li><li>网络路由中的节点连接关系</li><li>图遍历算法的实现（如 BFS、DFS）</li><li>最短路径算法（如 Dijkstra、Bellman-Ford）</li><li>最小生成树算法（如 Prim 算法）</li></ul><h4 id="扩展-7"><a href="#扩展-7" class="headerlink" title="扩展"></a>扩展</h4><h4 id="邻接表的优化与变体"><a href="#邻接表的优化与变体" class="headerlink" title="邻接表的优化与变体"></a>邻接表的优化与变体</h4><h6 id="反向邻接表"><a href="#反向邻接表" class="headerlink" title="反向邻接表"></a>反向邻接表</h6><p>对于有向图，除了常规邻接表外，可以同时维护一个反向邻接表，存储指向每个顶点的所有顶点。这种双重结构在一些算法中非常有用，如：</p><ul><li>强连通分量算法（如 Kosaraju 算法）</li><li>计算顶点的入度</li><li>反向遍历图</li></ul><h6 id="压缩邻接表"><a href="#压缩邻接表" class="headerlink" title="压缩邻接表"></a>压缩邻接表</h6><p>对于静态图（边不会频繁变化），可以使用压缩邻接表（CSR, Compressed Sparse Row）格式来进一步降低内存消耗。CSR 使用两个数组：</p><ul><li>一个存储所有邻接点，按顶点顺序排列</li><li>另一个存储每个顶点邻接列表的起始索引</li></ul><p>这种表示方法在大规模图计算中常用，如 PageRank 算法。</p><h4 id="高级应用"><a href="#高级应用" class="headerlink" title="高级应用"></a>高级应用</h4><h5 id="复杂路径查询"><a href="#复杂路径查询" class="headerlink" title="复杂路径查询"></a>复杂路径查询</h5><p>邻接表特别适合实现图遍历算法，如广度优先搜索（BFS）和深度优先搜索（DFS）。这些算法是许多更复杂路径查询的基础：</p><ul><li>最短路径查找（Dijkstra 和 Bellman-Ford 算法）</li><li>所有节点对之间的最短路径（Floyd-Warshall 算法）</li><li>欧拉路径和汉密尔顿路径查找</li></ul><h5 id="增强邻接表"><a href="#增强邻接表" class="headerlink" title="增强邻接表"></a>增强邻接表</h5><p>在实际应用中，邻接表可以增强存储更多信息：</p><ul><li>为边添加时间戳（表示关系建立的时间）</li><li>存储边的类型（如社交网络中的”朋友”、”关注”等不同关系）</li><li>为边添加状态信息（如交通网络中道路的拥堵状况）</li></ul><h5 id="与其他表示方法的比较选择"><a href="#与其他表示方法的比较选择" class="headerlink" title="与其他表示方法的比较选择"></a>与其他表示方法的比较选择</h5><p>选择图表示方法时的一般准则：</p><ul><li>稀疏图（|E| &lt;&lt; |V|²）：首选邻接表，空间复杂度为 O(V+E)</li><li>密集图（|E| 接近 |V|²）：邻接矩阵可能更有效，空间复杂度为 O(V²)</li><li>需要快速查询特定边：邻接矩阵提供 O(1) 查询时间</li><li>需要频繁添加/删除顶点：邻接表更灵活</li><li>需要在所有边上迭代：边列表更直接</li></ul><h5 id="内存效率考虑"><a href="#内存效率考虑" class="headerlink" title="内存效率考虑"></a>内存效率考虑</h5><p>在大规模图应用中，节省内存特别重要。邻接表可以通过以下方式进一步优化：</p><ul><li>使用整数索引代替对象引用</li><li>采用适当的数据结构存储邻接点（比如有序数组可支持二分查找）</li><li>使用哈希表或平衡树代替普通列表，加速搜索特定边的过程</li></ul><h4 id="测验-24"><a href="#测验-24" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个包含 100 个顶点和 300 条边的无向图中，如果使用邻接表表示，共需要存储多少个顶点引用？</li><li>对于一个有向图，如果要判断某个顶点的入度（指向该顶点的边数），使用邻接表需要怎样的时间复杂度？</li><li>在邻接表表示的图中，遍历所有边的时间复杂度是多少？（V 表示顶点数，E 表示边数）</li></ol><blockquote><p>测验答案</p><ol><li>600个顶点引用。在无向图的邻接表中，每条边在两个顶点的列表中各出现一次，所以总共有 300 * 2 = 600 个顶点引用。</li><li>O(V+E)。使用标准邻接表无法直接获取入度，需要遍历所有顶点的邻接表，检查是否包含目标顶点。</li><li>O(V+E)。需要遍历所有顶点的邻接表，总工作量与顶点数加边数成正比。</li></ol></blockquote><h2 id="哈希与映射"><a href="#哈希与映射" class="headerlink" title="哈希与映射"></a>哈希与映射</h2><h3 id="一、哈希表（链地址法）"><a href="#一、哈希表（链地址法）" class="headerlink" title="一、哈希表（链地址法）"></a>一、哈希表（链地址法）</h3><p>通过哈希函数将键映射到数组的索引，使用链表处理哈希冲突。提供近乎O(1)的查找、插入和删除操作。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-25"><a href="#算法讲解-25" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="哈希表（链地址法）"><a href="#哈希表（链地址法）" class="headerlink" title="哈希表（链地址法）"></a>哈希表（链地址法）</h4><h5 id="介绍-25"><a href="#介绍-25" class="headerlink" title="介绍"></a>介绍</h5><p>哈希表（Hash Table）是一种高效的数据结构，能够实现快速的插入、查找和删除操作。链地址法（Chaining）是解决哈希冲突的一种常用方法，它通过为每个哈希桶维护一个链表，将具有相同哈希值的元素存储在同一链表中，从而有效处理冲突问题。</p><h4 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h4><p>哈希表（Hash Table）是一种基于哈希函数直接访问元素的数据结构，理解它需要先掌握几个关键概念：</p><p>哈希函数（Hash Function）：将输入数据（通常是无限范围）映射到有限范围（哈希表大小）的函数。一个好的哈希函数应该能够均匀分布元素，最小化冲突。</p><p>哈希值（Hash Value）：哈希函数的输出结果，用作哈希表中的索引。</p><p>哈希桶（Bucket）：哈希表中存储元素的位置，每个桶对应一个哈希值。</p><p>哈希冲突（Hash Collision）：当两个不同的输入通过哈希函数产生相同的哈希值时发生冲突。由于哈希表空间有限而可能的输入数据无限，冲突不可避免。</p><p>链地址法（Chaining）：解决哈希冲突的一种方法，其基本思想是：</p><ul><li>每个哈希桶维护一个链表</li><li>当发生冲突时，将新元素添加到对应哈希桶的链表中</li><li>查找元素时，先计算哈希值找到对应桶，然后在链表中搜索目标元素</li></ul><p>哈希表的负载因子（Load Factor）：表中元素数量与哈希表大小的比值。当负载因子增大时，链表长度可能增加，导致性能下降。</p><p>示例：<br> 假设有一个大小为 7 的哈希表，使用简单的哈希函数 h(k) = k % 7，现在需要插入键值对：(10, “苹果”)、(21, “香蕉”)、(32, “橙子”)、(17, “葡萄”)。</p><p>计算哈希值：</p><ul><li>h(10) = 10 % 7 = 3，将 (10, “苹果”) 存入索引 3 的链表</li><li>h(21) = 21 % 7 = 0，将 (21, “香蕉”) 存入索引 0 的链表</li><li>h(32) = 32 % 7 = 4，将 (32, “橙子”) 存入索引 4 的链表</li><li>h(17) = 17 % 7 = 3，将 (17, “葡萄”) 存入索引 3 的链表，与 (10, “苹果”) 在同一链表中</li></ul><p>最终哈希表结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼Plain复制代码0: → (21, &quot;香蕉&quot;) → null</span><br><span class="line">1: → null</span><br><span class="line">2: → null</span><br><span class="line">3: → (10, &quot;苹果&quot;) → (17, &quot;葡萄&quot;) → null</span><br><span class="line">4: → (32, &quot;橙子&quot;) → null</span><br><span class="line">5: → null</span><br><span class="line">6: → null</span><br></pre></td></tr></table></figure><p>可以看到索引 3 处有两个元素，这是因为 10 和 17 发生了哈希冲突，它们通过链表连接在一起。</p><h4 id="核心特性-25"><a href="#核心特性-25" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>高效操作：平均情况下，插入、查找、删除操作的时间复杂度为 O(1)</li><li>冲突处理：使用链表解决哈希冲突，适应性强</li><li>动态扩容：当负载因子过高时，可以扩容哈希表以维持性能</li><li>无序性：元素在哈希表中的位置由哈希函数决定，不保持插入顺序</li></ul><h4 id="基本操作-24"><a href="#基本操作-24" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>插入（put）：计算键的哈希值，将键值对插入对应桶的链表中</li><li>查找（get）：计算键的哈希值，在对应桶的链表中查找键值对</li><li>删除（remove）：计算键的哈希值，从对应桶的链表中移除键值对</li><li>判断键是否存在（containsKey）：计算键的哈希值，检查对应桶的链表中是否存在该键</li></ul><h4 id="基础实现"><a href="#基础实现" class="headerlink" title="基础实现"></a>基础实现</h4><p>在大多数语言中都有哈希表的实现，比如 Java 中的 HashMap、Python 中的 dict 和 collections.defaultdict、JavaScript 中的 Object 和 Map、Go 中的 map 以及 C++ 中的 std::unordered_map，这些内置实现已经高度优化，能够有效处理哈希冲突并提供稳定的性能，所以这里不再提供自定义实现。</p><h4 id="优缺点-24"><a href="#优缺点-24" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-7"><a href="#优点：-7" class="headerlink" title="优点："></a>优点：</h5><ul><li>实现简单：链地址法概念明确，实现相对简单</li><li>高效查找：平均情况下，查找操作的时间复杂度接近 O(1)</li><li>适应性强：可以处理任意数量的冲突</li><li>删除操作简单：不需要复杂的逻辑即可完成删除</li><li>扩容策略灵活：可以根据负载因子动态调整哈希表大小</li></ul><h5 id="缺点：-7"><a href="#缺点：-7" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>额外内存开销：每个节点需要额外的指针存储，增加了内存消耗</li><li>不适合缓存局部性：链表中的元素可能散布在内存各处，不利于CPU缓存</li><li>链表过长时性能下降：当哈希冲突严重时，操作可能退化为 O(n)</li><li>哈希函数敏感：性能严重依赖于哈希函数的质量</li></ul><h4 id="应用场景-25"><a href="#应用场景-25" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>实现关联数组或字典，如大多数语言的 HashMap/Dictionary 类</li><li>数据库索引，特别是哈希索引</li><li>缓存系统，如 LRU 缓存的底层结构</li><li>符号表，用于编译器和解释器</li><li>集合（Set）数据结构的实现</li><li>用于快速去重和查找的场景</li></ul><h4 id="扩展-8"><a href="#扩展-8" class="headerlink" title="扩展"></a>扩展</h4><h5 id="链地址法的优化与变体"><a href="#链地址法的优化与变体" class="headerlink" title="链地址法的优化与变体"></a>链地址法的优化与变体</h5><h6 id="改进链表结构"><a href="#改进链表结构" class="headerlink" title="改进链表结构"></a>改进链表结构</h6><p>传统链地址法使用普通链表存储冲突元素，但可以通过替换链表结构提升性能：</p><ul><li>有序链表：保持链表元素有序，可以提前终止查找</li><li>自调整链表：将频繁访问的元素移到链表前端，减少平均查找时间</li><li>替换为平衡树：对于长链表，可以使用小型平衡树（如红黑树）替代，将最坏情况从O(n)改善为O(log n)</li></ul><h6 id="桶大小优化"><a href="#桶大小优化" class="headerlink" title="桶大小优化"></a>桶大小优化</h6><ul><li>多元素桶：每个桶预先分配固定空间（如4个元素），当元素少时避免动态分配</li><li>两级哈希：在冲突严重的桶中使用第二级哈希表</li></ul><h4 id="测验-25"><a href="#测验-25" class="headerlink" title="测验"></a>测验</h4><ol><li>在一个使用链地址法的哈希表中，如果负载因子（load factor）为 2，表示什么？这对哈希表性能有何影响？</li><li>如果哈希表的大小为 10，使用哈希函数 h(x) = x % 10，插入元素 {12, 22, 32, 42, 52}，请描述哈希表的结构。</li><li>在哈希表中使用链地址法解决冲突时，查找不存在的元素的最坏时间复杂度是多少？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>负载因子为 2 表示哈希表中的元素数量是哈希表大小的两倍，平均每个桶包含 2 个元素。这意味着哈希冲突较多，查找操作的平均时间复杂度将增加，可能接近 O(n)，性能会下降。</li><li>哈希表结构如下：<ul><li>桶 2: → (12, value) → (22, value) → (32, value) → (42, value) → (52, value) → null</li><li>其他桶 (0,1,3-9): → null<br>所有元素都被映射到索引 2 上，形成了一个长链表。</li></ul></li><li>最坏时间复杂度是 O(n)，n 是哈希表中的元素总数。在最坏情况下，所有元素都被哈希到同一个桶中，形成一个长链表，需要遍历整个链表才能确定元素不存在。</li></ol></blockquote><h3 id="二、哈希表（开放寻址法）"><a href="#二、哈希表（开放寻址法）" class="headerlink" title="二、哈希表（开放寻址法）"></a>二、哈希表（开放寻址法）</h3><p>通过哈希函数将键映射到数组的索引，使用开放寻址法（线性探测）处理哈希冲突，提供近乎O(1)的查找、插入和删除操作。</p><p><code>空间复杂度:O(n)</code></p><h5 id="算法讲解-26"><a href="#算法讲解-26" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="哈希表（开放寻址法）"><a href="#哈希表（开放寻址法）" class="headerlink" title="哈希表（开放寻址法）"></a>哈希表（开放寻址法）</h4><h5 id="介绍-26"><a href="#介绍-26" class="headerlink" title="介绍"></a>介绍</h5><p>哈希表（Hash Table）是一种高效的数据结构，能够实现近乎 O(1) 时间复杂度的查找、插入和删除操作。开放寻址法（Open Addressing）是解决哈希冲突的一种重要方法，它不使用额外的数据结构（如链表），在哈希表本身的空间内寻找可用位置来存储冲突的元素，从而更加节省内存空间。</p><h4 id="基本概念-4"><a href="#基本概念-4" class="headerlink" title="基本概念"></a>基本概念</h4><p>哈希表（Hash Table）是一种基于哈希函数直接访问元素的数据结构，理解开放寻址法需要先掌握以下基础概念：</p><p>哈希函数（Hash Function）：将输入数据映射到哈希表索引范围内的函数。理想的哈希函数应该计算快速且均匀分布元素。</p><p>哈希冲突（Hash Collision）：当两个不同的键通过哈希函数得到相同的索引值时发生的情况。</p><p>开放寻址法（Open Addressing）：解决哈希冲突的方法，其核心思想是：</p><ul><li>当发生冲突时，通过特定的探测序列寻找表中的下一个可用位置</li><li>所有元素都直接存储在哈希表中，不使用额外的数据结构</li><li>每个桶只存储一个元素，表中的空间可分为三种状态：空闲、占用、删除</li></ul><p>开放寻址法的主要探测技术包括：</p><ol><li>线性探测（Linear Probing）：<ul><li>最简单的探测方法，冲突发生时，按顺序检查下一个位置</li><li>探测序列：h(k), (h(k) + 1) % m, (h(k) + 2) % m, …, (h(k) + m-1) % m</li><li>优点：缓存友好；缺点：容易产生聚集</li></ul></li><li>二次探测（Quadratic Probing）：<ul><li>通过平方级数增长的步长来寻找空位置</li><li>探测序列：h(k), (h(k) + 1²) % m, (h(k) + 2²) % m, (h(k) + 3²) % m, …</li><li>优点：减少聚集；缺点：不保证能探测所有位置</li></ul></li><li>双重哈希（Double Hashing）：<ul><li>使用第二个哈希函数确定探测步长</li><li>探测序列：h₁(k), (h₁(k) + h₂(k)) % m, (h₁(k) + 2h₂(k)) % m, …</li><li>优点：减少聚集，增加探测路径多样性；缺点：需要计算两次哈希值</li></ul></li></ol><p>装载因子（Load Factor）：表中已占用位置与表容量的比值，用 α 表示。当 α 增大时，冲突概率增加，性能下降。通常当 α 超过某个阈值（如 0.7）时进行扩容。</p><p>示例：<br> 假设有一个大小为 7 的哈希表，使用简单的哈希函数 h(k) = k % 7 和线性探测。现在需要插入键：10, 21, 32, 17。</p><p>计算过程：</p><ul><li>h(10) = 10 % 7 = 3，将 10 存入索引 3</li><li>h(21) = 21 % 7 = 0，将 21 存入索引 0</li><li>h(32) = 32 % 7 = 4，将 32 存入索引 4</li><li>h(17) = 17 % 7 = 3，但索引 3 已被 10 占用，按线性探测，尝试索引 4，已被 32 占用，继续尝试索引 5，可用，将 17 存入索引 5</li></ul><p>最终哈希表结构为：[21, <em>, </em>, 10, 32, 17, ]，其中 _ 表示空位置。</p><h4 id="核心特性-26"><a href="#核心特性-26" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>空间效率：所有元素直接存储在表中，不需要额外指针，节省空间</li><li>缓存友好：特别是线性探测法，元素存储紧凑，有利于缓存局部性</li><li>灵活性：可以根据应用需求选择不同的探测策略</li><li>负载敏感：性能受装载因子影响显著，需要及时扩容维持性能</li></ul><h4 id="基本操作-25"><a href="#基本操作-25" class="headerlink" title="基本操作"></a>基本操作</h4><ul><li>插入（put）：计算哈希值，如遇冲突则根据探测策略寻找下一个可用位置</li><li>查找（get）：计算哈希值，在探测序列上查找，直到找到目标键或遇到空位置</li><li>删除（remove）：计算哈希值，找到元素后不能直接标记为空闲，而是标记为已删除</li><li>扩容（resize）：当装载因子超过阈值时，创建更大的表并重新哈希所有元素</li></ul><h4 id="基础实现-1"><a href="#基础实现-1" class="headerlink" title="基础实现"></a>基础实现</h4><p>在大多数语言中都有哈希表的实现，比如 Java 中的 HashMap、Python 中的 dict 和 collections.defaultdict、JavaScript 中的 Object 和 Map、Go 中的 map 以及 C++ 中的 std::unordered_map，这些内置实现已经高度优化，能够有效处理哈希冲突并提供稳定的性能，所以这里不再提供自定义实现。</p><h4 id="优缺点-25"><a href="#优缺点-25" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点：-8"><a href="#优点：-8" class="headerlink" title="优点："></a>优点：</h5><ul><li>内存效率高：不需要额外的链表结构和指针，节省空间</li><li>缓存友好：数据存储紧凑，有利于 CPU 缓存</li><li>实现简单：尤其是线性探测，实现逻辑相对简单</li><li>扩展性好：可以结合不同的探测策略适应不同的应用场景</li></ul><h5 id="缺点：-8"><a href="#缺点：-8" class="headerlink" title="缺点："></a>缺点：</h5><ul><li>聚集问题：尤其是线性探测容易产生基本聚集（primary clustering）现象</li><li>装载因子限制：通常需要保持较低的装载因子（如 &lt;0.7）才能维持性能</li><li>删除操作复杂：需要特殊处理删除操作，避免破坏探测链</li><li>全表重建：扩容时需要重新哈希所有元素，成本较高</li></ul><h4 id="应用场景-26"><a href="#应用场景-26" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li>对内存使用敏感的环境：嵌入式系统或内存受限的应用</li><li>适合元素大小相对固定的场景</li><li>对缓存性能敏感的高性能计算</li><li>需要高效查找和简单实现的小型应用</li><li>适合装载因子可预测或可控制的场景</li><li>实现高性能的集合（Set）数据结构</li></ul><h4 id="扩展-9"><a href="#扩展-9" class="headerlink" title="扩展"></a>扩展</h4><h5 id="常见的变种与改进"><a href="#常见的变种与改进" class="headerlink" title="常见的变种与改进"></a>常见的变种与改进</h5><h6 id="线性探测的改进"><a href="#线性探测的改进" class="headerlink" title="线性探测的改进"></a>线性探测的改进</h6><p>线性探测虽然简单，但存在严重的聚集问题。实践中常用以下技术改进：</p><ul><li>带间隔的线性探测：不是每次加1，而是加一个质数（如7），减少聚集</li><li>伪随机序列：使用简单的伪随机数生成器创建探测序列，打破规则模式</li></ul><h6 id="混合策略"><a href="#混合策略" class="headerlink" title="混合策略"></a>混合策略</h6><p>在实际应用中，经常采用混合策略结合多种方法的优点：</p><ul><li>桶式开放寻址法：每个位置存储固定数量（如4个）的元素，减少冲突同时保持缓存友好</li><li>链接-开放混合：当冲突达到一定程度时，从开放寻址转为链式存储</li></ul><h4 id="实际应用中的考量"><a href="#实际应用中的考量" class="headerlink" title="实际应用中的考量"></a>实际应用中的考量</h4><h5 id="装载因子的选择"><a href="#装载因子的选择" class="headerlink" title="装载因子的选择"></a>装载因子的选择</h5><p>不同探测策略下的最佳装载因子不同：</p><ul><li>线性探测：通常保持在0.5-0.7之间</li><li>二次探测：可以稍高，约0.7-0.8</li><li>双重哈希：可以更高，达到0.8-0.9</li></ul><h4 id="测验-26"><a href="#测验-26" class="headerlink" title="测验"></a>测验</h4><ol><li>在使用线性探测的开放寻址哈希表中，什么是”基本聚集”（primary clustering）？它如何影响哈希表性能？</li><li>开放寻址法中的删除操作为什么不能直接将位置标记为空（null）？这会导致什么问题？</li><li>在同样大小的哈希表中，假设装载因子为 0.8，开放寻址法和链地址法哪种方法的查找性能更好？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>基本聚集是指在线性探测中连续被占用的位置形成的”群集”现象。当一个位置发生冲突时，会占用下一个位置，导致对后续哈希到这些位置的键产生更多冲突，形成越来越长的连续占用区域。这会显著降低查找和插入操作的性能，因为探测长度增加。</li><li>不能直接标记为空，因为这会中断探测链。在开放寻址法中，探测序列遇到空位置时停止，表示元素不存在。如果删除操作简单地将位置标记为空，会导致原本能找到的后续插入的元素无法被找到。因此需要特殊的”已删除”标记。</li><li>通常情况下，在高装载因子（如0.8）时，链地址法的性能更好。因为开放寻址法在高装载因子时探测序列变长，查找性能下降明显；链地址法即使在高装载因子下，只要哈希函数分布均匀，每个链表的平均长度仍然可控。开放寻址法通常需要保持较低的装载因子（如&lt;0.7）才能维持良好性能。</li></ol></blockquote><h3 id="三、布隆过滤器"><a href="#三、布隆过滤器" class="headerlink" title="三、布隆过滤器"></a>三、布隆过滤器</h3><p>布隆过滤器是一种空间效率高的概率性数据结构，用于判断一个元素是否在集合中。它可能误判元素存在，但不会误判元素不存在。</p><p><code>空间复杂度:O(m)</code></p><h5 id="算法讲解-27"><a href="#算法讲解-27" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="布隆过滤器教程"><a href="#布隆过滤器教程" class="headerlink" title="布隆过滤器教程"></a>布隆过滤器教程</h4><h5 id="介绍-27"><a href="#介绍-27" class="headerlink" title="介绍"></a>介绍</h5><p>布隆过滤器(Bloom Filter)是一种空间效率很高的概率型数据结构，它用于判断一个元素是否在一个集合中。布隆过滤器的特点是：对于一个元素，如果布隆过滤器说它不存在，那么它一定不存在；如果布隆过滤器说它存在，那么它可能存在（有一定的误判率）。</p><p>布隆过滤器的核心组成部分包括：</p><ul><li>位数组（Bit Array）：一个由二进制位（0或1）组成的数组，初始时所有位都设为0</li><li>哈希函数（Hash Functions）：多个不同的哈希函数，用于将元素映射到位数组的不同位置</li><li>误判率（False Positive Rate）：表示不在集合中的元素被误判为在集合中的概率</li></ul><h4 id="核心特性-27"><a href="#核心特性-27" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>高效的空间利用率：相比于传统的存储方式，布隆过滤器使用的空间非常小</li><li>常数时间复杂度：判断元素是否存在的操作时间复杂度为O(k)，k为哈希函数的个数，通常很小</li><li>可能存在误判：布隆过滤器可能会将不在集合中的元素误判为在集合中（假阳性），但不会将在集合中的元素误判为不在（没有假阴性）</li><li>不可移除元素：标准的布隆过滤器不支持删除元素的操作</li></ol><h4 id="基本操作-26"><a href="#基本操作-26" class="headerlink" title="基本操作"></a>基本操作</h4><p>布隆过滤器支持两种基本操作：</p><ol><li>添加元素（Add）：<ul><li>使用k个哈希函数计算元素的k个哈希值</li><li>将位数组中对应的k个位置设为1</li></ul></li><li>查询元素（Query）：<ul><li>使用k个哈希函数计算元素的k个哈希值</li><li>检查位数组中对应的k个位置是否都为1</li><li>如果都为1，返回”可能存在”；如果有一个不为1，返回”一定不存在”</li></ul></li></ol><h4 id="代码实现-23"><a href="#代码实现-23" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">import</span> java.util.BitSet;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilter</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> BitSet bitSet;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfHashFunctions;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 哈希函数数组</span></span><br><span class="line">    <span class="keyword">private</span> Function&lt;T, Integer&gt;[] hashFunctions;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BloomFilter</span><span class="params">(<span class="type">int</span> size, <span class="type">int</span> numberOfHashFunctions)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.numberOfHashFunctions = numberOfHashFunctions;</span><br><span class="line">        <span class="built_in">this</span>.bitSet = <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">        <span class="built_in">this</span>.hashFunctions = <span class="keyword">new</span> <span class="title class_">Function</span>[numberOfHashFunctions];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建多个哈希函数（这里用简单方式模拟多个哈希函数）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numberOfHashFunctions; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">seed</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            hashFunctions[i] = item -&gt; Math.abs((item.hashCode() * seed) % size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T item)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Function&lt;T, Integer&gt; hashFunction : hashFunctions) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hashFunction.apply(item);</span><br><span class="line">            bitSet.set(hash);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">mightContain</span><span class="params">(T item)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Function&lt;T, Integer&gt; hashFunction : hashFunctions) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hashFunction.apply(item);</span><br><span class="line">            <span class="keyword">if</span> (!bitSet.get(hash)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果有一个位是0，则元素一定不存在</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 所有位都是1，元素可能存在</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前设置为1的位的数量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBitCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bitSet.cardinality();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空过滤器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        bitSet.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 示例使用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个大小为1000，使用3个哈希函数的布隆过滤器</span></span><br><span class="line">        BloomFilter&lt;String&gt; filter = <span class="keyword">new</span> <span class="title class_">BloomFilter</span>&lt;&gt;(<span class="number">1000</span>, <span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        filter.add(<span class="string">&quot;apple&quot;</span>);</span><br><span class="line">        filter.add(<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">        filter.add(<span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 测试元素是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;apple 可能存在: &quot;</span> + filter.mightContain(<span class="string">&quot;apple&quot;</span>));    <span class="comment">// 应该返回 true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;banana 可能存在: &quot;</span> + filter.mightContain(<span class="string">&quot;banana&quot;</span>));  <span class="comment">// 应该返回 true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;grape 可能存在: &quot;</span> + filter.mightContain(<span class="string">&quot;grape&quot;</span>));    <span class="comment">// 很可能返回 false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><p>注意，在实际开发中我们一般不会自己实现布隆过滤器，而是使用一些工具包中提供的现成实现，这里上述的实现只是方便大家学习，所以可能并不够完善(比如哈希函数的设计)。</p><h4 id="优缺点-26"><a href="#优缺点-26" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-17"><a href="#优点-17" class="headerlink" title="优点"></a>优点</h5><ol><li>空间效率高：相比于存储元素本身，布隆过滤器只需要很小的空间</li><li>查询速度快：O(k)的时间复杂度，k为哈希函数个数</li><li>隐私保护：不存储元素本身，只存储元素的哈希映射结果</li><li>适合处理大规模数据：当数据量巨大时，布隆过滤器的优势更加明显</li></ol><h5 id="缺点-16"><a href="#缺点-16" class="headerlink" title="缺点"></a>缺点</h5><ol><li>存在误判：可能会将不在集合中的元素误判为在集合中</li><li>不支持删除：标准布隆过滤器不支持删除元素（有计数布隆过滤器等变种可以支持）</li><li>需要预估数据量：需要在创建时预估元素数量和期望的误判率</li></ol><h4 id="应用场景-27"><a href="#应用场景-27" class="headerlink" title="应用场景"></a>应用场景</h4><p>布隆过滤器在很多领域都有广泛的应用：</p><ol><li>网络爬虫：用于检测URL是否已经被爬取过，避免重复爬取</li><li>数据库优化：在数据库查询前，使用布隆过滤器快速判断记录是否可能存在，减少不必要的磁盘访问</li><li>缓存穿透防护：判断一个key是否在缓存或数据库中存在，防止恶意请求大量不存在的key导致系统压力</li><li>网络安全：判断一个IP地址是否在黑名单中</li><li>推荐系统：快速判断用户是否已经看过某内容，避免重复推荐</li></ol><p>以缓存穿透防护为例，当有请求访问一个不存在的数据时，请求会先经过布隆过滤器的检查。如果布隆过滤器判断这个数据”一定不存在”，就可以直接返回”不存在”的结果，避免对缓存和数据库的无效查询，提高系统的性能和安全性。</p><h4 id="扩展：布隆过滤器的变种"><a href="#扩展：布隆过滤器的变种" class="headerlink" title="扩展：布隆过滤器的变种"></a>扩展：布隆过滤器的变种</h4><ol><li>计数布隆过滤器（Counting Bloom Filter）：为每个位置使用一个计数器而不是一个位，支持元素的删除操作</li><li>稳定布隆过滤器（Stable Bloom Filter）：随机重置部分计数器以保持误判率的稳定</li><li>可扩展布隆过滤器（Scalable Bloom Filter）：可以动态增长以适应更多的元素</li><li>布谷鸟过滤器（Cuckoo Filter）：布隆过滤器的一种替代方案，支持删除操作，并且可能具有更低的误判率</li></ol><h4 id="测验-27"><a href="#测验-27" class="headerlink" title="测验"></a>测验</h4><ol><li>如果布隆过滤器表明一个元素”可能存在”，这个元素一定在集合中吗？为什么？</li><li>如果布隆过滤器表明一个元素”一定不存在”，这个元素有可能在集合中吗？为什么？</li><li>当向布隆过滤器中添加更多的元素时，假阳性（误判）的概率会如何变化？为什么？</li><li>如果增加布隆过滤器中哈希函数的数量，会对过滤器的性能产生什么影响？</li><li>一个公司需要检查新用户注册的密码是否在常见密码列表中。该列表包含一百万个常见密码。你认为布隆过滤器适合这个场景吗？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>不一定。布隆过滤器可能会有假阳性（误判），即它可能会将不在集合中的元素误判为在集合中。这是由于哈希冲突导致的。</li><li>不可能。如果布隆过滤器说元素”一定不存在”，那么这个元素确实不在集合中。布隆过滤器不会出现假阴性。</li><li>添加更多元素会增加假阳性的概率。因为随着添加的元素增多，位数组中被设置为1的位也会增多，导致哈希冲突的可能性增加。</li><li>增加哈希函数的数量会：降低假阳性率（因为需要更多的位都为1才会判定元素存在）；但会增加计算开销和内存访问次数；同时也会导致位数组中1的数量增加得更快。需要在准确性和性能之间找到平衡。</li><li>非常适合。理由：密码列表较大（一百万个）；只需要判断密码是否可能在列表中，允许少量误判；相比存储完整密码列表，布隆过滤器可以大大节省空间；密码检查需要快速响应；不需要删除操作。</li></ol></blockquote><h2 id="高级结构"><a href="#高级结构" class="headerlink" title="高级结构"></a>高级结构</h2><h3 id="一、并查集-Union-Find"><a href="#一、并查集-Union-Find" class="headerlink" title="一、并查集 (Union-Find)"></a>一、并查集 (Union-Find)</h3><p>并查集是一种树形数据结构，用于处理不相交集合的合并及查询问题，支持「查找」和「合并」两种操作，常用于解决连通性问题、最小生成树和动态连通性等问题。</p><h5 id="算法讲解-28"><a href="#算法讲解-28" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="并查集（Union-Find）"><a href="#并查集（Union-Find）" class="headerlink" title="并查集（Union-Find）"></a>并查集（Union-Find）</h4><h5 id="介绍-28"><a href="#介绍-28" class="headerlink" title="介绍"></a>介绍</h5><p>并查集是一种树形的数据结构，用于处理不相交集合（Disjoint Set）的合并及查询问题。它主要支持两种操作：</p><ol><li>查找（Find）：确定某个元素属于哪个集合</li><li>合并（Union）：将两个集合合并为一个集合</li></ol><p>名称”并查集”直接体现了它的核心功能：合并集合与查询元素所属集合。在英文中，它通常被称为”Union-Find”数据结构或”Disjoint-Set”数据结构。</p><p>并查集的基本思想是使用树形结构来表示每个集合，树的根节点作为集合的代表元素。</p><h4 id="核心特性-28"><a href="#核心特性-28" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>快速查找：能够快速判断两个元素是否属于同一集合</li><li>快速合并：能够快速将两个集合合并为一个</li><li>路径压缩：优化查找操作，使树的高度尽量小</li><li>按秩合并：优化合并操作，减少树的高度增长</li></ol><h4 id="基本操作-27"><a href="#基本操作-27" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="初始化（MakeSet）"><a href="#初始化（MakeSet）" class="headerlink" title="初始化（MakeSet）"></a>初始化（MakeSet）</h5><p>创建n个单元素集合，每个元素初始时都是独立的集合。</p><h5 id="查找（Find）"><a href="#查找（Find）" class="headerlink" title="查找（Find）"></a>查找（Find）</h5><p>查找元素所属的集合，通常是查找元素所在树的根节点。</p><h5 id="合并（Union）"><a href="#合并（Union）" class="headerlink" title="合并（Union）"></a>合并（Union）</h5><p>将两个集合合并为一个集合，通常是将一个集合的根节点连接到另一个集合的根节点上。</p><h4 id="代码实现-24"><a href="#代码实现-24" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] parent; <span class="comment">// 记录每个节点的父节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] rank;   <span class="comment">// 记录每个根节点对应树的高度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> size)</span> &#123;</span><br><span class="line">        parent = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        rank = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始时，每个元素自成一个集合，父节点指向自己</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            parent[i] = i;</span><br><span class="line">            rank[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找操作（带路径压缩）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[x] != x) &#123;</span><br><span class="line">            <span class="comment">// 路径压缩：将x的父节点直接设为根节点</span></span><br><span class="line">            parent[x] = find(parent[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parent[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 合并操作（按秩合并）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootX</span> <span class="operator">=</span> find(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rootY</span> <span class="operator">=</span> find(y);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果已经在同一集合中，不需要合并</span></span><br><span class="line">        <span class="keyword">if</span> (rootX == rootY) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 按秩合并：将秩较小的树连接到秩较大的树下</span></span><br><span class="line">        <span class="keyword">if</span> (rank[rootX] &lt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootX] = rootY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank[rootX] &gt; rank[rootY]) &#123;</span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 秩相同时，随便选一个作为根，并将新根的秩+1</span></span><br><span class="line">            parent[rootY] = rootX;</span><br><span class="line">            rank[rootX]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断两个元素是否在同一集合</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-27"><a href="#优缺点-27" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-18"><a href="#优点-18" class="headerlink" title="优点"></a>优点</h5><ol><li>查找和合并操作的平均时间复杂度接近O(1)</li><li>实现简单，易于理解</li><li>空间复杂度低，只需要两个数组</li><li>适用于处理大量动态连通性问题</li></ol><h5 id="缺点-17"><a href="#缺点-17" class="headerlink" title="缺点"></a>缺点</h5><ol><li>不支持分裂操作（将一个集合分成两个）</li><li>不方便查询集合中的所有元素</li><li>在某些特殊情况下，性能可能退化</li></ol><h4 id="应用场景-28"><a href="#应用场景-28" class="headerlink" title="应用场景"></a>应用场景</h4><h5 id="Kruskal最小生成树算法"><a href="#Kruskal最小生成树算法" class="headerlink" title="Kruskal最小生成树算法"></a>Kruskal最小生成树算法</h5><p>在Kruskal算法中，并查集是核心数据结构。该算法按权重从小到大遍历边，使用并查集判断加入某条边是否会形成环，从而高效构建最小生成树。</p><h5 id="网络连通性问题"><a href="#网络连通性问题" class="headerlink" title="网络连通性问题"></a>网络连通性问题</h5><p>并查集可高效解决动态连通性问题，比如判断网络中两个节点是否连通、社交网络中用户间的关系连接等。当关系变化时，只需执行简单的union操作，判断连通性时使用find操作即可。</p><h5 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h5><p>在编译器设计、电路分析等领域，并查集可用于等价类识别与合并。当系统发现两个元素等价时执行union操作，需要判断等价关系时使用find操作，这种动态维护等价关系的能力正是并查集的优势所在。</p><h5 id="判断无向图中的环"><a href="#判断无向图中的环" class="headerlink" title="判断无向图中的环"></a>判断无向图中的环</h5><p>当向无向图中添加边时，如果边的两个端点已在同一个集合中，则添加这条边会形成环。在很多图算法和网络设计问题中都可以使用这一特性。</p><h4 id="测验-28"><a href="#测验-28" class="headerlink" title="测验"></a>测验</h4><ol><li>并查集主要支持哪两种基本操作？</li><li>路径压缩指的是什么？它有什么好处？</li><li>在一个包含10个元素的并查集中，如果我们执行union(1,2), union(3,4), union(1,5), union(6,7), union(8,9), union(7,8)，最终会形成多少个不同的集合？</li><li>并查集的合并操作时间复杂度是多少？用了优化后的查询操作时间复杂度是多少？</li></ol><blockquote><p>测验答案</p><ol><li>查找（Find）和合并（Union）操作</li><li>路径压缩是在执行查找操作时，将查找路径上的所有节点都直接连接到根节点的优化技术。这样可以减少树的高度，加速后续的查找操作。</li><li>3个集合。分析：集合1包含元素{1,2,5}，集合2包含元素{3,4}，集合3包含元素{6,7,8,9,10}</li><li>合并操作的时间复杂度是O(α(n))，其中α(n)是阿克曼函数的反函数，实际使用中可以近似看作常数。使用路径压缩后的查询操作时间复杂度也是O(α(n))，近似常数。</li></ol></blockquote><h3 id="二、跳表-Skip-List"><a href="#二、跳表-Skip-List" class="headerlink" title="二、跳表 (Skip List)"></a>二、跳表 (Skip List)</h3><p>跳表是一种随机化的数据结构，基于链表实现，通过维护多层链表实现对有序链表的快速访问，平均查找、插入和删除时间复杂度均为O(log n)。跳表是对有序链表的一种优化，在链表的基础上，增加了多级索引，以空间换时间，使得操作效率接近二叉查找树。</p><h5 id="算法讲解-29"><a href="#算法讲解-29" class="headerlink" title="算法讲解"></a>算法讲解</h5><h4 id="跳表（Skip-List）"><a href="#跳表（Skip-List）" class="headerlink" title="跳表（Skip List）"></a>跳表（Skip List）</h4><h5 id="介绍-29"><a href="#介绍-29" class="headerlink" title="介绍"></a>介绍</h5><p>跳表是一种基于有序链表的数据结构，通过添加额外的”跳跃”链接，实现了对链表的快速查找。传统的有序链表查找需要从头开始一个一个节点遍历，时间复杂度为O(n)，而跳表通过构建多层索引，可以达到平均O(log n)的搜索效率，接近于二叉搜索树。</p><p>跳表的核心构想可以类比为图书馆的索引系统或多层电梯：</p><ul><li>底层链表：完整存储所有数据的有序链表</li><li>索引层：由底层链表中部分节点”提拔”形成的快速通道</li></ul><p>在跳表中，每个节点包含以下几个组成部分：</p><ul><li>值（value）：节点存储的数据</li><li>前进指针数组（forward array）：指向不同层级的后继节点</li><li>层高（level）：该节点的最大层级</li></ul><h4 id="核心特性-29"><a href="#核心特性-29" class="headerlink" title="核心特性"></a>核心特性</h4><ol><li>多层结构：由最底层的原始有序链表，以及若干层索引组成</li><li>概率平衡：通过随机函数决定节点的层数，无需复杂的平衡操作</li><li>快速查找：能够跳过大量节点，实现对数级别的查找效率</li><li>有序性：所有节点按关键字排序</li><li>空间换时间：使用额外的索引指针提高查询速度</li></ol><h4 id="基本操作-28"><a href="#基本操作-28" class="headerlink" title="基本操作"></a>基本操作</h4><h5 id="1-查找（Search）"><a href="#1-查找（Search）" class="headerlink" title="1. 查找（Search）"></a>1. 查找（Search）</h5><p>查找过程从最高层开始，沿着当前层前进，直到遇到大于或等于目标值的节点：</p><ol><li>如果找到目标值，返回该节点</li><li>如果当前节点的下一个值大于目标值，则降至下一层继续查找</li><li>如果到达最底层仍未找到，则目标值不存在</li></ol><h5 id="2-插入（Insert）"><a href="#2-插入（Insert）" class="headerlink" title="2. 插入（Insert）"></a>2. 插入（Insert）</h5><p>插入新节点的步骤：</p><ol><li>查找新值的插入位置，同时记录每一层的”插入点”</li><li>随机生成新节点的层高</li><li>从底层到该节点的最高层，逐层调整指针，将新节点插入到每层链表中</li></ol><h5 id="3-删除（Delete）"><a href="#3-删除（Delete）" class="headerlink" title="3. 删除（Delete）"></a>3. 删除（Delete）</h5><p>删除节点的步骤：</p><ol><li>查找待删除节点的位置，同时记录每一层的前驱节点</li><li>如果找到该节点，从该节点的最高层到底层，逐层调整前驱节点的指针，绕过待删除节点</li></ol><h4 id="代码实现-25"><a href="#代码实现-25" class="headerlink" title="代码实现"></a>代码实现</h4><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SkipList</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_LEVEL</span> <span class="operator">=</span> <span class="number">16</span>; <span class="comment">// 最大层数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">P</span> <span class="operator">=</span> <span class="number">0.5</span>;     <span class="comment">// 提升层级的概率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> level;                       <span class="comment">// 当前跳表的最大层数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;T&gt; header;            <span class="comment">// 头节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random;             <span class="comment">// 用于随机层数的生成</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节点定义</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; &#123;</span><br><span class="line">        T value;                  <span class="comment">// 节点值</span></span><br><span class="line">        Node&lt;T&gt;[] forward;        <span class="comment">// 前进指针数组</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Node(T value, <span class="type">int</span> level) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.forward = <span class="keyword">new</span> <span class="title class_">Node</span>[level + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SkipList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.header = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, MAX_LEVEL);</span><br><span class="line">        <span class="built_in">this</span>.random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机生成层数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">randomLevel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lvl</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (lvl &lt; MAX_LEVEL &amp;&amp; random.nextDouble() &lt; P) &#123;</span><br><span class="line">            lvl++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lvl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找操作</span></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">search</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; current = header;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从最高层开始查找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">// 在当前层向前移动，直到找到大于等于目标值的节点</span></span><br><span class="line">            <span class="keyword">while</span> (current.forward[i] != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">                   current.forward[i].value.compareTo(value) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = current.forward[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 现在我们在第0层，并且current是目标值的前一个节点</span></span><br><span class="line">        current = current.forward[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否找到目标值</span></span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span> &amp;&amp; current.value.compareTo(value) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 插入操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Node&lt;T&gt;[] update = <span class="keyword">new</span> <span class="title class_">Node</span>[MAX_LEVEL + <span class="number">1</span>];</span><br><span class="line">        Node&lt;T&gt; current = header;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找插入位置并记录每层的前驱节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (current.forward[i] != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">                   current.forward[i].value.compareTo(value) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = current.forward[i];</span><br><span class="line">            &#125;</span><br><span class="line">            update[i] = current;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取新节点的随机层数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newLevel</span> <span class="operator">=</span> randomLevel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果新层数比当前跳表的最大层数大，更新跳表层数</span></span><br><span class="line">        <span class="keyword">if</span> (newLevel &gt; level) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level + <span class="number">1</span>; i &lt;= newLevel; i++) &#123;</span><br><span class="line">                update[i] = header;</span><br><span class="line">            &#125;</span><br><span class="line">            level = newLevel;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建新节点</span></span><br><span class="line">        Node&lt;T&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(value, newLevel);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 插入节点到各层链表中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= newLevel; i++) &#123;</span><br><span class="line">            newNode.forward[i] = update[i].forward[i];</span><br><span class="line">            update[i].forward[i] = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Node&lt;T&gt;[] update = <span class="keyword">new</span> <span class="title class_">Node</span>[MAX_LEVEL + <span class="number">1</span>];</span><br><span class="line">        Node&lt;T&gt; current = header;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查找删除位置并记录每层的前驱节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (current.forward[i] != <span class="literal">null</span> &amp;&amp; </span><br><span class="line">                   current.forward[i].value.compareTo(value) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = current.forward[i];</span><br><span class="line">            &#125;</span><br><span class="line">            update[i] = current;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        current = current.forward[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果找到节点，进行删除</span></span><br><span class="line">        <span class="keyword">if</span> (current != <span class="literal">null</span> &amp;&amp; current.value.compareTo(value) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= level; i++) &#123;</span><br><span class="line">                <span class="comment">// 如果当前层的前驱节点指向要删除的节点，则修改指针</span></span><br><span class="line">                <span class="keyword">if</span> (update[i].forward[i] == current) &#123;</span><br><span class="line">                    update[i].forward[i] = current.forward[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 更新跳表的最大层数</span></span><br><span class="line">            <span class="keyword">while</span> (level &gt; <span class="number">0</span> &amp;&amp; header.forward[level] == <span class="literal">null</span>) &#123;</span><br><span class="line">                level--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印跳表内容（用于调试）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printSkipList</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Skip List Structure:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> level; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Level &quot;</span> + i + <span class="string">&quot;: &quot;</span>);</span><br><span class="line">            Node&lt;T&gt; node = header.forward[i];</span><br><span class="line">            <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.print(node.value + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                node = node.forward[i];</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳表节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SkipListNode</span> &#123;</span><br><span class="line">  constructor(value, level) &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">    <span class="built_in">this</span>.forward = <span class="keyword">new</span> <span class="title class_">Array</span>(level + <span class="number">1</span>).fill(<span class="literal">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="type">const</span> <span class="variable">skipList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SkipList</span>();</span><br><span class="line">skipList.insert(<span class="number">3</span>);</span><br><span class="line">skipList.insert(<span class="number">6</span>);</span><br><span class="line">skipList.insert(<span class="number">7</span>);</span><br><span class="line">console.log(skipList.search(<span class="number">6</span>)); <span class="comment">// true</span></span><br><span class="line">skipList.insert(<span class="number">9</span>);</span><br><span class="line">skipList.delete(<span class="number">6</span>);</span><br><span class="line">console.log(skipList.search(<span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法复杂度</title>
      <link href="/2024/11/24/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2024/11/24/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h1><h3 id="什么是算法复杂度？"><a href="#什么是算法复杂度？" class="headerlink" title="什么是算法复杂度？"></a>什么是算法复杂度？</h3><p>算法复杂度是衡量算法性能的重要指标，主要包括<strong>时间复杂度</strong>（执行时间）和<strong>空间复杂度</strong>（内存使用）。 复杂度通常使用大O表示法（Big O Notation）来描述算法在最坏情况下的性能上界。</p><h4 id="时间复杂度对比"><a href="#时间复杂度对比" class="headerlink" title="时间复杂度对比"></a>时间复杂度对比</h4><p>操作次数增长率</p><p>0n/4n/23n/4n</p><p>O(1)</p><p>O(log n)</p><p>O(n)</p><p>O(n log n)</p><p>O(n²)</p><p>O(2ⁿ)</p><p>O(n!)</p><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4><h5 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h5><p>常量空间复杂度，算法所需空间与输入规模无关。如简单计算、原地排序算法等。</p><h5 id="O-log-n"><a href="#O-log-n" class="headerlink" title="O(log n)"></a>O(log n)</h5><p>对数空间复杂度，空间需求随输入增长而缓慢增加。常见于分治算法如二分查找。</p><h5 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h5><p>线性空间复杂度，空间需求与输入规模成正比。如需要额外数组的算法。</p><h5 id="O-n²"><a href="#O-n²" class="headerlink" title="O(n²)"></a>O(n²)</h5><p>平方空间复杂度，空间需求与输入规模的平方成正比。如需要二维数组的动态规划。</p><ul><li><a href="https://algo.codefather.cn/complexity#sorting">排序算法</a></li><li><a href="https://algo.codefather.cn/complexity#search">查找算法</a></li><li><a href="https://algo.codefather.cn/complexity#linear">线性数据结构</a></li><li><a href="https://algo.codefather.cn/complexity#tree">树形数据结构</a></li><li><a href="https://algo.codefather.cn/complexity#graph-structure">图形数据结构</a></li><li><a href="https://algo.codefather.cn/complexity#hash">哈希与映射</a></li><li><a href="https://algo.codefather.cn/complexity#advanced-structure">高级数据结构</a></li><li><a href="https://algo.codefather.cn/complexity#graph">图论算法</a></li><li><a href="https://algo.codefather.cn/complexity#string">字符串算法</a></li><li><a href="https://algo.codefather.cn/complexity#numberTheory">数论算法</a></li></ul><h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/bubbleSort">冒泡排序</a></td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/selectionSort">选择排序</a></td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/insertionSort">插入排序</a></td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/mergeSort">归并排序</a></td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/quickSort">快速排序</a></td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(log n)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/heapSort">堆排序</a></td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/countingSort">计数排序</a></td><td style="text-align:left">O(n + k)</td><td style="text-align:left">O(n + k)</td><td style="text-align:left">O(n + k)</td><td style="text-align:left">O(n + k)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/radixSort">基数排序</a></td><td style="text-align:left">O(n * k)</td><td style="text-align:left">O(n * k)</td><td style="text-align:left">O(n * k)</td><td style="text-align:left">O(n + k)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/bucketSort">桶排序</a></td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n + k)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(n + k)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/sorting/shellSort">希尔排序</a></td><td style="text-align:left">O(n log n)</td><td style="text-align:left">O(n log² n)</td><td style="text-align:left">O(n²)</td><td style="text-align:left">O(1)</td></tr></tbody></table></div><h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/search/linearSearch">线性查找</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/search/binarySearch">二分查找</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/search/jumpSearch">跳跃查找</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(√n)</td><td style="text-align:left">O(√n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/search/interpolationSearch">插值查找</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(log log n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/search/hashSearch">哈希查找</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td></tr></tbody></table></div><h3 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/recursion/maximumSubarray">数组 - 访问</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/recursion/maximumSubarray">数组 - 插入</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/recursion/maximumSubarray">数组 - 删除</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">链表 - 访问</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">链表 - 插入</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">链表 - 删除</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">栈 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">队列 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td></tr></tbody></table></div><h3 id="树形数据结构"><a href="#树形数据结构" class="headerlink" title="树形数据结构"></a>树形数据结构</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left">二叉搜索树 - 查找</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">二叉搜索树 - 插入</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">AVL树 - 基本操作</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left">红黑树 - 基本操作</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left">堆 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left">Trie树 - 基本操作</td><td style="text-align:left">O(m)</td><td style="text-align:left">O(m)</td><td style="text-align:left">O(m)</td><td style="text-align:left">O(n*m)</td></tr></tbody></table></div><h3 id="图形数据结构"><a href="#图形数据结构" class="headerlink" title="图形数据结构"></a>图形数据结构</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left">邻接矩阵 - 访问</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left">邻接矩阵 - 搜索</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left">邻接矩阵 - 插入</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left">邻接矩阵 - 删除</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left">邻接矩阵 - 遍历</td><td style="text-align:left">O(V²)</td><td style="text-align:left">O(V²)</td><td style="text-align:left">O(V²)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left">邻接表 - 访问</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">邻接表 - 搜索</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V)</td><td style="text-align:left">O(V)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">邻接表 - 插入</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">邻接表 - 删除</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">邻接表 - 遍历</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">边列表 - 访问</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td></tr><tr><td style="text-align:left">边列表 - 搜索</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td></tr><tr><td style="text-align:left">边列表 - 插入</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(E)</td></tr><tr><td style="text-align:left">边列表 - 删除</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(E)</td></tr><tr><td style="text-align:left">边列表 - 遍历</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td><td style="text-align:left">O(E)</td></tr><tr><td style="text-align:left">有向图 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">无向图 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">加权图 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td></tr><tr><td style="text-align:left">有向无环图(DAG) - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td><td style="text-align:left">O(V+E)</td></tr></tbody></table></div><h3 id="哈希与映射"><a href="#哈希与映射" class="headerlink" title="哈希与映射"></a>哈希与映射</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left">哈希表 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left">布隆过滤器 - 基本操作</td><td style="text-align:left">O(k)</td><td style="text-align:left">O(k)</td><td style="text-align:left">O(k)</td><td style="text-align:left">O(m)</td></tr></tbody></table></div><h3 id="高级数据结构"><a href="#高级数据结构" class="headerlink" title="高级数据结构"></a>高级数据结构</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left">并查集 - 基本操作</td><td style="text-align:left">O(1)</td><td style="text-align:left">O(α(n))</td><td style="text-align:left">O(α(n))</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left">跳表 - 基本操作</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(n)</td></tr></tbody></table></div><h3 id="图论算法"><a href="#图论算法" class="headerlink" title="图论算法"></a>图论算法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/bfs">广度优先搜索</a></td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/dfs">深度优先搜索</a></td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/dijkstra">Dijkstra最短路径</a></td><td style="text-align:left">O(V² + E)</td><td style="text-align:left">O(V² + E)</td><td style="text-align:left">O(V² + E)</td><td style="text-align:left">O(V)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/bellmanFord">Bellman-Ford算法</a></td><td style="text-align:left">O(V * E)</td><td style="text-align:left">O(V * E)</td><td style="text-align:left">O(V * E)</td><td style="text-align:left">O(V)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/floydWarshall">Floyd-Warshall算法</a></td><td style="text-align:left">O(V³)</td><td style="text-align:left">O(V³)</td><td style="text-align:left">O(V³)</td><td style="text-align:left">O(V²)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/kruskal">Kruskal最小生成树</a></td><td style="text-align:left">O(E log E)</td><td style="text-align:left">O(E log E)</td><td style="text-align:left">O(E log E)</td><td style="text-align:left">O(V + E)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/prim">Prim最小生成树</a></td><td style="text-align:left">O(E log V)</td><td style="text-align:left">O(E log V)</td><td style="text-align:left">O(E log V)</td><td style="text-align:left">O(V)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/graph/topologicalSort">拓扑排序</a></td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V + E)</td><td style="text-align:left">O(V)</td></tr></tbody></table></div><h3 id="字符串算法"><a href="#字符串算法" class="headerlink" title="字符串算法"></a>字符串算法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/string-matching/kmp">KMP算法</a></td><td style="text-align:left">O(n)</td><td style="text-align:left">O(m + n)</td><td style="text-align:left">O(m + n)</td><td style="text-align:left">O(m)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/string-matching/rabinKarp">Rabin-Karp算法</a></td><td style="text-align:left">O(n)</td><td style="text-align:left">O(m + n)</td><td style="text-align:left">O(m * n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/string-matching/boyerMoore">Boyer-Moore算法</a></td><td style="text-align:left">O(n/m)</td><td style="text-align:left">O(n)</td><td style="text-align:left">O(m * n)</td><td style="text-align:left">O(m)</td></tr></tbody></table></div><h3 id="数论算法"><a href="#数论算法" class="headerlink" title="数论算法"></a>数论算法</h3><div class="table-container"><table><thead><tr><th style="text-align:left">算法名称</th><th style="text-align:left">最佳时间复杂度ⓘ</th><th style="text-align:left">平均时间复杂度ⓘ</th><th style="text-align:left">最差时间复杂度ⓘ</th><th style="text-align:left">空间复杂度ⓘ</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/number-theory/gcd">欧几里得算法(GCD)</a></td><td style="text-align:left">O(1)</td><td style="text-align:left">O(log min(a,b))</td><td style="text-align:left">O(log min(a,b))</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/number-theory/fastPower">快速幂</a></td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(log n)</td><td style="text-align:left">O(1)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/number-theory/primeSieve">埃拉托斯特尼筛法</a></td><td style="text-align:left">O(n log log n)</td><td style="text-align:left">O(n log log n)</td><td style="text-align:left">O(n log log n)</td><td style="text-align:left">O(n)</td></tr><tr><td style="text-align:left"><a href="https://algo.codefather.cn/algorithms/number-theory/modularInverse">模逆元计算</a></td><td style="text-align:left">O(n³)</td><td style="text-align:left">O(n³)</td><td style="text-align:left">O(n³)</td><td style="text-align:left">O(n²)</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进阶算法</title>
      <link href="/2024/11/24/%E8%BF%9B%E9%98%B6%E7%AE%97%E6%B3%95/"/>
      <url>/2024/11/24/%E8%BF%9B%E9%98%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="进阶算法"><a href="#进阶算法" class="headerlink" title="进阶算法"></a>进阶算法</h1><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="一、数独求解"><a href="#一、数独求解" class="headerlink" title="一、数独求解"></a>一、数独求解</h3><h4 id="数独求解"><a href="#数独求解" class="headerlink" title="数独求解"></a>数独求解</h4><p>数独求解是回溯算法的经典应用，通过逐步填充空格并验证，在不满足约束条件时及时回溯，最终找到数独问题的解决方案。</p><p><code>时间复杂度:最差 O(N^m)   空间复杂度:O(m)</code></p><h4 id="算法讲解"><a href="#算法讲解" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>数独（Sudoku）是一种基于逻辑的组合数字放置谜题，目标是在一个 9×9 的网格中填入数字 1-9，使得每行、每列和每个 3×3 子网格中的数字不重复。数独求解算法通常采用回溯搜索的策略，结合多种约束传播技术提高效率。数独问题是一个 NP 完全问题，意味着没有已知的多项式时间算法可以解决所有情况，但通过合理的启发式和优化手段，可以高效解决绝大多数数独谜题。</p><p>数独求解算法不仅在游戏解谜中有应用，也是约束满足问题（Constraint Satisfaction Problem，CSP）的经典案例，在人工智能、优化算法研究等领域有重要价值。</p><h4 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>输入一个9×9的数独谜题，空白格用0或’.’表示</li><li>找到一个空白格（未填数字的位置）</li><li>尝试在该位置填入1-9中的一个数字</li><li>检查填入的数字是否满足数独规则（行、列、3×3子网格不重复）</li><li>如果满足规则，递归地解决剩余空白格</li><li>如果递归求解成功，则数独解决</li><li>如果递归求解失败或当前数字不满足规则，回溯并尝试下一个数字</li><li>如果1-9都尝试完仍未解决，则回溯到上一个空白格</li><li>如果不存在空白格，则数独已解决</li></ol><h4 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>回溯算法：通过深度优先搜索和回溯尝试所有可能的组合</li><li>约束传播：利用数独规则减少搜索空间</li><li>时间复杂度：最坏情况为O(9^m)，m是空白格数量</li><li>空间复杂度：O(m)，主要用于递归调用栈</li><li>确定性：对于有唯一解的数独，算法总能找到解</li><li>适用范围：标准9×9数独及其变种</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SudokuSolver</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> board.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 寻找一个空位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isEmpty</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    row = i;</span><br><span class="line">                    col = j;</span><br><span class="line">                    isEmpty = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEmpty) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 没有空位置，说明数独已解决</span></span><br><span class="line">        <span class="keyword">if</span> (!isEmpty) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试在空位置填入1-9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isSafe(board, row, col, num)) &#123;</span><br><span class="line">                <span class="comment">// 尝试放置数字</span></span><br><span class="line">                board[row][col] = num;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 递归解决剩余部分</span></span><br><span class="line">                <span class="keyword">if</span> (solveSudoku(board)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果当前数字不能解决问题，回溯</span></span><br><span class="line">                board[row][col] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试所有数字都失败，返回false触发回溯</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查在指定位置放置数字是否安全</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isSafe</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查行是否有重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查列是否有重复</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查3x3子网格是否有重复</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sqrt</span> <span class="operator">=</span> (<span class="type">int</span>) Math.sqrt(board.length);</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxRowStart</span> <span class="operator">=</span> row - row % sqrt;</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxColStart</span> <span class="operator">=</span> col - col % sqrt;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> boxRowStart; i &lt; boxRowStart + sqrt; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> boxColStart; j &lt; boxColStart + sqrt; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == num) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 所有检查都通过，放置安全</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印数独</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSudoku</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board.length; j++) &#123;</span><br><span class="line">                System.out.print(board[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] board = &#123;</span><br><span class="line">            &#123;<span class="number">5</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">3</span>&#125;,</span><br><span class="line">            &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">6</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">9</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;数独题目：&quot;</span>);</span><br><span class="line">        printSudoku(board);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (solveSudoku(board)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">数独解答：&quot;</span>);</span><br><span class="line">            printSudoku(board);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">没有解答！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化政策"><a href="#优化政策" class="headerlink" title="优化政策"></a>优化政策</h4><h5 id="启发式选择空格"><a href="#启发式选择空格" class="headerlink" title="启发式选择空格"></a>启发式选择空格</h5><p>优先选择约束最多的空格（可选数字最少的位置）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptimizedSudokuSolver</span> &#123;</span><br><span class="line">    <span class="comment">// 寻找约束最多的空格</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] findMostConstrainedCell(<span class="type">int</span>[][] board) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minPossibilities</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 最小可能性数量（初始值大于9）</span></span><br><span class="line">        <span class="type">int</span>[] result = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 计算此位置可放置的数字数量</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> countPossibilities(board, i, j);</span><br><span class="line">                    <span class="keyword">if</span> (count &lt; minPossibilities) &#123;</span><br><span class="line">                        minPossibilities = count;</span><br><span class="line">                        result[<span class="number">0</span>] = i;</span><br><span class="line">                        result[<span class="number">1</span>] = j;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">// 如果只有一种可能，立即返回</span></span><br><span class="line">                        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算单元格可能的数字数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countPossibilities</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">10</span>]; <span class="comment">// 索引0不使用</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[row][i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[i][col]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查3x3子网格</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">boxRow</span> <span class="operator">=</span> (row / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxCol</span> <span class="operator">=</span> (col / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                used[board[boxRow + i][boxCol + j]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算未使用数字的数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 优化后的求解函数，使用启发式选择</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cell = findMostConstrainedCell(board);</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> cell[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> cell[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 没有空格，数独已解决</span></span><br><span class="line">        <span class="keyword">if</span> (row == -<span class="number">1</span> &amp;&amp; col == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取当前位置可能的数字</span></span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">10</span>];</span><br><span class="line">        getPossibilities(board, row, col, used);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试可能的数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[num]) &#123;</span><br><span class="line">                board[row][col] = num;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (solveSudoku(board)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                board[row][col] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取位置可能的数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getPossibilities</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">boolean</span>[] used)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[row][i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[i][col]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查3x3子网格</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">boxRow</span> <span class="operator">=</span> (row / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxCol</span> <span class="operator">=</span> (col / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                used[board[boxRow + i][boxCol + j]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用位掩码优化"><a href="#使用位掩码优化" class="headerlink" title="使用位掩码优化"></a>使用位掩码优化</h5><p>使用位运算加速可能数字的计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BitmaskedSudokuSolver</span> &#123;</span><br><span class="line">    <span class="comment">// 使用位掩码记录每行、每列和每个3x3子网格中已存在的数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] rows = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] cols = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">9</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] boxes = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化位掩码</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> board[i][j];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; num;</span><br><span class="line">                    rows[i] |= mask;</span><br><span class="line">                    cols[j] |= mask;</span><br><span class="line">                    boxes[i/<span class="number">3</span>][j/<span class="number">3</span>] |= mask;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> solve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solve</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="comment">// 寻找下一个空格</span></span><br><span class="line">        <span class="type">int</span>[] empty = findEmptyCell(board);</span><br><span class="line">        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> empty[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> empty[<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 没有空格，数独已解决</span></span><br><span class="line">        <span class="keyword">if</span> (row == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算当前位置可以填入的数字</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">used</span> <span class="operator">=</span> rows[row] | cols[col] | boxes[row/<span class="number">3</span>][col/<span class="number">3</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试填入1-9</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mask</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; num;</span><br><span class="line">            <span class="comment">// 如果num可以填入（即对应位是0）</span></span><br><span class="line">            <span class="keyword">if</span> ((used &amp; mask) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 更新位掩码</span></span><br><span class="line">                rows[row] |= mask;</span><br><span class="line">                cols[col] |= mask;</span><br><span class="line">                boxes[row/<span class="number">3</span>][col/<span class="number">3</span>] |= mask;</span><br><span class="line">                board[row][col] = num;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 递归解决剩余部分</span></span><br><span class="line">                <span class="keyword">if</span> (solve(board)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                rows[row] &amp;= ~mask;</span><br><span class="line">                cols[col] &amp;= ~mask;</span><br><span class="line">                boxes[row/<span class="number">3</span>][col/<span class="number">3</span>] &amp;= ~mask;</span><br><span class="line">                board[row][col] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 寻找下一个空格，优先选择约束最多的格子</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] findEmptyCell(<span class="type">int</span>[][] board) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minPossibilities</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 计算可能性数量</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">used</span> <span class="operator">=</span> rows[i] | cols[j] | boxes[i/<span class="number">3</span>][j/<span class="number">3</span>];</span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((used &amp; (<span class="number">1</span> &lt;&lt; num)) == <span class="number">0</span>) &#123;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (count &lt; minPossibilities) &#123;</span><br><span class="line">                        minPossibilities = count;</span><br><span class="line">                        result[<span class="number">0</span>] = i;</span><br><span class="line">                        result[<span class="number">1</span>] = j;</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>回溯算法保证能找到解决方案（如果存在）</li><li>可以扩展应用到其他约束满足问题</li><li>实现相对简单，易于理解</li><li>能解决任何有效的数独问题</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>基本回溯算法在复杂数独上效率较低</li><li>最坏情况下的时间复杂度高（指数级）</li><li>不能有效处理多解数独问题（只找到第一个解）</li><li>内存消耗随递归深度增加</li><li>纯回溯算法不具备人类解题时的逻辑推理能力</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>1）数独游戏的自动生成与求解</p><p>2）约束满足问题（CSP）的求解框架测试</p><p>3）人工智能和机器学习算法的教学案例</p><p>4）递归和回溯算法的教学示例</p><p>5）组合优化问题研究</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><h5 id="唯一候选数法"><a href="#唯一候选数法" class="headerlink" title="唯一候选数法"></a>唯一候选数法</h5><p>在基本回溯之外使用人的解题策略来提高效率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnhancedSudokuSolver</span> &#123;</span><br><span class="line">    <span class="comment">// 应用逻辑规则解决&quot;确定&quot;的部分，减少回溯搜索</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solveSudokuEnhanced</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="comment">// 首先应用逻辑规则填充确定的格子</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">progress</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (progress) &#123;</span><br><span class="line">            progress = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 应用唯一候选数法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                        List&lt;Integer&gt; candidates = findCandidates(board, i, j);</span><br><span class="line">                        <span class="keyword">if</span> (candidates.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                            board[i][j] = candidates.get(<span class="number">0</span>);</span><br><span class="line">                            progress = <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 应用唯一位置法</span></span><br><span class="line">            progress |= applyUniquePositionRule(board);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果逻辑规则解决了所有格子，直接返回</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">complete</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">9</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    complete = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!complete) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (complete) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对于剩余部分，使用回溯算法</span></span><br><span class="line">        <span class="keyword">return</span> backtrackSolve(board);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 寻找给定位置的候选数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">findCandidates</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">10</span>]; <span class="comment">// 索引0不使用</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[row][i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            used[board[i][col]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查3x3子网格</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">boxRow</span> <span class="operator">=</span> (row / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxCol</span> <span class="operator">=</span> (col / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                used[board[boxRow + i][boxCol + j]] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 收集未使用的数字</span></span><br><span class="line">        List&lt;Integer&gt; candidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i]) &#123;</span><br><span class="line">                candidates.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> candidates;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 应用唯一位置法：如果一个数字在某行/列/宫中只有一个可能的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">applyUniquePositionRule</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">progress</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查每一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; <span class="number">9</span>; row++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>; num &lt;= <span class="number">9</span>; num++) &#123;</span><br><span class="line">                <span class="comment">// 检查数字是否已存在于行中</span></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; <span class="number">9</span>; col++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[row][col] == num) &#123;</span><br><span class="line">                        exists = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                    <span class="comment">// 寻找num在该行的可能位置</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">possibleCol</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; <span class="number">9</span>; col++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (board[row][col] == <span class="number">0</span> &amp;&amp; canPlace(board, row, col, num)) &#123;</span><br><span class="line">                            possibleCol = col;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 如果只有一个可能位置，填入数字</span></span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">                        board[row][possibleCol] = num;</span><br><span class="line">                        progress = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 同样检查每一列和每个3x3子网格</span></span><br><span class="line">        <span class="comment">// (这里省略相似代码)</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> progress;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查是否可以在给定位置放置数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canPlace</span><span class="params">(<span class="type">int</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[row][i] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == num) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查3x3子网格</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">boxRow</span> <span class="operator">=</span> (row / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">boxCol</span> <span class="operator">=</span> (col / <span class="number">3</span>) * <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (board[boxRow + i][boxCol + j] == num) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用回溯法解决剩余部分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">backtrackSolve</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="comment">// (实现与基本回溯算法相同)</span></span><br><span class="line">        <span class="comment">// 此处省略</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="舞蹈链和算法X"><a href="#舞蹈链和算法X" class="headerlink" title="舞蹈链和算法X"></a>舞蹈链和算法X</h5><p>Donald Knuth 提出的精确覆盖问题的高效解法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DancingLinksSudoku</span> &#123;</span><br><span class="line">    <span class="comment">// 这里只给出概念实现，完整实现较为复杂</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOARD_SIZE</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOX_SIZE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_VALUE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_VALUE</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CONSTRAINTS</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数独问题转换为精确覆盖问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] sudokuToExactCover(<span class="type">int</span>[][] board) &#123;</span><br><span class="line">        <span class="comment">// 行：9(行)x9(列)x9(数字) = 729行</span></span><br><span class="line">        <span class="comment">// 列：4个约束 x 9(行)x9(列) = 324列</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 四个约束：</span></span><br><span class="line">        <span class="comment">// 1. 每个格子只填一个数字</span></span><br><span class="line">        <span class="comment">// 2. 每行每个数字只出现一次</span></span><br><span class="line">        <span class="comment">// 3. 每列每个数字只出现一次</span></span><br><span class="line">        <span class="comment">// 4. 每个3x3子网格每个数字只出现一次</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建精确覆盖矩阵</span></span><br><span class="line">        <span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">729</span>][<span class="number">324</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充矩阵...</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用舞蹈链（Dancing Links）解决精确覆盖问题</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">solveSudokuDancingLinks</span><span class="params">(<span class="type">int</span>[][] board)</span> &#123;</span><br><span class="line">        <span class="comment">// 转换为精确覆盖问题</span></span><br><span class="line">        <span class="type">int</span>[][] matrix = sudokuToExactCover(board);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用算法X解决...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 从解中恢复数独答案</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验"><a href="#测验" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>数独求解中回溯算法的时间复杂度是多少？为什么不能用动态规划求解？</li><li>如何优化数独求解算法的性能？举出至少两种策略。</li><li>什么是数独问题中的约束传播？它如何减少搜索空间？</li><li>求解数独时，为什么选择约束最多的格子填写更有效率？</li></ol><blockquote><p>测验答案</p><ol><li>数独求解的时间复杂度是O(9^m)，其中m是空白格数量。不能用动态规划是因为数独问题没有明显的重叠子问题和最优子结构。</li><li>优化策略包括：启发式选择空格（先填约束最多的格子）、位掩码优化、应用人类解题逻辑（唯一候选数法、唯一位置法）、舞蹈链算法等。</li><li>约束传播是指通过已知的数字和规则，推导出其他格子的可能取值，减少搜索空间。当一个格子填入数字后，相关格子的候选数会减少。</li><li>选择约束最多的格子（可选数字最少的位置）可以减少分支因子，因为尝试的数字更少，减少回溯次数，提高搜索效率。</li></ol></blockquote><h3 id="二、全排列生成"><a href="#二、全排列生成" class="headerlink" title="二、全排列生成"></a>二、全排列生成</h3><h4 id="全排列生成"><a href="#全排列生成" class="headerlink" title="全排列生成"></a>全排列生成</h4><p>全排列生成是回溯算法的典型应用，通过逐个尝试所有可能的元素组合，生成指定元素集合的所有可能排列。</p><p><code>时间复杂度:最差 O(n!)  空间复杂度:O(n)</code></p><h4 id="算法讲解-1"><a href="#算法讲解-1" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><p>全排列（Permutation）是一种经典的组合问题，指的是将一组元素（通常是数字或字符）重新排列，得到它们所有可能的排列方式。对于包含n个不同元素的集合，共有n!（n的阶乘）种不同的排列方式。</p><p>回溯算法（Backtracking）是解决全排列问题的理想方法，它通过递归尝试所有可能的选择，并在需要时撤销选择（回溯），系统性地生成所有可能的排列。</p><p>全排列问题是理解回溯算法非常合适的案例，而且它应用广泛，比如组合优化、密码学、图论等领域。</p><h4 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>回溯法解决全排列问题的基本步骤：</p><ol><li>选择一个起始位置（初始为0）</li><li>对于当前位置，尝试放置每个还未使用的元素</li><li>放置一个元素后，递归处理下一个位置</li><li>递归结束后，撤销当前选择（回溯），尝试其他可能性</li><li>当所有位置都已填满元素时（到达叶节点），记录当前排列</li></ol><h4 id="核心特性-1"><a href="#核心特性-1" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>递归回溯：通过递归试探和回退，系统地生成所有排列</li><li>状态恢复：每次探索完成后恢复状态，确保不重复使用元素</li><li>时间复杂度：O(n!)，与排列数量成正比</li><li>空间复杂度：O(n)，主要是递归调用栈的开销</li><li>适用范围：中小规模的排列问题（元素较多时计算量爆炸）</li></ul><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permutation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 用于标记元素是否已被使用</span></span><br><span class="line">        <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        <span class="comment">// 当前排列的路径</span></span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        backtrack(nums, result, path, used);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; path, <span class="type">boolean</span>[] used)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前排列已完成</span></span><br><span class="line">        <span class="keyword">if</span> (path.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 跳过已使用的元素</span></span><br><span class="line">            <span class="keyword">if</span> (used[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 做选择</span></span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            used[i] = <span class="literal">true</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 进入下一层决策树</span></span><br><span class="line">            backtrack(nums, result, path, used);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 撤销选择（回溯）</span></span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            used[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permutations = permute(nums);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;数组 &quot;</span> + Arrays.toString(nums) + <span class="string">&quot; 的全排列：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; perm : permutations) &#123;</span><br><span class="line">            System.out.println(perm);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;总共有 &quot;</span> + permutations.size() + <span class="string">&quot; 种排列&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述Java代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="comment">// 做选择</span></span><br><span class="line">path.add(nums[i]);</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入下一层决策树</span></span><br><span class="line">backtrack(nums, result, path, used);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销选择（回溯）</span></span><br><span class="line">path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">used[i] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>实现了回溯算法的核心思想：做选择、递归探索、撤销选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">permute</span>(<span class="params">nums</span>):</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 用于标记元素是否已被使用</span></span><br><span class="line">    used = [<span class="literal">False</span>] * <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="comment"># 当前排列的路径</span></span><br><span class="line">    path = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backtrack</span>():</span><br><span class="line">        <span class="comment"># 当前排列已完成</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(path) == <span class="built_in">len</span>(nums):</span><br><span class="line">            result.append(path[:])</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="comment"># 跳过已使用的元素</span></span><br><span class="line">            <span class="keyword">if</span> used[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 做选择</span></span><br><span class="line">            path.append(nums[i])</span><br><span class="line">            used[i] = <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 进入下一层决策树</span></span><br><span class="line">            backtrack()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 撤销选择（回溯）</span></span><br><span class="line">            path.pop()</span><br><span class="line">            used[i] = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    backtrack()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">permutations = permute(nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数组 <span class="subst">&#123;nums&#125;</span> 的全排列：&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">    <span class="built_in">print</span>(perm)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;总共有 <span class="subst">&#123;<span class="built_in">len</span>(permutations)&#125;</span> 种排列&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="交换法简化实现"><a href="#交换法简化实现" class="headerlink" title="交换法简化实现"></a>交换法简化实现</h5><p>不使用额外的标记数组，通过交换元素生成排列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteBySwap</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    List&lt;Integer&gt; numsList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        numsList.add(num);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    backtrackBySwap(numsList, <span class="number">0</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackBySwap</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> start, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start == nums.size()) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(nums));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.size(); i++) &#123;</span><br><span class="line">        <span class="comment">// 交换元素</span></span><br><span class="line">        Collections.swap(nums, start, i);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归处理下一个位置</span></span><br><span class="line">        backtrackBySwap(nums, start + <span class="number">1</span>, result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 恢复原状（回溯）</span></span><br><span class="line">        Collections.swap(nums, start, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="处理重复元素"><a href="#处理重复元素" class="headerlink" title="处理重复元素"></a>处理重复元素</h5><p>当数组中存在重复元素时，避免生成重复的排列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 排序，使相同的元素相邻</span></span><br><span class="line">    Arrays.sort(nums);</span><br><span class="line">    <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    backtrackUnique(nums, result, path, used);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackUnique</span><span class="params">(<span class="type">int</span>[] nums, List&lt;List&lt;Integer&gt;&gt; result, List&lt;Integer&gt; path, <span class="type">boolean</span>[] used)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.size() == nums.length) &#123;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 跳过已使用的元素</span></span><br><span class="line">        <span class="keyword">if</span> (used[i]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳过重复元素，确保相同数字按顺序使用</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>] &amp;&amp; !used[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        path.add(nums[i]);</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进入下一层决策树</span></span><br><span class="line">        backtrackUnique(nums, result, path, used);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 撤销选择（回溯）</span></span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul><li>完备性：保证找到所有可能的排列</li><li>系统性：按照固定的模式生成排列，避免遗漏</li><li>直观：算法思路符合人的直觉，容易理解</li><li>通用性：回溯框架可以扩展到其他排列组合问题</li><li>递归实现：代码简洁，易于实现</li></ul><h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度高：O(n!)是一个非常快速增长的复杂度</li><li>不适合大规模问题：当n较大时，计算量会爆炸性增长</li><li>递归调用开销：大量递归调用可能导致栈溢出</li><li>缺乏剪枝：基本实现没有优化搜索空间</li><li>非并行：难以有效并行化计算</li></ul><h4 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>排列问题解决：解决各种需要生成全排列的问题</li><li>组合优化：旅行商问题(TSP)等路径规划问题</li><li>字符串排列：生成字符串的所有可能排列</li><li>加密算法：在某些密码系统中生成排列</li><li>游戏开发：生成游戏中的所有可能状态</li><li>测试用例生成：为软件测试生成输入组合</li></ol><h4 id="扩展-1"><a href="#扩展-1" class="headerlink" title="扩展"></a>扩展</h4><h5 id="字符串全排列"><a href="#字符串全排列" class="headerlink" title="字符串全排列"></a>字符串全排列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">permuteString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="type">boolean</span>[] used = <span class="keyword">new</span> <span class="title class_">boolean</span>[chars.length];</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    </span><br><span class="line">    backtrackString(chars, result, path, used);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackString</span><span class="params">(<span class="type">char</span>[] chars, List&lt;String&gt; result, StringBuilder path, <span class="type">boolean</span>[] used)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length() == chars.length) &#123;</span><br><span class="line">        result.add(path.toString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (used[i]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 跳过重复字符（如果需要去重）</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; chars[i] == chars[i-<span class="number">1</span>] &amp;&amp; !used[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        path.append(chars[i]);</span><br><span class="line">        used[i] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        backtrackString(chars, result, path, used);</span><br><span class="line">        </span><br><span class="line">        path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">        used[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-1"><a href="#测验-1" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>使用回溯算法生成[1,2,3]的全排列，总共有多少种不同的排列？回溯过程中总共需要多少次递归调用？</li><li>如果数组中有重复元素，例如[1,1,2]，如何避免生成重复的排列？</li><li>回溯算法生成全排列的时间复杂度是多少？为什么？</li></ol><blockquote><p>测验答案</p><ol><li>[1,2,3]共有3! = 6种不同排列。需要13次递归调用：从根节点开始1次，第一层3次（选择1,2,3），第二层6次（每个第一层选择后有2个选择），第三层3次（每个第二层选择后有1个选择）。</li><li>对于包含重复元素的数组，首先对数组排序，使相同元素相邻。然后在回溯过程中，对于相同的元素，保证它们按照在原数组中的顺序被选择。具体实现时，如果当前元素与前一个元素相同，且前一个元素未被使用，则跳过当前元素。</li><li>时间复杂度为O(n × n!)。n!是生成的排列数量，对于每个排列需要O(n)的时间复制到结果集中。递归调用的总次数可以分析为：1 + n + n(n-1) + n(n-1)(n-2) + … + n!，总体复杂度为O(n × n!)。</li></ol></blockquote><h3 id="三、N皇后问题"><a href="#三、N皇后问题" class="headerlink" title="三、N皇后问题"></a>三、N皇后问题</h3><h4 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h4><p>N皇后问题是回溯算法的经典应用，要求在N×N的棋盘上放置N个皇后，使得它们互不攻击（不在同一行、同一列或同一对角线上）。</p><p><code>时间复杂度:最差 O(N!)   空间复杂度:O(N)</code></p><h4 id="算法讲解-2"><a href="#算法讲解-2" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h5><p>N皇后问题（N-Queens Problem）是一个经典的组合优化问题，源于国际象棋。问题要求在N×N的棋盘上放置N个皇后，使得任意两个皇后都不能互相攻击，即不能处于同一行、同一列或同一对角线上。</p><p>回溯算法（Backtracking）是解决N皇后问题的标准方法。该算法通过尝试在棋盘上放置皇后，当发现当前放置方案无法继续时，就撤销最近的选择，回溯到上一步并尝试其他可能性，直到找到完整解或尝试所有可能后确认无解。</p><p>N皇后问题不仅是理解回溯算法的典型案例，也在计算机科学、人工智能、约束满足问题研究中具有重要意义。</p><h4 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>使用回溯算法解决N皇后问题的基本步骤：</p><ol><li>从第一行开始，尝试在每一行放置一个皇后</li><li>对于当前行，尝试在每一列放置皇后</li><li>检查放置是否有效（不与已放置的皇后冲突）</li><li>如果有效，则递归处理下一行</li><li>如果无法在当前行找到有效位置，则回溯到上一行，尝试其他列位置</li><li>当成功放置N个皇后时，记录解决方案</li></ol><h5 id="冲突检测"><a href="#冲突检测" class="headerlink" title="冲突检测"></a>冲突检测</h5><ol><li>检查同一列是否已有皇后</li><li>检查左上到右下对角线是否已有皇后</li><li>检查右上到左下对角线是否已有皇后</li></ol><h4 id="核心特性-2"><a href="#核心特性-2" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li>递归回溯：通过递归尝试不同放置方案，失败则回溯</li><li>剪枝：提前检测无效放置，避免无谓的搜索</li><li>时间复杂度：最坏情况下为O(N!)，实际会因剪枝而降低</li><li>空间复杂度：O(N)，存储棋盘状态和递归调用栈</li><li>约束满足：每步决策都必须满足所有已有皇后不受攻击的约束</li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NQueens</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化棋盘</span></span><br><span class="line">        <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Arrays.fill(board[i], <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 回溯求解</span></span><br><span class="line">        backtrack(board, <span class="number">0</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, List&lt;List&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果已经放置了n个皇后，记录解</span></span><br><span class="line">        <span class="keyword">if</span> (row == board.length) &#123;</span><br><span class="line">            result.add(constructSolution(board));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">        <span class="comment">// 尝试在当前行的每一列放置皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">            <span class="comment">// 检查是否可以放置</span></span><br><span class="line">            <span class="keyword">if</span> (isValid(board, row, col)) &#123;</span><br><span class="line">                <span class="comment">// 放置皇后</span></span><br><span class="line">                board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 递归到下一行</span></span><br><span class="line">                backtrack(board, row + <span class="number">1</span>, result);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 回溯，撤销选择</span></span><br><span class="line">                board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 检查在指定位置放置皇后是否有效</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查同一列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查左上到右下对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查右上到左下对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据棋盘状态构造解决方案</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">constructSolution</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">        List&lt;String&gt; solution = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] row : board) &#123;</span><br><span class="line">            solution.add(<span class="keyword">new</span> <span class="title class_">String</span>(row));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> solution;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印棋盘</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printBoard</span><span class="params">(List&lt;String&gt; board)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (String row : board) &#123;</span><br><span class="line">            System.out.println(row);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; solutions = solveNQueens(n);</span><br><span class="line">        </span><br><span class="line">        System.out.println(n + <span class="string">&quot;皇后问题的解：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;共找到 &quot;</span> + solutions.size() + <span class="string">&quot; 种解法</span></span><br><span class="line"><span class="string">&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; solutions.size(); i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;解法 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;:&quot;</span>);</span><br><span class="line">            printBoard(solutions.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-1"><a href="#优化策略-1" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="位运算优化"><a href="#位运算优化" class="headerlink" title="位运算优化"></a>位运算优化</h5><p>使用位运算提高效率，减少空间和时间消耗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueensWithBitwise</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Arrays.fill(board[i], <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用位运算记录已被攻击的列、对角线</span></span><br><span class="line">    backtrackWithBitwise(board, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackWithBitwise</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">int</span> cols, <span class="type">int</span> diag1, <span class="type">int</span> diag2, List&lt;List&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        result.add(constructSolution(board));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取当前行所有可放置皇后的位置</span></span><br><span class="line">    <span class="comment">// (~(cols | diag1 | diag2)) &amp; ((1 &lt;&lt; n) - 1) 计算所有可用位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">availablePositions</span> <span class="operator">=</span> (~(cols | diag1 | diag2)) &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (availablePositions != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取最低位的1（表示可以放置皇后的位置）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> availablePositions &amp; -availablePositions;</span><br><span class="line">        <span class="comment">// 计算列号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> Integer.bitCount(position - <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放置皇后</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新约束并递归到下一行</span></span><br><span class="line">        backtrackWithBitwise(</span><br><span class="line">            board,</span><br><span class="line">            row + <span class="number">1</span>,</span><br><span class="line">            cols | position,               <span class="comment">// 更新列约束</span></span><br><span class="line">            (diag1 | position) &lt;&lt; <span class="number">1</span>,       <span class="comment">// 更新对角线1约束</span></span><br><span class="line">            (diag2 | position) &gt;&gt; <span class="number">1</span>,       <span class="comment">// 更新对角线2约束</span></span><br><span class="line">            result</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清除当前位置，尝试下一个位置</span></span><br><span class="line">        availablePositions &amp;= (availablePositions - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化冲突检测"><a href="#优化冲突检测" class="headerlink" title="优化冲突检测"></a>优化冲突检测</h5><p>使用辅助数组记录已占用的列和对角线，减少冲突检测的时间复杂度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueensOptimized</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span>[][] board = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Arrays.fill(board[i], <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 记录列和对角线是否被占用</span></span><br><span class="line">    <span class="type">boolean</span>[] cols = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];                <span class="comment">// 列</span></span><br><span class="line">    <span class="type">boolean</span>[] diag1 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];       <span class="comment">// 左上到右下对角线</span></span><br><span class="line">    <span class="type">boolean</span>[] diag2 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];       <span class="comment">// 右上到左下对角线</span></span><br><span class="line">    </span><br><span class="line">    backtrackOptimized(board, <span class="number">0</span>, cols, diag1, diag2, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackOptimized</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">boolean</span>[] cols, <span class="type">boolean</span>[] diag1, <span class="type">boolean</span>[] diag2, List&lt;List&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        result.add(constructSolution(board));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        <span class="comment">// 计算对角线索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> row + col;            <span class="comment">// 左上到右下对角线</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> row - col + n - <span class="number">1</span>;    <span class="comment">// 右上到左下对角线</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 检查是否可以放置</span></span><br><span class="line">        <span class="keyword">if</span> (cols[col] || diag1[d1] || diag2[d2]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; <span class="comment">// 当前位置被攻击，跳过</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放置皇后并标记</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        cols[col] = <span class="literal">true</span>;</span><br><span class="line">        diag1[d1] = <span class="literal">true</span>;</span><br><span class="line">        diag2[d2] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归到下一行</span></span><br><span class="line">        backtrackOptimized(board, row + <span class="number">1</span>, cols, diag1, diag2, result);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 回溯，撤销选择</span></span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        cols[col] = <span class="literal">false</span>;</span><br><span class="line">        diag1[d1] = <span class="literal">false</span>;</span><br><span class="line">        diag2[d2] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-2"><a href="#优缺点-2" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h5><ul><li>保证找到所有解：回溯法能够系统地找到N皇后问题的所有解</li><li>剪枝有效：通过提前检测冲突，大幅减少搜索空间</li><li>内存占用少：只需要记录当前状态，不需要存储搜索路径上的所有状态</li><li>实现简单：算法思路直观，容易理解和实现</li><li>通用性：同样的回溯框架可以应用于其他约束满足问题</li></ul><h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ul><li>指数级时间复杂度：最坏情况下为O(N!)，随N增大而迅速增长</li><li>不适用于大规模问题：当N较大时（如N&gt;20），计算时间过长</li><li>难以并行化：回溯过程依赖于前序状态，很难并行</li><li>性能依赖于启发式：没有好的启发式策略，可能导致大量无效搜索</li><li>递归调用开销：深度递归可能导致栈溢出</li></ul><h4 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>组合优化问题：解决资源分配、任务调度等约束满足问题</li><li>算法教学：作为回溯算法的标准教学案例</li><li>并行计算研究：研究NP难问题的并行求解策略</li><li>棋盘游戏AI：国际象棋等棋类游戏的局部问题求解</li><li>电路设计：某些电路布局问题与N皇后问题类似</li></ol><h4 id="扩展-2"><a href="#扩展-2" class="headerlink" title="扩展"></a>扩展</h4><h5 id="变种N皇后问题"><a href="#变种N皇后问题" class="headerlink" title="变种N皇后问题"></a>变种N皇后问题</h5><p>处理棋盘上有障碍物的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueensWithObstacles</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (board == <span class="literal">null</span> || board.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">    <span class="comment">// 记录列和对角线是否被占用</span></span><br><span class="line">    <span class="type">boolean</span>[] cols = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">    <span class="type">boolean</span>[] diag1 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">    <span class="type">boolean</span>[] diag2 = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标记障碍物</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (board[i][j] == <span class="string">&#x27;X&#x27;</span>) &#123; <span class="comment">// X表示障碍物</span></span><br><span class="line">                <span class="comment">// 障碍物位置不能放置皇后，但也不能被皇后攻击</span></span><br><span class="line">                board[i][j] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    backtrackWithObstacles(board, <span class="number">0</span>, cols, diag1, diag2, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">backtrackWithObstacles</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">int</span> row, <span class="type">boolean</span>[] cols, <span class="type">boolean</span>[] diag1, <span class="type">boolean</span>[] diag2, List&lt;List&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> board.length;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        List&lt;String&gt; solution = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] rowArray : board) &#123;</span><br><span class="line">            solution.add(<span class="keyword">new</span> <span class="title class_">String</span>(rowArray));</span><br><span class="line">        &#125;</span><br><span class="line">        result.add(solution);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">        <span class="comment">// 如果当前位置是障碍物，跳过</span></span><br><span class="line">        <span class="keyword">if</span> (board[row][col] == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">d1</span> <span class="operator">=</span> row + col;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d2</span> <span class="operator">=</span> row - col + n - <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cols[col] || diag1[d1] || diag2[d2]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        board[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        cols[col] = <span class="literal">true</span>;</span><br><span class="line">        diag1[d1] = <span class="literal">true</span>;</span><br><span class="line">        diag2[d2] = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        backtrackWithObstacles(board, row + <span class="number">1</span>, cols, diag1, diag2, result);</span><br><span class="line">        </span><br><span class="line">        board[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        cols[col] = <span class="literal">false</span>;</span><br><span class="line">        diag1[d1] = <span class="literal">false</span>;</span><br><span class="line">        diag2[d2] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计算解的数量"><a href="#计算解的数量" class="headerlink" title="计算解的数量"></a>计算解的数量</h5><p>只计算N皇后问题解的数量，而不生成具体解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countNQueensSolutions</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> countSolutions(n, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">countSolutions</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> cols, <span class="type">int</span> diag1, <span class="type">int</span> diag2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 找到一个解</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取当前行所有可放置皇后的位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">availablePositions</span> <span class="operator">=</span> (~(cols | diag1 | diag2)) &amp; ((<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (availablePositions != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取最低位的1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> availablePositions &amp; -availablePositions;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 递归计算下一行</span></span><br><span class="line">        count += countSolutions(</span><br><span class="line">            n,</span><br><span class="line">            row + <span class="number">1</span>,</span><br><span class="line">            cols | position,</span><br><span class="line">            (diag1 | position) &lt;&lt; <span class="number">1</span>,</span><br><span class="line">            (diag2 | position) &gt;&gt; <span class="number">1</span></span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 清除当前位置，尝试下一个位置</span></span><br><span class="line">        availablePositions &amp;= (availablePositions - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-2"><a href="#测验-2" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>对于8皇后问题，总共有多少种不同的解？回溯算法大约需要探索多少个状态？</li><li>如何优化N皇后问题的冲突检测，使其时间复杂度从O(N)降低到O(1)？</li><li>为什么N皇后问题的回溯算法比简单的穷举法（生成所有可能的棋盘状态）更高效？</li></ol><blockquote><p>测验答案</p><ol><li>8皇后问题共有92种不同的解。回溯算法需要探索的状态数远少于8^8（所有可能的放置方式），实际约需探索15720个状态，因为大部分无效状态会被提前剪枝。</li><li>使用三个布尔数组分别记录列、主对角线和副对角线的占用情况。对于位置(i,j)，列的索引是j，主对角线索引是i+j，副对角线索引是i-j+n-1。通过查表判断是否冲突，将时间复杂度从O(N)降至O(1)。</li><li>(1)回溯算法利用棋盘特性（每行只能放一个皇后）减少搜索空间；(2)当检测到冲突时立即回溯，不会继续探索无效分支；(3)剪枝策略大幅减少了需要考虑的状态数，而穷举法则需要检查所有N^N种可能的棋盘状态。</li></ol></blockquote><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h3 id="一、最长递增子序列-LIS"><a href="#一、最长递增子序列-LIS" class="headerlink" title="一、最长递增子序列 (LIS)"></a>一、最长递增子序列 (LIS)</h3><h4 id="最长递增子序列-LIS"><a href="#最长递增子序列-LIS" class="headerlink" title="最长递增子序列 (LIS)"></a>最长递增子序列 (LIS)</h4><p>最长递增子序列是指在一个给定的数字序列中，找到一个子序列，使得这个子序列元素单调递增，并且长度尽可能大。该问题可以使用动态规划高效解决。</p><p><code>时间复杂度:最佳 O(n²) | 平均 O(n²) | 最差 O(n²)   空间复杂度:O(n)</code></p><blockquote><h5 id="应用场景-前提条件"><a href="#应用场景-前提条件" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>数组</li><li>递增序列</li></ul></blockquote><h4 id="算法讲解-3"><a href="#算法讲解-3" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h5><p>最长递增子序列（Longest Increasing Subsequence, LIS）是一个经典的动态规划问题，目标是找出一个给定序列中最长的子序列，要求该子序列中的所有元素按照<strong>严格递增的顺序排列</strong>。注意，子序列不要求连续，但要保持原序列中元素的相对顺序。</p><p>最长递增子序列问题可以通过多种方法解决，其中动态规划是最为经典和直观的方法，时间复杂度为O(n²)，n是序列长度。还有使用二分查找优化的方法可以将时间复杂度降低到O(n log n)。</p><h4 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>定义状态：dp[i]表示以第i个元素结尾的最长递增子序列的长度</li><li>初始化：所有dp[i]初始值为1（至少包含自身一个元素）</li><li>状态转移：对于每个位置i，检查所有在它之前的位置j：<ul><li>如果nums[i] &gt; nums[j]，则可以将nums[i]接在以nums[j]结尾的子序列之后</li><li>dp[i] = max(dp[i], dp[j] + 1)</li></ul></li><li>结果：max(dp[0], dp[1], …, dp[n-1])</li></ol><h4 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h4><p>为了更好地理解最长递增子序列的动态规划求解过程，我们以序列 [10, 9, 2, 5, 3, 7, 101, 18] 为例，详细分析整个计算流程：</p><h5 id="初始化阶段"><a href="#初始化阶段" class="headerlink" title="初始化阶段"></a>初始化阶段</h5><p>创建长度为8的dp数组，并将所有元素初始化为1（表示每个元素自身就是一个长度为1的递增子序列）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp = [1, 1, 1, 1, 1, 1, 1, 1]</span><br></pre></td></tr></table></figure><h5 id="动态规划填表过程"><a href="#动态规划填表过程" class="headerlink" title="动态规划填表过程"></a>动态规划填表过程</h5><p>从i=1开始，对每个位置i进行状态转移：</p><ul><li>i=1, nums[1]=9：<ul><li>检查j=0, nums[0]=10：由于9&lt;10，不符合递增条件</li><li>dp[1]保持为1</li><li>当前dp = [1, 1, 1, 1, 1, 1, 1, 1]</li></ul></li><li>i=2, nums[2]=2：<ul><li>检查j=0, nums[0]=10：由于2&lt;10，不符合递增条件</li><li>检查j=1, nums[1]=9：由于2&lt;9，不符合递增条件</li><li>dp[2]保持为1</li><li>当前dp = [1, 1, 1, 1, 1, 1, 1, 1]</li></ul></li><li>i=3, nums[3]=5：<ul><li>检查j=0, nums[0]=10：由于5&lt;10，不符合递增条件</li><li>检查j=1, nums[1]=9：由于5&lt;9，不符合递增条件</li><li>检查j=2, nums[2]=2：由于5&gt;2，符合递增条件，dp[3]=max(dp[3], dp[2]+1)=max(1,2)=2</li><li>dp[3]=2，表示以5结尾的LIS长度为2</li><li>当前dp = [1, 1, 1, 2, 1, 1, 1, 1]</li></ul></li><li>i=4, nums[4]=3：<ul><li>检查j=0,1,2,3：只有当j=2时，nums[4]&gt;nums[2]（3&gt;2），更新dp[4]=2</li><li>当前dp = [1, 1, 1, 2, 2, 1, 1, 1]</li></ul></li><li>i=5, nums[5]=7：<ul><li>检查j=0,1：不符合递增条件</li><li>检查j=2：由于7&gt;2，更新dp[5]=2</li><li>检查j=3：由于7&gt;5，更新dp[5]=max(dp[5], dp[3]+1)=max(2,3)=3</li><li>检查j=4：由于7&gt;3，更新dp[5]=max(dp[5], dp[4]+1)=max(3,3)=3</li><li>当前dp = [1, 1, 1, 2, 2, 3, 1, 1]</li></ul></li><li>i=6, nums[6]=101：<ul><li>对于j=0到5，所有元素都小于101，找出最大的dp[j]+1</li><li>最大的dp[j]是dp[5]=3，因此dp[6]=4</li><li>当前dp = [1, 1, 1, 2, 2, 3, 4, 1]</li></ul></li><li>i=7, nums[7]=18：<ul><li>对于j=0到6，检查哪些元素小于18</li><li>找到j=2,3,4,5时符合条件，最大的dp[j]是dp[5]=3</li><li>更新dp[7]=dp[5]+1=4</li><li>最终dp = [1, 1, 1, 2, 2, 3, 4, 4]</li></ul></li></ul><h5 id="结果计算"><a href="#结果计算" class="headerlink" title="结果计算"></a>结果计算</h5><ol><li>dp数组中的最大值就是最长递增子序列的长度：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼Plain</span><br><span class="line"></span><br><span class="line">复制代码最大值 = max(dp) = 4</span><br></pre></td></tr></table></figure><h5 id="找出具体的子序列"><a href="#找出具体的子序列" class="headerlink" title="找出具体的子序列"></a>找出具体的子序列</h5><ol><li>如果要得到具体的LIS，我们需要回溯：<ul><li>从dp值等于最大长度的位置开始追踪</li><li>在本例中，dp[6]=dp[7]=4，我们可以从索引7（值为18）开始</li><li>查找索引j&lt;7，使得dp[j]=3且nums[j]&lt;nums[7]，找到j=5（值为7）</li><li>然后查找索引j&lt;5，使得dp[j]=2且nums[j]&lt;nums[5]，找到j=3（值为5）</li><li>继续查找索引j&lt;3，使得dp[j]=1且nums[j]&lt;nums[3]，找到j=2（值为2）</li><li>最终得到LIS为[2,5,7,18]</li></ul></li></ol><h5 id="图示演示"><a href="#图示演示" class="headerlink" title="图示演示"></a>图示演示</h5><p>下面是各步骤的dp数组变化过程的示意图：</p><div class="table-container"><table><thead><tr><th>索引 i</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>nums[i]</td><td>10</td><td>9</td><td>2</td><td>5</td><td>3</td><td>7</td><td>101</td><td>18</td></tr><tr><td>初始dp</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>i=1后</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>i=2后</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>i=3后</td><td>1</td><td>1</td><td>1</td><td>2</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>i=4后</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>1</td><td>1</td><td>1</td></tr><tr><td>i=5后</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>1</td><td>1</td></tr><tr><td>i=6后</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>4</td><td>1</td></tr><tr><td>i=7后</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>4</td><td>4</td></tr></tbody></table></div><h4 id="核心特性-3"><a href="#核心特性-3" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>子结构最优性</strong>：问题的最优解包含子问题的最优解</li><li><strong>状态定义明确</strong>：dp[i]表示以第i个元素结尾的LIS长度</li><li><strong>时间复杂度</strong>：基本实现O(n²)，优化版本O(n log n)</li><li><strong>空间复杂度</strong>：O(n)，需要一维dp数组</li><li><strong>非连续性</strong>：子序列元素在原序列中不要求连续</li></ul><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestIncreasingSubsequence</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>); <span class="comment">// 初始化每个位置的LIS长度为1</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态规划过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLength = Math.max(maxLength, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取最长递增子序列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">getLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] prev = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// 记录前驱节点</span></span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        Arrays.fill(prev, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 动态规划过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j] &amp;&amp; dp[j] + <span class="number">1</span> &gt; dp[i]) &#123;</span><br><span class="line">                    dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                    prev[i] = j; <span class="comment">// 记录前驱</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; maxLength) &#123;</span><br><span class="line">                maxLength = dp[i];</span><br><span class="line">                endIndex = i; <span class="comment">// 记录最长子序列的结束位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据前驱数组构造LIS</span></span><br><span class="line">        List&lt;Integer&gt; lis = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">            lis.add(nums[endIndex]);</span><br><span class="line">            endIndex = prev[endIndex];</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(lis); <span class="comment">// 需要反转</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lis;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lisLength</span> <span class="operator">=</span> lengthOfLIS(nums);</span><br><span class="line">        List&lt;Integer&gt; lis = getLIS(nums);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;数组: &quot;</span> + Arrays.toString(nums));</span><br><span class="line">        System.out.println(<span class="string">&quot;最长递增子序列的长度: &quot;</span> + lisLength);</span><br><span class="line">        System.out.println(<span class="string">&quot;一个最长递增子序列: &quot;</span> + lis);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述Java代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxLength = Math.max(maxLength, dp[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了动态规划的状态转移过程，对于每个位置i，考虑将其添加到之前所有可能的子序列后面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">length_of_lis</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [<span class="number">1</span>] * n  <span class="comment"># 初始化每个位置的LIS长度为1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 动态规划过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[j]:</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j] + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(dp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_lis</span>(<span class="params">nums</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    dp = [<span class="number">1</span>] * n</span><br><span class="line">    prev = [-<span class="number">1</span>] * n  <span class="comment"># 记录前驱节点</span></span><br><span class="line">    </span><br><span class="line">    max_length = <span class="number">1</span></span><br><span class="line">    end_index = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 动态规划过程</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[j] <span class="keyword">and</span> dp[j] + <span class="number">1</span> &gt; dp[i]:</span><br><span class="line">                dp[i] = dp[j] + <span class="number">1</span></span><br><span class="line">                prev[i] = j  <span class="comment"># 记录前驱</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> dp[i] &gt; max_length:</span><br><span class="line">            max_length = dp[i]</span><br><span class="line">            end_index = i  <span class="comment"># 记录最长子序列的结束位置</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 根据前驱数组构造LIS</span></span><br><span class="line">    lis = []</span><br><span class="line">    <span class="keyword">while</span> end_index != -<span class="number">1</span>:</span><br><span class="line">        lis.append(nums[end_index])</span><br><span class="line">        end_index = prev[end_index]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lis[::-<span class="number">1</span>]  <span class="comment"># 需要反转</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">nums = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">101</span>, <span class="number">18</span>]</span><br><span class="line">lis_length = length_of_lis(nums)</span><br><span class="line">lis = get_lis(nums)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数组: <span class="subst">&#123;nums&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最长递增子序列的长度: <span class="subst">&#123;lis_length&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一个最长递增子序列: <span class="subst">&#123;lis&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-2"><a href="#优化策略-2" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="二分查找优化"><a href="#二分查找优化" class="headerlink" title="二分查找优化"></a>二分查找优化</h5><p>使用二分查找将时间复杂度从O(n²)降低到O(n log n)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLISOptimized</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// tails[i]表示长度为i+1的所有递增子序列中，末尾元素的最小值</span></span><br><span class="line">    <span class="type">int</span>[] tails = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">        <span class="comment">// 二分查找num应该放置的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = len;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (tails[mid] &lt; num) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新tails</span></span><br><span class="line">        tails[left] = num;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果放在末尾，则增加长度</span></span><br><span class="line">        <span class="keyword">if</span> (left == len) &#123;</span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化空间复杂度"><a href="#优化空间复杂度" class="headerlink" title="优化空间复杂度"></a>优化空间复杂度</h5><p>对于只需要求长度的情况，可以优化空间使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLISSpaceOptimized</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 只保存当前位置的dp值和之前位置的最大值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxSoFar</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxSoFar = Math.max(maxSoFar, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxSoFar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-3"><a href="#优缺点-3" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>适用性广</strong>：可以处理任意类型的可比较元素</li><li><strong>结果准确</strong>：保证找到最长递增子序列</li><li><strong>实现简单</strong>：基本动态规划实现直观易懂</li><li><strong>空间高效</strong>：只需要O(n)的空间复杂度</li><li><strong>可扩展性</strong>：可以轻松修改为解决相关变种问题</li></ul><h5 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h5><ul><li><strong>基本实现时间复杂度高</strong>：O(n²)的时间复杂度在数据量大时性能不佳</li><li><strong>优化版本实现复杂</strong>：二分查找优化版本理解和实现难度较高</li><li><strong>不易追踪具体序列</strong>：优化后的算法不容易重构出具体的最长子序列</li><li><strong>状态依赖性</strong>：每个位置的计算依赖于之前的所有结果</li><li><strong>不适合在线处理</strong>：需要提前知道整个序列</li></ul><h4 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>序列分析</strong>：寻找序列中的规律和模式</li><li><strong>股票分析</strong>：查找股票价格的上升趋势</li><li><strong>智能输入预测</strong>：基于用户历史行为的预测系统</li><li><strong>网络协议</strong>：数据包序列号排序和处理</li><li><strong>游戏开发</strong>：游戏AI战略规划和分析</li></ol><h4 id="扩展-3"><a href="#扩展-3" class="headerlink" title="扩展"></a>扩展</h4><h5 id="最长递增子序列的数量"><a href="#最长递增子序列的数量" class="headerlink" title="最长递增子序列的数量"></a>最长递增子序列的数量</h5><p>计算具有最大长度的不同递增子序列数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">numberOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// 长度</span></span><br><span class="line">    <span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[n]; <span class="comment">// 计数</span></span><br><span class="line">    </span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">    Arrays.fill(count, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[j] + <span class="number">1</span> &gt; dp[i]) &#123;</span><br><span class="line">                    dp[i] = dp[j] + <span class="number">1</span>;</span><br><span class="line">                    count[i] = count[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[j] + <span class="number">1</span> == dp[i]) &#123;</span><br><span class="line">                    count[i] += count[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maxLength = Math.max(maxLength, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[i] == maxLength) &#123;</span><br><span class="line">            result += count[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="最长公共子序列（LCS）转换"><a href="#最长公共子序列（LCS）转换" class="headerlink" title="最长公共子序列（LCS）转换"></a>最长公共子序列（LCS）转换</h5><p>LIS问题可以转换为LCS问题来解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLISUsingLCS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建排序后的数组（去重）</span></span><br><span class="line">    <span class="type">int</span>[] sortedNums = Arrays.stream(nums).distinct().sorted().toArray();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算nums和sortedNums的最长公共子序列</span></span><br><span class="line">    <span class="keyword">return</span> lengthOfLCS(nums, sortedNums);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLCS</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-3"><a href="#测验-3" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>最长递增子序列的基本动态规划算法时间复杂度是多少？如何优化？</li><li>对于序列[1, 7, 3, 5, 9, 4, 8]，其最长递增子序列是什么？</li><li>二分查找优化算法中的tails数组代表什么含义？</li></ol><blockquote><p>测验答案</p><ol><li>O(n²)。可以通过二分查找优化到O(n log n)，记录长度为i的所有递增子序列中末尾元素的最小值，然后二分查找更新。</li><li>序列[1, 7, 3, 5, 9, 4, 8]的最长递增子序列是[1, 3, 5, 8]或[1, 3, 5, 9]，长度为4。</li><li>tails[i]表示长度为i+1的所有递增子序列中，末尾元素的最小值。通过维护这个数组，可以在O(log n)时间内确定一个新元素应该放在哪个位置。</li></ol></blockquote><h3 id="二、斐波那契数列-Fibonacci"><a href="#二、斐波那契数列-Fibonacci" class="headerlink" title="二、斐波那契数列 (Fibonacci)"></a>二、斐波那契数列 (Fibonacci)</h3><h4 id="斐波那契数列-Fibonacci"><a href="#斐波那契数列-Fibonacci" class="headerlink" title="斐波那契数列 (Fibonacci)"></a>斐波那契数列 (Fibonacci)</h4><p>斐波那契数列是一个经典的数列，其中每个数是前两个数的和。这个问题可以用递归、记忆化搜索和动态规划等多种方法解决，是理解动态规划的基础案例。</p><p><code>时间复杂度:最佳 O(n) | 平均 O(n) | 最差 O(2^n)  空间复杂度:O(n)</code></p><blockquote><h5 id="应用场景-前提条件-1"><a href="#应用场景-前提条件-1" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>递归</li><li>动态规划</li><li>记忆化搜索</li></ul></blockquote><h4 id="算法讲解-4"><a href="#算法讲解-4" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h5><p>斐波那契数列（Fibonacci Sequence）是一个经典的数学序列，它的定义很简单：前两个数是0和1（或1和1，取决于从哪个索引开始），此后的每个数都是前两个数的和。形式上，斐波那契数列可以表示为：F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) (n ≥ 2)。</p><p>动态规划（Dynamic Programming）是求解斐波那契数列的高效方法，核心思想是<strong>通过存储已计算的子问题解来避免重复计算</strong>。与递归实现相比，动态规划消除了大量的重复计算，将时间复杂度从指数级O(2^n)降低到线性级O(n)。</p><h4 id="算法步骤-4"><a href="#算法步骤-4" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>确定边界条件：F(0) = 0, F(1) = 1</li><li>创建数组或变量存储已计算的斐波那契数</li><li>从小到大（自底向上）计算每个斐波那契数：F(i) = F(i-1) + F(i-2)</li><li>返回F(n)作为结果</li></ol><h4 id="算法详解-1"><a href="#算法详解-1" class="headerlink" title="算法详解"></a>算法详解</h4><p>以计算F(6)为例，详细展示动态规划的计算过程：</p><ol><li><p>初始化</p><p>：</p><ul><li>设定F(0) = 0, F(1) = 1作为基础情况</li><li>创建dp数组：dp = [0, 1, <em>, </em>, <em>, </em>, _]（下划线表示待计算的位置）</li></ul></li><li><p>自底向上计算</p><p>：</p><ul><li>计算F(2) = F(1) + F(0) = 1 + 0 = 1</li><li>计算F(3) = F(2) + F(1) = 1 + 1 = 2</li><li>计算F(4) = F(3) + F(2) = 2 + 1 = 3</li><li>计算F(5) = F(4) + F(3) = 3 + 2 = 5</li><li>计算F(6) = F(5) + F(4) = 5 + 3 = 8</li></ul></li><li><p><strong>最终dp数组</strong>：dp = [0, 1, 1, 2, 3, 5, 8]</p></li><li><p><strong>返回结果</strong>：F(6) = 8</p></li></ol><h4 id="核心特性-4"><a href="#核心特性-4" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>重叠子问题</strong>：多次求解相同的子问题</li><li><strong>最优子结构</strong>：大问题的最优解包含小问题的最优解</li><li><strong>自底向上</strong>：从小问题逐步构建大问题的解</li><li><strong>时间复杂度</strong>：O(n)</li><li><strong>空间复杂度</strong>：O(n)</li></ul><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fibonacci</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建dp数组存储计算结果</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自底向上计算</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;F(&quot;</span> + n + <span class="string">&quot;) = &quot;</span> + fibonacci(n));</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;斐波那契数列前10项：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.print(fibonacci(i) + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了动态规划的核心思想，每次计算只依赖之前计算好的两个子问题的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    // 创建dp数组存储计算结果</span><br><span class="line">    const dp = new Array(n + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    // 自底向上计算</span><br><span class="line">    <span class="keyword">for</span> (let i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 测试</span><br><span class="line">const n = <span class="number">10</span>;</span><br><span class="line">console.log(`F($&#123;n&#125;) = $&#123;fibonacci(n)&#125;`);</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">&quot;斐波那契数列前10项：&quot;</span>);</span><br><span class="line">console.log(Array.<span class="keyword">from</span>(&#123;length: <span class="number">10</span>&#125;, (_, i) =&gt; fibonacci(i)).join(<span class="string">&quot; &quot;</span>));</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-3"><a href="#优化策略-3" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="空间优化（滚动数组）"><a href="#空间优化（滚动数组）" class="headerlink" title="空间优化（滚动数组）"></a>空间优化（滚动数组）</h5><p>使用有限的变量而不是整个数组存储计算状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciOptimized</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只需要两个变量存储前两个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h5><p>利用矩阵乘法和快速幂，可以在O(log n)时间内计算出斐波那契数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciMatrix</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义斐波那契矩阵 [[1,1],[1,0]]</span></span><br><span class="line">    <span class="type">int</span>[][] F = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算F^(n-1)</span></span><br><span class="line">    F = matrixPower(F, n - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结果是F^(n-1)的[0][0]元素</span></span><br><span class="line">    <span class="keyword">return</span> F[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] matrixPower(<span class="type">int</span>[][] A, <span class="type">int</span> n) &#123;</span><br><span class="line">    <span class="type">int</span>[][] result = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;&#125;; <span class="comment">// 单位矩阵</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            result = multiplyMatrix(result, A);</span><br><span class="line">        &#125;</span><br><span class="line">        A = multiplyMatrix(A, A);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[][] multiplyMatrix(<span class="type">int</span>[][] A, <span class="type">int</span>[][] B) &#123;</span><br><span class="line">    <span class="type">int</span>[][] C = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">            C[i][j] = A[i][<span class="number">0</span>] * B[<span class="number">0</span>][j] + A[i][<span class="number">1</span>] * B[<span class="number">1</span>][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-4"><a href="#优缺点-4" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>避免重复计算</strong>：每个斐波那契数只计算一次</li><li><strong>高效率</strong>：时间复杂度为O(n)，远优于递归的O(2^n)</li><li><strong>内存使用可优化</strong>：可以将空间复杂度降至O(1)</li><li><strong>自底向上</strong>：避免了递归调用栈溢出的风险</li><li><strong>易于理解和实现</strong>：动态规划思想直观表现在代码中</li></ul><h5 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h5><ul><li><strong>必须从头计算</strong>：无法计算单个位置的值而不计算前面所有的值</li><li><strong>可能溢出</strong>：对于较大的n，容易发生整数溢出</li><li><strong>基本实现需要额外空间</strong>：存储中间计算结果需要O(n)空间</li><li><strong>不适合n特别大的情况</strong>：即使是O(log n)的算法，当n非常大时也可能效率不高</li><li><strong>矩阵快速幂实现相对复杂</strong>：优化的算法理解和实现难度较高</li></ul><h4 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>计算机科学教学</strong>：作为递归和动态规划的经典案例</li><li><strong>金融模型</strong>：用于预测股市、商品价格等模式</li><li><strong>自然现象建模</strong>：描述植物生长、兔子繁殖等自然现象</li><li><strong>算法设计</strong>：优化递归算法的范例</li><li><strong>数据压缩</strong>：某些数据压缩算法利用斐波那契编码</li><li><strong>密码学</strong>：用于某些加密算法和安全系统</li></ol><h4 id="扩展-4"><a href="#扩展-4" class="headerlink" title="扩展"></a>扩展</h4><h5 id="通项公式（Binet公式）"><a href="#通项公式（Binet公式）" class="headerlink" title="通项公式（Binet公式）"></a>通项公式（Binet公式）</h5><p>使用解析解直接计算斐波那契数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciBinet</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> <span class="variable">goldenRatio</span> <span class="operator">=</span> (<span class="number">1</span> + Math.sqrt(<span class="number">5</span>)) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)Math.round((Math.pow(goldenRatio, n) - Math.pow(<span class="number">1</span> - goldenRatio, n)) / Math.sqrt(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模运算下的周期性（Pisano周期）"><a href="#模运算下的周期性（Pisano周期）" class="headerlink" title="模运算下的周期性（Pisano周期）"></a>模运算下的周期性（Pisano周期）</h5><p>当计算斐波那契数模m时，数列会表现出周期性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacciModulo</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算Pisano周期</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">pisanoPeriod</span> <span class="operator">=</span> findPisanoPeriod(m);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用周期性计算</span></span><br><span class="line">    n = n % pisanoPeriod;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> (prev + curr) % m;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findPisanoPeriod</span><span class="params">(<span class="type">int</span> m)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>, c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m * m; i++) &#123;</span><br><span class="line">        c = (a + b) % m;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span> &amp;&amp; b == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-4"><a href="#测验-4" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>为什么动态规划算法在计算斐波那契数列时比递归算法更高效？</li><li>滚动数组优化的时间复杂度和空间复杂度分别是多少？</li><li>斐波那契数列的增长速度如何？</li></ol><blockquote><p>测验答案</p><ol><li>递归算法会重复计算相同的子问题，比如F(5)需要重复计算F(3)和F(2)，时间复杂度为O(2^n)；而动态规划算法通过存储已计算的结果避免了重复计算，时间复杂度为O(n)。</li><li>滚动数组优化的时间复杂度仍为O(n)，但空间复杂度降为O(1)，因为只需要常数个变量存储状态。</li><li>斐波那契数列呈指数增长，增长率接近黄金比例φ≈1.618。</li></ol></blockquote><h3 id="三、矩阵链乘法"><a href="#三、矩阵链乘法" class="headerlink" title="三、矩阵链乘法"></a>三、矩阵链乘法</h3><h4 id="矩阵链乘法"><a href="#矩阵链乘法" class="headerlink" title="矩阵链乘法"></a>矩阵链乘法</h4><p>矩阵链乘法问题是指在给定一系列矩阵的情况下，找到一种最优的括号化方式，使得矩阵相乘的计算次数最少。该问题可以通过动态规划高效解决。</p><p><code>时间复杂度:最佳 O(n³) | 平均 O(n³) | 最差 O(n³)  空间复杂度:O(n²)</code></p><blockquote><h5 id="应用场景-前提条件-2"><a href="#应用场景-前提条件-2" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>矩阵乘法</li><li>二维动态规划表</li></ul></blockquote><h4 id="算法讲解-5"><a href="#算法讲解-5" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h5><p>矩阵链乘法（Matrix Chain Multiplication）是一个经典的动态规划问题，<strong>给定一系列矩阵，找出相乘的最佳顺序以最小化总的基本运算次数</strong>。由于矩阵乘法满足结合律（即(A×B)×C = A×(B×C)），不同的计算顺序会导致相同的结果，但计算量可能差异巨大。</p><h4 id="问题定义"><a href="#问题定义" class="headerlink" title="问题定义"></a>问题定义</h4><p>给定n个矩阵的链：A₁×A₂×…×Aₙ，其中矩阵Aᵢ的维度为pᵢ₋₁×pᵢ（即行数×列数），目标是找到一种最优的计算顺序，实现完成整个矩阵链的乘法运算所需的标量乘法次数最少。</p><p>矩阵乘法的计算代价可以用以下方式定义：两个矩阵A(m×n)和B(n×p)相乘，需要进行m×n×p次标量乘法运算。例如，计算一个2×3矩阵和一个3×4矩阵的乘积，需要2×3×4=24次乘法运算。</p><p>不同的乘法顺序会产生截然不同的计算代价。比如三个矩阵A₁(10×100)、A₂(100×5)和A₃(5×50)的乘法：</p><ul><li>按照(A₁×A₂)×A₃的顺序：A₁×A₂需要10×100×5=5000次乘法，结果是一个10×5的矩阵；然后与A₃相乘需要10×5×50=2500次乘法，共需要7500次乘法运算。</li><li>按照A₁×(A₂×A₃)的顺序：A₂×A₃需要100×5×50=25000次乘法，结果是一个100×50的矩阵；然后与A₁相乘需要10×100×50=50000次乘法，共需要75000次乘法运算。</li></ul><p>通过上述例子我们发现，选择不同的计算顺序可能导致运算次数相差十倍以上。随着矩阵数量的增加，可能的括号方案数量呈指数级增长，穷举所有可能的顺序基本不可行。</p><p>矩阵链乘法问题的挑战在于，对于n个矩阵的乘积，有卡特兰数量级的不同括号方案。使用动态规划，我们可以在O(n³)的时间复杂度内找到最优解。</p><h4 id="算法步骤-5"><a href="#算法步骤-5" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>创建一个表dp[i][j]存储从第i个矩阵到第j个矩阵的最小计算代价</li><li>初始化：对角线元素dp[i][i]设为0（单个矩阵无需乘法）</li><li>填表：自底向上计算所有子链的最优解<ul><li>对于每个长度L（从2到n）</li><li>枚举起点i（范围为1到n-L+1）</li><li>计算终点j = i+L-1</li><li>对于每个可能的分割点k（从i到j-1）<ul><li>计算代价：dp[i][k] + dp[k+1][j] + p[i-1]×p[k]×p[j]</li><li>更新dp[i][j]为所有可能分割点中的最小值</li></ul></li></ul></li><li>返回dp[1][n]作为最终结果</li></ol><h4 id="算法详解-2"><a href="#算法详解-2" class="headerlink" title="算法详解"></a>算法详解</h4><p>为了更好地理解矩阵链乘法的动态规划过程，我们以矩阵链A₁×A₂×A₃×A₄为例，矩阵维度分别为：A₁(30×35), A₂(35×15), A₃(15×5), A₄(5×10)。</p><ol><li><p>表示矩阵链</p><p>：</p><ul><li>我们用数组p = [30, 35, 15, 5, 10]表示矩阵维度，其中p[i-1]×p[i]表示第i个矩阵的维度</li></ul></li><li><p>初始化dp表</p><p>：</p><ul><li>创建4×4的dp表，对角线元素dp[i][i]=0</li><li>初始dp表：</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▼Plain复制代码[0, ∞, ∞, ∞]</span><br><span class="line">[∞, 0, ∞, ∞]</span><br><span class="line">[∞, ∞, 0, ∞]</span><br><span class="line">[∞, ∞, ∞, 0]</span><br></pre></td></tr></table></figure><ol><li><p>填表过程</p><p>：</p><ul><li>长度L=2（计算两个矩阵的最小代价）：<ul><li>dp[1][2] = dp[1][1] + dp[2][2] + p[0]×p[1]×p[2] = 0 + 0 + 30×35×15 = 15750</li><li>dp[2][3] = dp[2][2] + dp[3][3] + p[1]×p[2]×p[3] = 0 + 0 + 35×15×5 = 2625</li><li>dp[3][4] = dp[3][3] + dp[4][4] + p[2]×p[3]×p[4] = 0 + 0 + 15×5×10 = 750</li></ul></li><li>长度L=3（计算三个矩阵的最小代价）：<ul><li>dp[1][3]：考虑两种分割方式<ul><li>k=1：dp[1][1] + dp[2][3] + p[0]×p[1]×p[3] = 0 + 2625 + 30×35×5 = 7875</li><li>k=2：dp[1][2] + dp[3][3] + p[0]×p[2]×p[3] = 15750 + 0 + 30×15×5 = 18000</li><li>取最小值：dp[1][3] = 7875</li></ul></li><li>dp[2][4]：考虑两种分割方式<ul><li>k=2：dp[2][2] + dp[3][4] + p[1]×p[2]×p[4] = 0 + 750 + 35×15×10 = 6000</li><li>k=3：dp[2][3] + dp[4][4] + p[1]×p[3]×p[4] = 2625 + 0 + 35×5×10 = 4375</li><li>取最小值：dp[2][4] = 4375</li></ul></li></ul></li><li>长度L=4（计算四个矩阵的最小代价）：<ul><li>dp[1][4]：考虑三种分割方式<ul><li>k=1：dp[1][1] + dp[2][4] + p[0]×p[1]×p[4] = 0 + 4375 + 30×35×10 = 14875</li><li>k=2：dp[1][2] + dp[3][4] + p[0]×p[2]×p[4] = 15750 + 750 + 30×15×10 = 21000</li><li>k=3：dp[1][3] + dp[4][4] + p[0]×p[3]×p[4] = 7875 + 0 + 30×5×10 = 9375</li><li>取最小值：dp[1][4] = 9375</li></ul></li></ul></li></ul></li><li><p><strong>最终dp表</strong>：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[  0, 15750,  7875,  9375]</span><br><span class="line">[  ∞,     0,  2625,  4375]</span><br><span class="line">[  ∞,     ∞,     0,   750]</span><br><span class="line">[  ∞,     ∞,     ∞,     0]</span><br></pre></td></tr></table></figure><ol><li><p>最优解读取</p><p>：</p><ul><li>最优总代价为dp[1][4] = 9375</li><li>(可选)通过回溯可以确定最优括号方案为：((A₁(A₂A₃))A₄)</li></ul></li></ol><h4 id="核心特性-5"><a href="#核心特性-5" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>重叠子问题</strong>：同一子问题会被多次计算，适合用动态规划</li><li><strong>时间复杂度</strong>：O(n³)，其中n是矩阵数量</li><li><strong>空间复杂度</strong>：O(n²)，用于存储子问题的解</li><li><strong>自底向上计算</strong>：从小规模子问题逐步构建最终解</li></ul><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixChainMultiplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">matrixChainOrder</span><span class="params">(<span class="type">int</span>[] p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length - <span class="number">1</span>; <span class="comment">// 矩阵数量</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建dp表，dp[i][j]表示从第i个矩阵到第j个矩阵的最小代价</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化：单个矩阵的代价为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填表：自底向上计算所有子链的最优解</span></span><br><span class="line">        <span class="comment">// L是当前考虑的矩阵链长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - L + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + L - <span class="number">1</span>; <span class="comment">// 子链的结束位置</span></span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 尝试所有可能的分割点</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">                    <span class="comment">// 当前分割的代价 = 左子链代价 + 右子链代价 + 合并两子链的代价</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">// 更新最小代价</span></span><br><span class="line">                    <span class="keyword">if</span> (cost &lt; dp[i][j]) &#123;</span><br><span class="line">                        dp[i][j] = cost;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回整个链的最小代价</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取最优括号方案</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOptimalParenthesis</span><span class="params">(<span class="type">int</span>[] p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[][] split = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>]; <span class="comment">// 记录最优分割点</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - L + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + L - <span class="number">1</span>;</span><br><span class="line">                dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> (cost &lt; dp[i][j]) &#123;</span><br><span class="line">                        dp[i][j] = cost;</span><br><span class="line">                        split[i][j] = k; <span class="comment">// 记录最优分割点</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 构建括号方案</span></span><br><span class="line">        <span class="keyword">return</span> buildParenthesis(split, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">buildParenthesis</span><span class="params">(<span class="type">int</span>[][] split, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;A&quot;</span> + i;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> split[i][j];</span><br><span class="line">        <span class="type">String</span> <span class="variable">left</span> <span class="operator">=</span> buildParenthesis(split, i, k);</span><br><span class="line">        <span class="type">String</span> <span class="variable">right</span> <span class="operator">=</span> buildParenthesis(split, k + <span class="number">1</span>, j);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + left + right + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dimensions = &#123;<span class="number">30</span>, <span class="number">35</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minOperations</span> <span class="operator">=</span> matrixChainOrder(dimensions);</span><br><span class="line">        <span class="type">String</span> <span class="variable">optimalParenthesis</span> <span class="operator">=</span> getOptimalParenthesis(dimensions);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最小乘法运算次数: &quot;</span> + minOperations);</span><br><span class="line">        System.out.println(<span class="string">&quot;最优括号方案: &quot;</span> + optimalParenthesis);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 另一个例子</span></span><br><span class="line">        <span class="type">int</span>[] dimensions2 = &#123;<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minOperations2</span> <span class="operator">=</span> matrixChainOrder(dimensions2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">optimalParenthesis2</span> <span class="operator">=</span> getOptimalParenthesis(dimensions2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;</span></span><br><span class="line"><span class="string">另一个例子:&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;最小乘法运算次数: &quot;</span> + minOperations2);</span><br><span class="line">        System.out.println(<span class="string">&quot;最优括号方案: &quot;</span> + optimalParenthesis2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述Java代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - L + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + L - <span class="number">1</span>;</span><br><span class="line">        dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (cost &lt; dp[i][j]) &#123;</span><br><span class="line">                dp[i][j] = cost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了动态规划的核心填表过程，通过枚举不同的链长度、起点和分割点，计算最小乘法代价。</p><p>▼</p><p>PythonJavascriptC++CGo</p><p>复制代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">matrix_chain_order</span>(<span class="params">p</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(p) - <span class="number">1</span>  <span class="comment"># 矩阵数量</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建dp表</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填表</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - L + <span class="number">2</span>):</span><br><span class="line">            j = i + L - <span class="number">1</span></span><br><span class="line">            dp[i][j] = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i, j):</span><br><span class="line">                cost = dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j]</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], cost)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_optimal_parenthesis</span>(<span class="params">p</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(p) - <span class="number">1</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    split = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填表</span></span><br><span class="line">    <span class="keyword">for</span> L <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n - L + <span class="number">2</span>):</span><br><span class="line">            j = i + L - <span class="number">1</span></span><br><span class="line">            dp[i][j] = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(i, j):</span><br><span class="line">                cost = dp[i][k] + dp[k + <span class="number">1</span>][j] + p[i - <span class="number">1</span>] * p[k] * p[j]</span><br><span class="line">                <span class="keyword">if</span> cost &lt; dp[i][j]:</span><br><span class="line">                    dp[i][j] = cost</span><br><span class="line">                    split[i][j] = k</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 构建括号方案</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build_parenthesis</span>(<span class="params">i, j</span>):</span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;A<span class="subst">&#123;i&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        k = split[i][j]</span><br><span class="line">        left = build_parenthesis(i, k)</span><br><span class="line">        right = build_parenthesis(k + <span class="number">1</span>, j)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;(<span class="subst">&#123;left&#125;</span><span class="subst">&#123;right&#125;</span>)&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> build_parenthesis(<span class="number">1</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">dimensions = [<span class="number">30</span>, <span class="number">35</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">min_operations = matrix_chain_order(dimensions)</span><br><span class="line">optimal_parenthesis = get_optimal_parenthesis(dimensions)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小乘法运算次数: <span class="subst">&#123;min_operations&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最优括号方案: <span class="subst">&#123;optimal_parenthesis&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一个例子</span></span><br><span class="line">dimensions2 = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">6</span>]</span><br><span class="line">min_operations2 = matrix_chain_order(dimensions2)</span><br><span class="line">optimal_parenthesis2 = get_optimal_parenthesis(dimensions2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">另一个例子:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最小乘法运算次数: <span class="subst">&#123;min_operations2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最优括号方案: <span class="subst">&#123;optimal_parenthesis2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-4"><a href="#优化策略-4" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="记忆化递归"><a href="#记忆化递归" class="headerlink" title="记忆化递归"></a>记忆化递归</h5><p>使用递归+记忆化的自顶向下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">matrixChainOrderMemoized</span><span class="params">(<span class="type">int</span>[] p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化为-1表示未计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            memo[i][j] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lookupChain(p, <span class="number">1</span>, n, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lookupChain</span><span class="params">(<span class="type">int</span>[] p, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[][] memo)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果已经计算过</span></span><br><span class="line">    <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本情况：单个矩阵</span></span><br><span class="line">    <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">        memo[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    memo[i][j] = Integer.MAX_VALUE;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 尝试所有可能的分割点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> lookupChain(p, i, k, memo) + </span><br><span class="line">                  lookupChain(p, k + <span class="number">1</span>, j, memo) + </span><br><span class="line">                  p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">        </span><br><span class="line">        memo[i][j] = Math.min(memo[i][j], cost);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> memo[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="空间优化"><a href="#空间优化" class="headerlink" title="空间优化"></a>空间优化</h5><p>对于非常长的矩阵链，可以使用空间压缩技术降低空间复杂度：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">matrixChainOrderSpaceOptimized</span><span class="params">(<span class="type">int</span>[] p)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只需要存储上三角矩阵</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n * (n + <span class="number">1</span>) / <span class="number">2</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取(i,j)在一维数组中的索引</span></span><br><span class="line">    java.util.function.BiFunction&lt;Integer, Integer, Integer&gt; index = </span><br><span class="line">        (i, j) -&gt; n * (i - <span class="number">1</span>) - i * (i - <span class="number">1</span>) / <span class="number">2</span> + (j - i);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化：单个矩阵的代价为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[index.apply(i, i)] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - L + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + L - <span class="number">1</span>;</span><br><span class="line">            dp[index.apply(i, j)] = Integer.MAX_VALUE;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> dp[index.apply(i, k)] + </span><br><span class="line">                          dp[index.apply(k + <span class="number">1</span>, j)] + </span><br><span class="line">                          p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line">                </span><br><span class="line">                dp[index.apply(i, j)] = Math.min(dp[index.apply(i, j)], cost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[index.apply(<span class="number">1</span>, n)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-5"><a href="#优缺点-5" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>保证最优解</strong>：动态规划方法能够找到全局最优解</li><li><strong>高效</strong>：相比于穷举所有括号方案，动态规划大大减少了计算量</li><li><strong>可行性</strong>：对于中等规模问题（几十个矩阵）能在合理时间内求解</li><li><strong>实用性</strong>：在许多需要连续操作的领域有实际应用价值</li><li><strong>可扩展</strong>：问题框架可以扩展到其他操作（如矩阵求逆、凸多边形三角剖分等）</li></ul><h5 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h5><ul><li><strong>空间需求</strong>：基本实现需要O(n²)的空间来存储子问题的解</li><li><strong>实现复杂度</strong>：相比于贪心或暴力方法，实现更为复杂</li><li><strong>依赖准确的问题公式化</strong>：必须准确识别子问题和状态转移方程</li><li><strong>不适用于超大规模</strong>：对于n非常大的情况，三重循环会导致计算时间过长</li><li><strong>无法处理非结合律操作</strong>：只适用于满足结合律的操作</li></ul><h4 id="应用场景-5"><a href="#应用场景-5" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>矩阵计算优化</strong>：在科学计算和线性代数中优化大规模矩阵乘法</li><li><strong>编译器优化</strong>：确定表达式的最优计算顺序</li><li><strong>图形渲染</strong>：3D图形渲染中的变换矩阵计算</li><li><strong>机器学习</strong>：深度学习中的矩阵乘法优化</li><li><strong>大规模数据处理</strong>：分布式计算中的计算顺序优化</li><li><strong>可靠性分析</strong>：系统可靠性评估中的操作顺序优化</li></ol><h4 id="扩展-5"><a href="#扩展-5" class="headerlink" title="扩展"></a>扩展</h4><h5 id="不同代价模型"><a href="#不同代价模型" class="headerlink" title="不同代价模型"></a>不同代价模型</h5><p>考虑不同的矩阵乘法算法和代价模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">matrixChainOrderWithCustomCost</span><span class="params">(<span class="type">int</span>[] p, CostFunction costFunc)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">L</span> <span class="operator">=</span> <span class="number">2</span>; L &lt;= n; L++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n - L + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + L - <span class="number">1</span>;</span><br><span class="line">            dp[i][j] = Integer.MAX_VALUE;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt; j; k++) &#123;</span><br><span class="line">                <span class="comment">// 使用自定义代价函数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> dp[i][k] + dp[k + <span class="number">1</span>][j] + </span><br><span class="line">                          costFunc.calculate(p, i, k, j);</span><br><span class="line">                </span><br><span class="line">                dp[i][j] = Math.min(dp[i][j], cost);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CostFunction</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span>[] p, <span class="type">int</span> i, <span class="type">int</span> k, <span class="type">int</span> j)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准矩阵乘法代价</span></span><br><span class="line"><span class="type">CostFunction</span> <span class="variable">standardCost</span> <span class="operator">=</span> (p, i, k, j) -&gt; p[i - <span class="number">1</span>] * p[k] * p[j];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Strassen算法的代价模型</span></span><br><span class="line"><span class="type">CostFunction</span> <span class="variable">strassenCost</span> <span class="operator">=</span> (p, i, k, j) -&gt; &#123;</span><br><span class="line">    <span class="comment">// 假设Strassen算法的复杂度为O(n^2.8)</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">power</span> <span class="operator">=</span> <span class="number">2.8</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">dim1</span> <span class="operator">=</span> Math.max(p[i - <span class="number">1</span>], p[k]);</span><br><span class="line">    <span class="type">int</span> <span class="variable">dim2</span> <span class="operator">=</span> Math.max(p[k], p[j]);</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (Math.pow(Math.max(dim1, dim2), power));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="多维动态规划"><a href="#多维动态规划" class="headerlink" title="多维动态规划"></a>多维动态规划</h5><p>扩展到更复杂的问题，如三维动态规划：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">tensorChainMultiplication</span><span class="params">(<span class="type">int</span>[][] dimensions)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> dimensions.length;</span><br><span class="line">    <span class="type">int</span>[][][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][n][<span class="number">3</span>]; <span class="comment">// 3个维度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化和填表逻辑</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n-<span class="number">1</span>][<span class="number">0</span>]; <span class="comment">// 返回最优解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-5"><a href="#测验-5" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>矩阵链乘法问题的动态规划方法时间复杂度是多少？为什么不能使用贪心算法？</li><li>对于矩阵链A₁(10×30)、A₂(30×5)、A₃(5×60)，最优计算顺序是什么？需要多少次基本乘法运算？</li><li>如何修改基本算法来找出实际的最优括号方案，而不仅仅是最小运算次数？</li></ol><blockquote><p>测验答案</p><ol><li>时间复杂度为O(n³)，因为有三重循环：链长度、起始位置和分割点。贪心算法不适用，因为局部最优解（如每次选择运算量最小的两个相邻矩阵相乘）不一定导致全局最优解，矩阵链乘法问题具有最优子结构和重叠子问题，需要考虑所有可能的分割方式。</li><li>最优计算顺序是((A₁A₂)A₃)。计算A₁A₂需要10×30×5=1500次乘法，得到一个10×5的矩阵；然后与A₃相乘需要10×5×60=3000次乘法。总共需要1500+3000=4500次基本乘法运算。</li><li>需要额外使用一个split数组记录每个区间[i,j]的最优分割点k。在填表过程中，当找到更优的代价时，更新split[i][j]=k。然后使用递归方式，根据split数组构建最优括号方案：如果i=j，返回单个矩阵；否则，分别构建左右子链，再合并。</li></ol></blockquote><h3 id="四、最长公共子序列-LCS"><a href="#四、最长公共子序列-LCS" class="headerlink" title="四、最长公共子序列 (LCS)"></a>四、最长公共子序列 (LCS)</h3><h5 id="最长公共子序列-LCS"><a href="#最长公共子序列-LCS" class="headerlink" title="最长公共子序列 (LCS)"></a>最长公共子序列 (LCS)</h5><p>最长公共子序列是指两个序列共同拥有的、保持元素相对顺序的最长子序列。此问题广泛应用于生物信息学、文本相似度分析等领域，是经典的动态规划问题。</p><p><code>时间复杂度:最佳 O(mn) | 平均 O(mn) | 最差 O(mn)  空间复杂度:O(mn)</code></p><blockquote><h5 id="应用场景-前提条件-3"><a href="#应用场景-前提条件-3" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>字符串处理</li><li>序列比较</li></ul></blockquote><h4 id="算法讲解-6"><a href="#算法讲解-6" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h5><p>最长公共子序列（Longest Common Subsequence, LCS）是一个经典的动态规划问题，目标是找出两个序列中共同出现的最长子序列的长度。子序列是指从原序列中删除某些元素（也可以不删除）后得到的新序列，但保持剩余元素的相对顺序不变。</p><h4 id="问题定义-1"><a href="#问题定义-1" class="headerlink" title="问题定义"></a>问题定义</h4><p>给定两个序列X = [x₁, x₂, …, xₘ]和Y = [y₁, y₂, …, yₙ]，找出X和Y的最长公共子序列Z = [z₁, z₂, …, zₖ]，使得Z是X和Y的子序列且长度k最大。</p><p>与子串不同，子序列不要求元素连续，只需保持相对顺序。例如，对于序列”ABCBDAB”和”BDCABA”，它们的最长公共子序列是”BCBA”，长度为4。</p><h4 id="算法步骤-6"><a href="#算法步骤-6" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>创建一个二维数组dp，其中dp[i][j]表示序列X的前i个元素与序列Y的前j个元素的LCS长度</li><li>初始化边界：dp[i][0] = dp[0][j] = 0（空序列的LCS长度为0）</li><li>自底向上填充dp表：<ul><li>如果x_i = y_j，则dp[i][j] = dp[i-1][j-1] + 1（匹配成功，LCS长度加1）</li><li>如果x_i ≠ y_j，则dp[i][j] = max(dp[i-1][j], dp[i][j-1])（取两种可能的最大值）</li></ul></li><li>返回dp[m][n]作为最终结果</li></ol><h4 id="算法详解-3"><a href="#算法详解-3" class="headerlink" title="算法详解"></a>算法详解</h4><p>为了更好地理解LCS的动态规划过程，我们以序列X = “ABCBDAB”和Y = “BDCABA”为例，详细分析整个计算流程：</p><ol><li><strong>初始化dp表</strong>：</li></ol><div class="code-tabs-container" data-group="code-tabs-1758548817849-34"> <div class="code-tabs-header"> <div class="code-tabs-header-left"> <div class="code-block-extension-foldBtn" title="折叠/展开代码">▼</div> </div> <div class="code-tabs-buttons"> <button class="code-tab-button active" id="code-tabs-1758548817849-34-tab-0" data-target="code-tabs-1758548817849-34-content-0" data-tab-index="0">Plain</button><button class="code-tab-button " id="code-tabs-1758548817849-34-tab-1" data-target="code-tabs-1758548817849-34-content-1" data-tab-index="1">Text</button> </div> <div class="code-tabs-header-right"> <div class="code-block-extension-copyCodeBtn" style="filter: invert(0.5); opacity: 0.6; display: flex" data-group="code-tabs-1758548817849-34">复制代码</div> </div> </div> <div class="code-tabs-contents"> <div class="code-tab-content active" id="code-tabs-1758548817849-34-content-0"> <pre> <code class="language-plain"> &quot;&quot; B D C A B A &quot;&quot; 0 0 0 0 0 0 0 A 0 ? ? ? ? ? ? B 0 ? ? ? ? ? ? C 0 ? ? ? ? ? ? B 0 ? ? ? ? ? ? D 0 ? ? ? ? ? ? A 0 ? ? ? ? ? ? B 0 ? ? ? ? ? ? </code> </pre> </div><div class="code-tab-content " id="code-tabs-1758548817849-34-content-1"> <pre> <code class="language-text">- 创建(m+1)×(n+1)的表格，初始化第一行和第一列为0 </code> </pre> </div> </div> </div><ol><li><strong>填表过程</strong>： - 对于i=1, j=1: X[1]=’A’, Y[1]=’B’，不匹配，dp[1][1] = max(dp[0][1], dp[1][0]) = 0 - 对于i=1, j=2: X[1]=’A’, Y[2]=’D’，不匹配，dp[1][2] = max(dp[0][2], dp[1][1]) = 0 - 对于i=1, j=3: X[1]=’A’, Y[3]=’C’，不匹配，dp[1][3] = max(dp[0][3], dp[1][2]) = 0 - 对于i=1, j=4: X[1]=’A’, Y[4]=’A’，匹配，dp[1][4] = dp[0][3] + 1 = 1 - 依此类推，填充整个表格… 3. <strong>最终dp表</strong>：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;&quot;  B  D  C  A  B  A</span><br><span class="line">&quot;&quot; 0  0  0  0  0  0  0</span><br><span class="line">A  0  0  0  0  1  1  1</span><br><span class="line">B  0  1  1  1  1  2  2</span><br><span class="line">C  0  1  1  2  2  2  2</span><br><span class="line">B  0  1  1  2  2  3  3</span><br><span class="line">D  0  1  2  2  2  3  3</span><br><span class="line">A  0  1  2  2  3  3  4</span><br><span class="line">B  0  1  2  2  3  4  4</span><br></pre></td></tr></table></figure><ol><li><p>得到结果</p><p>：</p><ul><li>dp[7][6] = 4，表示LCS的长度为4</li></ul></li></ol><h4 id="核心特性-6"><a href="#核心特性-6" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>重叠子问题</strong>：同一子序列会被多次计算</li><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>时间复杂度</strong>：O(m×n)，m和n是两个序列的长度</li><li><strong>空间复杂度</strong>：O(m×n)</li><li><strong>应用广泛</strong>：在生物信息学、文本比较等领域有重要应用</li></ul><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongestCommonSubsequence</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text1 == <span class="literal">null</span> || text2 == <span class="literal">null</span> || text1.length() == <span class="number">0</span> || text2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建dp表，dp[i][j]表示text1前i个字符和text2前j个字符的LCS长度</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充DP表格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 当前字符匹配，LCS长度加1</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 当前字符不匹配，取上方或左方的最大值</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// dp[m][n] 包含整个LCS的长度</span></span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 重构最长公共子序列</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getLCS</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (text1 == <span class="literal">null</span> || text2 == <span class="literal">null</span> || text1.length() == <span class="number">0</span> || text2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充DP表格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重构LCS</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m, j = n;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="comment">// 字符匹配，加入LCS</span></span><br><span class="line">                sb.append(text1.charAt(i - <span class="number">1</span>));</span><br><span class="line">                i--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 向上移动</span></span><br><span class="line">                i--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 向左移动</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 需要反转结果</span></span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text1</span> <span class="operator">=</span> <span class="string">&quot;ABCBDAB&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text2</span> <span class="operator">=</span> <span class="string">&quot;BDCABA&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">lcsLength</span> <span class="operator">=</span> longestCommonSubsequence(text1, text2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">lcs</span> <span class="operator">=</span> getLCS(text1, text2);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;序列1: &quot;</span> + text1);</span><br><span class="line">        System.out.println(<span class="string">&quot;序列2: &quot;</span> + text2);</span><br><span class="line">        System.out.println(<span class="string">&quot;最长公共子序列长度: &quot;</span> + lcsLength);</span><br><span class="line">        System.out.println(<span class="string">&quot;一个最长公共子序列: &quot;</span> + lcs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述Java代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了LCS动态规划的核心状态转移方程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">longest_common_subsequence</span>(<span class="params">text1, text2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text1 <span class="keyword">or</span> <span class="keyword">not</span> text2:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    m, n = <span class="built_in">len</span>(text1), <span class="built_in">len</span>(text2)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建dp表</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]:</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[m][n]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_lcs</span>(<span class="params">text1, text2</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> text1 <span class="keyword">or</span> <span class="keyword">not</span> text2:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    m, n = <span class="built_in">len</span>(text1), <span class="built_in">len</span>(text2)</span><br><span class="line">    dp = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]:</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重构LCS</span></span><br><span class="line">    lcs = []</span><br><span class="line">    i, j = m, n</span><br><span class="line">    <span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> j &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> text1[i - <span class="number">1</span>] == text2[j - <span class="number">1</span>]:</span><br><span class="line">            lcs.append(text1[i - <span class="number">1</span>])</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> dp[i - <span class="number">1</span>][j] &gt; dp[i][j - <span class="number">1</span>]:</span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 反转并返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(lcs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">text1 = <span class="string">&quot;ABCBDAB&quot;</span></span><br><span class="line">text2 = <span class="string">&quot;BDCABA&quot;</span></span><br><span class="line"></span><br><span class="line">lcs_length = longest_common_subsequence(text1, text2)</span><br><span class="line">lcs = get_lcs(text1, text2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;序列1: <span class="subst">&#123;text1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;序列2: <span class="subst">&#123;text2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最长公共子序列长度: <span class="subst">&#123;lcs_length&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;一个最长公共子序列: <span class="subst">&#123;lcs&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-5"><a href="#优化策略-5" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="空间优化-1"><a href="#空间优化-1" class="headerlink" title="空间优化"></a>空间优化</h5><p>使用滚动数组优化空间复杂度至O(min(m,n))：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequenceOptimized</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">    <span class="comment">// 确保text1是较短的字符串</span></span><br><span class="line">    <span class="keyword">if</span> (text1.length() &gt; text2.length()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> text1;</span><br><span class="line">        text1 = text2;</span><br><span class="line">        text2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只需要两行</span></span><br><span class="line">    <span class="type">int</span>[] prev = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span>[] curr = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                curr[j] = prev[j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr[j] = Math.max(prev[j], curr[j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 交换数组引用</span></span><br><span class="line">        <span class="type">int</span>[] temp = prev;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = temp;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 重置curr数组</span></span><br><span class="line">        Arrays.fill(curr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> prev[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优缺点-6"><a href="#优缺点-6" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-6"><a href="#优点-6" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>适用范围广</strong>：可以处理任何类型的序列比较问题</li><li><strong>最优解保证</strong>：动态规划确保找到全局最优解</li><li><strong>实现简单</strong>：状态转移方程直观，实现相对容易</li><li><strong>效率高</strong>：对于中等长度的序列，效率足够高</li><li><strong>可扩展性</strong>：可以轻松修改以解决相关变种问题</li></ul><h5 id="缺点-6"><a href="#缺点-6" class="headerlink" title="缺点"></a>缺点</h5><ul><li><strong>空间需求大</strong>：基本实现需要O(m×n)的空间</li><li><strong>不适用于超长序列</strong>：当序列非常长时，性能会下降</li><li><strong>只能处理LCS长度</strong>：获取实际LCS需要额外操作</li><li><strong>存在多个最优解</strong>：可能有多个长度相同的LCS</li><li><strong>对于连续匹配要求高的场景</strong>：不如最长公共子串算法</li></ul><h4 id="应用场景-6"><a href="#应用场景-6" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>生物信息学</strong>：DNA和蛋白质序列比对</li><li><strong>文件比较</strong>：识别文件间的差异（如Unix的diff命令）</li><li><strong>版本控制系统</strong>：代码版本比较和合并</li><li><strong>拼写检查与纠正</strong>：识别单词间的相似度</li><li><strong>自然语言处理</strong>：文本相似度分析</li><li><strong>数据压缩</strong>：某些压缩算法使用LCS识别重复内容</li></ol><h4 id="扩展-6"><a href="#扩展-6" class="headerlink" title="扩展"></a>扩展</h4><h5 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h5><p>与子序列不同，子串要求元素连续：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubstring</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text1 == <span class="literal">null</span> || text2 == <span class="literal">null</span> || text1.length() == <span class="number">0</span> || text2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                maxLength = Math.max(maxLength, dp[i][j]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>; <span class="comment">// 不同点：子串要求连续，不匹配就重置为0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> maxLength;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多序列LCS"><a href="#多序列LCS" class="headerlink" title="多序列LCS"></a>多序列LCS</h5><p>扩展到多于两个序列的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequenceMultiple</span><span class="params">(String[] texts)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (texts == <span class="literal">null</span> || texts.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (texts.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> texts[<span class="number">0</span>].length();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (texts.length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> longestCommonSubsequence(texts[<span class="number">0</span>], texts[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对于3个及以上序列，使用递归方式</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> texts[<span class="number">0</span>];</span><br><span class="line">    String[] rest = <span class="keyword">new</span> <span class="title class_">String</span>[texts.length - <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(texts, <span class="number">1</span>, rest, <span class="number">0</span>, texts.length - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">lcsRest</span> <span class="operator">=</span> longestCommonSubsequenceMultiple(rest);</span><br><span class="line">    <span class="type">int</span> <span class="variable">lcsWithFirst</span> <span class="operator">=</span> longestCommonSubsequence(first, </span><br><span class="line">                            getLCSOfMultiple(rest));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lcsWithFirst;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getLCSOfMultiple</span><span class="params">(String[] texts)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (texts.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> texts[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (texts.length == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> getLCS(texts[<span class="number">0</span>], texts[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> texts[<span class="number">0</span>];</span><br><span class="line">    String[] rest = <span class="keyword">new</span> <span class="title class_">String</span>[texts.length - <span class="number">1</span>];</span><br><span class="line">    System.arraycopy(texts, <span class="number">1</span>, rest, <span class="number">0</span>, texts.length - <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> getLCS(first, getLCSOfMultiple(rest));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-6"><a href="#测验-6" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>最长公共子序列和最长公共子串有什么区别？它们的动态规划方程有何不同？</li><li>如何优化LCS算法的空间复杂度？优化后的空间复杂度是多少？</li></ol><blockquote><p>测验答案</p><ol><li>最长公共子序列允许元素不连续，而最长公共子串要求元素必须连续。动态规划方程不同：LCS在元素不匹配时取max(dp[i-1][j], dp[i][j-1])保留之前的结果；而最长公共子串在不匹配时重置dp[i][j]=0，从新的位置开始计算。</li><li>可以使用滚动数组优化，只保留两行（前一行和当前行）；进一步可以用一维数组和临时变量记录对角线元素。优化后的空间复杂度从O(m×n)降低到O(min(m,n))，甚至可以降到O(n)，n是较短序列的长度。</li></ol></blockquote><h3 id="五、背包问题-0-1-Knapsack"><a href="#五、背包问题-0-1-Knapsack" class="headerlink" title="五、背包问题 (0-1 Knapsack)"></a>五、背包问题 (0-1 Knapsack)</h3><h4 id="背包问题-0-1-Knapsack"><a href="#背包问题-0-1-Knapsack" class="headerlink" title="背包问题 (0-1 Knapsack)"></a>背包问题 (0-1 Knapsack)</h4><p>背包问题是一个经典的动态规划问题，给定一组物品，每种物品都有自己的重量和价值，在限定的总重量内，选择若干物品使得物品的总价值最大化。</p><p><code>时间复杂度:最佳 O(n×W) | 平均 O(n×W) | 最差 O(n×W)  空间复杂度:O(n×W)</code></p><blockquote><h5 id="应用场景-前提条件-4"><a href="#应用场景-前提条件-4" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>决策问题</li><li>最优化理论</li></ul></blockquote><h4 id="算法讲解-7"><a href="#算法讲解-7" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h5><p>背包问题（Knapsack Problem）是一类经典的组合优化问题，基本形式是：给定一组物品，每个物品有自己的重量和价值，在限定的总重量内，选择总价值最大的物品。</p><h4 id="问题定义-2"><a href="#问题定义-2" class="headerlink" title="问题定义"></a>问题定义</h4><p>最常见的背包问题是0-1背包问题（0-1 Knapsack Problem）：有n个物品，第i个物品的重量为w[i]，价值为v[i]。现有一个容量为W的背包，问如何选择物品放入背包，在物品总重量不超过背包容量的前提下，物品总价值最大。这里的”0-1”表示每个物品要么完整地放入背包（选择1），要么不放入背包（选择0），不能只放入一个物品的部分或放入多次。</p><p>除了0-1背包问题外，还有完全背包问题（物品可重复选择）、多重背包问题（每种物品有数量限制）和分数背包问题（物品可部分选择）等变种。</p><p>动态规划是解决背包问题的经典方法，通过构建状态转移方程，可以在多项式时间内求解这类NP完全问题。</p><h4 id="算法步骤-7"><a href="#算法步骤-7" class="headerlink" title="算法步骤"></a>算法步骤</h4><p>以0-1背包问题为例，基于动态规划的解决步骤如下：</p><ol><li>定义状态：dp[i][j]表示考虑前i个物品，背包容量为j时的最大价值</li><li>初始化：<ul><li>dp[0][j] = 0（没有物品时，最大价值为0）</li><li>dp[i][0] = 0（背包容量为0时，最大价值为0）</li></ul></li><li>状态转移方程：<ul><li>如果第i个物品的重量w[i]大于当前背包容量j，则无法放入背包：<br>dp[i][j] = dp[i-1][j]</li><li>如果可以放入，则可以选择放或不放，取两者最大值：<br>dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]] + v[i])</li></ul></li><li>最终结果：dp[n][W]就是最大价值</li></ol><h4 id="算法详解-4"><a href="#算法详解-4" class="headerlink" title="算法详解"></a>算法详解</h4><p>以一个具体的0-1背包问题为例，详细说明动态规划的过程：</p><p>假设有以下物品：</p><ul><li>物品1：重量3，价值4</li><li>物品2：重量4，价值5</li><li>物品3：重量5，价值6</li><li>背包容量：10</li></ul><p><strong>步骤1：创建并初始化DP表</strong></p><ul><li>行表示考虑的物品数量（0到3）</li><li>列表示背包容量（0到10）</li><li>dp[0][j]和dp[i][0]均为0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">---+---------------------</span><br><span class="line"> 0 | 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 1 | 0 ? ? ? ? ? ? ? ? ? ?</span><br><span class="line"> 2 | 0 ? ? ? ? ? ? ? ? ? ?</span><br><span class="line"> 3 | 0 ? ? ? ? ? ? ? ? ? ?</span><br></pre></td></tr></table></figure><p><strong>步骤2：填充DP表</strong></p><ul><li>对于物品1（i=1）：<ul><li>当j &lt; 3时，放不下物品1，dp[1][j] = dp[0][j] = 0</li><li>当j &gt;= 3时，可以选择放或不放，dp[1][j] = max(dp[0][j], dp[0][j-3] + 4)</li><li>例如，dp[1][3] = max(0, 0+4) = 4</li></ul></li><li>对于物品2（i=2）：<ul><li>当j &lt; 4时，放不下物品2，dp[2][j] = dp[1][j]</li><li>当j &gt;= 4时，dp[2][j] = max(dp[1][j], dp[1][j-4] + 5)</li><li>例如，dp[2][7] = max(dp[1][7], dp[1][3] + 5) = max(4, 4+5) = 9</li></ul></li><li>对于物品3（i=3）：<ul><li>当j &lt; 5时，放不下物品3，dp[3][j] = dp[2][j]</li><li>当j &gt;= 5时，dp[3][j] = max(dp[2][j], dp[2][j-5] + 6)</li><li>例如，dp[3][10] = max(dp[2][10], dp[2][5] + 6) = max(9, 5+6) = 11</li></ul></li></ul><p><strong>步骤3：完整的DP表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">| 0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">---+---------------------</span><br><span class="line"> 0 | 0 0 0 0 0 0 0 0 0 0 0</span><br><span class="line"> 1 | 0 0 0 4 4 4 4 4 4 4 4</span><br><span class="line"> 2 | 0 0 0 4 5 5 5 9 9 9 9</span><br><span class="line"> 3 | 0 0 0 4 5 6 6 9 10 11 11</span><br></pre></td></tr></table></figure><p><strong>步骤4：获取结果</strong></p><ul><li>最大价值为dp[3][10] = 11</li></ul><p><strong>步骤5：（可选步骤）回溯找出所选物品</strong></p><ul><li>从dp[3][10]开始，比较dp[3][10]和dp[2][10]：<ul><li>如果相等，说明物品3没有被选择</li><li>如果不等，说明物品3被选择了</li></ul></li><li>以此类推，可以找出所有被选择的物品</li></ul><h4 id="核心特性-7"><a href="#核心特性-7" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>重叠子问题</strong>：同一子问题会被多次计算</li><li><strong>状态转移明确</strong>：当前状态仅依赖于之前的状态</li><li><strong>时间复杂度</strong>：O(n×W)，其中n是物品数量，W是背包容量</li><li><strong>空间复杂度</strong>：基本实现O(n×W)，优化后可降至O(W)</li><li><strong>决策问题</strong>：每个物品有明确的”选”或”不选”决策</li></ul><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><p>下面是背包问题在编程语言中的实现，注意 <code>getSelectedItems</code> 方法是扩展方法，一般题目<strong>不会</strong>要求输出选择的物品，所以这个方法只是供大家参考学习，便于理解和看到选择的物品：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Knapsack</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (weights == <span class="literal">null</span> || values == <span class="literal">null</span> || weights.length != values.length || capacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">        <span class="comment">// 创建DP表</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][capacity + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充DP表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= capacity; j++) &#123;</span><br><span class="line">                <span class="comment">// 当前物品的重量和价值（索引从0开始）</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">currentWeight</span> <span class="operator">=</span> weights[i - <span class="number">1</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">currentValue</span> <span class="operator">=</span> values[i - <span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (currentWeight &gt; j) &#123;</span><br><span class="line">                    <span class="comment">// 当前物品太重，无法放入</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 可以选择放或不放，取较大值</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - currentWeight] + currentValue);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n][capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 回溯找出所选物品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span>[] getSelectedItems(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][capacity + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充DP表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= capacity; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (weights[i - <span class="number">1</span>] &gt; j) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weights[i - <span class="number">1</span>]] + values[i - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 回溯确定所选物品</span></span><br><span class="line">        <span class="type">boolean</span>[] selected = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">remainingCapacity</span> <span class="operator">=</span> capacity;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i][remainingCapacity] != dp[i - <span class="number">1</span>][remainingCapacity]) &#123;</span><br><span class="line">                <span class="comment">// 当前物品被选中</span></span><br><span class="line">                selected[i - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">                remainingCapacity -= weights[i - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> selected;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] weights = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] values = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">maxValue</span> <span class="operator">=</span> knapsack01(weights, values, capacity);</span><br><span class="line">        <span class="type">boolean</span>[] selected = getSelectedItems(weights, values, capacity);</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最大价值: &quot;</span> + maxValue);</span><br><span class="line">        System.out.println(<span class="string">&quot;选择的物品:&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; selected.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (selected[i]) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;物品 &quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;，重量: &quot;</span> + weights[i] + <span class="string">&quot;，价值: &quot;</span> + values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上述Java代码中，通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">if</span> (currentWeight &gt; j) &#123;</span><br><span class="line">    <span class="comment">// 当前物品太重，无法放入</span></span><br><span class="line">    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 可以选择放或不放，取较大值</span></span><br><span class="line">    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - currentWeight] + currentValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了0-1背包问题的核心状态转移方程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">def</span> <span class="title function_">knapsack_01</span>(<span class="params">weights, values, capacity</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> weights <span class="keyword">or</span> <span class="keyword">not</span> values <span class="keyword">or</span> <span class="built_in">len</span>(weights) != <span class="built_in">len</span>(values) <span class="keyword">or</span> capacity &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    n = <span class="built_in">len</span>(weights)</span><br><span class="line">    <span class="comment"># 创建DP表</span></span><br><span class="line">    dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填充DP表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, capacity + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 当前物品的重量和价值</span></span><br><span class="line">            current_weight = weights[i - <span class="number">1</span>]</span><br><span class="line">            current_value = values[i - <span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> current_weight &gt; j:</span><br><span class="line">                <span class="comment"># 当前物品太重，无法放入</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 可以选择放或不放，取较大值</span></span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - current_weight] + current_value)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[n][capacity]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回溯找出所选物品</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_selected_items</span>(<span class="params">weights, values, capacity</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(weights)</span><br><span class="line">    dp = [[<span class="number">0</span>] * (capacity + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填充DP表</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, capacity + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> weights[i - <span class="number">1</span>] &gt; j:</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - weights[i - <span class="number">1</span>]] + values[i - <span class="number">1</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 回溯确定所选物品</span></span><br><span class="line">    selected = [<span class="literal">False</span>] * n</span><br><span class="line">    remaining_capacity = capacity</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> dp[i][remaining_capacity] != dp[i - <span class="number">1</span>][remaining_capacity]:</span><br><span class="line">            <span class="comment"># 当前物品被选中</span></span><br><span class="line">            selected[i - <span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line">            remaining_capacity -= weights[i - <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> selected</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">weights = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">values = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">capacity = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">max_value = knapsack_01(weights, values, capacity)</span><br><span class="line">selected = get_selected_items(weights, values, capacity)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;最大价值: <span class="subst">&#123;max_value&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;选择的物品:&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(selected)):</span><br><span class="line">    <span class="keyword">if</span> selected[i]:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;物品 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>，重量: <span class="subst">&#123;weights[i]&#125;</span>，价值: <span class="subst">&#123;values[i]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-6"><a href="#优化策略-6" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="空间优化-2"><a href="#空间优化-2" class="headerlink" title="空间优化"></a>空间优化</h5><p>使用一维数组优化空间复杂度至O(W)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01Optimized</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (weights == <span class="literal">null</span> || values == <span class="literal">null</span> || weights.length != values.length || capacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">    <span class="comment">// 使用一维数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充DP表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 注意：必须从后向前遍历，避免重复使用同一个物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> capacity; j &gt;= weights[i]; j--) &#123;</span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j - weights[i]] + values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分支界限优化"><a href="#分支界限优化" class="headerlink" title="分支界限优化"></a>分支界限优化</h5><p>在实际问题中，可以使用分支界限来进一步优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsack01WithBoundingFunction</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="comment">// 按照价值/重量比排序物品</span></span><br><span class="line">    sortItemsByValueWeightRatio(weights, values);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用递归+备忘录</span></span><br><span class="line">    <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[weights.length + <span class="number">1</span>][capacity + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] row : memo) &#123;</span><br><span class="line">        Arrays.fill(row, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> knapsackWithMemo(weights, values, capacity, <span class="number">0</span>, memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">knapsackWithMemo</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity, <span class="type">int</span> index, <span class="type">int</span>[][] memo)</span> &#123;</span><br><span class="line">    <span class="comment">// 基本情况</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= weights.length || capacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果已经计算过，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (memo[index][capacity] != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[index][capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算上界作为剪枝条件</span></span><br><span class="line">    <span class="keyword">if</span> (calculateUpperBound(weights, values, capacity, index) &lt;= bestSoFar) &#123;</span><br><span class="line">        memo[index][capacity] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不放入当前物品</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> knapsackWithMemo(weights, values, capacity, index + <span class="number">1</span>, memo);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 尝试放入当前物品</span></span><br><span class="line">    <span class="keyword">if</span> (weights[index] &lt;= capacity) &#123;</span><br><span class="line">        result = Math.max(result, values[index] + </span><br><span class="line">                    knapsackWithMemo(weights, values, capacity - weights[index], index + <span class="number">1</span>, memo));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 保存结果</span></span><br><span class="line">    memo[index][capacity] = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-7"><a href="#优缺点-7" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-7"><a href="#优点-7" class="headerlink" title="优点"></a>优点</h5><ul><li><strong>保证最优解</strong>：动态规划方法能够找到全局最优解</li><li><strong>适用性广</strong>：能够处理各种背包问题变种</li><li><strong>高效</strong>：对于较小规模问题，效率很高</li><li><strong>简单明确</strong>：思路清晰，易于理解和实现</li><li><strong>可扩展性</strong>：可以扩展到多维背包问题</li></ul><h5 id="缺点-7"><a href="#缺点-7" class="headerlink" title="缺点"></a>缺点</h5><ul><li><strong>时间和空间需求高</strong>：对于大规模问题，资源需求大</li><li><strong>不适用于NP难问题的实例</strong>：当问题规模巨大时，仍然会超时</li><li><strong>不适用于物品可分割的情况</strong>：需要使用贪心算法</li><li><strong>不能直接处理多目标背包问题</strong>：需要特殊技巧</li><li><strong>DP表可能很大</strong>：当容量W很大时，空间开销巨大</li></ul><h4 id="应用场景-7"><a href="#应用场景-7" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li><strong>资源分配</strong>：预算分配、投资组合优化</li><li><strong>装载问题</strong>：货物装载、箱子打包</li><li><strong>项目选择</strong>：在有限资源下选择最优项目集</li><li><strong>切割问题</strong>：原材料切割以最大化收益</li><li><strong>网络流量优化</strong>：带宽分配</li><li><strong>生产计划</strong>：优化生产线分配</li></ol><h4 id="扩展-7"><a href="#扩展-7" class="headerlink" title="扩展"></a>扩展</h4><h5 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h5><p>每种物品可以选择无限多次：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">completeKnapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 从前向后遍历，允许重复使用物品</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> weights[i]; j &lt;= capacity; j++) &#123;</span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j - weights[i]] + values[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h5><p>每种物品有特定的数量限制：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">multipleKnapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span>[] counts, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[capacity + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> capacity; j &gt;= weights[i]; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= counts[i] &amp;&amp; k * weights[i] &lt;= j; k++) &#123;</span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - k * weights[i]] + k * values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[capacity];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分数背包问题（贪心算法）"><a href="#分数背包问题（贪心算法）" class="headerlink" title="分数背包问题（贪心算法）"></a>分数背包问题（贪心算法）</h5><p>物品可以部分放入背包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">fractionalKnapsack</span><span class="params">(<span class="type">int</span>[] weights, <span class="type">int</span>[] values, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> weights.length;</span><br><span class="line">    <span class="type">double</span>[] ratios = <span class="keyword">new</span> <span class="title class_">double</span>[n];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算价值/重量比</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        ratios[i] = (<span class="type">double</span>) values[i] / weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按价值/重量比排序</span></span><br><span class="line">    <span class="type">int</span>[] indices = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        indices[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Arrays.sort(indices, (a, b) -&gt; Double.compare(ratios[b], ratios[a]));</span><br><span class="line">    </span><br><span class="line">    <span class="type">double</span> <span class="variable">totalValue</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">remainingCapacity</span> <span class="operator">=</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> indices[i];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (weights[idx] &lt;= remainingCapacity) &#123;</span><br><span class="line">            <span class="comment">// 可以完整放入</span></span><br><span class="line">            totalValue += values[idx];</span><br><span class="line">            remainingCapacity -= weights[idx];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 部分放入</span></span><br><span class="line">            totalValue += values[idx] * ((<span class="type">double</span>) remainingCapacity / weights[idx]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> totalValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测验-7"><a href="#测验-7" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>0-1背包问题和完全背包问题的主要区别是什么？它们的状态转移方程有何不同？</li><li>在0-1背包问题中，为什么使用一维DP数组优化空间时必须从后向前遍历？</li></ol><blockquote><p>测验答案</p><ol><li>0-1背包问题中每个物品最多选择一次，而完全背包问题中物品可以重复选择无限次。0-1背包的状态转移方程是dp[i][j] = max(dp[i-1][j], dp[i-1][j-w[i]]+v[i])，完全背包问题是dp[i][j] = max(dp[i-1][j], dp[i][j-w[i]]+v[i])。主要区别在于完全背包问题中，当前物品可以重复使用，所以使用dp[i][j-w[i]]代替dp[i-1][j-w[i]]。</li><li>从后向前遍历是为了避免重复使用同一个物品。如果从前向后遍历，在计算dp[j]时可能会用到已经更新过的dp[j-w[i]]，这相当于重复使用了当前物品，违反了0-1背包问题的规则。</li></ol></blockquote><h3 id="六、硬币找零问题"><a href="#六、硬币找零问题" class="headerlink" title="六、硬币找零问题"></a>六、硬币找零问题</h3><h4 id="硬币找零问题"><a href="#硬币找零问题" class="headerlink" title="硬币找零问题"></a>硬币找零问题</h4><p>硬币找零问题是一个经典的动态规划问题，给定一系列不同面值的硬币和一个总金额，计算出选取最少的硬币数量，使得这些硬币面值之和等于给定的总金额。</p><p><code>时间复杂度:最佳 O(n×m) | 平均 O(n×m) | 最差 O(n×m)  空间复杂度:O(m)</code></p><blockquote><h5 id="应用场景-前提条件-5"><a href="#应用场景-前提条件-5" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>贪心算法</li><li>最优子结构</li></ul></blockquote><h4 id="算法讲解-8"><a href="#算法讲解-8" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h5><p>硬币找零问题是动态规划的经典应用场景之一，核心思想是求解如何用给定面值的硬币组合出指定金额，并且使用的硬币数量最少。这个问题在<strong>计算机科学与数学</strong>领域都有广泛应用，是理解动态规划思想的绝佳例子。</p><p>硬币找零问题可以通过动态规划高效求解，时间复杂度为O(n×m)，其中n是目标金额，m是硬币面值的种类数。该问题体现了<strong>最优子结构</strong>与<strong>重叠子问题</strong>这两个动态规划的关键特性。</p><h4 id="问题定义-3"><a href="#问题定义-3" class="headerlink" title="问题定义"></a>问题定义</h4><p>给定不同面值的硬币（无限量）和一个总金额，问能凑成总金额的最少硬币个数是多少。例如，硬币面值为[1, 2, 5]，总金额为11时，最少需要3个硬币（5+5+1=11）。如果不能凑出该金额，则返回-1。</p><p>硬币找零问题是完全背包问题的一种特例，每种硬币可以重复使用多次。</p><h4 id="算法步骤-8"><a href="#算法步骤-8" class="headerlink" title="算法步骤"></a>算法步骤</h4><ol><li>定义状态：dp[i]表示组成金额i所需的最少硬币数量</li><li>确定边界条件：dp[0] = 0，表示组成金额0需要0个硬币</li><li>状态转移方程：dp[i] = min(dp[i], dp[i-coin] + 1)，其中coin为某个硬币面值</li><li>遍历所有可能的金额与硬币组合</li><li>最终答案为dp<a href="amount 是总金额">amount</a>，如果为无穷大则表示无法组成该金额</li></ol><h4 id="算法详解-5"><a href="#算法详解-5" class="headerlink" title="算法详解"></a>算法详解</h4><p>以一个具体的硬币找零问题为例，详细说明动态规划的过程：</p><p>假设有以下硬币面值：</p><ul><li>硬币1：面值1元</li><li>硬币2：面值2元</li><li>硬币3：面值5元</li><li>目标金额：11元</li></ul><p><strong>步骤1：创建并初始化DP表</strong></p><ul><li>dp[i]表示凑成金额i所需的最少硬币数</li><li>初始化dp[0] = 0（凑成金额0需要0个硬币）</li><li>其余dp[i]初始化为一个较大的值（如amount+1）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[0] = 0</span><br><span class="line">dp[1...11] = 12 (初始化为一个较大值，这里用11+1=12)</span><br></pre></td></tr></table></figure><p><strong>步骤2：填充DP表</strong></p><ul><li>对于每个硬币面值coin，更新dp[j]（其中j从coin到amount）</li><li>状态转移方程：dp[j] = min(dp[j], dp[j-coin] + 1)</li></ul><p>第一轮：处理面值为1的硬币</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[1] = min(dp[1], dp[0] + 1) = min(12, 0 + 1) = 1</span><br><span class="line">dp[2] = min(dp[2], dp[1] + 1) = min(12, 1 + 1) = 2</span><br><span class="line">dp[3] = min(dp[3], dp[2] + 1) = min(12, 2 + 1) = 3</span><br><span class="line">...</span><br><span class="line">dp[11] = min(dp[11], dp[10] + 1) = min(12, 10 + 1) = 11</span><br></pre></td></tr></table></figure><p>第二轮：处理面值为2的硬币</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[2] = min(dp[2], dp[0] + 1) = min(2, 0 + 1) = 1</span><br><span class="line">dp[3] = min(dp[3], dp[1] + 1) = min(3, 1 + 1) = 2</span><br><span class="line">dp[4] = min(dp[4], dp[2] + 1) = min(4, 1 + 1) = 2</span><br><span class="line">...</span><br><span class="line">dp[11] = min(dp[11], dp[9] + 1) = min(11, 5 + 1) = 6</span><br></pre></td></tr></table></figure><p>第三轮：处理面值为5的硬币</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dp[5] = min(dp[5], dp[0] + 1) = min(3, 0 + 1) = 1</span><br><span class="line">dp[6] = min(dp[6], dp[1] + 1) = min(3, 1 + 1) = 2</span><br><span class="line">dp[7] = min(dp[7], dp[2] + 1) = min(4, 1 + 1) = 2</span><br><span class="line">...</span><br><span class="line">dp[11] = min(dp[11], dp[6] + 1) = min(6, 2 + 1) = 3</span><br></pre></td></tr></table></figure><p><strong>步骤3：完整的DP表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dp[0] = 0    (凑成金额0需要0个硬币)</span><br><span class="line">dp[1] = 1    (使用1个面值1的硬币)</span><br><span class="line">dp[2] = 1    (使用1个面值2的硬币)</span><br><span class="line">dp[3] = 2    (使用1个面值1的硬币 + 1个面值2的硬币)</span><br><span class="line">dp[4] = 2    (使用2个面值2的硬币)</span><br><span class="line">dp[5] = 1    (使用1个面值5的硬币)</span><br><span class="line">dp[6] = 2    (使用1个面值1的硬币 + 1个面值5的硬币)</span><br><span class="line">dp[7] = 2    (使用1个面值2的硬币 + 1个面值5的硬币)</span><br><span class="line">dp[8] = 3    (使用1个面值1的硬币 + 1个面值2的硬币 + 1个面值5的硬币)</span><br><span class="line">dp[9] = 3    (使用2个面值2的硬币 + 1个面值5的硬币)</span><br><span class="line">dp[10] = 2   (使用2个面值5的硬币)</span><br><span class="line">dp[11] = 3   (使用1个面值1的硬币 + 2个面值5的硬币)</span><br></pre></td></tr></table></figure><p><strong>步骤4：获取结果</strong></p><ul><li>最少硬币数为dp[11] = 3</li></ul><p><strong>步骤5：（可选步骤）回溯找出所选硬币</strong></p><p>从dp[11]开始回溯：</p><ol><li>dp[11] = dp[11-5] + 1，说明用了一个面值5的硬币</li><li>dp[6] = dp[6-5] + 1，说明用了一个面值5的硬币</li><li>dp[1] = dp[1-1] + 1，说明用了一个面值1的硬币</li></ol><p>因此，最优解是使用：1个面值1的硬币和2个面值5的硬币，总计3个硬币。</p><h4 id="核心特性-8"><a href="#核心特性-8" class="headerlink" title="核心特性"></a>核心特性</h4><ul><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>重叠子问题</strong>：在求解过程中，相同的子问题会被多次计算</li><li><strong>时间复杂度</strong>：O(n×m)，其中n是目标金额，m是硬币种类数</li><li><strong>空间复杂度</strong>：O(n)，需要一个长度为目标金额加1的数组</li><li><strong>适用范围</strong>：组合问题、最优化问题、计数问题</li></ul><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoinChange</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义dp数组，dp[i]表示凑成金额i所需的最少硬币数</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化dp数组，除了dp[0]=0外，其他都初始化为一个较大的值</span></span><br><span class="line">        Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有可能的金额</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历所有硬币面值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="comment">// 只有当硬币面值小于等于当前金额时才能使用</span></span><br><span class="line">                <span class="keyword">if</span> (coin &lt;= i) &#123;</span><br><span class="line">                    <span class="comment">// 状态转移方程：使用当前硬币与不使用当前硬币取最小值</span></span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果dp[amount]仍然是初始值，说明无法凑出amount</span></span><br><span class="line">        <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] coins = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最少需要 &quot;</span> + coinChange(coins, amount) + <span class="string">&quot; 个硬币&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span>[] coins2 = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount2</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最少需要 &quot;</span> + coinChange(coins2, amount2) + <span class="string">&quot; 个硬币&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优化策略-7"><a href="#优化策略-7" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="记忆化递归实现"><a href="#记忆化递归实现" class="headerlink" title="记忆化递归实现"></a>记忆化递归实现</h5><p>除了自底向上的动态规划，还可以用自顶向下的记忆化递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoinChangeMemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用一个数组记录计算过的结果</span></span><br><span class="line">        <span class="type">int</span>[] memo = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(memo, -<span class="number">2</span>); <span class="comment">// 初始化为-2，表示未计算过</span></span><br><span class="line">        <span class="keyword">return</span> coinChangeHelper(coins, amount, memo);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">coinChangeHelper</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> remain, <span class="type">int</span>[] memo)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果金额为0，需要0个硬币</span></span><br><span class="line">        <span class="keyword">if</span> (remain == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果金额小于0，表示无解</span></span><br><span class="line">        <span class="keyword">if</span> (remain &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果已经计算过，直接返回结果</span></span><br><span class="line">        <span class="keyword">if</span> (memo[remain] != -<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> memo[remain];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化为一个无法达到的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试每一种硬币</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> coinChangeHelper(coins, remain - coin, memo);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 只有当有解时才更新最小值</span></span><br><span class="line">            <span class="keyword">if</span> (res &gt;= <span class="number">0</span> &amp;&amp; res &lt; min) &#123;</span><br><span class="line">                min = res + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 记录并返回结果</span></span><br><span class="line">        memo[remain] = (min == Integer.MAX_VALUE) ? -<span class="number">1</span> : min;</span><br><span class="line">        <span class="keyword">return</span> memo[remain];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] coins = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;最少需要 &quot;</span> + coinChange(coins, amount) + <span class="string">&quot; 个硬币&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="改进的迭代实现"><a href="#改进的迭代实现" class="headerlink" title="改进的迭代实现"></a>改进的迭代实现</h5><p>通过调整遍历顺序，可以优化空间复杂度（针对完全背包问题）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">coinChangeOptimized</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义dp数组，dp[i]表示凑成金额i所需的最少硬币数</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化dp数组</span></span><br><span class="line">    Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 先遍历硬币，再遍历金额（完全背包优化写法）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[amount] &gt; amount ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-8"><a href="#优缺点-8" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-8"><a href="#优点-8" class="headerlink" title="优点"></a>优点</h5><ul><li>能够找到最优解（使用最少硬币数）</li><li>可以处理任意面值的硬币组合</li><li>适用于各种找零场景，不仅限于硬币</li><li>思路清晰，易于理解和实现</li></ul><h5 id="缺点-8"><a href="#缺点-8" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度为O(n×m)，在金额或硬币种类较多时可能效率不高</li><li>需要额外O(n)的空间来存储中间状态</li><li>标准实现只能求出最少硬币数，不能直接得到具体的硬币组合</li><li>在硬币面值较大时，可能会有大量无效计算</li><li>不考虑硬币数量有限的情况</li></ul><h4 id="应用场景-8"><a href="#应用场景-8" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>自动售货机、ATM机等找零系统</li><li>金融系统中的货币兑换问题</li><li>资源分配问题（资源可分割，寻求最小分配次数）</li><li>背包问题的变形</li><li>路径规划中的最少转换次数问题</li></ol><h4 id="扩展-8"><a href="#扩展-8" class="headerlink" title="扩展"></a>扩展</h4><h5 id="求解所有可能的硬币组合"><a href="#求解所有可能的硬币组合" class="headerlink" title="求解所有可能的硬币组合"></a>求解所有可能的硬币组合</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">coinCombinations</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt;[] dp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>[amount + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化dp数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">        dp[i] = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 金额为0时有一种组合方式：不使用任何硬币</span></span><br><span class="line">    dp[<span class="number">0</span>].add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 遍历所有硬币</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;</span><br><span class="line">        <span class="comment">// 遍历所有可能的金额</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="comment">// 对于每个dp[i-coin]中的组合，添加当前硬币</span></span><br><span class="line">            <span class="keyword">for</span> (List&lt;Integer&gt; comb : dp[i - coin]) &#123;</span><br><span class="line">                List&lt;Integer&gt; newComb = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(comb);</span><br><span class="line">                newComb.add(coin);</span><br><span class="line">                dp[i].add(newComb);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-8"><a href="#测验-8" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>硬币找零问题的状态转移方程是什么？为什么这样定义？</li><li>当没有任何硬币组合能凑出目标金额时，应该返回什么结果？</li><li>如果要求不仅得到最少硬币数，还要得到具体的硬币组合，应该如何修改算法？</li></ol><blockquote><p>测验答案</p><ol><li>状态转移方程是 dp[i] = min(dp[i], dp[i-coin] + 1)。表示凑成金额i的最少硬币数等于不使用当前面值coin的最少数量，与使用一个coin后凑成剩余金额的最少数量加1，两者中的较小值。</li><li>当无法凑出目标金额时，应该返回-1，表示无解。一般通过检查最终dp[amount]的值是否仍为初始的较大值来判断。</li><li>需要额外维护一个path数组，记录每个金额是由哪个硬币凑出的。最后从amount开始回溯，依次找出所使用的硬币。</li></ol></blockquote><h3 id="七、编辑距离"><a href="#七、编辑距离" class="headerlink" title="七、编辑距离"></a>七、编辑距离</h3><h4 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h4><p>编辑距离算法计算将一个字符串转换为另一个字符串所需的最少操作次数，操作包括插入、删除和替换字符。该算法广泛应用于拼写检查、DNA序列比较和自然语言处理领域。</p><p><code>时间复杂度:最佳 O(mn) | 平均 O(mn) | 最差 O(mn)  空间复杂度:O(mn)</code></p><blockquote><h5 id="应用场景-前提条件-6"><a href="#应用场景-前提条件-6" class="headerlink" title="应用场景/前提条件"></a>应用场景/前提条件</h5><ul><li>动态规划</li><li>字符串处理</li><li>序列比较</li></ul></blockquote><h4 id="算法讲解-9"><a href="#算法讲解-9" class="headerlink" title="算法讲解"></a>算法讲解</h4><h5 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h5><p>编辑距离（Edit Distance）是计算机科学中的一个基础概念，也被称为Levenshtein距离，用来衡量两个字符串之间的相似度。编辑距离是<strong>自然语言处理</strong>和<strong>生物信息学</strong>等领域的核心算法基础。</p><p>编辑距离问题是动态规划的典型应用，时间复杂度是O(m×n)，其中m和n分别是两个字符串的长度。这个问题完美体现了动态规划的<strong>最优子结构</strong>与<strong>重叠子问题</strong>特性。</p><h2 id="问题定义-4"><a href="#问题定义-4" class="headerlink" title="问题定义"></a>问题定义</h2><p>将一个字符串转换成另一个字符串所需的最少操作数，操作包括<strong>插入</strong>、<strong>删除</strong>和<strong>替换</strong>字符。</p><p>例如，将”horse”转换为”ros”的编辑距离为3：</p><ul><li>将’h’替换为’r’：horse -&gt; rorse</li><li>删除’r’：rorse -&gt; rose</li><li>删除’e’：rose -&gt; ros</li></ul><h2 id="算法步骤-9"><a href="#算法步骤-9" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>定义状态：dp[i][j]表示将word1的前i个字符转换为word2的前j个字符所需的最少操作数</li><li>确定边界条件：<ul><li>dp[i][0] = i（将word1的前i个字符转换为空串需要删除i次）</li><li>dp[0][j] = j（将空串转换为word2的前j个字符需要插入j次）</li></ul></li><li>状态转移方程：<ul><li>若word1[i-1] == word2[j-1]：dp[i][j] = dp[i-1][j-1]</li><li>若word1[i-1] != word2[j-1]：dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1<ul><li>dp[i-1][j-1] + 1：替换操作</li><li>dp[i-1][j] + 1：删除操作</li><li>dp[i][j-1] + 1：插入操作</li></ul></li></ul></li><li>最终答案：dp[m][n]</li></ol><h2 id="算法详解-6"><a href="#算法详解-6" class="headerlink" title="算法详解"></a>算法详解</h2><p>以一个具体的例子详细说明动态规划的过程：</p><p>将字符串”horse”转换为”ros”</p><p><strong>步骤1：创建并初始化DP表</strong></p><ul><li>dp[i][j]表示将”horse”的前i个字符转换为”ros”的前j个字符所需的最少操作数</li><li>初始化边界：<ul><li>dp[i][0] = i（将任意字符串变成空串需要删除所有字符）</li><li>dp[0][j] = j（将空串变成任意字符串需要插入所有字符）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼Plain复制代码    &quot;&quot; r  o  s</span><br><span class="line">&quot;&quot;  0  1  2  3</span><br><span class="line">h   1  ?  ?  ?</span><br><span class="line">o   2  ?  ?  ?</span><br><span class="line">r   3  ?  ?  ?</span><br><span class="line">s   4  ?  ?  ?</span><br><span class="line">e   5  ?  ?  ?</span><br></pre></td></tr></table></figure><p><strong>步骤2：填充DP表</strong></p><p>对于dp[1][1]，比较’h’和’r’：</p><ul><li>不相等，取三种操作的最小值 + 1：<ul><li>替换：dp[0][0] + 1 = 1</li><li>删除：dp[0][1] + 1 = 2</li><li>插入：dp[1][0] + 1 = 2</li></ul></li><li>因此，dp[1][1] = 1</li></ul><p>对于dp[1][2]，比较’h’和’o’：</p><ul><li>不相等，取三种操作的最小值 + 1：<ul><li>替换：dp[0][1] + 1 = 2</li><li>删除：dp[0][2] + 1 = 3</li><li>插入：dp[1][1] + 1 = 2</li></ul></li><li>因此，dp[1][2] = 2</li></ul><p>依此类推，完整填充整个表格…</p><p><strong>步骤3：完整的DP表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▼Plain复制代码    &quot;&quot; r  o  s</span><br><span class="line">&quot;&quot;  0  1  2  3</span><br><span class="line">h   1  1  2  3</span><br><span class="line">o   2  2  1  2</span><br><span class="line">r   3  2  2  2</span><br><span class="line">s   4  3  3  2</span><br><span class="line">e   5  4  4  3</span><br></pre></td></tr></table></figure><p><strong>步骤4：获取结果</strong></p><ul><li>最少操作数为dp[5][3] = 3</li></ul><p><strong>步骤5：（可选步骤）回溯找出操作序列</strong><br> 从dp[5][3]开始回溯：</p><ol><li>dp[5][3] = dp[4][3] + 1，说明删除了字符’e’</li><li>dp[4][3] = dp[3][2] + 1，说明替换了字符’s’为’s’（实际上是相等的，但从表格来看是dp[3][2] + 1）</li><li>dp[3][2] = dp[2][1] + 1，说明删除了字符’r’</li><li>dp[2][1] = dp[1][0] + 1，说明替换了字符’o’为’r’</li><li>dp[1][0] = dp[0][0] + 1，说明删除了字符’h’</li></ol><p>根据回溯，操作序列是：替换’h’为’r’，删除’r’，删除’e’。</p><h2 id="核心特性-9"><a href="#核心特性-9" class="headerlink" title="核心特性"></a>核心特性</h2><ul><li><strong>最优子结构</strong>：问题的最优解包含子问题的最优解</li><li><strong>重叠子问题</strong>：相同的子问题会被多次计算</li><li><strong>时间复杂度</strong>：O(m×n)，其中m和n是两个字符串的长度</li><li><strong>空间复杂度</strong>：O(m×n)，需要一个二维数组来存储中间状态</li><li><strong>适用范围</strong>：字符串相似度计算、拼写检查、DNA序列比对</li></ul><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EditDistance</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建DP表</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 初始化边界条件</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 填充DP表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="comment">// 如果字符相同，不需要操作</span></span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 取三种操作的最小值</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], <span class="comment">// 替换</span></span><br><span class="line">                                Math.min(dp[i - <span class="number">1</span>][j],    <span class="comment">// 删除</span></span><br><span class="line">                                         dp[i][j - <span class="number">1</span>]))   <span class="comment">// 插入</span></span><br><span class="line">                                + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">word1</span> <span class="operator">=</span> <span class="string">&quot;horse&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">word2</span> <span class="operator">=</span> <span class="string">&quot;ros&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;将 &quot;</span> + word1 + <span class="string">&quot; 转换为 &quot;</span> + word2 + <span class="string">&quot; 的最少操作数：&quot;</span> + minDistance(word1, word2));</span><br><span class="line">        </span><br><span class="line">        <span class="type">String</span> <span class="variable">word3</span> <span class="operator">=</span> <span class="string">&quot;intention&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">word4</span> <span class="operator">=</span> <span class="string">&quot;execution&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;将 &quot;</span> + word3 + <span class="string">&quot; 转换为 &quot;</span> + word4 + <span class="string">&quot; 的最少操作数：&quot;</span> + minDistance(word3, word4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="优化策略-8"><a href="#优化策略-8" class="headerlink" title="优化策略"></a>优化策略</h4><h5 id="空间优化-3"><a href="#空间优化-3" class="headerlink" title="空间优化"></a>空间优化</h5><p>由于DP表中的每个单元格只依赖于它的左侧、上方和左上方的值，我们可以使用滚动数组来优化空间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minDistanceOptimized</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="comment">// 确保word1比word2短，减少空间使用</span></span><br><span class="line">    <span class="keyword">if</span> (word1.length() &gt; word2.length()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> word1;</span><br><span class="line">        word1 = word2;</span><br><span class="line">        word2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 只使用一维数组</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        dp[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充DP表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = j;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> dp[i];</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i] = prev;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] = Math.min(prev, Math.min(dp[i], dp[i - <span class="number">1</span>])) + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            prev = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[m];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="记忆化递归实现-1"><a href="#记忆化递归实现-1" class="headerlink" title="记忆化递归实现"></a>记忆化递归实现</h5><p>除了自底向上的动态规划，还可以用自顶向下的记忆化递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">▼Java复制代码<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minDistanceRecursive</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] memo = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length() + <span class="number">1</span>][word2.length() + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化memo数组为-1，表示未计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] row : memo) &#123;</span><br><span class="line">        Arrays.fill(row, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp(word1, word2, word1.length(), word2.length(), memo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">dp</span><span class="params">(String word1, String word2, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span>[][] memo)</span> &#123;</span><br><span class="line">    <span class="comment">// 基础情况</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) <span class="keyword">return</span> j;</span><br><span class="line">    <span class="keyword">if</span> (j == <span class="number">0</span>) <span class="keyword">return</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果已经计算过，直接返回结果</span></span><br><span class="line">    <span class="keyword">if</span> (memo[i][j] != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果字符相同，不需要操作</span></span><br><span class="line">    <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">        memo[i][j] = dp(word1, word2, i - <span class="number">1</span>, j - <span class="number">1</span>, memo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        memo[i][j] = Math.min(</span><br><span class="line">            dp(word1, word2, i - <span class="number">1</span>, j - <span class="number">1</span>, memo), <span class="comment">// 替换</span></span><br><span class="line">            Math.min(</span><br><span class="line">                dp(word1, word2, i - <span class="number">1</span>, j, memo), <span class="comment">// 删除</span></span><br><span class="line">                dp(word1, word2, i, j - <span class="number">1</span>, memo)  <span class="comment">// 插入</span></span><br><span class="line">            )</span><br><span class="line">        ) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> memo[i][j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-9"><a href="#优缺点-9" class="headerlink" title="优缺点"></a>优缺点</h4><h5 id="优点-9"><a href="#优点-9" class="headerlink" title="优点"></a>优点</h5><ul><li>可以处理任意长度和内容的字符串</li><li>广泛适用于文本处理、生物信息学等领域</li><li>可以延伸到更复杂的字符串相似度计算</li></ul><h5 id="缺点-9"><a href="#缺点-9" class="headerlink" title="缺点"></a>缺点</h5><ul><li>时间复杂度为O(m×n)，当字符串很长时计算量较大</li><li>只能计算最少操作数，不能直接得到具体的操作序列</li><li>当字符集很大时，替换操作的代价可能需要额外考虑</li></ul><h4 id="应用场景-9"><a href="#应用场景-9" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>拼写检查和自动纠错系统</li><li>DNA序列比对和生物信息学研究</li><li>自然语言处理中的文本相似度计算</li><li>抄袭检测系统</li><li>模糊搜索和信息检索</li><li>机器翻译系统的评估</li><li>版本控制系统中的文本差异比较</li></ol><h4 id="扩展-9"><a href="#扩展-9" class="headerlink" title="扩展"></a>扩展</h4><h5 id="带权重的编辑距离"><a href="#带权重的编辑距离" class="headerlink" title="带权重的编辑距离"></a>带权重的编辑距离</h5><p>在某些应用中，不同的操作可能有不同的代价，例如替换可能比插入/删除更昂贵：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">weightedEditDistance</span><span class="params">(String word1, String word2, <span class="type">int</span> insertCost, <span class="type">int</span> deleteCost, <span class="type">int</span> replaceCost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 初始化边界条件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = i * deleteCost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = j * insertCost;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 填充DP表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = Math.min(</span><br><span class="line">                    dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + replaceCost, <span class="comment">// 替换</span></span><br><span class="line">                    Math.min(</span><br><span class="line">                        dp[i - <span class="number">1</span>][j] + deleteCost,  <span class="comment">// 删除</span></span><br><span class="line">                        dp[i][j - <span class="number">1</span>] + insertCost   <span class="comment">// 插入</span></span><br><span class="line">                    )</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="测验-9"><a href="#测验-9" class="headerlink" title="测验"></a>测验</h4><p>这里准备了一些测试题，方便大家判断自己的掌握情况：</p><ol><li>编辑距离的状态转移方程是什么？为什么这样定义？</li><li>当两个字符串完全相同时，编辑距离是多少？为什么？</li><li>优化空间复杂度的关键思路是什么？</li><li>如何修改算法来处理不同操作有不同代价的情况？</li></ol><blockquote><p>测验答案</p><ol><li>状态转移方程是：若字符相同，dp[i][j] = dp[i-1][j-1]；若字符不同，dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1。表示当前位置的编辑距离等于替换、删除、插入三种操作的最小值再加1，如果字符相同则不需要操作。</li><li>当两个字符串完全相同时，编辑距离为0，因为不需要任何操作就能将一个字符串转换为另一个。</li><li>使用滚动数组，只保留当前行和前一行的数据，因为计算dp[i][j]只依赖于三个位置：左边、上方和左上方。甚至可以进一步优化为只使用一维数组加一个临时变量。</li><li>修改算法处理不同操作代价：在状态转移方程中，加上相应操作的代价。例如，dp[i][j] = min(dp[i-1][j-1] + replaceCost, dp[i-1][j] + deleteCost, dp[i][j-1] + insertCost)。</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
